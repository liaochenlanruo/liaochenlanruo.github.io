{"total":132,"pageSize":10,"pageCount":14,"data":[{"title":"深入理解特征标准化：为何、如何及其重要性","slug":"特征标准化","date":"2024-08-12T10:30:19.000Z","updated":"2024-08-12T12:01:50.986Z","comments":true,"path":"api/articles/特征标准化.json","excerpt":null,"keywords":null,"cover":"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>在数据驱动的时代，无论是机器学习模型的构建、数据分析的深入探索，还是统计建模的精确预测，数据预处理都是不可或缺的一环。数据预处理如同烹饪前的食材准备，它决定了最终成果的质量与口感。在众多预处理技术中，特征标准化（Feature Standardization）以其独特的优势，成为了提升模型性能、加速算法收敛、确保数值稳定性的重要手段。</p>\n<p>特征标准化，简而言之，是通过数学变换将原始数据特征转换为具有特定均值（通常为0）和标准差（通常为1）的新数据的过程。这一过程不仅消除了不同特征之间因量纲差异而可能导致的偏见，还使得模型在训练过程中能够更加高效地遍历参数空间，从而更快地找到最优解。此外，特征标准化还有助于避免极端值对模型训练造成的干扰，确保数值计算的稳定性和准确性。</p>\n<p>本文旨在深入探讨特征标准化的概念、方法、应用场景及其重要性。我们将从定义出发，逐步解析特征标准化的原理与优势；通过实例展示如何在实践中应用特征标准化技术；并探讨在实施过程中可能遇到的挑战与注意事项。希望通过本文的阐述，读者能够全面理解并掌握特征标准化的精髓，从而在数据分析和机器学习项目中更加得心应手。</p>\n<h1 id=\"一、特征标准化的基本概念\"><a href=\"#一、特征标准化的基本概念\" class=\"headerlink\" title=\"一、特征标准化的基本概念\"></a>一、特征标准化的基本概念</h1><p><strong>定义解析</strong>：</p>\n<p><code>特征标准化</code>，又称Z-score标准化或标准差标准化，是一种将数据按比例缩放，使其落入一个小的特定区间（通常是-1到1之间，但并非严格限制）的技术。这一过程主要通过去除数据的均值并除以数据的标准差来实现，从而确保处理后的数据具有单位方差和指定的均值（在Z-score标准化中，均值通常为0）。特征标准化的数学表达式通常基于Z-score公式，如下所示：</p>\n<p>$Z &#x3D; \\frac{X - \\mu}{\\sigma}$</p>\n<p>其中，$X$ 是原始数据特征中的某个值，$\\mu$ 是该特征所有值的均值，$\\sigma$ 是该特征所有值的标准差，而<em>Z</em>则是经过标准化处理后的新值。通过这个公式，我们可以将任何一组数据转换为具有相同尺度的数据，使得不同量纲或分布的数据能够在同一框架下进行比较和分析。</p>\n<p><strong>与归一化的区别</strong>：</p>\n<p>特征标准化与数据归一化（Min-Max Scaling）虽然都旨在将数据缩放到一个统一的范围内，但它们在实现方法和适用场景上存在显著差异。</p>\n<ul>\n<li><p><strong>实现方法</strong>：特征标准化通过去除均值并除以标准差来实现，而数据归一化则是通过将数据缩放到指定的最小值和最大值之间（通常是0到1）来完成。归一化的数学表达式可以表示为：</p>\n<p>$X_{\\text{norm}} &#x3D; {\\frac{X - X_{\\min}}{X_{\\max} - X_{\\min}}}\\times (range_{max} - range_{min}) + range_{min}$</p>\n<p>其中，$X_{\\text{norm}}$ 是归一化后的值，$X_{\\min}$ 和 $X_{\\max}$ 分别是原始数据中的最小值和最大值，$range_{max}$和$range_{min}$分别是缩放后的目标范围的最小值和最大值。</p>\n</li>\n<li><p><strong>适用场景</strong>：特征标准化更适合于那些分布符合高斯分布（或接近高斯分布）的数据集，以及那些对异常值不敏感或希望保留异常值影响的场景。因为标准化不会改变数据的分布形状，只是进行了尺度上的缩放。相比之下，归一化更适合于那些数据分布范围已知且较为稳定的场景，尤其是当数据分布明显偏离高斯分布时。此外，归一化对于需要限制数据范围到特定区间的算法（如某些神经网络层的激活函数）特别有用。</p>\n</li>\n</ul>\n<h1 id=\"二、为何需要特征标准化\"><a href=\"#二、为何需要特征标准化\" class=\"headerlink\" title=\"二、为何需要特征标准化\"></a>二、为何需要特征标准化</h1><p>在机器学习和数据科学领域，特征标准化是一项至关重要的预处理步骤，它对于提升模型性能、加快训练过程以及确保数值计算的稳定性具有显著作用。以下是特征标准化的几个关键原因：</p>\n<h2 id=\"1-消除量纲影响\"><a href=\"#1-消除量纲影响\" class=\"headerlink\" title=\"1. 消除量纲影响\"></a>1. 消除量纲影响</h2><p>不同特征往往具有不同的量纲和度量单位，例如，一个特征可能表示年龄（以年为单位），而另一个特征可能表示收入（以美元为单位）。这些不同量纲的数据在数值上差异巨大，如果直接用于模型训练，会导致某些特征在模型中的权重被不恰当地放大或缩小，从而影响模型的训练效果和泛化能力。通过特征标准化，即将所有特征缩放到同一尺度（如均值为0，标准差为1），可以消除这种量纲差异，使得每个特征在模型训练过程中都能被公平对待。</p>\n<h2 id=\"2-加快收敛速度\"><a href=\"#2-加快收敛速度\" class=\"headerlink\" title=\"2. 加快收敛速度\"></a>2. 加快收敛速度</h2><p>在大多数机器学习算法中，尤其是基于梯度下降的优化算法，特征标准化能够显著加快收敛速度。梯度下降算法通过计算损失函数关于模型参数的梯度来更新参数，以最小化损失函数。如果特征未经过标准化处理，不同特征的数值范围差异可能导致梯度在更新过程中呈现不同的步长，使得优化过程变得曲折且缓慢。通过标准化，所有特征的梯度更新步长变得相对一致，从而加快了算法的收敛速度，减少了达到最优解所需的迭代次数。</p>\n<h2 id=\"3-提升模型性能\"><a href=\"#3-提升模型性能\" class=\"headerlink\" title=\"3. 提升模型性能\"></a>3. 提升模型性能</h2><p>多项研究表明，特征标准化能够显著提升模型的准确率和稳定性。标准化后的数据使得模型更容易学习到数据中的真实模式，而不是被数据的量纲差异所误导。此外，标准化还有助于减少过拟合的风险，因为标准化后的数据分布更加均匀，减少了模型对特定数据点的过度依赖。通过实例或研究数据展示，我们可以发现，在相同的数据集和模型架构下，经过标准化的模型往往能够取得更高的准确率和更低的误差率。</p>\n<h2 id=\"4-避免数值问题\"><a href=\"#4-避免数值问题\" class=\"headerlink\" title=\"4. 避免数值问题\"></a>4. 避免数值问题</h2><p>极端值（如非常大或非常小的数值）在数据集中是常见的，它们可能导致数值计算问题，如梯度爆炸或梯度消失，进而影响模型的训练过程。梯度爆炸指的是在梯度更新过程中，梯度值变得异常大，导致模型参数更新不稳定；而梯度消失则相反，梯度值变得非常小，使得模型参数几乎不更新。通过特征标准化，可以将极端值限制在一个合理的范围内，从而有效避免这些数值问题，确保模型训练的顺利进行。</p>\n<h1 id=\"三、特征标准化的方法\"><a href=\"#三、特征标准化的方法\" class=\"headerlink\" title=\"三、特征标准化的方法\"></a>三、特征标准化的方法</h1><h2 id=\"Z-score标准化\"><a href=\"#Z-score标准化\" class=\"headerlink\" title=\"Z-score标准化\"></a>Z-score标准化</h2><p>Z-score标准化，也称为标准差标准化，是最常用的特征标准化方法之一。它通过计算每个特征值的Z分数（即该值与其均值的差除以标准差）来实现数据的标准化。具体计算过程如下：</p>\n<ol>\n<li><p><strong>计算均值</strong>：首先，对于每个特征，计算其所有样本值的均值（$\\mu$）。均值反映了该特征的中心趋势。</p>\n</li>\n<li><p><strong>计算标准差</strong>：接着，计算该特征的标准差（$\\sigma$）。标准差衡量了数据点相对于均值的离散程度，是数据分布宽度的一个度量。</p>\n</li>\n<li><p><strong>标准化处理</strong>：最后，使用Z-score公式将每个特征值转换为标准化后的值（$Z$）。公式为：</p>\n<p>$Z &#x3D; \\frac{X - \\mu}{\\sigma}$</p>\n<p>其中，$X$ 是原始特征值，$Z$ 是转换后的标准化值。</p>\n</li>\n</ol>\n<p>Z-score标准化的作用在于将数据转换为均值为0、标准差为1的分布，从而消除了不同特征之间的量纲差异，使得它们在模型训练中具有相同的权重。此外，Z-score标准化对异常值相对不敏感，因为它依赖于整个数据集的统计特性（均值和标准差）。Z-score标准化会改变原始数据的稀疏性（原来很多非零数据变为0）及分布，而且并不是归一化的。</p>\n<h2 id=\"MinMaxScaler标准化\"><a href=\"#MinMaxScaler标准化\" class=\"headerlink\" title=\"MinMaxScaler标准化\"></a>MinMaxScaler标准化</h2><p>虽然Min-Max标准化并不完全等同于特征标准化（因为它不改变数据的分布形状和稀疏性，只是进行了线性缩放），但它仍然是一种常用的数据缩放方法，并经常与特征标准化进行比较。Min-Max标准化的原理是将数据缩放到一个指定的最小值和最大值之间（通常是0和1），其计算公式为：</p>\n<p>$X_{\\text{norm}} &#x3D; {\\frac{X - X_{\\min}}{X_{\\max} - X_{\\min}}}\\times (range_{max} - range_{min}) + range_{min}$</p>\n<p>其中，$X_{\\text{norm}}$ 是归一化后的值，$X$ 是原始特征值，$X_{\\min}$ 和 $X_{\\max}$ 分别是该特征的最小值和最大值，$range_{max}$和$range_{min}$分别是缩放后的目标范围的最小值和最大值。</p>\n<p>Min-Max标准化适用于那些需要数据范围限制在特定区间的场景，比如某些神经网络的激活函数。然而，它对于新数据的加入比较敏感，因为新数据的最大值和最小值可能会改变整个数据集的缩放比例。</p>\n<h2 id=\"MaxAbsScaler\"><a href=\"#MaxAbsScaler\" class=\"headerlink\" title=\"MaxAbsScaler\"></a>MaxAbsScaler</h2><p>分别对每个特征进行缩放和平移，使得每个特征的最大绝对值为1，最终的值在[-1, 1]。该法不会导致数据整体形态发生大的变化，因此不破坏稀疏性（非零数据不会变为0，0还是0）。因此，可用于比较稀疏的数据。虽然会对分布造成一定的改变，但大致形态接近。</p>\n<p>$X_{\\text{norm}} &#x3D; \\frac{X}{\\left\\vert X_{max} \\right\\vert}$</p>\n<h2 id=\"保持分布的归一化缩放\"><a href=\"#保持分布的归一化缩放\" class=\"headerlink\" title=\"保持分布的归一化缩放\"></a>保持分布的归一化缩放</h2><p>若把一个样本用向量来表示，对于不全是0的向量，对其进行独立于其他样本的缩放，从而使其范数等于1，即将样本分别表转化为单位范数。</p>\n<p><code>L1范数</code>是向量中所有元素值的绝对值之和；<code>L2范数</code>是所有元素平方和的平方根；<code>inf范数</code>指所有元素最大绝对值。</p>\n<p><strong>L2范数标准化（也称为单位向量标准化）</strong>：将特征向量缩放为具有单位L2范数（即欧几里得距离）。这种方法常用于文本数据处理（文本分类、聚类）或图像处理中，以确保特征向量之间的比较是公平的。该缩放基本保持了原始数据的分布，并且对范围进行了归一化（[0, 1]）。</p>\n<p>$X_{\\text{norm}} &#x3D; \\frac{X}{\\left\\vert\\left\\vert X \\right\\vert\\right\\vert}$</p>\n<h2 id=\"缩放含离群值的特征（RobustScaler）\"><a href=\"#缩放含离群值的特征（RobustScaler）\" class=\"headerlink\" title=\"缩放含离群值的特征（RobustScaler）\"></a>缩放含离群值的特征（RobustScaler）</h2><p>若数据包含很多异常离群值，用Z-score方法效果不佳。可以使用RobustScaler替代。</p>\n<p><strong>原理</strong>：通过计算每个特征的中位数和四分位数范围来进行数据缩放。具体来说，它将每个特征的值减去该特征的中位数，然后再除以该特征的四分位数范围。这种方法可以有效地处理异常值的影响，因为四分位数范围对异常值不敏感，从而使得标准化后的数据更加稳定和可靠。</p>\n<p><strong>应用</strong>：RobustScaler在机器学习模型中的应用主要体现在提高模型的泛化能力和稳定性上。通过减少异常值对数据分析的影响，RobustScaler可以帮助模型更好地学习数据的内在规律，从而提高模型的预测准确性和稳定性。</p>\n<p>$X_{\\text{norm}} &#x3D; \\frac{X-Q1}{IQR}$</p>\n<p>其中 $X$ 是原始数据值 $Q1$ 是第一四分位数 $IQR$ 是四分位数间距，即 $Q3−Q1$。</p>\n<h2 id=\"其他标准化技术\"><a href=\"#其他标准化技术\" class=\"headerlink\" title=\"其他标准化技术\"></a>其他标准化技术</h2><p>除了上述标准化之外，还存在其他几种标准化方法，每种方法都有其特定的适用场景：</p>\n<ul>\n<li><p><strong>小数定标标准化（Decimal Scaling Normalization）</strong>：通过移动数据的小数点位置来进行标准化。具体移动多少位取决于数据的最大值。这种方法适用于数据范围已知且相对稳定的场景。</p>\n</li>\n<li><p><strong>对数标准化</strong>：对于某些具有长尾分布的数据，可以通过取对数来减少极端值的影响，并进行标准化处理。这种方法在经济学和金融数据分析中尤为常见。</p>\n</li>\n</ul>\n<p>每种标准化方法都有其独特的优势和局限性，因此在选择时应根据数据的特性、模型的需求以及业务场景来综合考虑。</p>\n<h1 id=\"四、特征标准化的实施步骤\"><a href=\"#四、特征标准化的实施步骤\" class=\"headerlink\" title=\"四、特征标准化的实施步骤\"></a>四、特征标准化的实施步骤</h1><h2 id=\"数据准备\"><a href=\"#数据准备\" class=\"headerlink\" title=\"数据准备\"></a>数据准备</h2><p>在进行特征标准化之前，数据准备是至关重要的一步。数据准备阶段主要包括数据清洗和预处理，以确保数据的质量和一致性，为后续的标准化过程打下坚实的基础。以下是数据准备阶段的关键步骤：</p>\n<ol>\n<li><p><strong>数据清洗</strong>：检查并处理数据中的缺失值、重复值、错误格式等问题。对于缺失值，可以采用填充（如均值填充、中位数填充、众数填充或插值法）或删除的方法进行处理。对于重复值，根据业务需求决定是保留还是删除。</p>\n</li>\n<li><p><strong>异常值处理</strong>：识别并处理数据中的异常值。异常值可能对标准化过程和模型训练产生不利影响。可以通过统计方法（如箱线图、IQR四分位距法）或基于模型的方法（如孤立森林）来检测异常值，并采取相应的处理措施（如删除、替换或标记）。</p>\n</li>\n<li><p><strong>数据划分</strong>：将数据集划分为训练集、验证集和测试集（如果可用）。虽然这一步不是直接针对特征标准化的，但它对于后续评估标准化效果至关重要。</p>\n</li>\n</ol>\n<h2 id=\"选择标准化方法\"><a href=\"#选择标准化方法\" class=\"headerlink\" title=\"选择标准化方法\"></a>选择标准化方法</h2><p>在选择标准化方法时，需要考虑数据类型、数据分布、模型需求以及业务场景等因素。对于大多数情况，Z-score标准化是一个安全且有效的选择，因为它能够消除量纲差异，并且对数据分布形状的影响较小。然而，在某些特定场景下，如需要限制数据范围到特定区间时，Min-Max标准化可能更为合适。此外，还可以根据数据的具体特性和业务需求探索其他标准化方法。</p>\n<h2 id=\"应用标准化\"><a href=\"#应用标准化\" class=\"headerlink\" title=\"应用标准化\"></a>应用标准化</h2><p>在确定了标准化方法后，可以使用编程工具来实现特征标准化。以下是一个使用Python的Pandas和Scikit-learn库进行Z-score标准化的示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.preprocessing <span class=\"keyword\">import</span> StandardScaler</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 假设df是你的DataFrame，其中包含了需要标准化的特征</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用StandardScaler进行Z-score标准化</span></span><br><span class=\"line\">scaler = StandardScaler()</span><br><span class=\"line\">df_scaled = scaler.fit_transform(df)  <span class=\"comment\"># 注意：这会返回NumPy数组，而不是DataFrame</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果你需要DataFrame格式，可以这样做：</span></span><br><span class=\"line\">df_scaled = pd.DataFrame(df_scaled, columns=df.columns)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 或者，如果你只想标准化DataFrame中的某些列，可以这样做：</span></span><br><span class=\"line\">scaler = StandardScaler()</span><br><span class=\"line\">df[[<span class=\"string\">&#x27;feature1&#x27;</span>, <span class=\"string\">&#x27;feature2&#x27;</span>]] = scaler.fit_transform(df[[<span class=\"string\">&#x27;feature1&#x27;</span>, <span class=\"string\">&#x27;feature2&#x27;</span>]])</span><br></pre></td></tr></table></figure>\n\n<p>注意：在实际应用中，通常只在训练集上调用<code>fit_transform()</code>方法来拟合并转换数据，然后在验证集和测试集上调用<code>transform()</code>方法应用相同的转换规则，以确保数据的一致性。</p>\n<h2 id=\"验证效果\"><a href=\"#验证效果\" class=\"headerlink\" title=\"验证效果\"></a>验证效果</h2><p>验证标准化效果是评估特征标准化对模型性能影响的关键步骤。这通常通过比较标准化前后模型的性能指标（如准确率、召回率、F1分数等）来实现。此外，还可以观察模型训练过程中的收敛速度、损失函数的变化情况以及梯度更新的稳定性等指标来评估标准化的效果。如果标准化后模型的性能有所提升，且训练过程更加稳定，那么可以认为标准化是有效的。反之，则需要考虑调整标准化方法或进一步探索其他数据预处理技术。</p>\n<h1 id=\"五、特征标准化的应用场景\"><a href=\"#五、特征标准化的应用场景\" class=\"headerlink\" title=\"五、特征标准化的应用场景\"></a>五、特征标准化的应用场景</h1><h2 id=\"机器学习模型\"><a href=\"#机器学习模型\" class=\"headerlink\" title=\"机器学习模型\"></a>机器学习模型</h2><p>在机器学习领域，特征标准化是提升模型性能的重要手段之一。以下是几个常见机器学习任务中特征标准化的应用：</p>\n<ul>\n<li><p><strong>分类任务</strong>：在分类问题中，如文本分类、图像识别等，特征标准化可以帮助模型更好地学习数据中的真实模式，减少因量纲差异导致的偏差。通过标准化，模型可以更加公平地对待不同特征，从而提高分类的准确率。</p>\n</li>\n<li><p><strong>回归任务</strong>：在回归问题中，如房价预测、股票价格预测等，特征标准化同样重要。标准化后的数据能够加快梯度下降等优化算法的收敛速度，使模型更快找到最优解。此外，标准化还能提高模型的泛化能力，减少过拟合的风险。</p>\n</li>\n<li><p><strong>聚类任务</strong>：在聚类分析中，如K-means聚类、层次聚类等，特征标准化能够确保不同特征在聚类过程中具有相同的权重，从而得到更加合理和准确的聚类结果。未标准化的数据可能会导致某些特征在聚类过程中占据主导地位，影响聚类的有效性。</p>\n</li>\n</ul>\n<h2 id=\"深度学习\"><a href=\"#深度学习\" class=\"headerlink\" title=\"深度学习\"></a>深度学习</h2><p>在深度学习领域，神经网络训练过程中特征标准化的重要性更加凸显。神经网络通常包含多层非线性变换，如果输入数据未经过标准化处理，可能会导致梯度消失或梯度爆炸问题，严重影响模型的训练效果。通过特征标准化，可以确保输入数据在合理的范围内波动，有助于神经网络学习过程的稳定进行。此外，标准化后的数据还能加速神经网络的收敛速度，提高模型的训练效率。</p>\n<h2 id=\"金融分析\"><a href=\"#金融分析\" class=\"headerlink\" title=\"金融分析\"></a>金融分析</h2><p>在金融领域，特征标准化广泛应用于时间序列分析、风险评估等任务中。在金融时间序列分析中，不同金融指标（如股票价格、汇率、利率等）的量纲和波动范围差异较大，直接用于分析可能导致结果失真。通过特征标准化，可以消除这些差异，使得不同指标在模型中具有相同的权重和重要性。在风险评估领域，标准化后的数据有助于构建更加稳定和准确的风险评估模型，提高风险识别的准确性和及时性。</p>\n<h2 id=\"其他领域\"><a href=\"#其他领域\" class=\"headerlink\" title=\"其他领域\"></a>其他领域</h2><p>除了上述领域外，特征标准化还在生物信息学、图像处理等其他领域发挥着重要作用。在生物信息学中，基因表达数据、蛋白质结构数据等通常需要进行标准化处理，以便进行后续的生物信息学分析和挖掘。在图像处理中，像素值的标准化有助于减少光照变化、噪声等因素对图像质量的影响，提高图像识别和分析的准确性。</p>\n<h1 id=\"六、注意事项与挑战\"><a href=\"#六、注意事项与挑战\" class=\"headerlink\" title=\"六、注意事项与挑战\"></a>六、注意事项与挑战</h1><h2 id=\"数据泄露\"><a href=\"#数据泄露\" class=\"headerlink\" title=\"数据泄露\"></a>数据泄露</h2><p>在进行特征标准化时，需要特别注意数据泄露的问题。特别是在使用交叉验证或测试集来评估模型性能时，应避免在测试集上直接使用训练集计算得到的统计量（如均值和标准差）进行标准化。这样做会导致数据泄露问题，使得模型在测试集上的性能被高估。正确的做法是使用训练集计算统计量，并仅对训练集进行标准化处理；在评估模型性能时，应对测试集使用训练集统计量进行标准化，以确保评估的公正性和准确性。</p>\n<h2 id=\"异常值处理\"><a href=\"#异常值处理\" class=\"headerlink\" title=\"异常值处理\"></a>异常值处理</h2><p>异常值处理是特征标准化前的重要步骤之一。异常值可能会对统计量的计算产生显著影响，导致标准化后的数据出现偏差。因此，在进行特征标准化之前，应对数据进行全面的异常值检测和处理。常见的异常值处理方法包括删除、替换（如使用中位数或均值替换）、标记（如设置标志位）等。根据数据的特性和业务需求选择合适的异常值处理方法至关重要。</p>\n<h2 id=\"选择适合的标准化方法\"><a href=\"#选择适合的标准化方法\" class=\"headerlink\" title=\"选择适合的标准化方法\"></a>选择适合的标准化方法</h2><p>选择适合的标准化方法对于提高模型性能至关重要。不同的标准化方法适用于不同的数据类型和业务场景。例如，Z-score标准化适用于大多数连续型数据的标准化处理；Min-Max标准化适用于需要限制数据范围到特定区间的场景；小数定标标准化适用于数据范围已知且相对稳定的场景等。在选择标准化方法时，应充分考虑数据的特性、模型的需求以及业务场景的要求，以确保标准化过程的有效性和合理性。</p>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p>在本文中，我们全面探讨了特征标准化的定义、重要性、方法、实施步骤以及广泛的应用场景。特征标准化作为数据预处理的关键步骤之一，通过调整数据的分布和量纲，使得不同特征在模型中具有相同的权重和重要性，从而提高了模型的训练效率和预测性能。</p>\n<p>首先，我们回顾了特征标准化的基本定义，即通过对数据进行缩放或平移操作，使其满足特定的统计特性（如均值为0，标准差为1）。接着，我们强调了特征标准化在机器学习、深度学习以及金融分析等领域中的重要性，指出它能够有效减少模型训练时间、提高模型泛化能力并优化模型性能。</p>\n<p>在方法部分，我们介绍了多种常见的特征标准化方法，包括Z-score标准化、Min-Max标准化以及小数定标标准化等，并讨论了它们各自的适用场景和优缺点。通过对比不同方法的特点和效果，读者可以根据实际需求选择最适合的标准化方法。</p>\n<p>在实施步骤方面，我们详细阐述了数据准备、选择标准化方法、应用标准化以及验证效果等关键步骤。这些步骤为读者提供了从数据清洗到模型评估的完整流程，有助于他们在实际项目中有效地应用特征标准化技术。</p>\n<p>此外，我们还探讨了特征标准化在多个领域的应用场景，包括机器学习模型中的分类、回归和聚类任务，深度学习中的神经网络训练，以及金融分析中的时间序列分析和风险评估等。这些应用案例不仅展示了特征标准化的广泛适用性，还进一步强调了其在解决实际问题中的重要作用。</p>\n<p>展望未来，随着数据科学和机器学习技术的不断发展，特征标准化技术也将迎来新的发展机遇。自动化标准化工具的发展将使得特征标准化的过程更加简便快捷，降低了技术门槛并提高了工作效率。同时，随着新算法和新模型的不断涌现，特征标准化的方法和应用场景也将不断拓展和深化。</p>\n<p>最后，我们鼓励读者在自己的项目中积极尝试应用特征标准化技术，并通过实践不断积累经验。通过分享实践经验和学习心得，我们可以共同推动特征标准化技术的发展和应用，为数据科学和机器学习领域的发展贡献自己的力量。</p>\n<h1 id=\"关注我\"><a href=\"#关注我\" class=\"headerlink\" title=\"关注我\"></a>关注我</h1><p>关注公众号“生信之巅”。</p>\n<table align=\"center\"><tr>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅微信公众号\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-right: 0px;margin-bottom: 5px;align: center;\"></td>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅小程序码\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-left: 0px;margin-bottom: 5px;align: center\"></td>\n</tr></table>\n\n\n<p><font color=\"#FF0000\"><ruby><b>敬告</b>：使用文中脚本请引用本文网址，请尊重本人的劳动成果，谢谢！<rt><b>Notice</b>: When you use the scripts in this article, please cite the link of this webpage. Thank you!</rt></ruby></font></p>\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"机器学习","path":"api/tags/机器学习.json"},{"name":"特征工程","path":"api/tags/特征工程.json"}]},{"title":"用MaAsLin2包做微生物组多变量线性模型关联分析","slug":"用MaAsLin2包做微生物组多变量线性模型关联分析","date":"2024-07-30T14:41:21.000Z","updated":"2024-08-03T07:39:22.285Z","comments":true,"path":"api/articles/用MaAsLin2包做微生物组多变量线性模型关联分析.json","excerpt":null,"keywords":null,"cover":"https://raw.githubusercontent.com/biobakery/omnibus-and-maaslin2-rscripts-and-hmp2-data/master/assets/sigresults_screenshot.png","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>MaAsLin 2 是 MaAsLin（微生物组多变量线性模型关联，Microbiome Multivariable Association with Linear Models）的下一代产品。</p>\n<p>MaAsLin 2 是一个全面的 R 语言软件包，用于高效地确定表型、环境、暴露、协变量和微生物组元组学特征之间的多变量关联。MaAsLin 2 依赖于一般线性模型来适应大多数现代流行病学研究设计，包括横断面和纵向研究，以及多种数据探索、标准化和转换方法。</p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span><span class=\"punctuation\">(</span><span class=\"operator\">!</span>requireNamespace<span class=\"punctuation\">(</span><span class=\"string\">&quot;BiocManager&quot;</span><span class=\"punctuation\">,</span> quietly <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    install.packages<span class=\"punctuation\">(</span><span class=\"string\">&quot;BiocManager&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">BiocManager<span class=\"operator\">::</span>install<span class=\"punctuation\">(</span><span class=\"string\">&quot;Maaslin2&quot;</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"微生物组关联检测\"><a href=\"#微生物组关联检测\" class=\"headerlink\" title=\"微生物组关联检测\"></a>微生物组关联检测</h1><h2 id=\"输入文件\"><a href=\"#输入文件\" class=\"headerlink\" title=\"输入文件\"></a>输入文件</h2><h3 id=\"微生物组特征数据或功能数据\"><a href=\"#微生物组特征数据或功能数据\" class=\"headerlink\" title=\"微生物组特征数据或功能数据\"></a>微生物组特征数据或功能数据</h3><ul>\n<li>以制表符分隔列</li>\n<li>行为样本，列为特征（微生物&#x2F;基因&#x2F;功能……）</li>\n</ul>\n<div style=\"overflow-x:auto;\">\n<table>\n    <thead>\n        <tr>\n            <th>ID</th>\n            <th>Bifidobacterium adolescentis</th>\n            <th>Bifidobacterium bifidum</th>\n            <th>Bifidobacterium longum</th>\n            <th>Bifidobacterium pseudocatenulatum</th>\n            <th>Collinsella aerofaciens</th>\n            <th>Bacteroides caccae</th>\n            <th>Bacteroides cellulosilyticus</th>\n            <th>Bacteroides dorei</th>\n            <th>Bacteroides eggerthii</th>\n            <th>Bacteroides faecis</th>\n            <th>Bacteroides finegoldii</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>CSM5FZ3N_P</td>\n            <td>Cedars-Sinai</td>\n            <td>43</td>\n            <td>CD</td>\n            <td>C3001</td>\n            <td>No</td>\n            <td>No</td>\n            <td>0.792314801112388</td>\n            <td>No</td>\n            <td>No</td>\n            <td>No</td>\n            <td>1</td>\n        </tr>\n        <!-- ... other rows ... -->\n        <tr>\n            <td>CSM5FZ4M_P</td> <!-- Added _P to make the ID consistent -->\n            <td>Cedars-Sinai</td>\n            <td>43</td>\n            <td>UC</td>\n            <td>C3003</td>\n            <td>No</td>\n            <td>No</td>\n            <td>0.761300183426806</td>\n            <td>No</td>\n            <td>No</td>\n            <td>No</td>\n            <td>6</td>\n        </tr>\n        <tr>\n            <td>CSM5LLGB_P</td>\n            <td>MGH</td>\n            <td>30</td>\n            <td>CD</td>\n            <td>M2014</td>\n            <td>No</td>\n            <td>No</td>\n            <td>0.730525895151516</td>\n            <td>No</td>\n            <td>No</td>\n            <td>No</td>\n            <td>8</td>\n        </tr>\n    </tbody>\n</table>\n</div>\n\n<h3 id=\"元数据\"><a href=\"#元数据\" class=\"headerlink\" title=\"元数据\"></a>元数据</h3><ul>\n<li>以制表符分隔列</li>\n<li>行为样本，列为特征</li>\n</ul>\n<div style=\"overflow-x:auto;\">  \n<table border=\"1\">  \n    <thead>  \n        <tr>  \n            <th>ID</th>  \n            <th>site</th>  \n            <th>age</th>  \n            <th>diagnosis</th>  \n            <th>subject</th>  \n            <th>antibiotics</th>  \n            <th>dysbiosis_binary</th>  \n            <th>dysbiosis</th>  \n            <th>dysbiosisnonIBD</th>  \n            <th>dysbiosisUC</th>  \n            <th>dysbiosisCD</th>  \n            <th>collection</th>  \n        </tr>  \n    </thead>  \n    <tbody>  \n                <tr>\n            <td>CSM5FZ3N_P</td><td>Cedars-Sinai</td><td>43</td><td>CD</td><td>C3001</td><td>No</td><td>No</td><td>0.792314801112388</td><td>No</td><td>No</td><td>No</td><td>1</td>\n        </tr>\n        <tr>\n            <td>CSM5FZ3R_P</td><td>Cedars-Sinai</td><td>43</td><td>CD</td><td>C3001</td><td>No</td><td>No</td><td>0.837923415694291</td><td>No</td><td>No</td><td>No</td><td>2</td>\n        </tr>\n        <tr>\n            <td>CSM5FZ3T_P</td><td>Cedars-Sinai</td><td>76</td><td>CD</td><td>C3002</td><td>No</td><td>Yes</td><td>0.924296928419748</td><td>No</td><td>No</td><td>Yes</td><td>1</td>\n        </tr>\n        <tr>\n            <td>CSM5FZ3V_P</td><td>Cedars-Sinai</td><td>43</td><td>CD</td><td>C3001</td><td>No</td><td>No</td><td>0.830400526852384</td><td>No</td><td>No</td><td>No</td><td>4</td>\n        </tr>\n        <tr>\n            <td>CSM5FZ3X_P</td><td>Cedars-Sinai</td><td>76</td><td>CD</td><td>C3002</td><td>No</td><td>Yes</td><td>0.910966992923041</td><td>No</td><td>No</td><td>Yes</td><td>2</td>\n        </tr>\n        <tr>\n            <td>CSM5FZ3Z_P</td><td>Cedars-Sinai</td><td>76</td><td>CD</td><td>C3002</td><td>No</td><td>Yes</td><td>0.912281677355966</td><td>No</td><td>No</td><td>Yes</td><td>3</td>\n        </tr>\n        <tr>\n            <td>CSM5FZ42_P</td><td>Cedars-Sinai</td><td>76</td><td>CD</td><td>C3002</td><td>No</td><td>Yes</td><td>0.903049136702093</td><td>No</td><td>No</td><td>Yes</td><td>4</td>\n        </tr>\n        <tr>\n            <td>CSM5FZ44_P</td><td>Cedars-Sinai</td><td>76</td><td>CD</td><td>C3002</td><td>No</td><td>Yes</td><td>0.87825476936449</td><td>No</td><td>No</td><td>Yes</td><td>5</td>\n        </tr>\n        <tr>\n            <td>CSM5FZ46_P</td><td>Cedars-Sinai</td><td>76</td><td>CD</td><td>C3002</td><td>No</td><td>Yes</td><td>0.92542872181954</td><td>No</td><td>No</td><td>Yes</td><td>6</td>\n        </tr>\n        <tr>\n            <td>CSM5FZ4A_P</td><td>Cedars-Sinai</td><td>47</td><td>UC</td><td>C3004</td><td>No</td><td>No</td><td>0.775160480913896</td><td>No</td><td>No</td><td>No</td><td>1</td>\n        </tr>\n        <tr>\n            <td>CSM5FZ4C_P</td><td>Cedars-Sinai</td><td>43</td><td>CD</td><td>C3001</td><td>No</td><td>No</td><td>0.836244630681399</td><td>No</td><td>No</td><td>No</td><td>5</td>\n        </tr>\n        <tr>\n            <td>CSM5FZ4E_P</td><td>Cedars-Sinai</td><td>43</td><td>UC</td><td>C3003</td><td>Yes</td><td>No</td><td>0.787616535915359</td><td>No</td><td>No</td><td>No</td><td>2</td>\n        </tr>\n        <tr>\n            <td>CSM5FZ4G_P</td><td>Cedars-Sinai</td><td>43</td><td>UC</td><td>C3003</td><td>No</td><td>No</td><td>0.68128445477854</td><td>No</td><td>No</td><td>No</td><td>3</td>\n        </tr>\n        <tr>\n            <td>CSM5FZ4K_P</td><td>Cedars-Sinai</td><td>43</td><td>UC</td><td>C3003</td><td>Yes</td><td>No</td><td>0.717164790084925</td><td>No</td><td>No</td><td>No</td><td>5</td>\n        </tr>\n        <tr>\n            <td>CSM5FZ4M</td><td>Cedars-Sinai</td><td>43</td><td>UC</td><td>C3003</td><td>No</td><td>No</td><td>0.761300183426806</td><td>No</td><td>No</td><td>No</td><td>6</td>\n        </tr>\n        <tr>\n            <td>CSM5LLGB_P</td><td>MGH</td><td>30</td><td>CD</td><td>M2014</td><td>No</td><td>No</td><td>0.730525895151516</td><td>No</td><td>No</td><td>No</td><td>8</td>\n        </tr> \n    </tbody>  \n</table>  \n</div>\n\n<p>两个文件包含的样本可以不同，分析时只取二者共有的样本。样本顺序也无需一致。</p>\n<h3 id=\"读入文件\"><a href=\"#读入文件\" class=\"headerlink\" title=\"读入文件\"></a>读入文件</h3><figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df_input_data <span class=\"operator\">=</span> read.table<span class=\"punctuation\">(</span>file             <span class=\"operator\">=</span> input_data<span class=\"punctuation\">,</span></span><br><span class=\"line\">                           header           <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                           sep              <span class=\"operator\">=</span> <span class=\"string\">&quot;\\t&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">                           row.names        <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                           stringsAsFactors <span class=\"operator\">=</span> <span class=\"literal\">FALSE</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">df_input_data<span class=\"punctuation\">[</span><span class=\"number\">1</span><span class=\"operator\">:</span><span class=\"number\">5</span><span class=\"punctuation\">,</span> <span class=\"number\">1</span><span class=\"operator\">:</span><span class=\"number\">5</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"></span><br><span class=\"line\">df_input_metadata <span class=\"operator\">=</span> read.table<span class=\"punctuation\">(</span>file             <span class=\"operator\">=</span> input_metadata<span class=\"punctuation\">,</span> </span><br><span class=\"line\">                               header           <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">                               sep              <span class=\"operator\">=</span> <span class=\"string\">&quot;\\t&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">                               row.names        <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                               stringsAsFactors <span class=\"operator\">=</span> <span class=\"literal\">FALSE</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">df_input_metadata<span class=\"punctuation\">[</span><span class=\"number\">1</span><span class=\"operator\">:</span><span class=\"number\">5</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">]</span></span><br><span class=\"line\"></span><br><span class=\"line\">df_input_path <span class=\"operator\">=</span> read.csv<span class=\"punctuation\">(</span><span class=\"string\">&quot;./pathabundance_relab.tsv&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">                         sep              <span class=\"operator\">=</span> <span class=\"string\">&quot;\\t&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">                         stringsAsFactors <span class=\"operator\">=</span> <span class=\"literal\">FALSE</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">                         row.names        <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">df_input_path<span class=\"punctuation\">[</span><span class=\"number\">1</span><span class=\"operator\">:</span><span class=\"number\">5</span><span class=\"punctuation\">,</span> <span class=\"number\">1</span><span class=\"operator\">:</span><span class=\"number\">5</span><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运行MaAsLin-2\"><a href=\"#运行MaAsLin-2\" class=\"headerlink\" title=\"运行MaAsLin 2\"></a>运行MaAsLin 2</h2><p>在MaAsLin中，可以使用几种不同类型的统计模型来进行关联测试（例如简单线性模型、零膨胀模型、基于计数的模型等）。作者在论文中评估了各种模型的优缺点，虽然默认模型通常适用于大多数分析，但在某些情况下，用户可能希望选择不同的模型。这同样适用于多种不同的微生物群落数据类型（taxonomy 或functional profiles）、环境（人类或其他）和测量方式（计数或相对比例），只要使用适当修改过的归一化&#x2F;转换方案即可。</p>\n<p>对于模型选择，如果你的输入是<code>计数数据</code>，那么你可以使用<code>NEGBIN</code>和<code>ZINB</code>模型；而对于<code>非计数数据</code>（如百分比、CPM或相对丰度）的输入，你可以使用<code>LM</code>和<code>CPLM</code>模型。</p>\n<p>在MaAsLin 2实现的归一化方法中，<u>TMM和CSS仅适用于计数数据，并且它们也返回归一化后的计数</u>，这与TSS和CLR不同。因此，如果你的输入是计数数据，你可以使用上述两种归一化方法（即TMM、CSS或NONE（如果数据已经归一化））而无需进一步转换（即transform &#x3D; NONE）。</p>\n<p><u>在非计数模型中，CPLM要求数据为正数</u>。因此，任何产生负值的转换通常都不适用于<code>CPLM</code>。</p>\n<p>由于所有非LM模型都与其与广义线性模型（GLM）的紧密联系而使用固有的对数链接转换，因此建议它们以<code>transform = NONE</code>的方式运行。</p>\n<p>除此之外，<u>LM是唯一能够处理正数和负数（在归一化&#x2F;转换之后）的模型</u>，并且（根据手稿）它通常对参数变化具有更强的鲁棒性（这是非LM模型的典型限制）。关于是否使用LM、CPLM或其他模型，直观上，<u>在存在零值的情况下，<code>CPLM</code>或<code>零膨胀替代模型</code>应该表现更好，但根据我们的基准测试，我们没有证据表明CPLM显著优于LM模型</u>。因此，<b>在选择模型时，应综合考虑数据的特性、研究目的以及模型的适用性和性能</b>。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Model (-m ANALYSIS_METHOD)</th>\n<th align=\"center\">Data type</th>\n<th align=\"center\">Normalization (-n NORMALIZATION)</th>\n<th align=\"center\">Transformation (-t TRANSFORM)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">LM</td>\n<td align=\"center\">count and non-count</td>\n<td align=\"center\">TSS, CLR, NONE</td>\n<td align=\"center\">LOG, LOGIT, AST, NONE</td>\n</tr>\n<tr>\n<td align=\"center\">CPLM</td>\n<td align=\"center\">count and non-count</td>\n<td align=\"center\">TSS, TMM, CSS, NONE</td>\n<td align=\"center\">NONE</td>\n</tr>\n<tr>\n<td align=\"center\">NEGBIN</td>\n<td align=\"center\">count</td>\n<td align=\"center\">TMM, CSS, NONE</td>\n<td align=\"center\">NONE</td>\n</tr>\n<tr>\n<td align=\"center\">ZINB</td>\n<td align=\"center\">count</td>\n<td align=\"center\">TMM, CSS, NONE</td>\n<td align=\"center\">NONE</td>\n</tr>\n</tbody></table>\n<p><strong>注</strong>：通常，还需要考虑用于过滤数据（即流行率和丰度阈值）的阈值，以减少异常值和假阳性。有关此方面的更多详细信息，请参阅MaAsLin 2中的第<a href=\"https://github.com/biobakery/biobakery/wiki/maaslin2#431-prevalence-and-abundance-filtering-in-maaslin2\">4.3.1节“流行率和丰度过滤”</a>。</p>\n<p>以下命令在HMP2数据上运行MaAsLin 2，执行多变量回归模型以测试微生物物种丰度与IBD诊断和<a href=\"https://www.nature.com/articles/s41586-019-1237-9\">菌群失调评分</a>之间的关联（<code>fixed_effects = c(&quot;diagnosis&quot;, &quot;dysbiosis&quot;)</code>）。对于具有超过2个水平的任何分类变量，还需要指定哪个变量应作为参考水平，方法是使用（<code>reference = c(&quot;diagnosis,nonIBD&quot;)</code>）。<strong>注</strong>：<font color=#FF0000>在变量和水平之间添加空格可能会导致使用错误的参考水平</font>。输出将生成在当前工作目录下的名为demo_output的文件夹中（<code>output = &quot;demo_output&quot;</code>）。在此示例中，输入数据已预先进行归一化和过滤，因此我们也将关闭默认的归一化和流行率过滤。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fit_data <span class=\"operator\">=</span> Maaslin2<span class=\"punctuation\">(</span>input_data     <span class=\"operator\">=</span> df_input_data<span class=\"punctuation\">,</span> </span><br><span class=\"line\">                    input_metadata <span class=\"operator\">=</span> df_input_metadata<span class=\"punctuation\">,</span> </span><br><span class=\"line\">                    min_prevalence <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                    normalization  <span class=\"operator\">=</span> <span class=\"string\">&quot;NONE&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                    output         <span class=\"operator\">=</span> <span class=\"string\">&quot;demo_output&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">                    fixed_effects  <span class=\"operator\">=</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;diagnosis&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;dysbiosis&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                    reference      <span class=\"operator\">=</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;diagnosis,nonIBD&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h2><h3 id=\"重要关联\"><a href=\"#重要关联\" class=\"headerlink\" title=\"重要关联\"></a>重要关联</h3><p>MaAsLin 2最重要的输出之一可能是重要关联的列表。这些关联在<code>significant_results.tsv</code>文件中提供：</p>\n<p><img src=\"https://raw.githubusercontent.com/biobakery/omnibus-and-maaslin2-rscripts-and-hmp2-data/master/assets/sigresults_screenshot.png\" class=\"lazyload placeholder\" data-srcset=\"https://raw.githubusercontent.com/biobakery/omnibus-and-maaslin2-rscripts-and-hmp2-data/master/assets/sigresults_screenshot.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"significant_results.tsv\"></p>\n<p>这些是通过MaAsLin 2显著性阈值的全部关联列表，按照q值递增的顺序排序。列包括：</p>\n<ul>\n<li><p><strong>metadata</strong>：与微生物特征相关联的变量名。</p>\n</li>\n<li><p><strong>feature</strong>：微生物特征（分类群、基因、途径等）。</p>\n</li>\n<li><p><strong>value</strong>：对于分类特征，这是报告系数和关联显著性的具体特征水平。</p>\n</li>\n<li><p><strong>coef</strong>：模型系数值（效应大小）。对于分类变量，系数表示在value中指定的类别与参考类别之间的对比。</p>\n</li>\n<li><p><strong>stderr</strong>：模型的标准误差。</p>\n</li>\n<li><p><strong>N</strong>：用于此关联的模型中样本的总数（例如，因为可以排除缺失值）。</p>\n</li>\n<li><p><strong>N.not.0</strong>：在这些样本中，特征非零的总数。</p>\n</li>\n<li><p><strong>pval</strong>：此关联的名义显著性。</p>\n</li>\n<li><p><strong>qval</strong>：使用p.adjust函数和校正方法（如BH等）计算得到的校正显著性。</p>\n</li>\n<li><p><strong>问题</strong>：如何解释这个表格的第一行？</p>\n</li>\n</ul>\n<p>对于<code>significant_results.tsv</code>中的每个重要关联，MaAsLin 2还会生成可视化图表以供检查（分类变量的箱线图，连续变量的散点图）。这些图表命名为“metadata_name.pdf”。例如，从我们的分析运行中，我们得到了可视化文件<code>dysbiosis.pdf</code>和<code>diagnosis.pdf</code>。</p>\n<p><img src=\"https://raw.githubusercontent.com/biobakery/omnibus-and-maaslin2-rscripts-and-hmp2-data/master/assets/scatterplot_screenshot.png\" class=\"lazyload placeholder\" data-srcset=\"https://raw.githubusercontent.com/biobakery/omnibus-and-maaslin2-rscripts-and-hmp2-data/master/assets/scatterplot_screenshot.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"dysbiosis.pdf\"></p>\n<p><img src=\"https://raw.githubusercontent.com/biobakery/omnibus-and-maaslin2-rscripts-and-hmp2-data/master/assets/boxplot_screenshot.png\" class=\"lazyload placeholder\" data-srcset=\"https://raw.githubusercontent.com/biobakery/omnibus-and-maaslin2-rscripts-and-hmp2-data/master/assets/boxplot_screenshot.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"diagnosis.pdf\"></p>\n<h3 id=\"输出文件完整列表\"><a href=\"#输出文件完整列表\" class=\"headerlink\" title=\"输出文件完整列表\"></a>输出文件完整列表</h3><p>MaAsLin 2生成两种类型的输出文件：数据和可视化文件。</p>\n<ul>\n<li><p>数据输出文件</p>\n<ul>\n<li><p>significant_results.tsv</p>\n</li>\n<li><p>all_results.tsv</p>\n<ul>\n<li>与significant_results.tsv格式相同，但包含所有关联结果（而不仅仅是显著的结果）。</li>\n<li>您也可以在R中使用fit_data$results访问此表。</li>\n</ul>\n</li>\n<li><p>residuals.rds</p>\n<ul>\n<li>此文件包含一个包含每个特征残差的数据框。</li>\n</ul>\n</li>\n<li><p>maaslin2.log</p>\n<ul>\n<li>此文件包含运行的所有日志信息。</li>\n<li>它包括所有设置、警告、错误和运行的步骤。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>可视化输出文件</p>\n<ul>\n<li><p>heatmap.pdf</p>\n<ul>\n<li>此文件包含显著关联的热图。</li>\n</ul>\n</li>\n<li><p>[a-z&#x2F;0-9]+.pdf</p>\n<ul>\n<li>为每个显著关联生成一个图表。</li>\n<li>对于连续元数据，使用散点图。</li>\n<li>对于分类数据，使用箱线图。</li>\n<li>绘制的数据点已经过归一化、过滤和转换。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"MaAsLin-2在功能谱上的应用\"><a href=\"#MaAsLin-2在功能谱上的应用\" class=\"headerlink\" title=\"MaAsLin 2在功能谱上的应用\"></a>MaAsLin 2在功能谱上的应用</h3><p>如果您的功能表是由HUMAnN生成的，并且已经使用<code>humann_renorm_table</code>脚本进行了归一化，那么您不需要执行任何额外的归一化——测序深度的影响已经被消除（这正是本教程中将使用的）。我们倾向于使用<code>CPM</code>单位，因为我们发现它们更方便，但在建模目的上，它们在数值上与相对丰度是等价的（<code>CPM = RA * 1e6</code>）。</p>\n<p>否则，可使用上述关于模型&#x2F;归一化&#x2F;转换的相同思路。</p>\n<p>在使用MaAsLin 2处理功能谱时的一些其他快速提示：</p>\n<ul>\n<li>为了减少特征数量，通常希望运行未分层的功能特征（或分层特征的过滤子集）。</li>\n<li>可能还想移除与特定分类群高度相关的功能特征（即可能由该微生物贡献），因为这些特征可以通过分类学变化得到更好的解释。</li>\n</ul>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#This can also be done with with the HUMAnN 3 untiliy `humann_split_stratified_table`</span></span><br><span class=\"line\">unstrat_pathways <span class=\"operator\">&lt;-</span><span class=\"keyword\">function</span><span class=\"punctuation\">(</span>dat_path<span class=\"punctuation\">)</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  temp <span class=\"operator\">=</span> dat_path<span class=\"punctuation\">[</span><span class=\"operator\">!</span>grepl<span class=\"punctuation\">(</span><span class=\"string\">&quot;\\\\|&quot;</span><span class=\"punctuation\">,</span>rownames<span class=\"punctuation\">(</span>dat_path<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"built_in\">return</span><span class=\"punctuation\">(</span>temp<span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">df_input_path <span class=\"operator\">=</span> unstrat_pathways<span class=\"punctuation\">(</span>df_input_path<span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>在由<a href=\"https://github.com/biobakery/biobakery/wiki/biobakery_workflows\">bioBakery工作流程</a>生成的MetaCyc途径表上运行与上述相同的模型。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fit_func <span class=\"operator\">=</span> Maaslin2<span class=\"punctuation\">(</span>input_data     <span class=\"operator\">=</span> df_input_path<span class=\"punctuation\">,</span> </span><br><span class=\"line\">                    input_metadata <span class=\"operator\">=</span> df_input_metadata<span class=\"punctuation\">,</span> </span><br><span class=\"line\">                    output         <span class=\"operator\">=</span> <span class=\"string\">&quot;demo_functional&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">                    fixed_effects  <span class=\"operator\">=</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;diagnosis&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;dysbiosis&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                    reference      <span class=\"operator\">=</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;diagnosis,nonIBD&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                    min_abundance  <span class=\"operator\">=</span> <span class=\"number\">0.0001</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                    min_prevalence <span class=\"operator\">=</span> <span class=\"number\">0.1</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：在这里，我们有列中的样本和行中的特征，MaAsLin 2正确地识别了这一点，并且能够匹配样本。</p>\n<p>作者最近还发表了关于使用MaAsLin 2分析宏转录组学数据（MTX）中差异特征的研究，有关该主题的更多信息，请参阅<a href=\"https://academic.oup.com/bioinformatics/article/37/Supplement_1/i34/6319701\">最近的出版物</a>。</p>\n<h1 id=\"高级主题\"><a href=\"#高级主题\" class=\"headerlink\" title=\"高级主题\"></a>高级主题</h1><h2 id=\"交互作用\"><a href=\"#交互作用\" class=\"headerlink\" title=\"交互作用\"></a>交互作用</h2><p>许多统计分析都关注于测试某些变量之间的交互作用。不幸的是，MaAsLin 2目前尚未提供直接的界面来进行此操作。相反，用户需要创建人工交互列作为额外的fixed_effects项。以上面的拟合为例，为了测试诊断与菌群失调之间的交互作用，我可以创建两列额外的数据：CD_dysbiosis和UC_dysbiosis（因为诊断的参考是非IBD）。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df_input_metadata<span class=\"operator\">$</span>CD_dysbiosis <span class=\"operator\">=</span> <span class=\"punctuation\">(</span>df_input_metadata<span class=\"operator\">$</span>diagnosis <span class=\"operator\">==</span> <span class=\"string\">&quot;CD&quot;</span><span class=\"punctuation\">)</span> <span class=\"operator\">*</span></span><br><span class=\"line\">                                 df_input_metadata<span class=\"operator\">$</span>dysbiosis</span><br><span class=\"line\">df_input_metadata<span class=\"operator\">$</span>UC_dysbiosis <span class=\"operator\">=</span> <span class=\"punctuation\">(</span>df_input_metadata<span class=\"operator\">$</span>diagnosis <span class=\"operator\">==</span> <span class=\"string\">&quot;UC&quot;</span><span class=\"punctuation\">)</span> <span class=\"operator\">*</span></span><br><span class=\"line\">                                 df_input_metadata<span class=\"operator\">$</span>dysbiosis</span><br><span class=\"line\"></span><br><span class=\"line\">fit_data_ixn <span class=\"operator\">=</span> Maaslin2<span class=\"punctuation\">(</span>input_data     <span class=\"operator\">=</span> df_input_data<span class=\"punctuation\">,</span> </span><br><span class=\"line\">                        input_metadata <span class=\"operator\">=</span> df_input_metadata<span class=\"punctuation\">,</span> </span><br><span class=\"line\">                        min_prevalence <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                        normalization  <span class=\"operator\">=</span> <span class=\"string\">&quot;NONE&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                        output         <span class=\"operator\">=</span> <span class=\"string\">&quot;demo_output_interaction&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">                        fixed_effects  <span class=\"operator\">=</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;diagnosis&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;dysbiosis&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;CD_dysbiosis&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;UC_dysbiosis&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">                        reference      <span class=\"operator\">=</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;diagnosis,nonIBD&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"随机效应\"><a href=\"#随机效应\" class=\"headerlink\" title=\"随机效应\"></a>随机效应</h2><p>某些研究自然地将样本观测值“分组”，例如在纵向设计中按受试者分组或在家庭设计中按家庭分组。对于统计分析来说，重要的是要处理属于同一组的样本之间的非独立性。MaAsLin 2 通过 <code>random_effects</code> 参数提供了一个简单的界面来处理这个问题，用户可以在其中指定分组变量来运行混合效应模型。例如，我们注意到 HMP2 是一个纵向设计，其中同一个受试者（列中的 subject）可以有多个样本。因此，我们要求 MaAsLin 2 使用 subject 作为其随机效应分组变量：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fit_data_random <span class=\"operator\">=</span> Maaslin2<span class=\"punctuation\">(</span>input_data     <span class=\"operator\">=</span> df_input_data<span class=\"punctuation\">,</span> </span><br><span class=\"line\">                           input_metadata <span class=\"operator\">=</span> df_input_metadata<span class=\"punctuation\">,</span> </span><br><span class=\"line\">                           min_prevalence <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                           normalization  <span class=\"operator\">=</span> <span class=\"string\">&quot;NONE&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                           output         <span class=\"operator\">=</span> <span class=\"string\">&quot;demo_output_random&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">                           fixed_effects  <span class=\"operator\">=</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;diagnosis&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;dysbiosis&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                           random_effects <span class=\"operator\">=</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;subject&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                           reference      <span class=\"operator\">=</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;diagnosis,nonIBD&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>如果你对在纵向研究中测试时间的影响感兴趣，那么在调用 MaAsLin 2 时，时间点变量应该包含在 <code>fixed_effects </code>中。</p>\n<ul>\n<li>问题：直觉上，你能想到为什么解决样本之间的非独立性很重要吗？<ul>\n<li>提示：想象一下一个简单的场景，你有两个受试者，一个病例和一个对照，每个受试者都有两个样本。</li>\n<li>当同一受试者的样本高度独立时，与它们高度相关时，有效样本大小是多少？</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"其他选项\"><a href=\"#其他选项\" class=\"headerlink\" title=\"其他选项\"></a>其他选项</h2><p>MaAsLin 2 提供了许多参数选项，用于不同的数据预处理（规范化、过滤、转换）和其他任务。这些选项的完整列表是：</p>\n<ul>\n<li><p>min_abundance</p>\n<ul>\n<li>每个特征的最小丰度 [ 默认值：0 ]</li>\n</ul>\n</li>\n<li><p>min_prevalence</p>\n<ul>\n<li>以最小丰度检测到一个特征的最小样本百分比 [ 默认值：0.1 ]</li>\n</ul>\n</li>\n<li><p>max_significance</p>\n<ul>\n<li>显著性的 q 值阈值 [ 默认值：0.25 ]</li>\n</ul>\n</li>\n<li><p>normalization</p>\n<ul>\n<li>要应用的规范化方法 [ 默认值：”TSS” ] [ 选项：”TSS”、”CLR”、”CSS”、”NONE”、”TMM” ]</li>\n</ul>\n</li>\n<li><p>transform</p>\n<ul>\n<li>要应用的转换 [ 默认值：”LOG” ] [ 选项：”LOG”、”LOGIT”、”AST”、”NONE” ]</li>\n</ul>\n</li>\n<li><p>analysis_method</p>\n<ul>\n<li>要应用的分析方法 [ 默认值：”LM” ] [ 选项：”LM”、”CPLM”、”ZICP”、”NEGBIN”、”ZINB” ]</li>\n</ul>\n</li>\n<li><p>correction</p>\n<ul>\n<li>计算 q 值的校正方法 [ 默认值：”BH” ]</li>\n</ul>\n</li>\n<li><p>standardize</p>\n<ul>\n<li>应用 z 分数，以便连续元数据在同一尺度上 [ 默认值：TRUE ]</li>\n</ul>\n</li>\n<li><p>plot_heatmap</p>\n<ul>\n<li>为显著关联生成热图 [ 默认值：TRUE ]</li>\n</ul>\n</li>\n<li><p>heatmap_first_n</p>\n<ul>\n<li>在热图中，绘制具有显著关联的前 N 个特征 [ 默认值：50 ]</li>\n</ul>\n</li>\n<li><p>plot_scatter</p>\n<ul>\n<li>为显著关联生成散点图 [ 默认值：TRUE ]</li>\n</ul>\n</li>\n<li><p>cores</p>\n<ul>\n<li>并行运行的 R 进程数 [ 默认值：1 ]</li>\n</ul>\n</li>\n<li><p>reference</p>\n<ul>\n<li>用作具有两个以上级别的变量的参考，以“变量,参考”的字符串形式提供，多个变量之间用分号分隔。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"MaAsLin-2-中的流行率和丰度过滤\"><a href=\"#MaAsLin-2-中的流行率和丰度过滤\" class=\"headerlink\" title=\"MaAsLin 2 中的流行率和丰度过滤\"></a>MaAsLin 2 中的流行率和丰度过滤</h3><p>通常，只有在某个特征在“足够”多的时间内非零时，测试特征与元数据之间的关联才有意义。“足够”的具体比例可能因研究而异，但 10-50% 的最小流行率阈值并不罕见（高达 70-90% 也是合理的）。由于我们已经在使用一小部分精选的演示数据，我们将使用 <code>min_prevalence = 0.1</code> 来仅测试至少 10% 的非零值的特征。请注意：这是 MaAsLin 2 中的默认参数设置。</p>\n<p>类似地，通常只希望测试在这么多样本中达到最小丰度阈值的特征。默认情况下，MaAsLin 2 会认为任何非零值都是可靠的，如果你已经在数据集中进行了充分的质量控制（QC），那么这样做是合适的。然而，如果你想要进行更多过滤或采取保守态度，你可以设置一个最小丰度阈值，如 <code>min_abundance = 0.0001</code>，以仅测试达到这个（相对）丰度的特征。</p>\n<p>将这些参数组合起来，我们可以使用两者来运行 MaAsLin 2（并且速度会更快！）：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fit_data_filter <span class=\"operator\">=</span> Maaslin2<span class=\"punctuation\">(</span>input_data     <span class=\"operator\">=</span> df_input_data<span class=\"punctuation\">,</span> </span><br><span class=\"line\">                           input_metadata <span class=\"operator\">=</span> df_input_metadata<span class=\"punctuation\">,</span> </span><br><span class=\"line\">                           normalization  <span class=\"operator\">=</span> <span class=\"string\">&quot;NONE&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                           output         <span class=\"operator\">=</span> <span class=\"string\">&quot;demo_output_filter&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">                           fixed_effects  <span class=\"operator\">=</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;diagnosis&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;dysbiosis&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                           reference      <span class=\"operator\">=</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;diagnosis,nonIBD&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                           random_effects <span class=\"operator\">=</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;subject&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                           min_prevalence <span class=\"operator\">=</span> <span class=\"number\">0.1</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                           min_abundance  <span class=\"operator\">=</span> <span class=\"number\">0.0001</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"命令行\"><a href=\"#命令行\" class=\"headerlink\" title=\"命令行\"></a>命令行</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Maaslin2.R --transform=AST --fixed_effects=<span class=\"string\">&quot;diagnosis,dysbiosis&quot;</span>  /usr/local/lib/R/site-library/Maaslin2/extdata/HMP2_taxonomy.tsv /usr/local/lib/R/site-library/Maaslin2/extdata/HMP2_metadata.tsv demo_output --reference=<span class=\"string\">&quot;diagnosis,nonIBD&quot;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ Maaslin2.R --help</span><br><span class=\"line\">Usage: ./R/Maaslin2.R [options] &lt;data.tsv&gt; &lt;metadata.tsv&gt; &lt;output_folder&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">    -h, --help</span><br><span class=\"line\">        Show this help message and exit</span><br><span class=\"line\"></span><br><span class=\"line\">    -a MIN_ABUNDANCE, --min_abundance=MIN_ABUNDANCE</span><br><span class=\"line\">        The minimum abundance for each feature [ Default: 0 ]</span><br><span class=\"line\"></span><br><span class=\"line\">    -p MIN_PREVALENCE, --min_prevalence=MIN_PREVALENCE</span><br><span class=\"line\">        The minimum percent of samples for which a feature </span><br><span class=\"line\">        is detected at minimum abundance [ Default: 0.1 ]</span><br><span class=\"line\"></span><br><span class=\"line\">    -s MAX_SIGNIFICANCE, --max_significance=MAX_SIGNIFICANCE</span><br><span class=\"line\">        The q-value threshold for significance [ Default: 0.25 ]</span><br><span class=\"line\"></span><br><span class=\"line\">    -n NORMALIZATION, --normalization=NORMALIZATION</span><br><span class=\"line\">        The normalization method to apply [ Default: TSS ]</span><br><span class=\"line\">        [ Choices: TSS, CLR, CSS, NONE, TMM ]</span><br><span class=\"line\"></span><br><span class=\"line\">    -t TRANSFORM, --transform=TRANSFORM</span><br><span class=\"line\">        The transform to apply [ Default: LOG ]</span><br><span class=\"line\">        [ Choices: LOG, LOGIT, AST, NONE ]</span><br><span class=\"line\"></span><br><span class=\"line\">    -m ANALYSIS_METHOD, --analysis_method=ANALYSIS_METHOD</span><br><span class=\"line\">        The analysis method to apply [ Default: LM ]</span><br><span class=\"line\">        [ Choices: LM, CPLM, NEGBIN, ZINB ]</span><br><span class=\"line\"></span><br><span class=\"line\">    -r RANDOM_EFFECTS, --random_effects=RANDOM_EFFECTS</span><br><span class=\"line\">        The random effects for the model, comma-delimited</span><br><span class=\"line\">        for multiple effects [ Default: none ]</span><br><span class=\"line\"></span><br><span class=\"line\">    -f FIXED_EFFECTS, --fixed_effects=FIXED_EFFECTS</span><br><span class=\"line\">        The fixed effects for the model, comma-delimited</span><br><span class=\"line\">        for multiple effects [ Default: all ]</span><br><span class=\"line\"></span><br><span class=\"line\">    -c CORRECTION, --correction=CORRECTION</span><br><span class=\"line\">        The correction method for computing the </span><br><span class=\"line\">        q-value [ Default: BH ]</span><br><span class=\"line\"></span><br><span class=\"line\">    -z STANDARDIZE, --standardize=STANDARDIZE</span><br><span class=\"line\">        Apply z-score so continuous metadata are </span><br><span class=\"line\">        on the same scale [ Default: TRUE ]</span><br><span class=\"line\"></span><br><span class=\"line\">    -l PLOT_HEATMAP, --plot_heatmap=PLOT_HEATMAP</span><br><span class=\"line\">        Generate a heatmap for the significant </span><br><span class=\"line\">        associations [ Default: TRUE ]</span><br><span class=\"line\"></span><br><span class=\"line\">    -i HEATMAP_FIRST_N, --heatmap_first_n=HEATMAP_FIRST_N</span><br><span class=\"line\">        In heatmap, plot top N features with significant </span><br><span class=\"line\">        associations [ Default: TRUE ]</span><br><span class=\"line\"></span><br><span class=\"line\">    -o PLOT_SCATTER, --plot_scatter=PLOT_SCATTER</span><br><span class=\"line\">        Generate scatter plots for the significant</span><br><span class=\"line\">        associations [ Default: TRUE ]</span><br><span class=\"line\"></span><br><span class=\"line\">    -e CORES, --cores=CORES</span><br><span class=\"line\">        The number of R processes to run in parallel</span><br><span class=\"line\">        [ Default: 1 ]</span><br><span class=\"line\"></span><br><span class=\"line\">    -r REFERENCE, --reference=&#x27;VARIABLE,REFERENCE&#x27;</span><br><span class=\"line\">        The factor to use as a reference for a </span><br><span class=\"line\">        variable with more than two levels </span><br><span class=\"line\">        provided as a string of &#x27;variable,reference&#x27; </span><br><span class=\"line\">        semi-colon delimited for multiple variables.</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><ul>\n<li>Mallick H, Rahnavard A, McIver LJ, Ma S, Zhang Y, Nguyen LH, Tickle TL, Weingart G, Ren B, Schwager EH, Chatterjee S, Thompson KN, Wilkinson JE, Subramanian A, Lu Y, Waldron L, Paulson JN, Franzosa EA, Bravo HC, Huttenhower C (2021). <a href=\"https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1009442\">Multivariable Association Discovery in Population-scale Meta-omics Studies</a>. PLoS Computational Biology, 17(11):e1009442.</li>\n</ul>\n<h1 id=\"加关注\"><a href=\"#加关注\" class=\"headerlink\" title=\"加关注\"></a>加关注</h1><table align=\"center\"><tr>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅微信公众号\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-right: 0px;margin-bottom: 5px;align: center;\"></td>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅小程序码\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-left: 0px;margin-bottom: 5px;align: center\"></td>\n</tr></table>\n","raw":null,"categories":[{"name":"生物信息","path":"api/categories/生物信息.json"}],"tags":[{"name":"扩增子","path":"api/tags/扩增子.json"},{"name":"生信软件","path":"api/tags/生信软件.json"},{"name":"R语言","path":"api/tags/R语言.json"}]},{"title":"Shiny从入门到入定——13-Why reactivity?","slug":"Shiny从入门到入定——13-Why-reactivity","date":"2024-04-27T13:37:04.000Z","updated":"2024-04-27T13:38:58.624Z","comments":true,"path":"api/articles/Shiny从入门到入定——13-Why-reactivity.json","excerpt":null,"keywords":null,"cover":"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg","content":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>现在你已经掌握了一系列有用的技巧，这些技巧赋予了你创建各种有用应用程序的能力。接下来，我们将把注意力转向Shiny魔力背后的反应性理论：</p>\n<ul>\n<li><p>在第<code>13</code>章中，你将了解为什么需要反应性编程模型，以及关于R之外的反应性编程历史的一些知识。</p>\n</li>\n<li><p>在第<code>14</code>章中，你将学习反应图的全部细节，它将决定反应组件何时更新。</p>\n</li>\n<li><p>在第<code>15</code>章中，你将了解底层的构建块，尤其是观察者和定时失效。</p>\n</li>\n<li><p>在第<code>16</code>章中，你将学习如何使用<a href=\"https://rdrr.io/pkg/shiny/man/reactiveVal.html\">reactiveVal()</a>和<a href=\"https://rdrr.io/pkg/shiny/man/observe.html\">observe()</a>来突破反应图的限制。</p>\n</li>\n</ul>\n<p>当然，对于日常开发Shiny应用程序，你并不需要理解所有这些细节。但是，提高你的理解将有助于你从一开始就编写正确的应用程序，当某些行为不符合预期时，你可以更快地缩小问题的范围。</p>\n<h1 id=\"13-为什么需要反应性？\"><a href=\"#13-为什么需要反应性？\" class=\"headerlink\" title=\"13 为什么需要反应性？\"></a>13 为什么需要反应性？</h1><h2 id=\"13-1-引言\"><a href=\"#13-1-引言\" class=\"headerlink\" title=\"13.1 引言\"></a>13.1 引言</h2><p>Shiny给人的初步印象通常是“神奇”。当你刚开始使用时，这种神奇感非常棒，因为它能让你迅速构建出简单的应用程序。但是，软件中的神奇通常会导致幻灭：如果没有一个稳固的思维模型，当你尝试超出其演示和示例的边界时，要预测软件将如何表现就极其困难。而当事情不按你预期的方式发展时，调试几乎是不可能的。</p>\n<p>幸运的是，Shiny的“神奇”是有益的。正如汤姆·戴尔（Tom Dale）谈到他的Ember.js JavaScript框架时所说：“我们做了很多神奇的事情，但这是有益的神奇，这意味着它可以分解为合理的原始元素。”这是Shiny团队希望Shiny所具备的品质，尤其是在反应性编程方面。当你剥去反应性编程的层层外衣时，你不会发现一堆启发式方法、特殊情况和黑客攻击；相反，你会发现一个巧妙但最终相当直接的机制。一旦你形成了对反应性的准确思维模型，你就会明白Shiny并没有耍花招：神奇来自于以一致的方式组合简单概念。</p>\n<p>在本章中，我们将尝试在没有反应性编程的情况下进行开发，以此说明反应性编程的必要性，然后简要介绍与Shiny相关的反应性编程的历史。</p>\n<h2 id=\"13-2-为什么我们需要反应性编程？\"><a href=\"#13-2-为什么我们需要反应性编程？\" class=\"headerlink\" title=\"13.2 为什么我们需要反应性编程？\"></a>13.2 为什么我们需要反应性编程？</h2><p>反应性编程是一种编程风格，它关注随时间变化的值，以及依赖于这些值的计算和操作。反应性对于Shiny应用程序至关重要，因为它们具有交互性：用户改变输入控件（拖动滑块、在文本框中输入内容、勾选复选框等），这会触发服务器上的逻辑运行（读取CSV文件、筛选数据、拟合模型等），最终导致输出更新（图表重绘、表格更新等）。这与大多数R代码有很大的不同，后者通常处理相对静态的数据。</p>\n<p>为了让Shiny应用程序发挥最大效用，我们需要确保反应式表达式和输出仅在它们的输入发生变化时更新。我们希望输出与输入保持同步，同时确保不会进行比必要更多的工作。为了了解反应性为何如此有用，我们将尝试解决一个不使用反应性的简单问题。</p>\n<h3 id=\"13-2-1-为什么不能使用变量？\"><a href=\"#13-2-1-为什么不能使用变量？\" class=\"headerlink\" title=\"13.2.1 为什么不能使用变量？\"></a>13.2.1 为什么不能使用变量？</h3><p>从某种意义上说，你已经知道如何处理“随时间变化的值”：它们被称为“变量”。在R中，变量代表值，它们可以随时间变化，但它们并不是为帮助你处理变化而设计的。以下是一个简单的将温度从摄氏度转换为华氏度的例子：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp_c <span class=\"operator\">&lt;-</span> 10</span><br><span class=\"line\">temp_f <span class=\"operator\">&lt;-</span> <span class=\"punctuation\">(</span>temp_c <span class=\"operator\">*</span> <span class=\"number\">9</span> <span class=\"operator\">/</span> <span class=\"number\">5</span><span class=\"punctuation\">)</span> <span class=\"operator\">+</span> <span class=\"number\">32</span></span><br><span class=\"line\">temp_f</span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] 50</span></span><br></pre></td></tr></table></figure>\n\n<p>到目前为止还不错：<code>temp_c</code>变量有值10，<code>temp_f</code>变量有值50，我们可以改变<code>temp_c</code>的值：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp_c <span class=\"operator\">&lt;-</span> 30</span><br></pre></td></tr></table></figure>\n\n<p>但是改变<code>temp_c</code>的值并不会影响<code>temp_f</code>的值：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp_f</span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] 50</span></span><br></pre></td></tr></table></figure>\n\n<p>变量可以随时间变化，但它们不会自动变化。</p>\n<h3 id=\"13-2-2-使用函数怎么样？\"><a href=\"#13-2-2-使用函数怎么样？\" class=\"headerlink\" title=\"13.2.2 使用函数怎么样？\"></a>13.2.2 使用函数怎么样？</h3><p>你也可以通过函数来解决这个问题：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp_c <span class=\"operator\">&lt;-</span> 10</span><br><span class=\"line\">temp_f <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  message<span class=\"punctuation\">(</span><span class=\"string\">&quot;Converting&quot;</span><span class=\"punctuation\">)</span> </span><br><span class=\"line\">  <span class=\"punctuation\">(</span>temp_c <span class=\"operator\">*</span> <span class=\"number\">9</span> <span class=\"operator\">/</span> <span class=\"number\">5</span><span class=\"punctuation\">)</span> <span class=\"operator\">+</span> <span class=\"number\">32</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">temp_f<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; Converting</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] 50</span></span><br></pre></td></tr></table></figure>\n\n<p>（这是一个有点奇怪的函数，因为它没有参数，而是从其封闭环境40中访问<code>temp_c</code>，但它是一个完全有效的R代码。）</p>\n<p>这解决了反应性试图解决的第一个问题：每当你访问<code>temp_f()</code>时，你都会得到最新的计算结果：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp_c <span class=\"operator\">&lt;-</span> <span class=\"operator\">-</span><span class=\"number\">3</span></span><br><span class=\"line\">temp_f<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> </span><br><span class=\"line\"><span class=\"comment\">#&gt; Converting</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] 26.6</span></span><br></pre></td></tr></table></figure>\n\n<p>然而，它并没有减少计算量。每次你调用<code>temp_f()</code>时，它都会重新计算，即使<code>temp_c</code>没有改变：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp_f<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> </span><br><span class=\"line\"><span class=\"comment\">#&gt; Converting</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] 26.6</span></span><br></pre></td></tr></table></figure>\n\n<p>在这个简单的例子中，计算成本不高，所以重复计算没什么大不了的，但这仍然是多余的：如果输入没有改变，我们为什么要重新计算输出呢？</p>\n<h3 id=\"13-2-3-事件驱动编程\"><a href=\"#13-2-3-事件驱动编程\" class=\"headerlink\" title=\"13.2.3 事件驱动编程\"></a>13.2.3 事件驱动编程</h3><p>由于变量和函数都不适用，我们需要创建一些新的东西。在过去的几十年里，我们可能会直接跳到事件驱动编程。事件驱动编程是一个吸引人的简单范式：你注册回调函数，这些函数会在事件发生时执行。</p>\n<p>我们可以使用R6实现一个非常简单的事件驱动工具包，如下例所示。在这里，我们定义了一个<code>DynamicValue</code>，它有三个重要的方法：<a href=\"https://rdrr.io/r/base/get.html\">get()</a>和<code>set()</code>用于访问和更改基础值，<code>onUpdate()</code>用于注册在值被修改时要运行的代码。如果你不熟悉R6，不用担心细节，而是关注下面的例子。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DynamicValue <span class=\"operator\">&lt;-</span> R6<span class=\"operator\">::</span>R6Class<span class=\"punctuation\">(</span><span class=\"string\">&quot;DynamicValue&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">list</span><span class=\"punctuation\">(</span></span><br><span class=\"line\">  value <span class=\"operator\">=</span> <span class=\"literal\">NULL</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  on_update <span class=\"operator\">=</span> <span class=\"literal\">NULL</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">  get <span class=\"operator\">=</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> self<span class=\"operator\">$</span>value<span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">  set <span class=\"operator\">=</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>value<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    self<span class=\"operator\">$</span>value <span class=\"operator\">&lt;-</span> value</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"punctuation\">(</span><span class=\"operator\">!</span><span class=\"built_in\">is.null</span><span class=\"punctuation\">(</span>self<span class=\"operator\">$</span>on_update<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> </span><br><span class=\"line\">      self<span class=\"operator\">$</span>on_update<span class=\"punctuation\">(</span>value<span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"built_in\">invisible</span><span class=\"punctuation\">(</span>self<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  onUpdate <span class=\"operator\">=</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>on_update<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    self<span class=\"operator\">$</span>on_update <span class=\"operator\">&lt;-</span> on_update</span><br><span class=\"line\">    <span class=\"built_in\">invisible</span><span class=\"punctuation\">(</span>self<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>因此，如果Shiny在五年前就被发明出来，它可能看起来会更像这样，其中<code>temp_c</code>使用<code>&lt;&lt;-</code>来在需要时更新<code>temp_f</code>。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp_c <span class=\"operator\">&lt;-</span> DynamicValue<span class=\"operator\">$</span>new<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">temp_c<span class=\"operator\">$</span>onUpdate<span class=\"punctuation\">(</span><span class=\"keyword\">function</span><span class=\"punctuation\">(</span>value<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  message<span class=\"punctuation\">(</span><span class=\"string\">&quot;Converting&quot;</span><span class=\"punctuation\">)</span> </span><br><span class=\"line\">  temp_f <span class=\"operator\">&lt;&lt;-</span> <span class=\"punctuation\">(</span>value <span class=\"operator\">*</span> <span class=\"number\">9</span> <span class=\"operator\">/</span> <span class=\"number\">5</span><span class=\"punctuation\">)</span> <span class=\"operator\">+</span> <span class=\"number\">32</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">temp_c<span class=\"operator\">$</span>set<span class=\"punctuation\">(</span><span class=\"number\">10</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; Converting</span></span><br><span class=\"line\">temp_f</span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] 50</span></span><br><span class=\"line\"></span><br><span class=\"line\">temp_c<span class=\"operator\">$</span>set<span class=\"punctuation\">(</span><span class=\"operator\">-</span><span class=\"number\">3</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; Converting</span></span><br><span class=\"line\">temp_f</span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] 26.6</span></span><br></pre></td></tr></table></figure>\n\n<p>事件驱动编程解决了不必要的计算问题，但它又产生了一个新问题：你必须仔细跟踪哪些输入会影响哪些计算。不久之后，你就会在正确性（即在任何内容发生更改时都更新所有内容）和性能（即尝试仅更新必要的部分，并希望你没有遗漏任何边缘情况）之间权衡取舍，因为同时做到这两点非常困难。</p>\n<h3 id=\"13-2-4-反应性编程\"><a href=\"#13-2-4-反应性编程\" class=\"headerlink\" title=\"13.2.4 反应性编程\"></a>13.2.4 反应性编程</h3><p>反应性编程通过将上述解决方案的特性结合起来，优雅地解决了这两个问题。现在，我们可以向您展示一些真正的Shiny代码，它使用了一个特殊的Shiny模式，即<code>reactiveConsole(TRUE)</code>，这使得我们可以直接在控制台中实验反应性。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>shiny<span class=\"punctuation\">)</span></span><br><span class=\"line\">reactiveConsole<span class=\"punctuation\">(</span><span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>与事件驱动编程一样，我们需要某种方式来指示我们有一个特殊类型的变量。在Shiny中，我们使用<a href=\"https://rdrr.io/pkg/shiny/man/reactiveVal.html\">reactiveVal()</a>创建一个反<strong>reactive value</strong>。反应式值有特殊的语法来获取其值（像调用无参数函数一样调用它）和设置其值（像调用单参数函数一样调用它来设置其值）。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp_c <span class=\"operator\">&lt;-</span> reactiveVal<span class=\"punctuation\">(</span><span class=\"number\">10</span><span class=\"punctuation\">)</span> <span class=\"comment\"># create</span></span><br><span class=\"line\">temp_c<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span>                  <span class=\"comment\"># get</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] 10</span></span><br><span class=\"line\">temp_c<span class=\"punctuation\">(</span><span class=\"number\">20</span><span class=\"punctuation\">)</span>                <span class=\"comment\"># set</span></span><br><span class=\"line\">temp_c<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span>                  <span class=\"comment\"># get</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] 20</span></span><br></pre></td></tr></table></figure>\n\n<p>现在我们可以创建一个依赖于这个值的反应式表达式：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp_f <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  message<span class=\"punctuation\">(</span><span class=\"string\">&quot;Converting&quot;</span><span class=\"punctuation\">)</span> </span><br><span class=\"line\">  <span class=\"punctuation\">(</span>temp_c<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">*</span> <span class=\"number\">9</span> <span class=\"operator\">/</span> <span class=\"number\">5</span><span class=\"punctuation\">)</span> <span class=\"operator\">+</span> <span class=\"number\">32</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">temp_f<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; Converting</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] 68</span></span><br></pre></td></tr></table></figure>\n\n<p>在创建应用程序时，你已经了解到反应式表达式会自动跟踪其所有依赖项。因此，如果之后<code>temp_c</code>发生变化，<code>temp_f</code>会自动更新：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp_c<span class=\"punctuation\">(</span><span class=\"operator\">-</span><span class=\"number\">3</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">temp_c<span class=\"punctuation\">(</span><span class=\"operator\">-</span><span class=\"number\">10</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">temp_f<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; Converting</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] 14</span></span><br></pre></td></tr></table></figure>\n\n<p>但如果<code>temp_c()</code>没有变化，那么<code>temp_f()</code>就不需要重新计算，可以直接从缓存中获取：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp_f<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] 14</span></span><br></pre></td></tr></table></figure>\n\n<p>反应式表达式有两个重要特性：</p>\n<ul>\n<li><p>它是<strong>惰性</strong>的：在被调用之前，它不会进行任何工作。</p>\n</li>\n<li><p>它是<strong>缓存</strong>的：在第二次及后续调用时，它不会进行任何工作，因为它缓存了之前的结果。</p>\n</li>\n</ul>\n<p>我们将在第<code>14</code>章中再次讨论这些重要特性。</p>\n<h2 id=\"13-3-反应式编程简史\"><a href=\"#13-3-反应式编程简史\" class=\"headerlink\" title=\"13.3 反应式编程简史\"></a>13.3 反应式编程简史</h2><p>如果你想了解更多其他语言的反应式编程知识，那么了解其发展历史可能会有所帮助。你可以在<a href=\"https://en.wikipedia.org/wiki/VisiCalc\">VisiCalc</a>（第一个电子表格软件）中看到反应式编程的萌芽，它起源于40多年前：</p>\n<p>  我想象了一个神奇的黑板，当你擦去一个数字并写入新的东西时，其他所有的数字都会自动改变，就像用数字进行的文字处理一样。</p>\n<p>  ——<a href=\"https://youtu.be/YDvbDiJZpy0\">Dan Bricklin</a></p>\n<p>电子表格与反应式编程密切相关：你使用公式声明单元格之间的关系，当一个单元格发生变化时，其所有依赖项都会自动更新。因此，你可能已经在不知不觉中进行了大量反应式编程！</p>\n<p>虽然反应性的概念已经存在很长时间了，但直到20世纪90年代末，学术界才开始对其进行认真研究。反应式编程的研究始于FRAN（<strong>f</strong>unctional <strong>r</strong>eactive <strong>a</strong>nimation，功能性反应式动画），这是一种将随时间变化和用户输入融入功能编程语言中的新颖系统。这催生了一系列丰富的文献，但对编程实践的影响却很小。</p>\n<p>直到2010年代，反应式编程才通过JavaScript UI框架的快节奏世界进入主流编程领域。像<a href=\"https://knockoutjs.com/\">Knockout</a>、<a href=\"https://emberjs.com/\">Ember</a>和<a href=\"https://www.meteor.com/\">Meteor</a>（Joe Cheng’s personal inspiration for Shiny）这样的开创性框架表明，反应式编程可以极大地简化UI编程。短短几年内，反应式编程通过<a href=\"https://reactjs.org/\">React</a>、<a href=\"https://vuejs.org/\">Vue.js</a>和<a href=\"https://angularjs.org/\">Angular</a>等广受欢迎的框架主导了网络编程，这些框架要么本质上具有反应性，要么设计为与反应式后端协同工作。</p>\n<p>值得一提的是，“反应式编程”是一个相当泛泛的术语。虽然所有反应式编程的库、框架和语言大体上都是关注编写响应值变化的程序，但是它们在术语、设计和实现方面却存在巨大的差异。在本书中，每当提到“反应式编程”时，我们特指在Shiny中实现的反应式编程。因此，如果你阅读了关于反应式编程的资料，而这些资料并不是专门针对Shiny的，那么这些概念甚至术语都不太可能与编写Shiny应用相关。对于那些对其他反应式编程框架有一定经验的读者来说，Shiny的方法与<a href=\"https://www.meteor.com/\">Meteor</a>和<a href=\"https://mobx.js.org/\">MobX</a>类似，与<a href=\"http://reactivex.io/\">ReactiveX</a>系列或任何将自己标记为功能反应式编程的内容有很大不同。</p>\n<h2 id=\"13-4-小结\"><a href=\"#13-4-小结\" class=\"headerlink\" title=\"13.4 小结\"></a>13.4 小结</h2><p>现在你已经理解了为什么需要反应式编程，并且对它的发展历史有了一些了解，接下来的一章将讨论其底层理论的更多细节。最重要的是，你将巩固对反应图的理解，反应图将反应值、反应表达式和观察者连接起来，并精确控制何时运行。</p>\n<h1 id=\"加关注\"><a href=\"#加关注\" class=\"headerlink\" title=\"加关注\"></a>加关注</h1><p>关注公众号“生信之巅”，聊天窗口回复“85d7”获取下载链接。</p>\n<table align=\"center\"><tr>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅微信公众号\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-right: 0px;margin-bottom: 5px;align: center;\"></td>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅小程序码\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-left: 0px;margin-bottom: 5px;align: center\"></td>\n</tr></table>\n\n\n<p><font color=\"#FF0000\"><ruby><b>敬告</b>：使用文中脚本请引用本文网址，请尊重本人的劳动成果，谢谢！<rt><b>Notice</b>: When you use the scripts in this article, please cite the link of this webpage. Thank you!</rt></ruby></font></p>\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"编程","path":"api/tags/编程.json"},{"name":"Shiny入门系列","path":"api/tags/Shiny入门系列.json"}]},{"title":"Shiny从入门到入定——12-Tidy evaluation","slug":"Shiny从入门到入定——12-Tidy-evaluation","date":"2024-04-27T12:58:06.000Z","updated":"2024-04-27T13:00:03.085Z","comments":true,"path":"api/articles/Shiny从入门到入定——12-Tidy-evaluation.json","excerpt":null,"keywords":null,"cover":"https://d33wubrfki0l68.cloudfront.net/2c131334332cadef7ec2b3e3bdf32689f3f1ebc6/f6143/demos/action-tidy/messed-up.png","content":"<h1 id=\"整洁评估\"><a href=\"#整洁评估\" class=\"headerlink\" title=\"整洁评估\"></a>整洁评估</h1><p>如果你在使用Shiny与tidyverse，那么你几乎肯定会遇到整洁评估编程的挑战。整洁评估在tidyverse中被广泛使用，使交互式数据探索更加流畅，但它也有代价：很难间接引用变量，因此编程起来也更加困难。</p>\n<p>在本章中，你将学习如何在Shiny应用程序中包装ggplot2和dplyr函数。（如果你不使用tidyverse，那么可以跳过这一章😄。）将ggplot2和dplyr函数包装在函数和包中的技术略有不同，并且在其他资源如<a href=\"http://ggplot2.tidyverse.org/dev/articles/ggplot2-in-packages.html\">“在包中使用ggplot2”</a>或<a href=\"http://dplyr.tidyverse.org/articles/programming.html\">“使用dplyr编程”</a>中有所涵盖。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>shiny<span class=\"punctuation\">)</span></span><br><span class=\"line\">library<span class=\"punctuation\">(</span>dplyr<span class=\"punctuation\">,</span> warn.conflicts <span class=\"operator\">=</span> <span class=\"literal\">FALSE</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">library<span class=\"punctuation\">(</span>ggplot2<span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"12-1-动机\"><a href=\"#12-1-动机\" class=\"headerlink\" title=\"12.1 动机\"></a>12.1 动机</h2><p>假设我想创建一个应用程序，允许你过滤一个数值变量，以选择大于某个阈值的行。你可能会写出类似这样的代码：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num_vars <span class=\"operator\">&lt;-</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;carat&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;depth&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;table&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;price&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;x&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;y&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;z&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;var&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Variable&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> num_vars<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;min&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Minimum&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;output&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  data <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span>diamonds <span class=\"operator\">%&gt;%</span> filter<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>var <span class=\"operator\">&gt;</span> input<span class=\"operator\">$</span><span class=\"built_in\">min</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>output <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span>head<span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/2c131334332cadef7ec2b3e3bdf32689f3f1ebc6/f6143/demos/action-tidy/messed-up.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/2c131334332cadef7ec2b3e3bdf32689f3f1ebc6/f6143/demos/action-tidy/messed-up.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图12.1 一个应用程序试图选择用户选定变量中大于阈值的行\"></p>\n<p>从<code>图12.1</code>中你可以看到，该应用程序可以无错误地运行，但它并没有返回正确的结果——所有的行中，钻石的净重（<code>carat</code>）值都小于1。本章的目标是帮助你理解为什么这不起作用，以及为什么dplyr认为你请求的是<code>filter(diamonds, &quot;carat&quot; &gt; 1)</code>。</p>\n<p>这是一个<code>间接引用</code>的问题：通常在使用tidyverse函数时，你会直接在函数调用中输入变量的名称。但现在你想要间接引用它：变量（<code>carat</code>）存储在另一个变量（<code>input$var</code>）中。</p>\n<p>这句话可能对你来说很直观，但有点令人困惑，因为我在这里用“变量”来指代两种略有不同的事物。如果我们引入两个新术语来消除这两种用法之间的歧义，那么理解正在发生的事情会更容易：</p>\n<ul>\n<li><p>环境变量（<strong>env-variable</strong>）是一个“编程”变量，你用<code>&lt;-</code>来创建。<code>input$var</code>是一个环境变量。</p>\n</li>\n<li><p>数据变量（<strong>data-variable</strong>）是存储在数据框中的“统计”变量。<code>carat</code>是一个数据变量。</p>\n</li>\n</ul>\n<p>有了这些新术语，我们可以更清楚地阐述间接引用的问题：我们有一个数据变量（<code>carat</code>）存储在一个环境变量（<code>input$var</code>）中，我们需要一种方法来告诉dplyr这一点。根据你所使用的函数是“数据掩蔽”函数还是“整洁选择”函数，实现这一点的方法略有不同。</p>\n<h2 id=\"12-2-数据掩蔽\"><a href=\"#12-2-数据掩蔽\" class=\"headerlink\" title=\"12.2 数据掩蔽\"></a>12.2 数据掩蔽</h2><p>数据掩蔽函数允许你在“当前”数据框中使用变量，而无需任何额外的语法。它在许多dplyr函数（如<a href=\"https://dplyr.tidyverse.org/reference/arrange.html\">arrange()</a>、<a href=\"https://dplyr.tidyverse.org/reference/filter.html\">filter()</a>、<a href=\"https://dplyr.tidyverse.org/reference/group_by.html\">group_by()</a>、<a href=\"https://dplyr.tidyverse.org/reference/mutate.html\">mutate()</a>和<a href=\"https://dplyr.tidyverse.org/reference/summarise.html\">summarise()</a>）以及ggplot2的<a href=\"https://ggplot2.tidyverse.org/reference/aes.html\">aes()</a>中使用。数据掩蔽很有用，因为它允许你使用数据变量，而无需任何额外的语法。</p>\n<h3 id=\"12-2-1-开始\"><a href=\"#12-2-1-开始\" class=\"headerlink\" title=\"12.2.1 开始\"></a>12.2.1 开始</h3><p>让我们从调用<code>filter()</code>函数开始，它使用了一个数据变量（<code>carat</code>）和一个环境变量（<code>min</code>）：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">min</span> <span class=\"operator\">&lt;-</span> 1</span><br><span class=\"line\">diamonds <span class=\"operator\">%&gt;%</span> filter<span class=\"punctuation\">(</span>carat <span class=\"operator\">&gt;</span> <span class=\"built_in\">min</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; # A tibble: 17,502 × 10</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   carat cut       color clarity depth table price     x     y     z</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 1  1.17 Very Good J     I1       60.2    61  2774  6.83  6.9   4.13</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 2  1.01 Premium   F     I1       61.8    60  2781  6.39  6.36  3.94</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 3  1.01 Fair      E     I1       64.5    58  2788  6.29  6.21  4.03</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 4  1.01 Premium   H     SI2      62.7    59  2788  6.31  6.22  3.93</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 5  1.05 Very Good J     SI2      63.2    56  2789  6.49  6.45  4.09</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 6  1.05 Fair      J     SI2      65.8    59  2789  6.41  6.27  4.18</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; # … with 17,496 more rows</span></span><br></pre></td></tr></table></figure>\n\n<p>与基础R的等效代码进行比较：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">diamonds<span class=\"punctuation\">[</span>diamonds<span class=\"operator\">$</span>carat <span class=\"operator\">&gt;</span> <span class=\"built_in\">min</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n<p>在大多数（但不是全部）基础R函数中，你需要使用<code>$</code>来引用数据变量。这意味着你经常需要多次重复数据框的名称，但这确实清楚地表明了什么是数据变量，什么是环境变量。这也使得间接引用变得直接明了，因为你可以将数据变量的名称存储在一个环境变量中，然后从<code>$</code>切换到<code>[[</code>：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var <span class=\"operator\">&lt;-</span> <span class=\"string\">&quot;carat&quot;</span></span><br><span class=\"line\">diamonds<span class=\"punctuation\">[</span>diamonds<span class=\"punctuation\">[[</span>var<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span> <span class=\"operator\">&gt;</span> <span class=\"built_in\">min</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n\n<p>我们如何使用整洁评估来达到相同的效果呢？我们需要一种方法将<code>$</code>重新加入进来。幸运的是，在数据掩蔽函数中，如果你想明确表示你是在谈论数据变量还是环境变量，你可以使用<code>.data</code>或<code>.env</code>：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">diamonds <span class=\"operator\">%&gt;%</span> filter<span class=\"punctuation\">(</span>.data<span class=\"operator\">$</span>carat <span class=\"operator\">&gt;</span> .env<span class=\"operator\">$</span><span class=\"built_in\">min</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n<p>现在我们可以从$切换到[[：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">diamonds <span class=\"operator\">%&gt;%</span> filter<span class=\"punctuation\">(</span>.data<span class=\"punctuation\">[[</span>var<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span> <span class=\"operator\">&gt;</span> .env<span class=\"operator\">$</span><span class=\"built_in\">min</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n<p>让我们通过更新本章开始时使用的服务器函数来检查它是否有效：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num_vars <span class=\"operator\">&lt;-</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;carat&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;depth&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;table&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;price&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;x&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;y&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;z&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;var&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Variable&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> num_vars<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;min&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Minimum&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;output&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  data <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span>diamonds <span class=\"operator\">%&gt;%</span> filter<span class=\"punctuation\">(</span>.data<span class=\"punctuation\">[[</span>input<span class=\"operator\">$</span>var<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span> <span class=\"operator\">&gt;</span> .env<span class=\"operator\">$</span>input<span class=\"operator\">$</span><span class=\"built_in\">min</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>output <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span>head<span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/878d4b65fc1671d180c91732193924ce2f3b3ea8/ca76b/demos/action-tidy/tidied-up.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/878d4b65fc1671d180c91732193924ce2f3b3ea8/ca76b/demos/action-tidy/tidied-up.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图12.2 我们的应用现在运行良好，因为我们明确了.data和.env以及[[与$的区别。请访问https://hadley.shinyapps.io/ms-tidied-up查看实时效果\"></p>\n<p><code>图12.2</code>显示我们已经成功了——我们只看到克拉值大于1的钻石。现在你已经了解了基础知识，我们将开发几个更现实但仍然简单的Shiny应用。</p>\n<h3 id=\"12-2-2-示例：ggplot2\"><a href=\"#12-2-2-示例：ggplot2\" class=\"headerlink\" title=\"12.2.2 示例：ggplot2\"></a>12.2.2 示例：ggplot2</h3><p>让我们将这个想法应用于动态绘图，允许用户通过选择要在<code>x</code>轴和<code>y</code>轴上显示的变量来创建散点图。结果如<code>图12.3</code>所示。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;x&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;X variable&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> <span class=\"built_in\">names</span><span class=\"punctuation\">(</span>iris<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;y&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Y variable&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> <span class=\"built_in\">names</span><span class=\"punctuation\">(</span>iris<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  plotOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;plot&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>plot <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    ggplot<span class=\"punctuation\">(</span>iris<span class=\"punctuation\">,</span> aes<span class=\"punctuation\">(</span>.data<span class=\"punctuation\">[[</span>input<span class=\"operator\">$</span>x<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> .data<span class=\"punctuation\">[[</span>input<span class=\"operator\">$</span>y<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"operator\">+</span></span><br><span class=\"line\">      geom_point<span class=\"punctuation\">(</span>position <span class=\"operator\">=</span> ggforce<span class=\"operator\">::</span>position_auto<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> res <span class=\"operator\">=</span> <span class=\"number\">96</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<tr>\n<td><img src=\"https://d33wubrfki0l68.cloudfront.net/9defdeb8a9d4c779898f02f540feb95283b62c65/23a54/demos/action-tidy/ggplot2-scatter.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/9defdeb8a9d4c779898f02f540feb95283b62c65/23a54/demos/action-tidy/ggplot2-scatter.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\"></td>\n<td><img src=\"https://d33wubrfki0l68.cloudfront.net/74cf9f3e211b5f2430a03a5c960da0ab63a1e29e/41abe/demos/action-tidy/ggplot2-swarm.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/74cf9f3e211b5f2430a03a5c960da0ab63a1e29e/41abe/demos/action-tidy/ggplot2-swarm.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\"></td>\n</tr>\n<tr>\n<td colspan=\"2\">图12.3 一个简单的应用程序，允许您选择要在x轴和y轴上绘制的变量。请访问<a href=\"https://hadley.shinyapps.io/ms-ggplot2\">https://hadley.shinyapps.io/ms-ggplot2</a>查看实时效果</td>\n</tr>\n</table>\n\n<p>这里我使用了<a href=\"https://ggforce.data-imaginist.com/reference/position_auto.html\">ggforce::position_auto()</a>，这样无论x和y变量是连续的还是离散的，<a href=\"https://ggplot2.tidyverse.org/reference/geom_point.html\">geom_point()</a>都能很好地工作。或者，我们也可以让用户选择geom。下面的应用程序使用<a href=\"https://rdrr.io/r/base/switch.html\">switch()</a>语句生成一个反应性的geom，稍后会将其添加到图中。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;x&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;X variable&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> <span class=\"built_in\">names</span><span class=\"punctuation\">(</span>iris<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;y&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Y variable&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> <span class=\"built_in\">names</span><span class=\"punctuation\">(</span>iris<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;geom&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;geom&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;point&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;smooth&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;jitter&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  plotOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;plot&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  plot_geom <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"built_in\">switch</span><span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>geom<span class=\"punctuation\">,</span></span><br><span class=\"line\">      point <span class=\"operator\">=</span> geom_point<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      smooth <span class=\"operator\">=</span> geom_smooth<span class=\"punctuation\">(</span>se <span class=\"operator\">=</span> <span class=\"literal\">FALSE</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      jitter <span class=\"operator\">=</span> geom_jitter<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>plot <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    ggplot<span class=\"punctuation\">(</span>iris<span class=\"punctuation\">,</span> aes<span class=\"punctuation\">(</span>.data<span class=\"punctuation\">[[</span>input<span class=\"operator\">$</span>x<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> .data<span class=\"punctuation\">[[</span>input<span class=\"operator\">$</span>y<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"operator\">+</span></span><br><span class=\"line\">      plot_geom<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> res <span class=\"operator\">=</span> <span class=\"number\">96</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>这是使用用户选择的变量进行编程时面临的挑战之一：你的代码必须变得更加复杂，以处理用户可能生成的所有情况。</p>\n<h3 id=\"12-2-3-示例：dplyr\"><a href=\"#12-2-3-示例：dplyr\" class=\"headerlink\" title=\"12.2.3 示例：dplyr\"></a>12.2.3 示例：dplyr</h3><p>同样的技术也适用于dplyr。下面的应用程序扩展了前面简单的示例，允许您选择一个变量进行过滤，选择一个最小值进行选择，以及选择一个变量进行排序。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;var&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Select variable&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> <span class=\"built_in\">names</span><span class=\"punctuation\">(</span>mtcars<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;min&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Minimum value&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">100</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;sort&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Sort by&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> <span class=\"built_in\">names</span><span class=\"punctuation\">(</span>mtcars<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;data&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>var<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    rng <span class=\"operator\">&lt;-</span> <span class=\"built_in\">range</span><span class=\"punctuation\">(</span>mtcars<span class=\"punctuation\">[[</span>input<span class=\"operator\">$</span>var<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    updateSliderInput<span class=\"punctuation\">(</span></span><br><span class=\"line\">      session<span class=\"punctuation\">,</span> <span class=\"string\">&quot;min&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">      value <span class=\"operator\">=</span> rng<span class=\"punctuation\">[[</span><span class=\"number\">1</span><span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">      <span class=\"built_in\">min</span> <span class=\"operator\">=</span> rng<span class=\"punctuation\">[[</span><span class=\"number\">1</span><span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">      <span class=\"built_in\">max</span> <span class=\"operator\">=</span> rng<span class=\"punctuation\">[[</span><span class=\"number\">2</span><span class=\"punctuation\">]</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>data <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    mtcars <span class=\"operator\">%&gt;%</span> </span><br><span class=\"line\">      filter<span class=\"punctuation\">(</span>.data<span class=\"punctuation\">[[</span>input<span class=\"operator\">$</span>var<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span> <span class=\"operator\">&gt;</span> input<span class=\"operator\">$</span><span class=\"built_in\">min</span><span class=\"punctuation\">)</span> <span class=\"operator\">%&gt;%</span> </span><br><span class=\"line\">      arrange<span class=\"punctuation\">(</span>.data<span class=\"punctuation\">[[</span>input<span class=\"operator\">$</span>sort<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/4b67467c8ad6e40cb3fffad24222564bf4858788/ae5b1/demos/action-tidy/dplyr.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/4b67467c8ad6e40cb3fffad24222564bf4858788/ae5b1/demos/action-tidy/dplyr.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图12.4 一个简单的应用程序，允许您选择一个变量作为阈值，并选择如何对结果进行排序。请访问https://hadley.shinyapps.io/ms-dplyr/查看实时效果\"></p>\n<p>大多数其他问题都可以通过结合<code>.data</code>和您的现有编程技能来解决。例如，如果您想要条件性地以升序或降序进行排序，应该怎么做呢？</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;var&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Sort by&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> <span class=\"built_in\">names</span><span class=\"punctuation\">(</span>mtcars<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  checkboxInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;desc&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Descending order?&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;data&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  sorted <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>desc<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      arrange<span class=\"punctuation\">(</span>mtcars<span class=\"punctuation\">,</span> desc<span class=\"punctuation\">(</span>.data<span class=\"punctuation\">[[</span>input<span class=\"operator\">$</span>var<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span> <span class=\"keyword\">else</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      arrange<span class=\"punctuation\">(</span>mtcars<span class=\"punctuation\">,</span> .data<span class=\"punctuation\">[[</span>input<span class=\"operator\">$</span>var<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>data <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span>sorted<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>随着你提供更多控制选项，你会发现代码变得越来越复杂，同时创建一个既全面又友好的用户界面也变得越来越难。这就是为什么我一直专注于数据分析的代码工具：创建好的用户界面真的非常难！</p>\n<h3 id=\"12-2-4-用户提供的数据\"><a href=\"#12-2-4-用户提供的数据\" class=\"headerlink\" title=\"12.2.4 用户提供的数据\"></a>12.2.4 用户提供的数据</h3><p>在继续讨论整洁选择之前，我们还需要讨论最后一个话题：用户提供的数据。以<code>图12.5</code>中显示的这个应用程序为例：它允许用户上传一个tsv文件，然后选择一个变量并根据该变量进行筛选。它适用于绝大多数你可能会尝试的输入。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  fileInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;data&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;dataset&quot;</span><span class=\"punctuation\">,</span> accept <span class=\"operator\">=</span> <span class=\"string\">&quot;.tsv&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;var&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;var&quot;</span><span class=\"punctuation\">,</span> character<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;min&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;min&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> step <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;output&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  data <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    req<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>data<span class=\"punctuation\">)</span></span><br><span class=\"line\">    vroom<span class=\"operator\">::</span>vroom<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>data<span class=\"operator\">$</span>datapath<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    updateSelectInput<span class=\"punctuation\">(</span>session<span class=\"punctuation\">,</span> <span class=\"string\">&quot;var&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> <span class=\"built_in\">names</span><span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>var<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    val <span class=\"operator\">&lt;-</span> data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">[[</span>input<span class=\"operator\">$</span>var<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">    updateNumericInput<span class=\"punctuation\">(</span>session<span class=\"punctuation\">,</span> <span class=\"string\">&quot;min&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"built_in\">min</span><span class=\"punctuation\">(</span>val<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>output <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    req<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>var<span class=\"punctuation\">)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">%&gt;%</span> </span><br><span class=\"line\">      filter<span class=\"punctuation\">(</span>.data<span class=\"punctuation\">[[</span>input<span class=\"operator\">$</span>var<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span> <span class=\"operator\">&gt;</span> input<span class=\"operator\">$</span><span class=\"built_in\">min</span><span class=\"punctuation\">)</span> <span class=\"operator\">%&gt;%</span> </span><br><span class=\"line\">      arrange<span class=\"punctuation\">(</span>.data<span class=\"punctuation\">[[</span>input<span class=\"operator\">$</span>var<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">)</span> <span class=\"operator\">%&gt;%</span> </span><br><span class=\"line\">      head<span class=\"punctuation\">(</span><span class=\"number\">10</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/a2b57fbb1d8a118a0410942708a051e92355b7a6/a504d/demos/action-tidy/user-supplied.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/a2b57fbb1d8a118a0410942708a051e92355b7a6/a504d/demos/action-tidy/user-supplied.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图12.5 一个过滤用户提供的数据的应用程序，具有令人惊讶的故障模式。请访问https://hadley.shinyapps.io/ms-user-supplied/查看实时效果\"></p>\n<p>这里使用<a href=\"https://dplyr.tidyverse.org/reference/filter.html\">filter()</a>有一个微妙的问题。让我们把对<code>filter()</code>的调用提取出来，这样我们就可以在应用程序之外直接操作它：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df <span class=\"operator\">&lt;-</span> data.frame<span class=\"punctuation\">(</span>x <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span> y <span class=\"operator\">=</span> <span class=\"number\">2</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">input <span class=\"operator\">&lt;-</span> <span class=\"built_in\">list</span><span class=\"punctuation\">(</span>var <span class=\"operator\">=</span> <span class=\"string\">&quot;x&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">df <span class=\"operator\">%&gt;%</span> filter<span class=\"punctuation\">(</span>.data<span class=\"punctuation\">[[</span>input<span class=\"operator\">$</span>var<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span> <span class=\"operator\">&gt;</span> input<span class=\"operator\">$</span><span class=\"built_in\">min</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   x y</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 1 1 2</span></span><br></pre></td></tr></table></figure>\n\n<p>如果你试验这段代码，你会发现它对于绝大多数数据框都能很好地工作。然而，有一个微妙的问题：如果数据框中包含一个名为<code>input</code>的变量，会发生什么？</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df <span class=\"operator\">&lt;-</span> data.frame<span class=\"punctuation\">(</span>x <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span> y <span class=\"operator\">=</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span> input <span class=\"operator\">=</span> <span class=\"number\">3</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">df <span class=\"operator\">%&gt;%</span> filter<span class=\"punctuation\">(</span>.data<span class=\"punctuation\">[[</span>input<span class=\"operator\">$</span>var<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span> <span class=\"operator\">&gt;</span> input<span class=\"operator\">$</span><span class=\"built_in\">min</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; Error in `filter()`:</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; ! Problem while computing `..1 = .data[[&quot;x&quot;]] &gt; input$min`.</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; Caused by error in `input$min`:</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; ! $ operator is invalid for atomic vectors</span></span><br></pre></td></tr></table></figure>\n\n<p>我们收到一条错误信息，因为<code>filter()</code>正在尝试计算<code>df$input$min</code>：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df<span class=\"operator\">$</span>input<span class=\"operator\">$</span><span class=\"built_in\">min</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; Error in df$input$min: $ operator is invalid for atomic vectors</span></span><br></pre></td></tr></table></figure>\n\n<p>这个问题是由于数据变量和环境变量的歧义造成的，并且在两者都可用时，数据掩蔽更倾向于使用数据变量。我们可以通过使用<code>.env</code>来告诉<code>filter()</code>只在环境变量中查找<code>min</code>来解决这个问题：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df <span class=\"operator\">%&gt;%</span> filter<span class=\"punctuation\">(</span>.data<span class=\"punctuation\">[[</span>input<span class=\"operator\">$</span>var<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span> <span class=\"operator\">&gt;</span> .env<span class=\"operator\">$</span>input<span class=\"operator\">$</span><span class=\"built_in\">min</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   x y input</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 1 1 2     3</span></span><br></pre></td></tr></table></figure>\n\n<p>请注意，这个问题只有在处理用户提供的数据时才需要考虑；在处理自己的数据时，你可以确保数据变量的名称不会与环境变量的名称冲突（如果不小心冲突了，你会立刻发现）。</p>\n<h3 id=\"12-2-5-为什么不使用基础R？\"><a href=\"#12-2-5-为什么不使用基础R？\" class=\"headerlink\" title=\"12.2.5 为什么不使用基础R？\"></a>12.2.5 为什么不使用基础R？</h3><p>到这时，你可能会想，如果没有<code>filter()</code>函数，使用等效的基础R代码会不会更好？</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df<span class=\"punctuation\">[</span>df<span class=\"punctuation\">[[</span>input<span class=\"operator\">$</span>var<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span> <span class=\"operator\">&gt;</span> input<span class=\"operator\">$</span><span class=\"built_in\">min</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   x y input</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 1 1 2     3</span></span><br></pre></td></tr></table></figure>\n\n<p>这是一个完全合理的立场，只要你意识到<code>filter()</code>为你做的工作，以便你能生成等效的基础R代码。在这种情况下：</p>\n<ul>\n<li><p>如果df只包含一列，你需要使用<code>drop = FALSE</code>（否则你会得到一个向量而不是数据框）。</p>\n</li>\n<li><p>你需要使用<a href=\"https://rdrr.io/r/base/which.html\">which()</a>或类似函数来删除任何缺失值。</p>\n</li>\n<li><p>你不能进行分组过滤（例如，<code>df %&gt;% group_by(g) %&gt;% filter(n() == 1)</code>）。</p>\n</li>\n</ul>\n<p>一般来说，如果你只是使用dplyr来处理非常简单的案例，你可能会发现使用不使用数据掩蔽的基础R函数更容易。然而，在我看来，tidyverse的一个优势在于它仔细考虑了边缘情况，以便函数能更一致地工作。我不想夸大这一点，但同时，很容易忘记特定基础R函数的怪癖，并编写出95%以上时间都能工作，但在另外5%的时间里会以不寻常的方式失败的代码。</p>\n<h2 id=\"12-3-整洁选择-Tidy-selection\"><a href=\"#12-3-整洁选择-Tidy-selection\" class=\"headerlink\" title=\"12.3 整洁选择 Tidy-selection\"></a>12.3 整洁选择 Tidy-selection</h2><p>除了数据掩蔽之外，整洁评估还有一个重要的部分：整洁选择。整洁选择提供了一种简洁的方式来通过位置、名称或类型选择列。它在<a href=\"https://dplyr.tidyverse.org/reference/select.html\">dplyr::select()</a>和<a href=\"https://dplyr.tidyverse.org/reference/across.html\">dplyr::across()</a>以及tidyr中的许多函数（如<a href=\"https://tidyr.tidyverse.org/reference/pivot_longer.html\">pivot_longer()</a>、<a href=\"https://tidyr.tidyverse.org/reference/pivot_wider.html\">pivot_wider()</a>、<a href=\"https://tidyr.tidyverse.org/reference/separate.html\">separate()</a>、<a href=\"https://tidyr.tidyverse.org/reference/extract.html\">extract()</a>和<a href=\"https://tidyr.tidyverse.org/reference/unite.html\">unite()</a>）中使用。</p>\n<h3 id=\"12-3-1-间接引用\"><a href=\"#12-3-1-间接引用\" class=\"headerlink\" title=\"12.3.1 间接引用\"></a>12.3.1 间接引用</h3><p>要间接引用变量，可以使用<a href=\"https://tidyselect.r-lib.org/reference/all_of.html\">any_of()</a>或<a href=\"https://tidyselect.r-lib.org/reference/all_of.html\">all_of()</a>：两者都期望一个包含数据变量名称的字符向量作为环境变量。唯一的区别是，如果你提供了一个在输入中不存在的变量名，<code>all_of()</code>会引发错误，而<code>any_of()</code>则会静默地忽略它。</p>\n<p>例如，以下应用程序允许用户使用多选输入选择任意数量的变量，同时使用<code>all_of()</code>：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;vars&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Variables&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">names</span><span class=\"punctuation\">(</span>mtcars<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> multiple <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;data&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>data <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    req<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>vars<span class=\"punctuation\">)</span></span><br><span class=\"line\">    mtcars <span class=\"operator\">%&gt;%</span> select<span class=\"punctuation\">(</span>all_of<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>vars<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12-3-2-整洁选择与数据掩蔽\"><a href=\"#12-3-2-整洁选择与数据掩蔽\" class=\"headerlink\" title=\"12.3.2 整洁选择与数据掩蔽\"></a>12.3.2 整洁选择与数据掩蔽</h3><p>当使用采用整洁选择的函数时，处理多个变量变得轻而易举：您只需将包含变量名的字符向量传递给<code>any_of()</code>或<code>all_of()</code>。如果我们也能在数据掩蔽函数中使用这种方法，那该有多好？这正是dplyr 1.0.0版本中添加的<a href=\"https://dplyr.tidyverse.org/reference/across.html\">across()</a>函数的设计理念。它允许您在数据掩蔽函数中使用整洁选择。</p>\n<p><code>across()</code>函数通常使用一个或两个参数。第一个参数用于选择变量，在<a href=\"https://dplyr.tidyverse.org/reference/group_by.html\">group_by()</a>或<a href=\"https://dplyr.tidyverse.org/reference/distinct.html\">distinct()</a>等函数中非常有用。例如，以下应用程序允许您选择任意数量的变量并计算它们的唯一值数量。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;vars&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Variables&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">names</span><span class=\"punctuation\">(</span>mtcars<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> multiple <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;count&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>count <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    req<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>vars<span class=\"punctuation\">)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    mtcars <span class=\"operator\">%&gt;%</span> </span><br><span class=\"line\">      group_by<span class=\"punctuation\">(</span>across<span class=\"punctuation\">(</span>all_of<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>vars<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"operator\">%&gt;%</span> </span><br><span class=\"line\">      summarise<span class=\"punctuation\">(</span>n <span class=\"operator\">=</span> n<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> .groups <span class=\"operator\">=</span> <span class=\"string\">&quot;drop&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/20b7acd57783cbc15cf0d64d8964bba1e093ba06/1c155/demos/action-tidy/across.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/20b7acd57783cbc15cf0d64d8964bba1e093ba06/1c155/demos/action-tidy/across.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图12.6 此应用程序允许您选择任意数量的变量，并计算它们的唯一组合数量。请访问https://hadley.shinyapps.io/ms-across实时查看\"></p>\n<p>第二个参数是一个函数（或函数列表），应用于每个选定的列。这使得它非常适合<a href=\"https://dplyr.tidyverse.org/reference/mutate.html\">mutate()</a>和<a href=\"https://dplyr.tidyverse.org/reference/summarise.html\">summarise()</a>等函数，因为您通常想要以某种方式转换每个变量。例如，以下代码允许用户选择任意数量的分组变量，以及任意数量的变量，以计算它们的平均值进行汇总。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;vars_g&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Group by&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">names</span><span class=\"punctuation\">(</span>mtcars<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> multiple <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;vars_s&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Summarise&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">names</span><span class=\"punctuation\">(</span>mtcars<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> multiple <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;data&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>data <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    mtcars <span class=\"operator\">%&gt;%</span> </span><br><span class=\"line\">      group_by<span class=\"punctuation\">(</span>across<span class=\"punctuation\">(</span>all_of<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>vars_g<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"operator\">%&gt;%</span> </span><br><span class=\"line\">      summarise<span class=\"punctuation\">(</span>across<span class=\"punctuation\">(</span>all_of<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>vars_s<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> mean<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> n <span class=\"operator\">=</span> n<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"12-4-parse-eval\"><a href=\"#12-4-parse-eval\" class=\"headerlink\" title=\"12.4 parse() + eval()\"></a>12.4 parse() + eval()</h2><p>在我们继续之前，有必要对<a href=\"https://rdrr.io/r/base/paste.html\">paste()</a> + <a href=\"https://rdrr.io/r/base/parse.html\">parse()</a> + <a href=\"https://rdrr.io/r/base/eval.html\">eval()</a>组合进行简短的评论。如果你完全不了解这个组合，可以跳过这一节，但如果你已经使用过它，我想给你一个小小的警告。</p>\n<p>这是一个诱人的方法，因为它只需要学习很少的新概念。但它也有一些主要的缺点：由于你正在将字符串拼接在一起，很容易意外地创建出无效的代码，或者可能被滥用以执行你不希望的操作的代码。如果这只是你自己使用的Shiny应用程序，这可能不是非常重要，但这并不是一个值得养成的好习惯——否则，很容易在你广泛分享的应用程序中意外地创建一个安全漏洞。我们将在第<code>22章</code>中再次提及这个观点。</p>\n<p>（如果你发现这是解决问题的唯一方法，不必感到沮丧。但当你有了更多的思考空间时，我建议花些时间弄清楚如何在不进行字符串操作的情况下实现。这将有助于你成为一名更好的R程序员。）</p>\n<h2 id=\"12-5-总结\"><a href=\"#12-5-总结\" class=\"headerlink\" title=\"12.5 总结\"></a>12.5 总结</h2><p>在本章中，你学习了如何创建Shiny应用程序，让用户选择将哪些变量输入到如<a href=\"https://dplyr.tidyverse.org/reference/filter.html\">dplyr::filter()</a>和<a href=\"https://ggplot2.tidyverse.org/reference/aes.html\">ggplot2::aes()</a>这样的tidyverse函数中。这需要你理解一个你之前可能从未考虑过的关键区别：数据变量和环境变量的不同。这可能需要一些练习才能变得自然，但一旦你掌握了这些概念，你就能够解锁tidyverse的数据分析功能，并将其暴露给非R用户。</p>\n<p>这是本书<code>“Shiny实战”</code>部分的最后一章。既然你已经拥有了制作一系列有用应用程序所需的工具，我将重点提高你对Shiny底层理论的理解。</p>\n<h1 id=\"加关注\"><a href=\"#加关注\" class=\"headerlink\" title=\"加关注\"></a>加关注</h1><table align=\"center\"><tr>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅微信公众号\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-right: 0px;margin-bottom: 5px;align: center;\"></td>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅小程序码\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-left: 0px;margin-bottom: 5px;align: center\"></td>\n</tr></table>\n\n\n<p><font color=\"#FF0000\"><ruby><b>敬告</b>：使用文中脚本请引用本文网址，请尊重本人的劳动成果，谢谢！<rt><b>Notice</b>: When you use the scripts in this article, please cite the link of this webpage. Thank you!</rt></ruby></font></p>\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"编程","path":"api/tags/编程.json"},{"name":"Shiny入门系列","path":"api/tags/Shiny入门系列.json"}]},{"title":"Shiny从入门到入定——11-书签","slug":"Shiny从入门到入定——11-书签","date":"2024-04-27T09:53:52.000Z","updated":"2024-04-27T09:55:47.969Z","comments":true,"path":"api/articles/Shiny从入门到入定——11-书签.json","excerpt":null,"keywords":null,"cover":"https://d33wubrfki0l68.cloudfront.net/6ad93d80475f1ebc6d632c1293f210174da9b9d6/f576b/demos/action-bookmark/pendulum.png","content":"<h1 id=\"11-书签\"><a href=\"#11-书签\" class=\"headerlink\" title=\"11 书签\"></a>11 书签</h1><p>与大多数网站相比，Shiny应用程序有一个主要的缺点：您无法为应用程序添加书签以便将来返回同一位置，也无法通过电子邮件中的链接与他人分享您的工作。这是因为，默认情况下，Shiny不会在URL中公开应用程序的当前状态。然而，幸运的是，通过一些额外的工作，您可以更改此行为，本章将向您展示如何操作。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>shiny<span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"11-1-基本思路\"><a href=\"#11-1-基本思路\" class=\"headerlink\" title=\"11.1 基本思路\"></a>11.1 基本思路</h2><p>让我们用一个简单的应用程序来演示如何使其具有书签功能。这个应用程序绘制了利萨茹曲线，这些曲线复制了摆锤的运动。这个应用程序可以生成各种有趣的图案，您可能想要与他人分享。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  sidebarLayout<span class=\"punctuation\">(</span></span><br><span class=\"line\">    sidebarPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;omega&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;omega&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"operator\">-</span><span class=\"number\">2</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span> step <span class=\"operator\">=</span> <span class=\"number\">0.01</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;delta&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;delta&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span> step <span class=\"operator\">=</span> <span class=\"number\">0.01</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;damping&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;damping&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0.9</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span> step <span class=\"operator\">=</span> <span class=\"number\">0.001</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;length&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;length&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">100</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    mainPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      plotOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;fig&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  t <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span>seq<span class=\"punctuation\">(</span><span class=\"number\">0</span><span class=\"punctuation\">,</span> input<span class=\"operator\">$</span><span class=\"built_in\">length</span><span class=\"punctuation\">,</span> length.out <span class=\"operator\">=</span> input<span class=\"operator\">$</span><span class=\"built_in\">length</span> <span class=\"operator\">*</span> <span class=\"number\">100</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  x <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"built_in\">sin</span><span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>omega <span class=\"operator\">*</span> t<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">+</span> input<span class=\"operator\">$</span>delta<span class=\"punctuation\">)</span> <span class=\"operator\">*</span> input<span class=\"operator\">$</span>damping <span class=\"operator\">^</span> t<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  y <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"built_in\">sin</span><span class=\"punctuation\">(</span>t<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"operator\">*</span> input<span class=\"operator\">$</span>damping <span class=\"operator\">^</span> t<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>fig <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    plot<span class=\"punctuation\">(</span>x<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> y<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> axes <span class=\"operator\">=</span> <span class=\"literal\">FALSE</span><span class=\"punctuation\">,</span> xlab <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span> ylab <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span> type <span class=\"operator\">=</span> <span class=\"string\">&quot;l&quot;</span><span class=\"punctuation\">,</span> lwd <span class=\"operator\">=</span> <span class=\"number\">2</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> res <span class=\"operator\">=</span> <span class=\"number\">96</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/6ad93d80475f1ebc6d632c1293f210174da9b9d6/f576b/demos/action-bookmark/pendulum.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/6ad93d80475f1ebc6d632c1293f210174da9b9d6/f576b/demos/action-bookmark/pendulum.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图11.1 这个应用程序允许您使用摆锤模型生成有趣的图案。如果能和朋友分享一个链接，岂不是很酷？\"></p>\n<p>为了使这个应用程序具有书签功能，我们需要做三件事情：</p>\n<ol>\n<li><p>在用户界面中添加一个<a href=\"https://rdrr.io/pkg/shiny/man/bookmarkButton.html\">bookmarkButton()</a>。这将生成一个按钮，用户点击后生成可书签的URL。</p>\n</li>\n<li><p>将ui变为一个函数。您需要这样做是因为书签化的应用程序必须重新播放书签化的值：实际上，Shiny会修改每个输入控件的默认<code>value</code>。这意味着不再有一个单一的静态用户界面，而是可能有多个依赖于URL中参数的用户界面，因此它必须是一个函数。</p>\n</li>\n<li><p>在<a href=\"https://rdrr.io/pkg/shiny/man/shinyApp.html\">shinyApp()</a>调用中添加<code>enableBookmarking = &quot;url&quot;</code>。</p>\n</li>\n</ol>\n<p>进行这些更改后，我们得到：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>request<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">    sidebarLayout<span class=\"punctuation\">(</span></span><br><span class=\"line\">      sidebarPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">        sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;omega&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;omega&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"operator\">-</span><span class=\"number\">2</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span> step <span class=\"operator\">=</span> <span class=\"number\">0.01</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;delta&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;delta&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span> step <span class=\"operator\">=</span> <span class=\"number\">0.01</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;damping&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;damping&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0.9</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span> step <span class=\"operator\">=</span> <span class=\"number\">0.001</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;length&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;length&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">100</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        bookmarkButton<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">      <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      mainPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">        plotOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;fig&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">      <span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shinyApp<span class=\"punctuation\">(</span>ui<span class=\"punctuation\">,</span> server<span class=\"punctuation\">,</span> enableBookmarking <span class=\"operator\">=</span> <span class=\"string\">&quot;url&quot;</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>您可以在<a href=\"https://hadley.shinyapps.io/ms-bookmark-url\">https://hadley.shinyapps.io/ms-bookmark-url</a>尝试一下。如果您在应用程序中操作并书签了一些有趣的状态，您会发现生成的URL看起来像这样：</p>\n<ul>\n<li><p><a href=\"https://hadley.shinyapps.io/ms-bookmark-url/?_inputs_&damping=1&delta=1&length=100&omega=1\">https://hadley.shinyapps.io/ms-bookmark-url/?_inputs_&amp;damping=1&amp;delta=1&amp;length=100&amp;omega=1</a></p>\n</li>\n<li><p><a href=\"https://hadley.shinyapps.io/ms-bookmark-url/?_inputs_&damping=0.966&delta=1.25&length=100&omega=-0.54\">https://hadley.shinyapps.io/ms-bookmark-url/?_inputs_&amp;damping=0.966&amp;delta=1.25&amp;length=100&amp;omega=-0.54</a></p>\n</li>\n<li><p><a href=\"https://hadley.shinyapps.io/ms-bookmark-url/?_inputs_&damping=0.997&delta=1.37&length=500&omega=-0.9\">https://hadley.shinyapps.io/ms-bookmark-url/?_inputs_&amp;damping=0.997&amp;delta=1.37&amp;length=500&amp;omega=-0.9</a></p>\n</li>\n</ul>\n<p>为了理解发生了什么，让我们以第一个URL为例，将其分解成几个部分：</p>\n<ul>\n<li><p><code>http://</code> 是与应用程序通信时使用的“协议”。这始终是<code>http</code>或<code>https</code>。</p>\n</li>\n<li><p><code>hadley.shinyapps.io/ms-bookmark-url</code> 是应用程序的位置。</p>\n</li>\n</ul>\n<p>问号<code>?</code>之后的所有内容都是“参数”。每个参数之间用<code>&amp;</code>分隔，如果将其分解，您可以看到应用程序中每个输入的值：</p>\n<ul>\n<li><p>damping&#x3D;1</p>\n</li>\n<li><p>delta&#x3D;1</p>\n</li>\n<li><p>length&#x3D;100</p>\n</li>\n<li><p>omega&#x3D;1</p>\n</li>\n</ul>\n<p>因此，“生成书签”意味着在URL的参数中记录输入的当前值。如果您在本地进行操作，URL看起来会略有不同：</p>\n<ul>\n<li><p><a href=\"http://127.0.0.1:4087/?_inputs_&damping=1&delta=1&length=100&omega=1\">http://127.0.0.1:4087/?_inputs_&amp;damping=1&amp;delta=1&amp;length=100&amp;omega=1</a></p>\n</li>\n<li><p><a href=\"http://127.0.0.1:4087/?_inputs_&damping=0.966&delta=1.25&length=100&omega=-0.54\">http://127.0.0.1:4087/?_inputs_&amp;damping=0.966&amp;delta=1.25&amp;length=100&amp;omega=-0.54</a></p>\n</li>\n<li><p><a href=\"http://127.0.0.1:4087/?_inputs_&damping=0.997&delta=1.37&length=500&omega=-0.9\">http://127.0.0.1:4087/?_inputs_&amp;damping=0.997&amp;delta=1.37&amp;length=500&amp;omega=-0.9</a></p>\n</li>\n</ul>\n<p>除了将<code>hadley.shinyapps.io/ms-bookmark-url</code>替换为类似<code>127.0.0.1:4087</code>的内容外，大多数部分都是相同的。<code>127.0.0.1</code>是一个特殊地址，始终指向您自己的计算机，而<code>4087</code>是一个随机分配的端口。通常，不同的应用程序会获得不同的路径或IP地址，但如果您在自己的计算机上托管多个应用程序，则无法做到这一点。</p>\n<h3 id=\"11-1-1-更新URL\"><a href=\"#11-1-1-更新URL\" class=\"headerlink\" title=\"11.1.1 更新URL\"></a>11.1.1 更新URL</h3><p>除了提供一个明确的按钮外，另一种选择是自动更新浏览器中的URL。这允许用户在其浏览器中使用用户书签命令，或者从地址栏复制和粘贴URL。</p>\n<p>自动更新URL需要在服务器函数中编写一些模板代码：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Automatically bookmark every time an input changes</span></span><br><span class=\"line\">observe<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  reactiveValuesToList<span class=\"punctuation\">(</span>input<span class=\"punctuation\">)</span></span><br><span class=\"line\">  session<span class=\"operator\">$</span>doBookmark<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\"># Update the query string</span></span><br><span class=\"line\">onBookmarked<span class=\"punctuation\">(</span>updateQueryString<span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>这给我们提供了一个更新后的服务器函数，如下所示：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  t <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span>seq<span class=\"punctuation\">(</span><span class=\"number\">0</span><span class=\"punctuation\">,</span> input<span class=\"operator\">$</span><span class=\"built_in\">length</span><span class=\"punctuation\">,</span> <span class=\"built_in\">length</span> <span class=\"operator\">=</span> input<span class=\"operator\">$</span><span class=\"built_in\">length</span> <span class=\"operator\">*</span> <span class=\"number\">100</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  x <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"built_in\">sin</span><span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>omega <span class=\"operator\">*</span> t<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">+</span> input<span class=\"operator\">$</span>delta<span class=\"punctuation\">)</span> <span class=\"operator\">*</span> input<span class=\"operator\">$</span>damping <span class=\"operator\">^</span> t<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  y <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"built_in\">sin</span><span class=\"punctuation\">(</span>t<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"operator\">*</span> input<span class=\"operator\">$</span>damping <span class=\"operator\">^</span> t<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  output<span class=\"operator\">$</span>fig <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    plot<span class=\"punctuation\">(</span>x<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> y<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> axes <span class=\"operator\">=</span> <span class=\"literal\">FALSE</span><span class=\"punctuation\">,</span> xlab <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span> ylab <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span> type <span class=\"operator\">=</span> <span class=\"string\">&quot;l&quot;</span><span class=\"punctuation\">,</span> lwd <span class=\"operator\">=</span> <span class=\"number\">2</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> res <span class=\"operator\">=</span> <span class=\"number\">96</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  observe<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    reactiveValuesToList<span class=\"punctuation\">(</span>input<span class=\"punctuation\">)</span></span><br><span class=\"line\">    session<span class=\"operator\">$</span>doBookmark<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  onBookmarked<span class=\"punctuation\">(</span>updateQueryString<span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shinyApp<span class=\"punctuation\">(</span>ui<span class=\"punctuation\">,</span> server<span class=\"punctuation\">,</span> enableBookmarking <span class=\"operator\">=</span> <span class=\"string\">&quot;url&quot;</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>这会产生<a href=\"https://hadley.shinyapps.io/ms-bookmark-auto\">https://hadley.shinyapps.io/ms-bookmark-auto</a>——由于URL现在会自动更新，您可以从用户界面中删除书签按钮。</p>\n<h3 id=\"11-1-2-存储更丰富的状态\"><a href=\"#11-1-2-存储更丰富的状态\" class=\"headerlink\" title=\"11.1.2 存储更丰富的状态\"></a>11.1.2 存储更丰富的状态</h3><p>到目前为止，我们使用了<code>enableBookmarking = &quot;url&quot;</code>，它直接在URL中存储状态。这是一个很好的起点，因为它非常简单，可以在您可能部署Shiny应用的任何地方工作。然而，可以想象，如果您有大量的输入，URL会变得非常长，而且显然无法捕获上传的文件。</p>\n<p>对于这些情况，您可能想要使用<code>enableBookmarking = &quot;server&quot;</code>，它将状态保存到服务器上的<code>.rds</code>文件。这总是生成一个简短的、不透明的URL，但需要在服务器上额外存储。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shinyApp<span class=\"punctuation\">(</span>ui<span class=\"punctuation\">,</span> server<span class=\"punctuation\">,</span> enableBookmarking <span class=\"operator\">=</span> <span class=\"string\">&quot;server&quot;</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>目前，shinyapps.io尚不支持服务器端书签，因此您需要在本地尝试。如果您这样做，您会看到书签按钮生成类似以下的URL：</p>\n<ul>\n<li><p><a href=\"http://127.0.0.1:4087/?_state_id_=0d645f1b28f05c97\">http://127.0.0.1:4087/?_state_id_=0d645f1b28f05c97</a></p>\n</li>\n<li><p><a href=\"http://127.0.0.1:4087/?_state_id_=87b56383d8a1062c\">http://127.0.0.1:4087/?_state_id_=87b56383d8a1062c</a></p>\n</li>\n<li><p><a href=\"http://127.0.0.1:4087/?_state_id_=c8b0291ba622b69c\">http://127.0.0.1:4087/?_state_id_=c8b0291ba622b69c</a></p>\n</li>\n</ul>\n<p>这些URL与您工作目录中匹配的目录配对：</p>\n<ul>\n<li><p>shiny_bookmarks&#x2F;0d645f1b28f05c97</p>\n</li>\n<li><p>shiny_bookmarks&#x2F;87b56383d8a1062c</p>\n</li>\n<li><p>shiny_bookmarks&#x2F;c8b0291ba622b69c</p>\n</li>\n</ul>\n<p>服务器端书签的主要缺点是它需要在服务器上保存文件，而且不清楚这些文件需要保留多长时间。如果您正在书签化复杂的状态并且从未删除这些文件，那么随着时间的推移，您的应用将占用越来越多的磁盘空间。如果您删除文件，一些旧书签将停止工作。</p>\n<h2 id=\"11-2-书签挑战\"><a href=\"#11-2-书签挑战\" class=\"headerlink\" title=\"11.2 书签挑战\"></a>11.2 书签挑战</h2><p>自动书签功能依赖于响应式图表。它使用保存的值初始化输入，然后重新播放所有的响应式表达式和输出，只要您的应用的响应式图表简单明了，就会产生与您看到的相同的应用。本节简要介绍了一些需要特别注意的情况：</p>\n<ul>\n<li><p>如果您的应用使用了随机数，即使所有输入都相同，结果也可能不同。如果确保每次生成相同的数字非常重要，您需要思考如何使随机过程可重复。最简单的方法是使用<a href=\"https://rdrr.io/pkg/shiny/man/repeatable.html\">repeatable()</a>函数；有关更多详细信息，请参阅相关文档。</p>\n</li>\n<li><p>如果您有选项卡，并希望书签和恢复活动选项卡，请确保在调用<a href=\"https://rdrr.io/pkg/shiny/man/tabsetPanel.html\">tabsetPanel()</a>时提供一个id。</p>\n</li>\n<li><p>如果有不应被书签记录的输入，例如它们包含不应共享的个人信息，请在服务器函数的某个位置调用<a href=\"https://rdrr.io/pkg/shiny/man/setBookmarkExclude.html\">setBookmarkExclude()</a>。例如，<code>setBookmarkExclude(c(&quot;secret1&quot;, &quot;secret2&quot;))</code>将确保<code>secret1</code>和<code>secret2</code>输入不会被书签记录。</p>\n</li>\n<li><p>如果您在自己的<a href=\"https://rdrr.io/pkg/shiny/man/reactiveValues.html\">reactiveValues()</a>对象中手动管理响应式状态（我们将在第<code>16</code>章中讨论），则需要使用<a href=\"https://rdrr.io/pkg/shiny/man/onBookmark.html\">onBookmark()</a>和<a href=\"https://rdrr.io/pkg/shiny/man/onBookmark.html\">onRestore()</a>回调来手动保存和加载额外的状态。有关更多详细信息，请参阅<a href=\"https://shiny.rstudio.com/articles/advanced-bookmarking.html\">高级书签</a>。</p>\n</li>\n</ul>\n<h2 id=\"11-3-练习\"><a href=\"#11-3-练习\" class=\"headerlink\" title=\"11.3 练习\"></a>11.3 练习</h2><ol>\n<li><p>为<a href=\"https://ambient.data-imaginist.com/reference/noise_simplex.html\">ambient::noise_simplex()</a>的结果生成可视化应用。您的应用应允许用户控制频率、分形、间隙和增益，并且应支持书签功能。如何确保从书签重新加载时图像看起来完全相同？（考虑seed参数的含义）。</p>\n</li>\n<li><p>创建一个简单的应用，允许您上传CSV文件，并为其添加书签。上传几个文件，然后查看<code>shiny_bookmarks</code>。这些文件是如何与书签对应的？（提示：您可以使用<a href=\"https://rdrr.io/r/base/readRDS.html\">readRDS()</a>来查看Shiny生成的缓存文件的内容）。</p>\n</li>\n</ol>\n<h2 id=\"11-4-总结\"><a href=\"#11-4-总结\" class=\"headerlink\" title=\"11.4 总结\"></a>11.4 总结</h2><p>本章介绍了如何为您的应用程序启用书签功能。书签功能对您的用户来说是一个很好的特性，因为它允许他们轻松地将自己的工作与他人分享。接下来，我们将讨论如何在Shiny应用程序中使用整洁评估。整洁评估是许多tidyverse函数的一个特性，如果您希望允许用户在（例如）dplyr管道或ggplot2图形中更改变量，那么您需要了解这个特性。</p>\n<h1 id=\"加关注\"><a href=\"#加关注\" class=\"headerlink\" title=\"加关注\"></a>加关注</h1><table align=\"center\"><tr>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅微信公众号\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-right: 0px;margin-bottom: 5px;align: center;\"></td>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅小程序码\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-left: 0px;margin-bottom: 5px;align: center\"></td>\n</tr></table>\n\n\n<p><font color=\"#FF0000\"><ruby><b>敬告</b>：使用文中脚本请引用本文网址，请尊重本人的劳动成果，谢谢！<rt><b>Notice</b>: When you use the scripts in this article, please cite the link of this webpage. Thank you!</rt></ruby></font></p>\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"编程","path":"api/tags/编程.json"},{"name":"Shiny入门系列","path":"api/tags/Shiny入门系列.json"}]},{"title":"Shiny从入门到入定——10-动态UI","slug":"Shiny从入门到入定——10-动态UI","date":"2024-04-27T09:05:46.000Z","updated":"2024-04-27T09:19:58.639Z","comments":true,"path":"api/articles/Shiny从入门到入定——10-动态UI.json","excerpt":null,"keywords":null,"cover":"https://d33wubrfki0l68.cloudfront.net/45d9b7c2dabd64a4597e370d2b84c0dc01cf8a2f/2dc99/demos/action-dynamic/update-basics-onload.png","content":"<h1 id=\"10-动态UI\"><a href=\"#10-动态UI\" class=\"headerlink\" title=\"10 动态UI\"></a>10 动态UI</h1><p>到目前为止，我们已经看到了UI和server函数之间的清晰分离：用户界面在应用程序启动时静态定义，因此它无法对应用程序中发生的任何事情做出响应。在本章中，您将学习如何创建动态用户界面，通过server函数中运行的代码来更改UI。</p>\n<p>创建动态用户界面有三个关键技术：</p>\n<ul>\n<li>使用<code>update</code>系列的函数来修改输入控件的参数。</li>\n<li>使用<a href=\"https://rdrr.io/pkg/shiny/man/tabsetPanel.html\">tabsetPanel()</a>来有条件地显示和隐藏用户界面的部分。</li>\n<li>使用<a href=\"https://rdrr.io/pkg/shiny/man/htmlOutput.html\">uiOutput()</a>和<a href=\"https://rdrr.io/pkg/shiny/man/renderUI.html\">renderUI()</a>通过代码生成用户界面的选定部分。</li>\n</ul>\n<p>这三个工具为您提供了相当强大的功能，通过修改输入和输出来响应用户。我将演示一些您可以应用它们的更有用的方式，但最终您的创造力是唯一的限制。同时，这些工具可能会使您的应用程序变得更难理解，因此请谨慎使用，并始终努力使用解决您问题的最简单技术。</p>\n<p>接下来是R代码库的加载部分：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>shiny<span class=\"punctuation\">)</span></span><br><span class=\"line\">library<span class=\"punctuation\">(</span>dplyr<span class=\"punctuation\">,</span> warn.conflicts <span class=\"operator\">=</span> <span class=\"literal\">FALSE</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"10-1-更新输入\"><a href=\"#10-1-更新输入\" class=\"headerlink\" title=\"10.1 更新输入\"></a>10.1 更新输入</h2><p>我们将从一个简单的技术开始，该技术允许您在创建后修改输入：<code>update</code>系列的函数。每个输入控件，例如<code>textInput()</code>，都配有一个更新函数，例如<code>updateTextInput()</code>，允许您在创建后修改该控件。</p>\n<p>请考虑以下代码示例，结果如<code>图10.1</code>所示。该应用程序有两个输入控件，它们控制另一个输入控件（滑块）的范围（最小值和最大值）。关键的想法是使用<a href=\"https://rdrr.io/pkg/shiny/man/observeEvent.html\">observeEvent()</a>来触发<a href=\"https://rdrr.io/pkg/shiny/man/updateSliderInput.html\">updateSliderInput()</a>，每当最小或最大输入发生变化时。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;min&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Minimum&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">0</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;max&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Maximum&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">3</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">3</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span><span class=\"built_in\">min</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    updateSliderInput<span class=\"punctuation\">(</span>inputId <span class=\"operator\">=</span> <span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> input<span class=\"operator\">$</span><span class=\"built_in\">min</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span>  </span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span><span class=\"built_in\">max</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    updateSliderInput<span class=\"punctuation\">(</span>inputId <span class=\"operator\">=</span> <span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> input<span class=\"operator\">$</span><span class=\"built_in\">max</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>observeEvent()</code>监视<code>min</code>和<code>max</code>输入的变化，并在它们变化时调用<code>updateSliderInput()</code>来更新滑块的最小和最大值。<code>renderText()</code>用于在<code>textOutput()</code>控件中显示当前范围。</p>\n<table>\n<tr>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/45d9b7c2dabd64a4597e370d2b84c0dc01cf8a2f/2dc99/demos/action-dynamic/update-basics-onload.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/45d9b7c2dabd64a4597e370d2b84c0dc01cf8a2f/2dc99/demos/action-dynamic/update-basics-onload.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/e5a1387f21bee28260731f6fb84991e188af5ec2/8cfbf/demos/action-dynamic/update-basics-max-increase.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/e5a1387f21bee28260731f6fb84991e188af5ec2/8cfbf/demos/action-dynamic/update-basics-max-increase.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/fcca996a780ec2cbaf306e764a577649e6fdca4b/5ecfc/demos/action-dynamic/update-basics-min-decrease.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/fcca996a780ec2cbaf306e764a577649e6fdca4b/5ecfc/demos/action-dynamic/update-basics-min-decrease.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n</tr>\n<tr>\n<td colspan=\"3\">图10.1 应用程序加载时的界面（左），增加最大值后的界面（中），然后减少最小值后的界面（右）。请访问 <a href=\"https://hadley.shinyapps.io/ms-update-basics\">https://hadley.shinyapps.io/ms-update-basics</a> 查看实时效果\n</td>\n</tr>\n</table>\n\n<p>更新函数与其他Shiny函数有些不同：它们都接受输入的名称（作为字符串）作为<code>inputId</code>参数。其余的参数对应于输入构造函数中可以在创建后修改的参数。</p>\n<p>为了帮助您掌握更新函数的使用，我将展示几个简单的示例，然后我们将深入探讨使用分层选择框的复杂案例研究，最后讨论循环引用的问题。</p>\n<h3 id=\"10-1-1-简单应用\"><a href=\"#10-1-1-简单应用\" class=\"headerlink\" title=\"10.1.1 简单应用\"></a>10.1.1 简单应用</h3><p>更新函数最简单的用法是为用户提供一些小的便利。例如，您可能希望轻松地将参数重置为其初始值。以下代码片段展示了如何结合使用<a href=\"https://rdrr.io/pkg/shiny/man/actionButton.html\">actionButton()</a>、<a href=\"https://rdrr.io/pkg/shiny/man/observeEvent.html\">observeEvent()</a>和<a href=\"https://rdrr.io/pkg/shiny/man/updateSliderInput.html\">updateSliderInput()</a>，结果如<code>图10.2</code>所示。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;x1&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;x1&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"operator\">-</span><span class=\"number\">10</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">10</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;x2&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;x2&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"operator\">-</span><span class=\"number\">10</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">10</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;x3&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;x3&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"operator\">-</span><span class=\"number\">10</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">10</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;reset&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Reset&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>reset<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    updateSliderInput<span class=\"punctuation\">(</span>inputId <span class=\"operator\">=</span> <span class=\"string\">&quot;x1&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    updateSliderInput<span class=\"punctuation\">(</span>inputId <span class=\"operator\">=</span> <span class=\"string\">&quot;x2&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    updateSliderInput<span class=\"punctuation\">(</span>inputId <span class=\"operator\">=</span> <span class=\"string\">&quot;x3&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<tr>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/b319bdb38cce5a357ba4131d17fec8b3a8bd34fd/cc473/demos/action-dynamic/update-reset-onload.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/b319bdb38cce5a357ba4131d17fec8b3a8bd34fd/cc473/demos/action-dynamic/update-reset-onload.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/b5061a18295fbec4f08dd399e32ce252d2ad6eb9/230d4/demos/action-dynamic/update-reset-set.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/b5061a18295fbec4f08dd399e32ce252d2ad6eb9/230d4/demos/action-dynamic/update-reset-set.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/b319bdb38cce5a357ba4131d17fec8b3a8bd34fd/8c5f7/demos/action-dynamic/update-reset-reset.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/b319bdb38cce5a357ba4131d17fec8b3a8bd34fd/8c5f7/demos/action-dynamic/update-reset-reset.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n</tr>\n<tr><td colspan=\"3\">图10.2 应用加载时（左图），拖动一些滑块后（中图），然后点击重置（右图）。在线查看地址：<a href=\"https://hadley.shinyapps.io/ms-update-reset\">https://hadley.shinyapps.io/ms-update-reset</a></td></tr>\n</table>\n\n<p>一个类似的应用是调整动作按钮的文本，以便你确切知道它将执行什么操作。图<code>10.3</code>展示了下面代码的结果。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Simulations&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">10</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;simulate&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Simulate&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>n<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    label <span class=\"operator\">&lt;-</span> paste0<span class=\"punctuation\">(</span><span class=\"string\">&quot;Simulate &quot;</span><span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>n<span class=\"punctuation\">,</span> <span class=\"string\">&quot; times&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    updateActionButton<span class=\"punctuation\">(</span>inputId <span class=\"operator\">=</span> <span class=\"string\">&quot;simulate&quot;</span><span class=\"punctuation\">,</span> label <span class=\"operator\">=</span> label<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<tr>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/f6604343f39fe08be631b06ddac37b2c00d73ea5/f636b/demos/action-dynamic/update-button-onload.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/f6604343f39fe08be631b06ddac37b2c00d73ea5/f636b/demos/action-dynamic/update-button-onload.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/d65b9991e6b08e57700bf2cc8f5fafafe59ebc4e/03e2a/demos/action-dynamic/update-button-set1.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/d65b9991e6b08e57700bf2cc8f5fafafe59ebc4e/03e2a/demos/action-dynamic/update-button-set1.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/a2a75084db3d975c48dc56ef70eebd2906eae356/a924e/demos/action-dynamic/update-button-set100.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/a2a75084db3d975c48dc56ef70eebd2906eae356/a924e/demos/action-dynamic/update-button-set100.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n</tr>\n<tr><td colspan=\"3\">图 10.3 应用加载时（左），将模拟次数设置为 1（中），再将模拟次数设置为 100（右）。在线查看地址：<a href=\"https://hadley.shinyapps.io/ms-update-button\">https://hadley.shinyapps.io/ms-update-button</a></td></tr>\n</table>\n\n<p>有很多方法可以用这种方式使用更新函数；在开发复杂应用时，要注意找出向用户提供更多信息的方法。一个特别重要的应用是通过逐步筛选来简化从一长串可能选项中进行选择的过程。这通常是“分层选择框”的问题。</p>\n<h3 id=\"10-1-2-分层选择框\"><a href=\"#10-1-2-分层选择框\" class=\"headerlink\" title=\"10.1.2 分层选择框\"></a>10.1.2 分层选择框</h3><p>更新函数的一个更复杂但特别有用的应用是允许在多个类别之间进行交互式深入探索。我将用一个来自 <a href=\"https://www.kaggle.com/kyanyoga/sample-sales-data\">https://www.kaggle.com/kyanyoga/sample-sales-data</a> 的销售仪表板的虚拟数据来说明它们的使用方法。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sales <span class=\"operator\">&lt;-</span> vroom<span class=\"operator\">::</span>vroom<span class=\"punctuation\">(</span><span class=\"string\">&quot;sales-dashboard/sales_data_sample.csv&quot;</span><span class=\"punctuation\">,</span> col_types <span class=\"operator\">=</span> <span class=\"built_in\">list</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> na <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">sales <span class=\"operator\">%&gt;%</span> </span><br><span class=\"line\">  select<span class=\"punctuation\">(</span>TERRITORY<span class=\"punctuation\">,</span> CUSTOMERNAME<span class=\"punctuation\">,</span> ORDERNUMBER<span class=\"punctuation\">,</span> everything<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"operator\">%&gt;%</span></span><br><span class=\"line\">  arrange<span class=\"punctuation\">(</span>ORDERNUMBER<span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; # A tibble: 2,823 × 25</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;    TERRITORY CUSTOM…¹ ORDER…² QUANT…³ PRICE…⁴ ORDER…⁵ SALES ORDER…⁶ STATUS QTR_ID</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;    &lt;chr&gt;     &lt;chr&gt;      &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;dbl&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;  1 NA        Online …   10100      30   100         3 5151  1/6/20… Shipp…      1</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;  2 NA        Online …   10100      50    67.8       2 3390  1/6/20… Shipp…      1</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;  3 NA        Online …   10100      22    86.5       4 1903. 1/6/20… Shipp…      1</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;  4 NA        Online …   10100      49    34.5       1 1689. 1/6/20… Shipp…      1</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;  5 EMEA      Blauer …   10101      25   100         4 3782  1/9/20… Shipp…      1</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;  6 EMEA      Blauer …   10101      26   100         1 3773. 1/9/20… Shipp…      1</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;  7 EMEA      Blauer …   10101      45    31.2       3 1404  1/9/20… Shipp…      1</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;  8 EMEA      Blauer …   10101      46    53.8       2 2473. 1/9/20… Shipp…      1</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;  9 NA        Vitachr…   10102      39   100         2 4808. 1/10/2… Shipp…      1</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 10 NA        Vitachr…   10102      41    50.1       1 2056. 1/10/2… Shipp…      1</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; # … with 2,813 more rows, 15 more variables: MONTH_ID &lt;dbl&gt;, YEAR_ID &lt;dbl&gt;,</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; #   PRODUCTLINE &lt;chr&gt;, MSRP &lt;dbl&gt;, PRODUCTCODE &lt;chr&gt;, PHONE &lt;chr&gt;,</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; #   ADDRESSLINE1 &lt;chr&gt;, ADDRESSLINE2 &lt;chr&gt;, CITY &lt;chr&gt;, STATE &lt;chr&gt;,</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; #   POSTALCODE &lt;chr&gt;, COUNTRY &lt;chr&gt;, CONTACTLASTNAME &lt;chr&gt;,</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; #   CONTACTFIRSTNAME &lt;chr&gt;, DEALSIZE &lt;chr&gt;, and abbreviated variable names</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; #   ¹​CUSTOMERNAME, ²​ORDERNUMBER, ³​QUANTITYORDERED, ⁴​PRICEEACH, ⁵​ORDERLINENUMBER,</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; #   ⁶​ORDERDATE</span></span><br></pre></td></tr></table></figure>\n\n<p>在这个演示中，我将重点关注数据中的自然层次结构：</p>\n<ul>\n<li><p>每个区域包含客户。</p>\n</li>\n<li><p>每个客户有多个订单。</p>\n</li>\n<li><p>每个订单包含行。</p>\n</li>\n</ul>\n<p>我想创建一个用户界面，你可以：</p>\n<ul>\n<li><p>选择一个区域来查看所有客户。</p>\n</li>\n<li><p>选择一个客户来查看所有订单。</p>\n</li>\n<li><p>选择一个订单来查看底层行。</p>\n</li>\n</ul>\n<p>用户界面的核心是简单的：我将创建三个选择框和一个输出表格。<code>customername</code>和<code>ordernumber</code>选择框的选项将动态生成，因此我将设置<code>choices = NULL</code>。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;territory&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Territory&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> unique<span class=\"punctuation\">(</span>sales<span class=\"operator\">$</span>TERRITORY<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;customername&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Customer&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> <span class=\"literal\">NULL</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;ordernumber&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Order number&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> <span class=\"literal\">NULL</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;data&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>在服务器函数中，我自上而下地工作：</p>\n<ol>\n<li><p>我创建了一个响应式对象 <code>territory()</code>，它包含与所选区域匹配的 <code>sales</code> 中的行。</p>\n</li>\n<li><p>每当 <code>territory()</code> 发生变化时，我都会更新 <code>input$customername</code> 选择框中的选项列表。</p>\n</li>\n<li><p>我创建了另一个响应式对象 <code>customer()</code>，它包含与所选客户匹配的 <code>territory()</code> 中的行。</p>\n</li>\n<li><p>每当 <code>customer()</code> 发生变化时，我都会更新 <code>input$ordernumber</code> 选择框中的选项列表。</p>\n</li>\n<li><p>我在 <code>output$data</code> 中显示所选订单。</p>\n</li>\n</ol>\n<p>你可以看到下面的组织结构：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  territory <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    filter<span class=\"punctuation\">(</span>sales<span class=\"punctuation\">,</span> TERRITORY <span class=\"operator\">==</span> input<span class=\"operator\">$</span>territory<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>territory<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    choices <span class=\"operator\">&lt;-</span> unique<span class=\"punctuation\">(</span>territory<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"operator\">$</span>CUSTOMERNAME<span class=\"punctuation\">)</span></span><br><span class=\"line\">    updateSelectInput<span class=\"punctuation\">(</span>inputId <span class=\"operator\">=</span> <span class=\"string\">&quot;customername&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> choices<span class=\"punctuation\">)</span> </span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  customer <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    req<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>customername<span class=\"punctuation\">)</span></span><br><span class=\"line\">    filter<span class=\"punctuation\">(</span>territory<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> CUSTOMERNAME <span class=\"operator\">==</span> input<span class=\"operator\">$</span>customername<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>customer<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    choices <span class=\"operator\">&lt;-</span> unique<span class=\"punctuation\">(</span>customer<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"operator\">$</span>ORDERNUMBER<span class=\"punctuation\">)</span></span><br><span class=\"line\">    updateSelectInput<span class=\"punctuation\">(</span>inputId <span class=\"operator\">=</span> <span class=\"string\">&quot;ordernumber&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> choices<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>data <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    req<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>ordernumber<span class=\"punctuation\">)</span></span><br><span class=\"line\">    customer<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">%&gt;%</span> </span><br><span class=\"line\">      filter<span class=\"punctuation\">(</span>ORDERNUMBER <span class=\"operator\">==</span> input<span class=\"operator\">$</span>ordernumber<span class=\"punctuation\">)</span> <span class=\"operator\">%&gt;%</span> </span><br><span class=\"line\">      select<span class=\"punctuation\">(</span>QUANTITYORDERED<span class=\"punctuation\">,</span> PRICEEACH<span class=\"punctuation\">,</span> PRODUCTCODE<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<tr>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/fe6c81ed4946e87b044fc7cc91b3bb05e4954043/7d64e/demos/action-dynamic/update-nested-territory.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/fe6c81ed4946e87b044fc7cc91b3bb05e4954043/7d64e/demos/action-dynamic/update-nested-territory.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/d3a0d284501015f737373cc8e6f14b27a49de373/0e06a/demos/action-dynamic/update-nested-customername.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/d3a0d284501015f737373cc8e6f14b27a49de373/0e06a/demos/action-dynamic/update-nested-customername.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/b0ae629ca1909719117abfce2d890db7bf379412/37026/demos/action-dynamic/update-nested-orders.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/b0ae629ca1909719117abfce2d890db7bf379412/37026/demos/action-dynamic/update-nested-orders.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n</tr>\n<tr><td colspan=\"3\">图 10.4 我选择“EMEA”（左），然后选择“Lyon Souveniers”（中），然后（右）查看订单。在线查看地址：<a href=\"https://hadley.shinyapps.io/ms-update-nested\">https://hadley.shinyapps.io/ms-update-nested</a></td></tr>\n</table>\n\n<p>你可以在 <a href=\"https://hadley.shinyapps.io/ms-update-nested\">https://hadley.shinyapps.io/ms-update-nested</a> 尝试这个简单的示例，或者在 <a href=\"https://github.com/hadley/mastering-shiny/tree/master/sales-dashboard\">https://github.com/hadley/mastering-shiny/tree/master/sales-dashboard</a> 查看一个更加完善的应用示例。</p>\n<h3 id=\"10-1-3-冻结响应式输入\"><a href=\"#10-1-3-冻结响应式输入\" class=\"headerlink\" title=\"10.1.3 冻结响应式输入\"></a>10.1.3 冻结响应式输入</h3><p>有时，这种分层选择会短暂地创建一个无效的输入集，导致出现不想要的输出闪烁。例如，考虑这个简单的应用，你首先选择一个数据集，然后选择要汇总的变量：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;dataset&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Choose a dataset&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;pressure&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;cars&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;column&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Choose column&quot;</span><span class=\"punctuation\">,</span> character<span class=\"punctuation\">(</span><span class=\"number\">0</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  verbatimTextOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;summary&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  dataset <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span>get<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dataset<span class=\"punctuation\">,</span> <span class=\"string\">&quot;package:datasets&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dataset<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    updateSelectInput<span class=\"punctuation\">(</span>inputId <span class=\"operator\">=</span> <span class=\"string\">&quot;column&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> <span class=\"built_in\">names</span><span class=\"punctuation\">(</span>dataset<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>summary <span class=\"operator\">&lt;-</span> renderPrint<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    summary<span class=\"punctuation\">(</span>dataset<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">[[</span>input<span class=\"operator\">$</span>column<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果你在 <a href=\"https://hadley.shinyapps.io/ms-freeze\">https://hadley.shinyapps.io/ms-freeze</a> 上尝试这个实时应用，你会注意到当你切换数据集时，摘要输出会短暂地闪烁。这是因为 <a href=\"https://rdrr.io/pkg/shiny/man/updateSelectInput.html\">updateSelectInput()</a> 只有在所有输出和观察者都运行之后才会生效，因此会暂时出现一个状态，即你拥有数据集 B 和来自数据集 A 的变量，因此输出会包含 <code>summary(NULL)</code>。</p>\n<p>你可以通过“freezing”输入值来解决这个问题，使用 <a href=\"https://rdrr.io/pkg/shiny/man/freezeReactiveValue.html\">freezeReactiveValue()</a>。这确保了任何使用输入的响应式对象或输出都不会更新，直到下一次完整的失效周期。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  dataset <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span>get<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dataset<span class=\"punctuation\">,</span> <span class=\"string\">&quot;package:datasets&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dataset<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    freezeReactiveValue<span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> <span class=\"string\">&quot;column&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    updateSelectInput<span class=\"punctuation\">(</span>inputId <span class=\"operator\">=</span> <span class=\"string\">&quot;column&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> <span class=\"built_in\">names</span><span class=\"punctuation\">(</span>dataset<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>summary <span class=\"operator\">&lt;-</span> renderPrint<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    summary<span class=\"punctuation\">(</span>dataset<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">[[</span>input<span class=\"operator\">$</span>column<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>请注意，你不需要“thaw”输入值；当 Shiny 检测到会话和服务器再次同步时，这会自动发生。</p>\n<p>你可能会好奇什么时候应该使用 <a href=\"https://rdrr.io/pkg/shiny/man/freezeReactiveValue.html\">freezeReactiveValue()</a>：实际上，当你动态更改输入值时，使用它总是一个好习惯。实际的修改需要一些时间才能流向浏览器，然后再返回给 Shiny，而在此期间，任何对该值的读取都可能是浪费的，在最坏的情况下可能导致错误。使用 <code>freezeReactiveValue()</code> 告诉所有下游计算，输入值是陈旧的，它们应该保存它们的努力，直到它变得有用。</p>\n<h3 id=\"10-1-4-循环引用\"><a href=\"#10-1-4-循环引用\" class=\"headerlink\" title=\"10.1.4 循环引用\"></a>10.1.4 循环引用</h3><p>如果你想使用 update 函数来改变输入的当前<code>value</code>，那么我们需要讨论一个重要的问题。从 Shiny 的角度来看，使用 update 函数来修改值与用户通过点击或输入来修改值没有区别。这意味着 update 函数可以像人类一样触发响应式更新。这意味着你现在已经超出了纯响应式编程的范围，你需要开始担心循环引用和无限循环的问题。</p>\n<p>例如，看看下面这个简单的应用。它包含一个输入控件和一个观察者，后者将其值加一并更新。每次运行 <a href=\"https://rdrr.io/pkg/shiny/man/updateNumericInput.html\">updateNumericInput()</a> 时，它都会更改 <code>input$n</code>，导致 <code>updateNumericInput()</code> 再次运行，因此应用陷入无限循环，持续增加 <code>input$n</code> 的值。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">0</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>n<span class=\"punctuation\">,</span></span><br><span class=\"line\">    updateNumericInput<span class=\"punctuation\">(</span>inputId <span class=\"operator\">=</span> <span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> input<span class=\"operator\">$</span>n <span class=\"operator\">+</span> <span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>虽然你不太可能在自己的应用中创建这种显而易见的问题，但如果你在更新相互依赖的多个控件时，可能会遇到类似的问题，如下一个例子所示。</p>\n<h3 id=\"10-1-5-相互关联的输入\"><a href=\"#10-1-5-相互关联的输入\" class=\"headerlink\" title=\"10.1.5 相互关联的输入\"></a>10.1.5 相互关联的输入</h3><p>在应用中出现循环引用很容易发生在有多个“事实来源”时。例如，假设你想创建一个温度转换应用，用户既可以输入摄氏温度也可以输入华氏温度：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;temp_c&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Celsius&quot;</span><span class=\"punctuation\">,</span> <span class=\"literal\">NA</span><span class=\"punctuation\">,</span> step <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;temp_f&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Fahrenheit&quot;</span><span class=\"punctuation\">,</span> <span class=\"literal\">NA</span><span class=\"punctuation\">,</span> step <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>temp_f<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"built_in\">c</span> <span class=\"operator\">&lt;-</span> <span class=\"built_in\">round</span><span class=\"punctuation\">(</span><span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>temp_f <span class=\"operator\">-</span> <span class=\"number\">32</span><span class=\"punctuation\">)</span> <span class=\"operator\">*</span> <span class=\"number\">5</span> <span class=\"operator\">/</span> <span class=\"number\">9</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    updateNumericInput<span class=\"punctuation\">(</span>inputId <span class=\"operator\">=</span> <span class=\"string\">&quot;temp_c&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"built_in\">c</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>temp_c<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    f <span class=\"operator\">&lt;-</span> <span class=\"built_in\">round</span><span class=\"punctuation\">(</span><span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>temp_c <span class=\"operator\">*</span> <span class=\"number\">9</span> <span class=\"operator\">/</span> <span class=\"number\">5</span><span class=\"punctuation\">)</span> <span class=\"operator\">+</span> <span class=\"number\">32</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    updateNumericInput<span class=\"punctuation\">(</span>inputId <span class=\"operator\">=</span> <span class=\"string\">&quot;temp_f&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> f<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果你尝试这个应用，<a href=\"https://hadley.shinyapps.io/ms-temperature\">https://hadley.shinyapps.io/ms-temperature</a>，你会发现它大部分时候可以正常工作，但你可能也会注意到它有时会触发多次更改。例如：</p>\n<ul>\n<li><p>将温度设为120华氏度，然后点击向下的箭头。</p>\n</li>\n<li><p>华氏度变为119，摄氏度更新为48。</p>\n</li>\n<li><p>48摄氏度转换为118华氏度，因此华氏度再次变为118。</p>\n</li>\n<li><p>幸运的是，118华氏度仍然是48摄氏度，所以更新在那里停止了。</p>\n</li>\n</ul>\n<p>这个问题没有解决办法，因为你在应用中有一个概念（温度），但有两个表达式（摄氏度和华氏度）。在这里我们很幸运，因为循环迅速收敛到一个同时满足两个约束的值。一般来说，除非你愿意非常仔细地分析你创建的底层动态系统的收敛性质，否则最好避免这种情况。</p>\n<h3 id=\"10-1-6-练习\"><a href=\"#10-1-6-练习\" class=\"headerlink\" title=\"10.1.6 练习\"></a>10.1.6 练习</h3><ol>\n<li><p>请在下面的用户界面中添加一个服务器函数，以更新<code>input$date</code>，这样你只能选择<code>input$year</code>中的日期。</p>\n <figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;year&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;year&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">2020</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  dateInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;date&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;date&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>请在下面的用户界面中添加一个服务器函数，根据<code>input$state</code>更新<code>input$county</code>的选择。作为一个额外的挑战，请也将路易斯安那州的标签从“County”改为“Parish”，阿拉斯加州的标签改为“Borough”。</p>\n <figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>openintro<span class=\"punctuation\">,</span> warn.conflicts <span class=\"operator\">=</span> <span class=\"literal\">FALSE</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; Loading required package: airports</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; Loading required package: cherryblossom</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; Loading required package: usdata</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; Registered S3 methods overwritten by &#x27;readr&#x27;:</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   method                    from </span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   as.data.frame.spec_tbl_df vroom</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   as_tibble.spec_tbl_df     vroom</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   format.col_spec           vroom</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   print.col_spec            vroom</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   print.collector           vroom</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   print.date_names          vroom</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   print.locale              vroom</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   str.col_spec              vroom</span></span><br><span class=\"line\">states <span class=\"operator\">&lt;-</span> unique<span class=\"punctuation\">(</span>county<span class=\"operator\">$</span>state<span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;state&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;State&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> states<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;county&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;County&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> <span class=\"literal\">NULL</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用服务器函数完善下面的用户界面，根据<code>input$continent</code>更新<code>input$country</code>的选择。使用<code>output$data</code>显示所有匹配的行。</p>\n <figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>gapminder<span class=\"punctuation\">)</span></span><br><span class=\"line\">continents <span class=\"operator\">&lt;-</span> unique<span class=\"punctuation\">(</span>gapminder<span class=\"operator\">$</span>continent<span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;continent&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Continent&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> continents<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;country&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Country&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> <span class=\"literal\">NULL</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;data&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>扩展之前的应用，以便您还可以选择选择所有大洲，从而查看所有国家。您需要将<code>“(All)”</code>添加到选择列表中，然后在过滤时特殊处理它。</p>\n</li>\n<li><p>在<a href=\"https://community.rstudio.com/t/29307\">https://community.rstudio.com/t/29307</a>?上描述的问题的核心是什么？</p>\n</li>\n</ol>\n<h2 id=\"10-2-动态可见性\"><a href=\"#10-2-动态可见性\" class=\"headerlink\" title=\"10.2 动态可见性\"></a>10.2 动态可见性</h2><p>复杂性的下一步是有选择地显示和隐藏用户界面中的部分。如果您了解一些JavaScript和CSS，那么可以使用更复杂的方法，但有一种有用的技术不需要任何额外的知识：使用选项卡集（如在6.3.1节中介绍的）隐藏可选的用户界面。这是一种巧妙的技巧，允许您根据需要显示和隐藏用户界面，而无需从头开始重新生成它（您将在下一节中学到）。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  sidebarLayout<span class=\"punctuation\">(</span></span><br><span class=\"line\">    sidebarPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;controller&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Show&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> paste0<span class=\"punctuation\">(</span><span class=\"string\">&quot;panel&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">1</span><span class=\"operator\">:</span><span class=\"number\">3</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    mainPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      tabsetPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">        id <span class=\"operator\">=</span> <span class=\"string\">&quot;switcher&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        type <span class=\"operator\">=</span> <span class=\"string\">&quot;hidden&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        tabPanelBody<span class=\"punctuation\">(</span><span class=\"string\">&quot;panel1&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Panel 1 content&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        tabPanelBody<span class=\"punctuation\">(</span><span class=\"string\">&quot;panel2&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Panel 2 content&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        tabPanelBody<span class=\"punctuation\">(</span><span class=\"string\">&quot;panel3&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Panel 3 content&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">      <span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>controller<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    updateTabsetPanel<span class=\"punctuation\">(</span>inputId <span class=\"operator\">=</span> <span class=\"string\">&quot;switcher&quot;</span><span class=\"punctuation\">,</span> selected <span class=\"operator\">=</span> input<span class=\"operator\">$</span>controller<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<tr>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/177d392d2358ae933be3c5ae9a78b2f076d8cce0/f34ae/demos/action-dynamic/dynamic-panels.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/177d392d2358ae933be3c5ae9a78b2f076d8cce0/f34ae/demos/action-dynamic/dynamic-panels.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/a4ab38457f2b2194dfd2a5e1792f1d38fff0b6dc/90b0c/demos/action-dynamic/dynamic-panels-panel2.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/a4ab38457f2b2194dfd2a5e1792f1d38fff0b6dc/90b0c/demos/action-dynamic/dynamic-panels-panel2.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/7dc90302d452a421cc68547265384f212c58db8f/0dc9c/demos/action-dynamic/dynamic-panels-panel3.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/7dc90302d452a421cc68547265384f212c58db8f/0dc9c/demos/action-dynamic/dynamic-panels-panel3.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n</tr>\n<tr><td colspan=\"3\">图10.5 选择panel1（左），然后选择panel2（中），最后选择panel3（右）。查看实时效果请访问 <a href=\"https://hadley.shinyapps.io/ms-dynamic-panels\">https://hadley.shinyapps.io/ms-dynamic-panels</a></td></tr>\n</table>\n\n<p>这里主要有两个想法：</p>\n<ul>\n<li><p>使用带有隐藏选项卡的选项卡集面板。</p>\n</li>\n<li><p>使用<a href=\"https://rdrr.io/pkg/shiny/man/updateTabsetPanel.html\">updateTabsetPanel()</a>从服务器切换选项卡。</p>\n</li>\n</ul>\n<p>这是一个简单的想法，但结合一点创意，它将赋予你相当大的能力。接下来的两节将举例说明如何在实践中使用它的两个小例子。</p>\n<h3 id=\"10-2-1-条件用户界面\"><a href=\"#10-2-1-条件用户界面\" class=\"headerlink\" title=\"10.2.1 条件用户界面\"></a>10.2.1 条件用户界面</h3><p>想象一下，你想要一个应用，允许用户模拟正态分布、均匀分布和指数分布。每种分布都有不同的参数，因此我们需要某种方法来显示不同分布的不同控件。在这里，我将为每个分布的唯一用户界面放在它自己的<a href=\"https://rdrr.io/pkg/shiny/man/tabPanel.html\">tabPanel()</a>中，然后将三个选项卡组织成一个<a href=\"https://rdrr.io/pkg/shiny/man/tabsetPanel.html\">tabsetPanel()</a>。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parameter_tabs <span class=\"operator\">&lt;-</span> tabsetPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">  id <span class=\"operator\">=</span> <span class=\"string\">&quot;params&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  type <span class=\"operator\">=</span> <span class=\"string\">&quot;hidden&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tabPanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;normal&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;mean&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;mean&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;sd&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;standard deviation&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tabPanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;uniform&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">    numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;min&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;min&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;max&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;max&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tabPanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;exponential&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;rate&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;rate&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>然后，我将把这部分嵌入到一个更完整的用户界面中，允许用户选择样本数量，并显示结果的直方图：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  sidebarLayout<span class=\"punctuation\">(</span></span><br><span class=\"line\">    sidebarPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;dist&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Distribution&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">        choices <span class=\"operator\">=</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;normal&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;uniform&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;exponential&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">      <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Number of samples&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">100</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      parameter_tabs<span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    mainPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      plotOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;hist&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>请注意，我已经仔细地将<code>input$dist</code>中的<code>choices</code>与选项卡面板的名称相匹配。这使得编写下面的<a href=\"https://rdrr.io/pkg/shiny/man/observeEvent.html\">observeEvent()</a>代码变得很容易，该代码会在分布变化时自动切换控件。该应用的其他部分使用了你已经熟悉的技术。最终结果如图10.6所示。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dist<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    updateTabsetPanel<span class=\"punctuation\">(</span>inputId <span class=\"operator\">=</span> <span class=\"string\">&quot;params&quot;</span><span class=\"punctuation\">,</span> selected <span class=\"operator\">=</span> input<span class=\"operator\">$</span>dist<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span> </span><br><span class=\"line\">  </span><br><span class=\"line\">  sample <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"built_in\">switch</span><span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dist<span class=\"punctuation\">,</span></span><br><span class=\"line\">      normal <span class=\"operator\">=</span> rnorm<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>n<span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>mean<span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>sd<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      uniform <span class=\"operator\">=</span> runif<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>n<span class=\"punctuation\">,</span> input<span class=\"operator\">$</span><span class=\"built_in\">min</span><span class=\"punctuation\">,</span> input<span class=\"operator\">$</span><span class=\"built_in\">max</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      exponential <span class=\"operator\">=</span> rexp<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>n<span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>rate<span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>hist <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span>hist<span class=\"punctuation\">(</span>sample<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> res <span class=\"operator\">=</span> <span class=\"number\">96</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<tr>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/cce8beeaa545088bdba647ce61f6cb67f1eee04e/48a70/demos/action-dynamic/dynamic-conditional-normal.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/cce8beeaa545088bdba647ce61f6cb67f1eee04e/48a70/demos/action-dynamic/dynamic-conditional-normal.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/d4e7bf3c6b1d72e2733aeaf06741ab542607e288/882f0/demos/action-dynamic/dynamic-conditional-uniform.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/d4e7bf3c6b1d72e2733aeaf06741ab542607e288/882f0/demos/action-dynamic/dynamic-conditional-uniform.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/a5699032e1e6b89fcd6d2c87bcf2d8b616b82e8c/c0cb8/demos/action-dynamic/dynamic-conditional-exponential.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/a5699032e1e6b89fcd6d2c87bcf2d8b616b82e8c/c0cb8/demos/action-dynamic/dynamic-conditional-exponential.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n</tr>\n<tr><td colspan=\"3\">图10.6 正态分布（左）、均匀分布（中）和指数分布（右）的结果。查看实时效果请访问 <a href=\"https://hadley.shinyapps.io/ms-dynamic-conditional\">https://hadley.shinyapps.io/ms-dynamic-conditional</a></td></tr>\n</table>\n\n<p>请注意，（例如）<code>input$mean</code>的值是否对用户可见是独立的。底层的HTML控件仍然存在；只是你看不到它。</p>\n<h3 id=\"10-2-2-向导界面\"><a href=\"#10-2-2-向导界面\" class=\"headerlink\" title=\"10.2.2 向导界面\"></a>10.2.2 向导界面</h3><p>你还可以使用这个想法来创建一个“wizard”，这是一种界面类型，通过将其分散到多个页面上，更容易收集大量信息。在这里，我们在每个“page”中嵌入动作按钮，使其易于向前和向后移动。结果如图10.7所示。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  tabsetPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">    id <span class=\"operator\">=</span> <span class=\"string\">&quot;wizard&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    type <span class=\"operator\">=</span> <span class=\"string\">&quot;hidden&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    tabPanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;page_1&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">      <span class=\"string\">&quot;Welcome!&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;page_12&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;next&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    tabPanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;page_2&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">      <span class=\"string\">&quot;Only one page to go&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;page_21&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;prev&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;page_23&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;next&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    tabPanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;page_3&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">      <span class=\"string\">&quot;You&#x27;re done!&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;page_32&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;prev&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  switch_page <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>i<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    updateTabsetPanel<span class=\"punctuation\">(</span>inputId <span class=\"operator\">=</span> <span class=\"string\">&quot;wizard&quot;</span><span class=\"punctuation\">,</span> selected <span class=\"operator\">=</span> paste0<span class=\"punctuation\">(</span><span class=\"string\">&quot;page_&quot;</span><span class=\"punctuation\">,</span> i<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>page_12<span class=\"punctuation\">,</span> switch_page<span class=\"punctuation\">(</span><span class=\"number\">2</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>page_21<span class=\"punctuation\">,</span> switch_page<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>page_23<span class=\"punctuation\">,</span> switch_page<span class=\"punctuation\">(</span><span class=\"number\">3</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>page_32<span class=\"punctuation\">,</span> switch_page<span class=\"punctuation\">(</span><span class=\"number\">2</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<tr>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/701f300df256124c9aa4cb5d9a6cb6245c7f70ce/e783b/demos/action-dynamic/wizard-1.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/701f300df256124c9aa4cb5d9a6cb6245c7f70ce/e783b/demos/action-dynamic/wizard-1.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/8b0644dfec78873a45545620af591b31323fa11c/c61f6/demos/action-dynamic/wizard-2.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/8b0644dfec78873a45545620af591b31323fa11c/c61f6/demos/action-dynamic/wizard-2.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/9089ca7b0a519d51ae51c4991b26234561a41e67/18197/demos/action-dynamic/wizard-3.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/9089ca7b0a519d51ae51c4991b26234561a41e67/18197/demos/action-dynamic/wizard-3.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n</tr>\n<tr><td colspan=\"3\">图10.7 向导界面将复杂的用户界面分割成多个页面。在这里，我们通过一个非常简单的示例来演示这个想法，点击“下一步”以进入下一页。查看实时效果请访问 <a href=\"https://hadley.shinyapps.io/ms-wizard\">https://hadley.shinyapps.io/ms-wizard</a></td></tr>\n</table>\n\n\n<p>请注意，使用<code>switch_page()</code>函数可以减少服务器代码中的重复量。我们将在第18章再次回到这个想法，然后在第<code>19.4.2</code>节中创建一个模块来自动化向导界面。</p>\n<h3 id=\"10-2-3-练习\"><a href=\"#10-2-3-练习\" class=\"headerlink\" title=\"10.2.3 练习\"></a>10.2.3 练习</h3><ol>\n<li><p>使用隐藏的选项卡集，仅当用户选中“advanced”复选框时才显示额外的控件。</p>\n</li>\n<li><p>创建一个应用，该应用绘制<code>ggplot(diamonds, aes(carat))</code>，但允许用户选择使用的geom：<a href=\"https://ggplot2.tidyverse.org/reference/geom_histogram.html\">geom_histogram()</a>、<a href=\"https://ggplot2.tidyverse.org/reference/geom_histogram.html\">geom_freqpoly()</a>或<a href=\"https://ggplot2.tidyverse.org/reference/geom_density.html\">geom_density()</a>。使用隐藏的选项卡集，允许用户根据geom选择不同的参数：<code>geom_histogram()</code>和<code>geom_freqpoly()</code>具有binwidth参数；<code>geom_density()</code>具有bw参数。</p>\n</li>\n<li><p>修改你在前一个练习中创建的应用，允许用户选择是否显示每个geom（即，而不是始终使用一个geom，他们可以选择0、1、2或3个）。确保你可以独立控制直方图和频率多边形的binwidth。</p>\n</li>\n</ol>\n<h2 id=\"10-3-使用代码创建用户界面\"><a href=\"#10-3-使用代码创建用户界面\" class=\"headerlink\" title=\"10.3 使用代码创建用户界面\"></a>10.3 使用代码创建用户界面</h2><p>有时，上面描述的技术无法提供您所需的动态性水平：更新函数只允许您更改现有的输入，而选项卡集仅在您具有固定且已知的可能组合集时才有效。有时，您需要根据其他输入创建不同类型的输入（或输出）或不同数量的输入（或输出）。这种最终技术使您能够这样做。</p>\n<p>值得注意的是，您一直使用代码创建用户界面，但到目前为止，您总是在应用启动之前这样做。这种技术使您能够在应用运行时创建和修改用户界面。这个解决方案有两个部分：</p>\n<ul>\n<li><p><a href=\"https://rdrr.io/pkg/shiny/man/htmlOutput.html\">uiOutput()</a> 在用户界面 (ui) 中插入一个占位符。这留下了一个“洞”，您的服务器代码稍后可以填充它。</p>\n</li>\n<li><p><a href=\"https://rdrr.io/pkg/shiny/man/renderUI.html\">renderUI()</a> 在 <code>server()</code> 中被调用，用于将占位符填充为动态生成的用户界面。</p>\n</li>\n</ul>\n<p>我们将通过一个简单的示例来了解这是如何工作的，然后深入探讨一些实际的应用。</p>\n<h3 id=\"10-3-1-入门\"><a href=\"#10-3-1-入门\" class=\"headerlink\" title=\"10.3.1 入门\"></a>10.3.1 入门</h3><p>让我们从一个简单的应用开始，该应用动态地创建输入控件，其类型和标签由另外两个输入控件控制。最终的应用如图<code>10.8</code>所示。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  textInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;label&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;label&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;type&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;type&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;slider&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;numeric&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  uiOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;numeric&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>numeric <span class=\"operator\">&lt;-</span> renderUI<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>type <span class=\"operator\">==</span> <span class=\"string\">&quot;slider&quot;</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;dynamic&quot;</span><span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>label<span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">10</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span> <span class=\"keyword\">else</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;dynamic&quot;</span><span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>label<span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">10</span><span class=\"punctuation\">)</span> </span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<tr>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/c7a0fbee966861954422cd6a1d7fd4a39185ec9c/28819/demos/action-dynamic/render-simple-onload.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/c7a0fbee966861954422cd6a1d7fd4a39185ec9c/28819/demos/action-dynamic/render-simple-onload.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/35b772f26ba5a178d1f693ce7de4b12c17a454f3/9cb14/demos/action-dynamic/render-simple-numeric.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/35b772f26ba5a178d1f693ce7de4b12c17a454f3/9cb14/demos/action-dynamic/render-simple-numeric.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/d8a85a47b59618a13f336b7d9d0d7c705d2ef05e/9c957/demos/action-dynamic/render-simple-label.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/d8a85a47b59618a13f336b7d9d0d7c705d2ef05e/9c957/demos/action-dynamic/render-simple-label.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n</tr>\n<tr><td colspan=\"3\">图10.8 应用加载时（左），然后将类型更改为数值（中），再将标签更改为“我的标签”。查看实时效果请访问 <a href=\"https://hadley.shinyapps.io/ms-render-simple\">https://hadley.shinyapps.io/ms-render-simple</a></td></tr>\n</table>\n\n<p>如果你自己运行这段代码，你会发现应用在加载后需要一段时间才能显示。这是因为它是响应式的：应用必须先加载，触发一个响应事件，然后调用服务器函数，生成要插入页面的HTML。这是<a href=\"https://rdrr.io/pkg/shiny/man/renderUI.html\">renderUI()</a>的一个缺点；过多地依赖它可能会导致用户界面出现延迟。为了获得良好的性能，请尽量使用本章前面描述的技术，保持用户界面的固定部分。</p>\n<p>这种方法还有一个问题：当你更改控件时，会丢失当前选定的值。在使用代码创建用户界面时，保留现有状态是一大挑战。这就是为什么如果适用，选择性显示和隐藏用户界面是更好的方法——因为你没有销毁和重新创建控件，所以不需要做任何事情来保留值。然而，在许多情况下，我们可以通过将新输入的值设置为现有控件的当前值来解决这个问题：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>numeric <span class=\"operator\">&lt;-</span> renderUI<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    value <span class=\"operator\">&lt;-</span> isolate<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dynamic<span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>type <span class=\"operator\">==</span> <span class=\"string\">&quot;slider&quot;</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;dynamic&quot;</span><span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>label<span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> value<span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">10</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span> <span class=\"keyword\">else</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;dynamic&quot;</span><span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>label<span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> value<span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">10</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>使用 <a href=\"https://rdrr.io/pkg/shiny/man/isolate.html\">isolate()</a> 非常重要。我们将在 <code>15.4.1</code> 节中详细讨论它的作用，但在这里，它确保我们不会创建一个响应式依赖，导致每次 <code>input$dynamic</code> 发生变化时（每当用户修改值时都会发生）都重新运行此代码。我们只希望在 <code>input$type</code> 或 <code>input$label</code> 发生变化时更改它。</p>\n<h3 id=\"10-3-2-多个控件\"><a href=\"#10-3-2-多个控件\" class=\"headerlink\" title=\"10.3.2 多个控件\"></a>10.3.2 多个控件</h3><p>当你需要生成任意数量或类型的控件时，动态用户界面（UI）最有用。这意味着你将使用代码生成用户界面，我建议使用函数式编程来完成此类任务。在这里，我将使用 <a href=\"https://purrr.tidyverse.org/reference/map.html\">purrr::map()</a> 和 <a href=\"https://purrr.tidyverse.org/reference/reduce.html\">purrr::reduce()</a>，但你也可以使用基础的 <a href=\"https://rdrr.io/r/base/lapply.html\">lapply()</a> 和 <a href=\"https://rdrr.io/r/base/funprog.html\">Reduce()</a> 函数来实现同样的效果。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>purrr<span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>如果你不熟悉函数式编程中的 <a href=\"https://purrr.tidyverse.org/reference/map.html\">map()</a> 和 <code>reduce()</code>，你可能希望在继续之前先阅读有关<a href=\"https://adv-r.hadley.nz/functionals.html\">Functional programming</a>的内容。我们也将在第 <code>18</code> 章中再次讨论这个想法。这些想法相当复杂，所以如果你在第一次阅读时没有理解，请不要担心。</p>\n<p>为了具体说明，想象一下你想要用户能够提供自己的颜色调色板。他们首先会指定他们想要的颜色的数量，然后为每个颜色提供一个值。用户界面相当简单：我们有一个 <a href=\"https://rdrr.io/pkg/shiny/man/numericInput.html\">numericInput()</a> 来控制输入的数量，一个 <a href=\"https://rdrr.io/pkg/shiny/man/htmlOutput.html\">uiOutput()</a> 用于放置生成的文本框，以及一个 <a href=\"https://rdrr.io/pkg/shiny/man/textOutput.html\">textOutput()</a> 来证明我们已经正确地将所有内容连接在一起。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Number of colours&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">5</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  uiOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;col&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;palette&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>服务器函数很短，但包含了一些重要的想法：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  col_names <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span>paste0<span class=\"punctuation\">(</span><span class=\"string\">&quot;col&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">seq_len</span><span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>n<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>col <span class=\"operator\">&lt;-</span> renderUI<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    map<span class=\"punctuation\">(</span>col_names<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> <span class=\"operator\">~</span> textInput<span class=\"punctuation\">(</span>.x<span class=\"punctuation\">,</span> <span class=\"literal\">NULL</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>palette <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    map_chr<span class=\"punctuation\">(</span>col_names<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> <span class=\"operator\">~</span> input<span class=\"punctuation\">[[</span>.x<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span> <span class=\"operator\">%||%</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>我使用了一个响应式对象 <code>col_names()</code> 来存储即将生成的每个颜色输入的名称。</p>\n</li>\n<li><p>然后，我使用 <code>map()</code> 创建一个 <code>textInput()</code> 列表，每个列表项对应 <code>col_names()</code> 中的一个名称。<code>renderUI()</code> 随后将这个 HTML 组件列表添加到用户界面。</p>\n</li>\n<li><p>我需要使用一个新技巧来访问输入值。到目前为止，我们总是使用 <code>$</code> 来访问输入的组件，例如 <code>input$col1</code>。但在这里，我们的输入名称存储在一个字符向量中，比如 <code>var &lt;- &quot;col1&quot;</code>。在这种情况下，<code>$</code> 不再适用，因此我们需要切换到 <code>[[</code>，即 <code>input[[var]]</code>。</p>\n</li>\n<li><p>我使用 <a href=\"https://purrr.tidyverse.org/reference/map.html\">map_chr()</a> 将所有值收集到一个字符向量中，并在 <code>output$palette</code> 中显示。不幸的是，在浏览器渲染新输入之前，有一个短暂的时间段，其值会是 <code>NULL</code>。这会导致 <code>map_chr()</code> 报错，我们使用方便的 <code>%||%</code> 函数来解决这个问题：当左侧为 <code>NULL</code> 时，它返回右侧的值。</p>\n</li>\n</ul>\n<p>你可以在图 <code>10.9</code> 中看到结果。</p>\n<table>\n<tr>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/5301c856f06d8eba2b98b4a7c4d3fedb574d7f11/76c4e/demos/action-dynamic/render-palette-onload.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/5301c856f06d8eba2b98b4a7c4d3fedb574d7f11/76c4e/demos/action-dynamic/render-palette-onload.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/6a2df96ad06c05e809774c0db7d7e3611ec9eb53/d31b7/demos/action-dynamic/render-palette-change-n.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/6a2df96ad06c05e809774c0db7d7e3611ec9eb53/d31b7/demos/action-dynamic/render-palette-change-n.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/cad6373c73a55bf6e79fc166e72dadf394b528e1/b0691/demos/action-dynamic/render-palette-set-cols.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/cad6373c73a55bf6e79fc166e72dadf394b528e1/b0691/demos/action-dynamic/render-palette-set-cols.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n</tr>\n<tr><td colspan=\"3\">图10.9 应用程序加载时（左），将n设置为3后（中），然后输入一些颜色（右）。请在<a href=\"https://hadley.shinyapps.io/ms-render-palette\">https://hadley.shinyapps.io/ms-render-palette</a>查看实时效果</td></tr>\n</table>\n\n<p>如果你运行这个应用程序，你会发现一个非常恼人的行为：每当你改变颜色的数量时，所有输入的数据都会消失。我们可以使用与之前相同的技术来解决这个问题：将<code>value</code>设置为（孤立的）当前值。我还会稍微调整外观，使其看起来更漂亮一些，包括在图中显示所选颜色。示例截图如图<code>10.10</code>所示。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  sidebarLayout<span class=\"punctuation\">(</span></span><br><span class=\"line\">    sidebarPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Number of colours&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">5</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      uiOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;col&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    mainPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      plotOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;plot&quot;</span><span class=\"punctuation\">)</span>  </span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  col_names <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span>paste0<span class=\"punctuation\">(</span><span class=\"string\">&quot;col&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">seq_len</span><span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>n<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>col <span class=\"operator\">&lt;-</span> renderUI<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    map<span class=\"punctuation\">(</span>col_names<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> <span class=\"operator\">~</span> textInput<span class=\"punctuation\">(</span>.x<span class=\"punctuation\">,</span> <span class=\"literal\">NULL</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> isolate<span class=\"punctuation\">(</span>input<span class=\"punctuation\">[[</span>.x<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>plot <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    cols <span class=\"operator\">&lt;-</span> map_chr<span class=\"punctuation\">(</span>col_names<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> <span class=\"operator\">~</span> input<span class=\"punctuation\">[[</span>.x<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span> <span class=\"operator\">%||%</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"comment\"># convert empty inputs to transparent</span></span><br><span class=\"line\">    cols<span class=\"punctuation\">[</span>cols <span class=\"operator\">==</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">]</span> <span class=\"operator\">&lt;-</span> <span class=\"literal\">NA</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    barplot<span class=\"punctuation\">(</span></span><br><span class=\"line\">      <span class=\"built_in\">rep</span><span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">,</span> <span class=\"built_in\">length</span><span class=\"punctuation\">(</span>cols<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">      col <span class=\"operator\">=</span> cols<span class=\"punctuation\">,</span></span><br><span class=\"line\">      space <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">      axes <span class=\"operator\">=</span> <span class=\"literal\">FALSE</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> res <span class=\"operator\">=</span> <span class=\"number\">96</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<tr>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/cc1d6ffde1b8ac88f72e2b897ed187f55cecedf1/89026/demos/action-dynamic/render-palette-full-rainbow.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/cc1d6ffde1b8ac88f72e2b897ed187f55cecedf1/89026/demos/action-dynamic/render-palette-full-rainbow.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/b1560598089d41fb8a7c71323c44efd7595ce615/b8927/demos/action-dynamic/render-palette-full-change-n.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/b1560598089d41fb8a7c71323c44efd7595ce615/b8927/demos/action-dynamic/render-palette-full-change-n.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n</tr>\n<tr><td colspan=\"2\">图10.10 填写彩虹的颜色（左），然后将颜色数量减少到3（右）；请注意，现有颜色被保留。实时效果请访问<a href=\"https://hadley.shinyapps.io/ms-render-palette-full\">https://hadley.shinyapps.io/ms-render-palette-full</a>查看实时效果</td></tr>\n</table>\n\n<h3 id=\"10-3-3-动态过滤\"><a href=\"#10-3-3-动态过滤\" class=\"headerlink\" title=\"10.3.3 动态过滤\"></a>10.3.3 动态过滤</h3><p>为了结束本章，我将创建一个应用程序，允许你动态过滤任何数据框。每个数值变量都会得到一个范围滑块，每个因子变量都会得到一个多选控件，所以（例如）如果一个数据框有三个数值变量和两个因子，应用程序将有三个滑块和两个选择框。</p>\n<p>我将从一个为单个变量创建用户界面的函数开始。对于数值输入，它将返回一个范围滑块；对于因子输入，它将返回一个多选控件；对于其他所有类型，它将返回NULL（无）。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make_ui <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>x<span class=\"punctuation\">,</span> var<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> <span class=\"punctuation\">(</span><span class=\"built_in\">is.numeric</span><span class=\"punctuation\">(</span>x<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    rng <span class=\"operator\">&lt;-</span> <span class=\"built_in\">range</span><span class=\"punctuation\">(</span>x<span class=\"punctuation\">,</span> na.rm <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    sliderInput<span class=\"punctuation\">(</span>var<span class=\"punctuation\">,</span> var<span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> rng<span class=\"punctuation\">[</span><span class=\"number\">1</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> rng<span class=\"punctuation\">[</span><span class=\"number\">2</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> rng<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span> <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> <span class=\"punctuation\">(</span>is.factor<span class=\"punctuation\">(</span>x<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    levs <span class=\"operator\">&lt;-</span> levels<span class=\"punctuation\">(</span>x<span class=\"punctuation\">)</span></span><br><span class=\"line\">    selectInput<span class=\"punctuation\">(</span>var<span class=\"punctuation\">,</span> var<span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> levs<span class=\"punctuation\">,</span> selected <span class=\"operator\">=</span> levs<span class=\"punctuation\">,</span> multiple <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span> <span class=\"keyword\">else</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"comment\"># Not supported</span></span><br><span class=\"line\">    <span class=\"literal\">NULL</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>接着，我将编写此函数的服务器端等效项：它接收输入控件的变量和值，并返回一个逻辑向量，说明是否包含每个观测值。使用逻辑向量可以轻松组合来自多个列的结果。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filter_var <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>x<span class=\"punctuation\">,</span> val<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> <span class=\"punctuation\">(</span><span class=\"built_in\">is.numeric</span><span class=\"punctuation\">(</span>x<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"operator\">!</span><span class=\"built_in\">is.na</span><span class=\"punctuation\">(</span>x<span class=\"punctuation\">)</span> <span class=\"operator\">&amp;</span> x <span class=\"operator\">&gt;=</span> val<span class=\"punctuation\">[</span><span class=\"number\">1</span><span class=\"punctuation\">]</span> <span class=\"operator\">&amp;</span> x <span class=\"operator\">&lt;=</span> val<span class=\"punctuation\">[</span><span class=\"number\">2</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span> <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> <span class=\"punctuation\">(</span>is.factor<span class=\"punctuation\">(</span>x<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    x <span class=\"operator\">%in%</span> val</span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span> <span class=\"keyword\">else</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"comment\"># No control, so don&#x27;t filter</span></span><br><span class=\"line\">    <span class=\"literal\">TRUE</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后，我可以手动使用这些函数为 <code>iris</code> 数据集生成一个简单的过滤用户界面：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  sidebarLayout<span class=\"punctuation\">(</span></span><br><span class=\"line\">    sidebarPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      make_ui<span class=\"punctuation\">(</span>iris<span class=\"operator\">$</span>Sepal.Length<span class=\"punctuation\">,</span> <span class=\"string\">&quot;Sepal.Length&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      make_ui<span class=\"punctuation\">(</span>iris<span class=\"operator\">$</span>Sepal.Width<span class=\"punctuation\">,</span> <span class=\"string\">&quot;Sepal.Width&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      make_ui<span class=\"punctuation\">(</span>iris<span class=\"operator\">$</span>Species<span class=\"punctuation\">,</span> <span class=\"string\">&quot;Species&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    mainPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;data&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  selected <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    filter_var<span class=\"punctuation\">(</span>iris<span class=\"operator\">$</span>Sepal.Length<span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>Sepal.Length<span class=\"punctuation\">)</span> <span class=\"operator\">&amp;</span></span><br><span class=\"line\">      filter_var<span class=\"punctuation\">(</span>iris<span class=\"operator\">$</span>Sepal.Width<span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>Sepal.Width<span class=\"punctuation\">)</span> <span class=\"operator\">&amp;</span></span><br><span class=\"line\">      filter_var<span class=\"punctuation\">(</span>iris<span class=\"operator\">$</span>Species<span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>Species<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>data <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span>head<span class=\"punctuation\">(</span>iris<span class=\"punctuation\">[</span>selected<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"number\">12</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/c346538e80dd7b34a8142bdb05a537b44d581663/edd79/demos/action-dynamic/render-filter-1.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/c346538e80dd7b34a8142bdb05a537b44d581663/edd79/demos/action-dynamic/render-filter-1.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图10.11 iris数据集的简单过滤界面\"></p>\n<p>你可能注意到了，我已经厌倦了复制粘贴，所以这个应用程序只适用于三列。通过使用一些函数式编程，我可以让它适用于所有列：</p>\n<ul>\n<li><p>在<code>ui</code>中，使用<a href=\"https://purrr.tidyverse.org/reference/map.html\">map()</a>为每个变量生成一个控件。</p>\n</li>\n<li><p>在<code>server()</code>，我使用<code>map()</code>为每个变量生成选择向量。然后，我使用<code>reduce()</code>将每个变量的逻辑向量组合成一个单一的逻辑向量，通过<code>&amp;</code>将每个向量连接在一起。</p>\n</li>\n</ul>\n<p>再次强调，如果你不完全理解这里发生了什么，请不要太过担心。主要的收获是，一旦你掌握了函数式编程，你就可以编写非常简洁的代码，从而生成复杂且动态的应用程序。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  sidebarLayout<span class=\"punctuation\">(</span></span><br><span class=\"line\">    sidebarPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      map<span class=\"punctuation\">(</span><span class=\"built_in\">names</span><span class=\"punctuation\">(</span>iris<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> <span class=\"operator\">~</span> make_ui<span class=\"punctuation\">(</span>iris<span class=\"punctuation\">[[</span>.x<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> .x<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    mainPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;data&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  selected <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    each_var <span class=\"operator\">&lt;-</span> map<span class=\"punctuation\">(</span><span class=\"built_in\">names</span><span class=\"punctuation\">(</span>iris<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> <span class=\"operator\">~</span> filter_var<span class=\"punctuation\">(</span>iris<span class=\"punctuation\">[[</span>.x<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> input<span class=\"punctuation\">[[</span>.x<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    reduce<span class=\"punctuation\">(</span>each_var<span class=\"punctuation\">,</span> <span class=\"operator\">~</span> .x <span class=\"operator\">&amp;</span> .y<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>data <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span>head<span class=\"punctuation\">(</span>iris<span class=\"punctuation\">[</span>selected<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"number\">12</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/b5f7aa079010dea111f8cb50ff9ce875cef92b4a/4b175/demos/action-dynamic/render-filter-2.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/b5f7aa079010dea111f8cb50ff9ce875cef92b4a/4b175/demos/action-dynamic/render-filter-2.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图10.12 使用函数式编程为iris数据集构建过滤应用程序\"></p>\n<p>从此处开始，对其进行简单泛化，使其可以与任何数据框配合使用。在此，我将使用datasets包中的数据框进行说明，但你可以很容易地想象如何将其扩展到用户上传的数据。结果如图<code>10.13</code>所示。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dfs <span class=\"operator\">&lt;-</span> keep<span class=\"punctuation\">(</span>ls<span class=\"punctuation\">(</span><span class=\"string\">&quot;package:datasets&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> <span class=\"operator\">~</span> is.data.frame<span class=\"punctuation\">(</span>get<span class=\"punctuation\">(</span>.x<span class=\"punctuation\">,</span> <span class=\"string\">&quot;package:datasets&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  sidebarLayout<span class=\"punctuation\">(</span></span><br><span class=\"line\">    sidebarPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;dataset&quot;</span><span class=\"punctuation\">,</span> label <span class=\"operator\">=</span> <span class=\"string\">&quot;Dataset&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> dfs<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      uiOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;filter&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    mainPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;data&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  data <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    get<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dataset<span class=\"punctuation\">,</span> <span class=\"string\">&quot;package:datasets&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  vars <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"built_in\">names</span><span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>filter <span class=\"operator\">&lt;-</span> renderUI<span class=\"punctuation\">(</span></span><br><span class=\"line\">    map<span class=\"punctuation\">(</span>vars<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> <span class=\"operator\">~</span> make_ui<span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">[[</span>.x<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> .x<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  selected <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    each_var <span class=\"operator\">&lt;-</span> map<span class=\"punctuation\">(</span>vars<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> <span class=\"operator\">~</span> filter_var<span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">[[</span>.x<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> input<span class=\"punctuation\">[[</span>.x<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    reduce<span class=\"punctuation\">(</span>each_var<span class=\"punctuation\">,</span> `&amp;`<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>data <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span>head<span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">[</span>selected<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"number\">12</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/539c4bcb59b7d52133c346ec6ca4a217e122e4df/9214d/demos/action-dynamic/filtering-final.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/539c4bcb59b7d52133c346ec6ca4a217e122e4df/9214d/demos/action-dynamic/filtering-final.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图10.13 根据所选数据集的字段自动生成的动态用户界面。请访问https://hadley.shinyapps.io/ms-filtering-final查看实时效果\"></p>\n<h3 id=\"10-3-4-对话框\"><a href=\"#10-3-4-对话框\" class=\"headerlink\" title=\"10.3.4 对话框\"></a>10.3.4 对话框</h3><p>在结束本章之前，我想提一下一个相关的技术：对话框。在<code>8.4.1</code>节中，你已经看到了对话框，其内容是固定的文本字符串。但由于<a href=\"https://rdrr.io/pkg/shiny/man/modalDialog.html\">modalDialog()</a>是在服务器函数中调用的，因此你可以像<a href=\"https://rdrr.io/pkg/shiny/man/renderUI.html\">renderUI()</a>一样动态地生成内容。如果你想在继续常规应用程序流程之前强制用户做出某些决定，这是一个很有用的技术。</p>\n<h3 id=\"10-3-5-练习\"><a href=\"#10-3-5-练习\" class=\"headerlink\" title=\"10.3.5 练习\"></a>10.3.5 练习</h3><ol>\n<li><p>根据本节中的初始示例，创建一个非常简单的应用程序：</p>\n <figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;type&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;type&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;slider&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;numeric&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  uiOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;numeric&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>numeric <span class=\"operator\">&lt;-</span> renderUI<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>type <span class=\"operator\">==</span> <span class=\"string\">&quot;slider&quot;</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">100</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span> <span class=\"keyword\">else</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">100</span><span class=\"punctuation\">)</span>  </span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p> 你如何使用动态可见性来实现它？如果你实现了动态可见性，当你更改控件时，如何保持值的同步？</p>\n</li>\n<li><p>解释这个应用程序是如何工作的。为什么当你第二次点击“输入密码”按钮时，密码会消失？</p>\n <figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Enter password&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;text&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>go<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    showModal<span class=\"punctuation\">(</span>modalDialog<span class=\"punctuation\">(</span></span><br><span class=\"line\">      passwordInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;password&quot;</span><span class=\"punctuation\">,</span> <span class=\"literal\">NULL</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      title <span class=\"operator\">=</span> <span class=\"string\">&quot;Please enter your password&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  output<span class=\"operator\">$</span>text <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"punctuation\">(</span><span class=\"operator\">!</span>isTruthy<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>password<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"string\">&quot;No password&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span> <span class=\"keyword\">else</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"string\">&quot;Password entered&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在·10.3.1·节的应用程序中，如果你从<code>value &lt;- isolate(input$dynamic)</code>中去掉<a href=\"https://rdrr.io/pkg/shiny/man/isolate.html\">isolate()</a>会发生什么？</p>\n</li>\n<li><p>为<code>make_ui()</code>和<code>filter_var()</code>添加对日期和日期时间列的支持。</p>\n</li>\n<li><p>（高级）如果你了解S3面向对象编程（<a href=\"http://adv-r.hadley.nz/S3.html\">S3 OOP</a>）系统，请考虑如何使用通用函数替换<code>make_ui()</code>和<code>filter_var()</code>中的if块。</p>\n</li>\n</ol>\n<h2 id=\"10-4-总结\"><a href=\"#10-4-总结\" class=\"headerlink\" title=\"10.4 总结\"></a>10.4 总结</h2><p>在阅读本章之前，你只能在服务器函数运行之前静态地创建用户界面。现在你已经学会了如何根据用户操作修改用户界面并完全重新创建它。动态用户界面将极大地增加你的应用程序的复杂性，所以如果你发现自己很难调试正在发生的事情，不要感到惊讶。始终记住使用最简单的技术来解决你的问题，并回到<code>5.2</code>节中的调试建议。</p>\n<p>下一章将转向讨论书签功能，使应用程序能够与他人共享当前状态。</p>\n<h1 id=\"加关注\"><a href=\"#加关注\" class=\"headerlink\" title=\"加关注\"></a>加关注</h1><p>关注公众号“生信之巅”。</p>\n<table align=\"center\"><tr>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅微信公众号\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-right: 0px;margin-bottom: 5px;align: center;\"></td>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅小程序码\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-left: 0px;margin-bottom: 5px;align: center\"></td>\n</tr></table>\n\n\n<p><font color=\"#FF0000\"><ruby><b>敬告</b>：使用文中脚本请引用本文网址，请尊重本人的劳动成果，谢谢！<rt><b>Notice</b>: When you use the scripts in this article, please cite the link of this webpage. Thank you!</rt></ruby></font></p>\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"编程","path":"api/tags/编程.json"},{"name":"Shiny入门系列","path":"api/tags/Shiny入门系列.json"}]},{"title":"Shiny从入门到入定——9-上传和下载","slug":"Shiny从入门到入定——9-上传和下载","date":"2024-04-27T03:01:58.000Z","updated":"2024-04-27T03:04:31.887Z","comments":true,"path":"api/articles/Shiny从入门到入定——9-上传和下载.json","excerpt":null,"keywords":null,"cover":"https://d33wubrfki0l68.cloudfront.net/31fddd4b87d0e36141c7b8cbb2dd240f8c2d26d1/026fa/demos/action-transfer/upload.png","content":"<h1 id=\"9-上传和下载\"><a href=\"#9-上传和下载\" class=\"headerlink\" title=\"9 上传和下载\"></a>9 上传和下载</h1><p>在应用中，用户处上传和下载文件是一项常用功能。你可以用它来上传数据进行分析，或者将结果作为数据集或报告下载。本章将介绍在应用中进行文件上传和下载所需的用户界面和服务器组件。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>shiny<span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9-1-上传\"><a href=\"#9-1-上传\" class=\"headerlink\" title=\"9.1 上传\"></a>9.1 上传</h2><p>我们先从文件上传开始讨论，向你展示基本的UI和server组件，然后展示它们如何在简单应用中协同工作。</p>\n<h3 id=\"9-1-1-用户界面-UI\"><a href=\"#9-1-1-用户界面-UI\" class=\"headerlink\" title=\"9.1.1 用户界面 UI\"></a>9.1.1 用户界面 UI</h3><p>支持文件上传的用户界面很简单：只需在用户界面中添加<a href=\"https://rdrr.io/pkg/shiny/man/fileInput.html\">fileInput()</a>即可。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  fileInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;upload&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Upload a file&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>与其他大多数UI组件一样，这里只需要两个必需参数：<code>id</code>和<code>label</code>。<code>width</code>、<code>buttonLabel</code>和<code>placeholder</code>参数允许你以其他方式调整外观。我不会在这里讨论它们，但你可以在<a href=\"https://rdrr.io/pkg/shiny/man/fileInput.html\">?fileInput</a>中了解更多。</p>\n<h3 id=\"9-1-2-服务器-server\"><a href=\"#9-1-2-服务器-server\" class=\"headerlink\" title=\"9.1.2 服务器 server\"></a>9.1.2 服务器 server</h3><p>在server上处理<code>fileInput()</code>比处理其他输入稍微复杂一些。大多数输入返回简单的向量，但<code>fileInput()</code>返回一个包含四列的数据框：</p>\n<ul>\n<li><p><code>name</code>：用户计算机上的原始文件名。</p>\n</li>\n<li><p><code>size</code>：文件大小（以字节为单位）。默认情况下，用户只能上传最多5MB的文件。你可以在启动Shiny之前设置<code>shiny.maxRequestSize</code>选项来增加文件大小限制。例如，要允许最多10MB，可以运行<code>options(shiny.maxRequestSize = 10 * 1024^2)</code>。</p>\n</li>\n<li><p><code>type</code>：文件的<code>“MIME type”</code>。这是文件类型的正式规范，通常根据文件扩展名得出，在Shiny应用中很少需要。</p>\n</li>\n<li><p><code>datapath</code>：数据在server上上传到的路径。请将此路径视为临时路径：如果用户上传更多文件，此文件可能会被删除。数据始终保存到临时目录，并赋予临时名称。</p>\n</li>\n</ul>\n<p>作者认为理解这种数据结构最简单的方法是制作一个简单的应用。运行以下代码并上传几个文件，以了解Shiny提供的数据。在<code>图9.1</code>中，你可以看到我上传了几张小狗照片（来自第7.3节）后的结果。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  fileInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;upload&quot;</span><span class=\"punctuation\">,</span> <span class=\"literal\">NULL</span><span class=\"punctuation\">,</span> buttonLabel <span class=\"operator\">=</span> <span class=\"string\">&quot;Upload...&quot;</span><span class=\"punctuation\">,</span> multiple <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;files&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>files <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>upload<span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/31fddd4b87d0e36141c7b8cbb2dd240f8c2d26d1/026fa/demos/action-transfer/upload.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/31fddd4b87d0e36141c7b8cbb2dd240f8c2d26d1/026fa/demos/action-transfer/upload.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图9.1 这个简单的应用可以让你看到Shiny为上传的文件提供了哪些数据。可以在 https://hadley.shinyapps.io/ms-upload 查看实时效果。\"></p>\n<p>请注意，我使用了<code>label</code>和<code>buttonLabel</code>参数来微调外观，以及<code>multiple = TRUE</code>来允许用户上传多个文件。</p>\n<h3 id=\"9-1-3-上传数据\"><a href=\"#9-1-3-上传数据\" class=\"headerlink\" title=\"9.1.3 上传数据\"></a>9.1.3 上传数据</h3><p>如果用户正在上传数据集，你需要注意以下两个细节：</p>\n<ul>\n<li><p><code>input$upload</code>在页面加载时被初始化为<code>NULL</code>，因此你需要使用<code>req(input$upload)</code>来确保你的代码等待第一个文件上传。</p>\n</li>\n<li><p><code>accept</code>参数允许你限制可能的输入。最简单的方法是提供一个文件扩展名的字符向量，如<code>accept = &quot;.csv&quot;</code>。但是，accept参数只是对浏览器的建议，并不总是强制执行，因此自行验证是个好习惯（例如第8.1节）。在R中获取文件扩展名最简单的方法是使用<a href=\"https://rdrr.io/r/tools/fileutils.html\">tools::file_ext()</a>，但要注意它会删除扩展名前面的<code>.</code>。</p>\n</li>\n</ul>\n<p>将这些想法结合起来，我们得到以下应用，你可以上传一个<code>.csv</code>或<code>.tsv</code>文件，并查看前<code>n</code>行。你可以在 <a href=\"https://hadley.shinyapps.io/ms-upload-validate\">https://hadley.shinyapps.io/ms-upload-validate</a> 查看它的运行情况。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  fileInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;upload&quot;</span><span class=\"punctuation\">,</span> <span class=\"literal\">NULL</span><span class=\"punctuation\">,</span> accept <span class=\"operator\">=</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;.csv&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;.tsv&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Rows&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">5</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span> step <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;head&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  data <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    req<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>upload<span class=\"punctuation\">)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    ext <span class=\"operator\">&lt;-</span> tools<span class=\"operator\">::</span>file_ext<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>upload<span class=\"operator\">$</span>name<span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"built_in\">switch</span><span class=\"punctuation\">(</span>ext<span class=\"punctuation\">,</span></span><br><span class=\"line\">      csv <span class=\"operator\">=</span> vroom<span class=\"operator\">::</span>vroom<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>upload<span class=\"operator\">$</span>datapath<span class=\"punctuation\">,</span> delim <span class=\"operator\">=</span> <span class=\"string\">&quot;,&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      tsv <span class=\"operator\">=</span> vroom<span class=\"operator\">::</span>vroom<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>upload<span class=\"operator\">$</span>datapath<span class=\"punctuation\">,</span> delim <span class=\"operator\">=</span> <span class=\"string\">&quot;\\t&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      validate<span class=\"punctuation\">(</span><span class=\"string\">&quot;Invalid file; Please upload a .csv or .tsv file&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>head <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    head<span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>n<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>请注意，由于<code>multiple = FALSE</code>（默认值），<code>input$file</code>将是一个单行数据框，而<code>input$file$name</code>和<code>input$file$datapath</code>将是一个长度为1的字符向量。</p>\n<h2 id=\"9-2-下载\"><a href=\"#9-2-下载\" class=\"headerlink\" title=\"9.2 下载\"></a>9.2 下载</h2><p>接下来，我们将讨论文件下载，向你展示基本的用户界面和服务器组件，然后演示如何使用它们来允许用户下载数据或报告。</p>\n<h3 id=\"9-2-1-基本操作\"><a href=\"#9-2-1-基本操作\" class=\"headerlink\" title=\"9.2.1 基本操作\"></a>9.2.1 基本操作</h3><p>同样，用户界面非常简单：使用<code>downloadButton(id)</code>或<code>downloadLink(id)</code>为用户提供一个可点击的下载文件选项。结果如<code>图9.2</code>所示。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  downloadButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;download1&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  downloadLink<span class=\"punctuation\">(</span><span class=\"string\">&quot;download2&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/24e3c954a6c32523d02cd22597227ffb7b77313e/b15ad/demos/action-transfer/download.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/24e3c954a6c32523d02cd22597227ffb7b77313e/b15ad/demos/action-transfer/download.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图9.2 一个下载按钮和一个下载链接\"></p>\n<p>你可以使用与<code>actionButtons()</code>相同的<code>class</code>和<code>icon</code>参数来自定义它们的外观，如第2.2.7节所述。</p>\n<p>与其他输出不同，<a href=\"https://rdrr.io/pkg/shiny/man/downloadButton.html\">downloadButton()</a>不与渲染函数配对。相反，你使用<a href=\"https://rdrr.io/pkg/shiny/man/downloadHandler.html\">downloadHandler()</a>，它看起来像这样：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output<span class=\"operator\">$</span>download <span class=\"operator\">&lt;-</span> downloadHandler<span class=\"punctuation\">(</span></span><br><span class=\"line\">  filename <span class=\"operator\">=</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    paste0<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dataset<span class=\"punctuation\">,</span> <span class=\"string\">&quot;.csv&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  content <span class=\"operator\">=</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>file<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    write.csv<span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> file<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p><code>downloadHandler()</code>有两个参数，都是函数：</p>\n<ul>\n<li><p><code>filename</code>应该是一个没有参数的函数，返回一个文件名（字符串）。这个函数的工作是创建将在下载对话框中显示给用户的文件名。</p>\n</li>\n<li><p><code>content</code>应该是一个带有一个参数<code>file</code>的函数，file是保存文件的路径。这个函数的工作是将文件保存在Shiny知道的位置，以便可以将其发送给用户。</p>\n</li>\n</ul>\n<p>这是一个不寻常的接口，但它允许Shiny控制文件应该保存的位置（以便可以将其放置在安全位置），同时你仍然可以控制文件的内容。</p>\n<p>接下来，我们将把这些部分组合在一起，展示如何将数据文件或报告传输给用户。</p>\n<h3 id=\"9-2-2-下载数据\"><a href=\"#9-2-2-下载数据\" class=\"headerlink\" title=\"9.2.2 下载数据\"></a>9.2.2 下载数据</h3><p>以下应用通过允许你下载<code>datasets包</code>中的任何数据集作为制表符分隔的文件，展示了数据下载的基础知识，如<code>图9.3</code>所示。我建议使用<code>.tsv</code>（制表符分隔值）而不是<code>.csv</code>（逗号分隔值），因为许多欧洲国家使用逗号来分隔数字的整数部分和小数部分（例如<code>1,23</code>与<code>1.23</code>）。这意味着它们不能使用逗号来分隔字段，而是在所谓的<code>“c”sv</code>文件中使用分号！通过使用制表符分隔的文件，你可以避免这种复杂性，因为它们在任何地方的工作方式都是相同的。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;dataset&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Pick a dataset&quot;</span><span class=\"punctuation\">,</span> ls<span class=\"punctuation\">(</span><span class=\"string\">&quot;package:datasets&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;preview&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  downloadButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;download&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Download .tsv&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  data <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    out <span class=\"operator\">&lt;-</span> get<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dataset<span class=\"punctuation\">,</span> <span class=\"string\">&quot;package:datasets&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"punctuation\">(</span><span class=\"operator\">!</span>is.data.frame<span class=\"punctuation\">(</span>out<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      validate<span class=\"punctuation\">(</span>paste0<span class=\"punctuation\">(</span><span class=\"string\">&quot;&#x27;&quot;</span><span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>dataset<span class=\"punctuation\">,</span> <span class=\"string\">&quot;&#x27; is not a data frame&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    out</span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>preview <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    head<span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  output<span class=\"operator\">$</span>download <span class=\"operator\">&lt;-</span> downloadHandler<span class=\"punctuation\">(</span></span><br><span class=\"line\">    filename <span class=\"operator\">=</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      paste0<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dataset<span class=\"punctuation\">,</span> <span class=\"string\">&quot;.tsv&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    content <span class=\"operator\">=</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>file<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      vroom<span class=\"operator\">::</span>vroom_write<span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> file<span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/eaecc41d850e5ddb2e0258dc33b939b249add5f3/800ce/demos/action-transfer/download-data.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/eaecc41d850e5ddb2e0258dc33b939b249add5f3/800ce/demos/action-transfer/download-data.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图9.3 一个更丰富的应用，允许你选择内置的数据集并在下载前预览。可以在https://hadley.shinyapps.io/ms-download-data查看实时效果。\"></p>\n<p>注意，这里使用了<a href=\"https://rdrr.io/pkg/shiny/man/validate.html\">validate()</a>来仅允许用户下载是数据框的数据集。更好的做法是对列表进行预过滤，但这样可以让您看到<code>validate()</code>的另一个应用。</p>\n<h3 id=\"9-2-3-下载报告\"><a href=\"#9-2-3-下载报告\" class=\"headerlink\" title=\"9.2.3 下载报告\"></a>9.2.3 下载报告</h3><p>除了下载数据外，您可能还希望允许您的应用下载报告，该报告总结了Shiny应用中交互式探索的结果。这是一项需要大量工作的事情，因为您还需要以不同的格式显示相同的信息，但对于高风险的应用来说，这是非常有用的。</p>\n<p>生成此类报告的一种强大方法是使用<a href=\"https://bookdown.org/yihui/rmarkdown/parameterized-reports.html\">参数化的RMarkdown文档</a>。参数化的RMarkdown文件在YAML元数据中有一个<code>params</code>字段：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title<span class=\"operator\">:</span> My Document</span><br><span class=\"line\">output<span class=\"operator\">:</span> html_document</span><br><span class=\"line\">params<span class=\"operator\">:</span></span><br><span class=\"line\">  year<span class=\"operator\">:</span> <span class=\"number\">2018</span></span><br><span class=\"line\">  region<span class=\"operator\">:</span> Europe</span><br><span class=\"line\">  printcode<span class=\"operator\">:</span> <span class=\"literal\">TRUE</span></span><br><span class=\"line\">  data<span class=\"operator\">:</span> file.csv</span><br></pre></td></tr></table></figure>\n\n<p>在文档中，您可以使用<code>params$year</code>、<code>params$region</code>等来引用这些值。YAML元数据中的值是默认值；您通常通过在调用<a href=\"https://pkgs.rstudio.com/rmarkdown/reference/render.html\">rmarkdown::render()</a>时提供<code>params</code>参数来覆盖它们。这使得从相同的<code>.Rmd</code>生成许多不同的报告变得容易。</p>\n<p>以下是一个简单的示例，改编自<a href=\"https://shiny.rstudio.com/articles/generating-reports.html\">https://shiny.rstudio.com/articles/generating-reports.html</a>，该文章更详细地描述了这种技术。关键思想是从<code>downloadHander()</code>的<code>content</code>参数中调用<code>rmarkdown::render()</code>。如果您想生成其他输出格式，只需在<code>.Rmd</code>中更改输出格式，并确保更新扩展名（例如，更改为.pdf）。请在<a href=\"https://hadley.shinyapps.io/ms-download-rmd\">https://hadley.shinyapps.io/ms-download-rmd</a>查看实时效果。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Number of points&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span> <span class=\"number\">100</span><span class=\"punctuation\">,</span> <span class=\"number\">50</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  downloadButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;report&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Generate report&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>report <span class=\"operator\">&lt;-</span> downloadHandler<span class=\"punctuation\">(</span></span><br><span class=\"line\">    filename <span class=\"operator\">=</span> <span class=\"string\">&quot;report.html&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    content <span class=\"operator\">=</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>file<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      params <span class=\"operator\">&lt;-</span> <span class=\"built_in\">list</span><span class=\"punctuation\">(</span>n <span class=\"operator\">=</span> input<span class=\"operator\">$</span>n<span class=\"punctuation\">)</span></span><br><span class=\"line\">      </span><br><span class=\"line\">      id <span class=\"operator\">&lt;-</span> showNotification<span class=\"punctuation\">(</span></span><br><span class=\"line\">        <span class=\"string\">&quot;Rendering report...&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">        duration <span class=\"operator\">=</span> <span class=\"literal\">NULL</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">        closeButton <span class=\"operator\">=</span> <span class=\"literal\">FALSE</span></span><br><span class=\"line\">      <span class=\"punctuation\">)</span></span><br><span class=\"line\">      <span class=\"built_in\">on.exit</span><span class=\"punctuation\">(</span>removeNotification<span class=\"punctuation\">(</span>id<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> add <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">      rmarkdown<span class=\"operator\">::</span>render<span class=\"punctuation\">(</span><span class=\"string\">&quot;report.Rmd&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">        output_file <span class=\"operator\">=</span> file<span class=\"punctuation\">,</span></span><br><span class=\"line\">        params <span class=\"operator\">=</span> params<span class=\"punctuation\">,</span></span><br><span class=\"line\">        envir <span class=\"operator\">=</span> new.env<span class=\"punctuation\">(</span>parent <span class=\"operator\">=</span> <span class=\"built_in\">globalenv</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">      <span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>渲染一个<code>.Rmd</code>文件通常需要几秒钟的时间，因此这是使用第8.2节中提到的通知的好地方。</p>\n<p>还有一些其他值得了解的技巧：</p>\n<ul>\n<li><p>RMarkdown在当前工作目录中运行，这在许多部署场景中可能会失败（例如，在shinyapps.io上）。您可以通过在应用启动时将报告复制到临时目录来解决此问题（即在server函数外部）：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">report_path <span class=\"operator\">&lt;-</span> tempfile<span class=\"punctuation\">(</span>fileext <span class=\"operator\">=</span> <span class=\"string\">&quot;.Rmd&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">file.copy<span class=\"punctuation\">(</span><span class=\"string\">&quot;report.Rmd&quot;</span><span class=\"punctuation\">,</span> report_path<span class=\"punctuation\">,</span> overwrite <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>然后，在调用<code>rmarkdown::render()</code>时，将<code>&quot;report.Rmd&quot;</code>替换为<code>report_path</code>：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rmarkdown<span class=\"operator\">::</span>render<span class=\"punctuation\">(</span>report_path<span class=\"punctuation\">,</span> </span><br><span class=\"line\">  output_file <span class=\"operator\">=</span> file<span class=\"punctuation\">,</span></span><br><span class=\"line\">  params <span class=\"operator\">=</span> params<span class=\"punctuation\">,</span></span><br><span class=\"line\">  envir <span class=\"operator\">=</span> new.env<span class=\"punctuation\">(</span>parent <span class=\"operator\">=</span> <span class=\"built_in\">globalenv</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>默认情况下，RMarkdown会在当前进程中渲染报告，这意味着它将继承Shiny应用的许多设置（如加载的包、选项等）。为了获得更大的健壮性，我建议使用<code>callr包</code>在单独的R会话中运行<code>render()</code>：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render_report <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> params<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  rmarkdown<span class=\"operator\">::</span>render<span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span></span><br><span class=\"line\">    output_file <span class=\"operator\">=</span> output<span class=\"punctuation\">,</span></span><br><span class=\"line\">    params <span class=\"operator\">=</span> params<span class=\"punctuation\">,</span></span><br><span class=\"line\">    envir <span class=\"operator\">=</span> new.env<span class=\"punctuation\">(</span>parent <span class=\"operator\">=</span> <span class=\"built_in\">globalenv</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>report <span class=\"operator\">&lt;-</span> downloadHandler<span class=\"punctuation\">(</span></span><br><span class=\"line\">    filename <span class=\"operator\">=</span> <span class=\"string\">&quot;report.html&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    content <span class=\"operator\">=</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>file<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      params <span class=\"operator\">&lt;-</span> <span class=\"built_in\">list</span><span class=\"punctuation\">(</span>n <span class=\"operator\">=</span> input<span class=\"operator\">$</span>slider<span class=\"punctuation\">)</span></span><br><span class=\"line\">      callr<span class=\"operator\">::</span>r<span class=\"punctuation\">(</span></span><br><span class=\"line\">        render_report<span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"built_in\">list</span><span class=\"punctuation\">(</span>input <span class=\"operator\">=</span> report_path<span class=\"punctuation\">,</span> output <span class=\"operator\">=</span> file<span class=\"punctuation\">,</span> params <span class=\"operator\">=</span> params<span class=\"punctuation\">)</span></span><br><span class=\"line\">      <span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>您可以在Mastering Shiny GitHub仓库中的<a href=\"https://github.com/hadley/mastering-shiny/tree/master/rmarkdown-report\">rmarkdown-report&#x2F;</a>文件夹中看到所有这些组件组合在一起。</p>\n<p><a href=\"https://github.com/rstudio/shinymeta\">shinymeta</a>包解决了一个相关的问题：有时您需要将Shiny应用的当前状态转换为可在未来重新运行的可重复报告。要了解更多信息，请查阅Joe Cheng在useR! 2019年主题演讲中介绍的“<a href=\"https://www.youtube.com/watch?v=5KByRC6eqC8\">Shiny的神圣目标：交互性与可重复性</a>”。</p>\n<h2 id=\"9-3-案例研究\"><a href=\"#9-3-案例研究\" class=\"headerlink\" title=\"9.3 案例研究\"></a>9.3 案例研究</h2><p>最后，我们将通过一个简单的案例研究来结束本章。在这个案例中，我们将上传一个文件（用户可以指定分隔符），预览它，使用Sam Firke的<a href=\"http://sfirke.github.io/janitor\">janitor</a>包进行一些可选的转换，然后让用户将其下载为<code>.tsv</code>文件。</p>\n<p>为了更容易地理解如何使用这个应用，我使用了<a href=\"https://rdrr.io/pkg/shiny/man/sidebarLayout.html\">sidebarLayout()</a>来将应用分为三个主要步骤：</p>\n<ul>\n<li><p>上传和解析文件</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui_upload <span class=\"operator\">&lt;-</span> sidebarLayout<span class=\"punctuation\">(</span></span><br><span class=\"line\">  sidebarPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">    fileInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;file&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Data&quot;</span><span class=\"punctuation\">,</span> buttonLabel <span class=\"operator\">=</span> <span class=\"string\">&quot;Upload...&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    textInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;delim&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Delimiter (leave blank to guess)&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;skip&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Rows to skip&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;rows&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Rows to preview&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">10</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  mainPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">    h3<span class=\"punctuation\">(</span><span class=\"string\">&quot;Raw data&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;preview1&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>清理文件</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui_clean <span class=\"operator\">&lt;-</span> sidebarLayout<span class=\"punctuation\">(</span></span><br><span class=\"line\">  sidebarPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">    checkboxInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;snake&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Rename columns to snake case?&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    checkboxInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;constant&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Remove constant columns?&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    checkboxInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;empty&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Remove empty cols?&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  mainPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">    h3<span class=\"punctuation\">(</span><span class=\"string\">&quot;Cleaner data&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;preview2&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下载文件</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui_download <span class=\"operator\">&lt;-</span> fluidRow<span class=\"punctuation\">(</span></span><br><span class=\"line\">  column<span class=\"punctuation\">(</span>width <span class=\"operator\">=</span> <span class=\"number\">12</span><span class=\"punctuation\">,</span> downloadButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;download&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">class</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;btn-block&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>然后，这些文件被组合成一个单独的<a href=\"https://rdrr.io/pkg/shiny/man/fluidPage.html\">fluidPage()</a>：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  ui_upload<span class=\"punctuation\">,</span></span><br><span class=\"line\">  ui_clean<span class=\"punctuation\">,</span></span><br><span class=\"line\">  ui_download</span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>这种相同的组织方式使得理解应用程序变得更加容易。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"comment\"># Upload ---------------------------------------------------------</span></span><br><span class=\"line\">  raw <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    req<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>file<span class=\"punctuation\">)</span></span><br><span class=\"line\">    delim <span class=\"operator\">&lt;-</span> <span class=\"keyword\">if</span> <span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>delim <span class=\"operator\">==</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">)</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">else</span> input<span class=\"operator\">$</span>delim</span><br><span class=\"line\">    vroom<span class=\"operator\">::</span>vroom<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>file<span class=\"operator\">$</span>datapath<span class=\"punctuation\">,</span> delim <span class=\"operator\">=</span> delim<span class=\"punctuation\">,</span> skip <span class=\"operator\">=</span> input<span class=\"operator\">$</span>skip<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>preview1 <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span>head<span class=\"punctuation\">(</span>raw<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>rows<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\"># Clean ----------------------------------------------------------</span></span><br><span class=\"line\">  tidied <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    out <span class=\"operator\">&lt;-</span> raw<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>snake<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"built_in\">names</span><span class=\"punctuation\">(</span>out<span class=\"punctuation\">)</span> <span class=\"operator\">&lt;-</span> janitor<span class=\"operator\">::</span>make_clean_names<span class=\"punctuation\">(</span><span class=\"built_in\">names</span><span class=\"punctuation\">(</span>out<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>empty<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      out <span class=\"operator\">&lt;-</span> janitor<span class=\"operator\">::</span>remove_empty<span class=\"punctuation\">(</span>out<span class=\"punctuation\">,</span> <span class=\"string\">&quot;cols&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>constant<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      out <span class=\"operator\">&lt;-</span> janitor<span class=\"operator\">::</span>remove_constant<span class=\"punctuation\">(</span>out<span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    out</span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>preview2 <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span>head<span class=\"punctuation\">(</span>tidied<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>rows<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\"># Download -------------------------------------------------------</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>download <span class=\"operator\">&lt;-</span> downloadHandler<span class=\"punctuation\">(</span></span><br><span class=\"line\">    filename <span class=\"operator\">=</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      paste0<span class=\"punctuation\">(</span>tools<span class=\"operator\">::</span>file_path_sans_ext<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>file<span class=\"operator\">$</span>name<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;.tsv&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    content <span class=\"operator\">=</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>file<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      vroom<span class=\"operator\">::</span>vroom_write<span class=\"punctuation\">(</span>tidied<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> file<span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/25874d076587129b1d92ceff28de69b7e5aec561/31f22/demos/action-transfer/case-study.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/25874d076587129b1d92ceff28de69b7e5aec561/31f22/demos/action-transfer/case-study.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图9.4 一个允许用户上传文件、执行一些简单的清理操作，然后下载结果的应用程序。可访问 https://hadley.shinyapps.io/ms-case-study 查看实时效果。\"></p>\n</li>\n</ul>\n<h2 id=\"9-4-练习\"><a href=\"#9-4-练习\" class=\"headerlink\" title=\"9.4 练习\"></a>9.4 练习</h2><ol>\n<li><p>使用Thomas Lin Pedersen的<a href=\"https://ambient.data-imaginist.com/\">ambient</a>包生成<a href=\"https://ambient.data-imaginist.com/reference/noise_worley.html\">Worley噪声</a>，并下载其PNG图像。</p>\n</li>\n<li><p>创建一个应用程序，允许用户上传CSV文件，选择一个变量，然后对该变量执行<a href=\"https://rdrr.io/r/stats/t.test.html\">t.test()</a>。在用户上传CSV文件后，您需要使用<a href=\"https://rdrr.io/pkg/shiny/man/updateSelectInput.html\">updateSelectInput()</a>来填充可用的变量。详情请参阅第10.1节。</p>\n</li>\n<li><p>创建一个应用程序，允许用户上传CSV文件，选择一个变量，绘制直方图，然后下载直方图。作为额外的挑战，允许用户从<code>.png</code>、<code>.pdf</code>和<code>.svg</code>输出格式中进行选择。</p>\n</li>\n<li><p>编写一个应用程序，允许用户使用Ryan Timpe的<a href=\"https://github.com/ryantimpe/brickr\">brickr</a>包从任何<code>.png</code>文件创建乐高马赛克。完成基本功能后，添加控件以允许用户选择马赛克的大小（以砖块为单位），并选择使用<code>“universal”</code>或<code>“generic”</code>颜色调色板。</p>\n</li>\n<li><p>第9.3节中的最后一个应用程序包含了一个大型的响应式表达式：</p>\n <figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tidied <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  out <span class=\"operator\">&lt;-</span> raw<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> <span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>snake<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"built_in\">names</span><span class=\"punctuation\">(</span>out<span class=\"punctuation\">)</span> <span class=\"operator\">&lt;-</span> janitor<span class=\"operator\">::</span>make_clean_names<span class=\"punctuation\">(</span><span class=\"built_in\">names</span><span class=\"punctuation\">(</span>out<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> <span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>empty<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    out <span class=\"operator\">&lt;-</span> janitor<span class=\"operator\">::</span>remove_empty<span class=\"punctuation\">(</span>out<span class=\"punctuation\">,</span> <span class=\"string\">&quot;cols&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> <span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>constant<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    out <span class=\"operator\">&lt;-</span> janitor<span class=\"operator\">::</span>remove_constant<span class=\"punctuation\">(</span>out<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  out</span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p> 将其分解为多个部分，以便当<code>input$empty</code>发生变化时，不会重新运行<code>janitor::make_clean_names()</code>。</p>\n</li>\n</ol>\n<h2 id=\"9-5-总结\"><a href=\"#9-5-总结\" class=\"headerlink\" title=\"9.5 总结\"></a>9.5 总结</h2><p>在本章中，您学习了如何使用<code>fileInput()</code>和<code>downloadButton()</code>来在用户之间传输文件。大多数挑战要么来自处理上传的文件，要么来自生成要下载的文件，因此我向您展示了如何处理一些常见的情况。如果我没有涵盖您在此处的特定挑战，那么您需要将您独特的创造力应用于问题中。</p>\n<p>下一章将帮助您处理在处理用户提供的数据时遇到的一个常见挑战：您需要动态地调整用户界面以更好地适应数据。我将从一些易于理解且可以在许多情况下应用的简单技术开始，逐渐过渡到完全动态的用户界面。</p>\n<h1 id=\"加关注\"><a href=\"#加关注\" class=\"headerlink\" title=\"加关注\"></a>加关注</h1><p>关注公众号“生信之巅”。</p>\n<table align=\"center\"><tr>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅微信公众号\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-right: 0px;margin-bottom: 5px;align: center;\"></td>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅小程序码\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-left: 0px;margin-bottom: 5px;align: center\"></td>\n</tr></table>\n\n\n<p><font color=\"#FF0000\"><ruby><b>敬告</b>：使用文中脚本请引用本文网址，请尊重本人的劳动成果，谢谢！<rt><b>Notice</b>: When you use the scripts in this article, please cite the link of this webpage. Thank you!</rt></ruby></font></p>\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"编程","path":"api/tags/编程.json"},{"name":"Shiny入门系列","path":"api/tags/Shiny入门系列.json"}]},{"title":"Shiny从入门到入定——8-用户反馈","slug":"Shiny从入门到入定——8-用户反馈","date":"2024-04-14T05:18:07.000Z","updated":"2024-04-14T05:37:41.141Z","comments":true,"path":"api/articles/Shiny从入门到入定——8-用户反馈.json","excerpt":null,"keywords":null,"cover":"https://d33wubrfki0l68.cloudfront.net/4ce6e5665e89d296ce5ee685d1b44ac44f648c1c/42897/demos/action-feedback/feedback-odd.png","content":"<h1 id=\"8-用户反馈\"><a href=\"#8-用户反馈\" class=\"headerlink\" title=\"8 用户反馈\"></a>8 用户反馈</h1><p>你通常可以通过向用户展示更多关于正在发生的事情的信息来提高应用程序的可用性。这可能表现为当输入不合理时显示更好的消息，或者对需要很长时间的操作使用进度条。一些反馈是通过输出自然发生的，你已经知道如何使用它们，但你经常还需要其他的东西。本章的目标是向你展示一些其他的选择。</p>\n<p>我们将从<code>验证</code>技术开始，在输入（或输入组合）处于无效状态时通知用户。然后我们将继续讨论<code>通知</code>，向用户发送一般消息，以及<code>进度条</code>，这些为包含许多小步骤的耗时操作提供了详细信息。最后，我们将讨论危险操作，以及如何使用<code>确认</code>对话框或<code>撤销</code>操作的能力来让你的用户安心。</p>\n<p>在本章中，我们将使用Andy Merlino的<a href=\"https://github.com/merlinoa/shinyFeedback\">shinyFeedback</a>和John Coene的<a href=\"http://waiter.john-coene.com/\">waiter</a>。你还应该关注Joe Cheng正在开发的<a href=\"https://rstudio.github.io/shinyvalidate/\">shinyvalidate</a>包。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>shiny<span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-1-验证\"><a href=\"#8-1-验证\" class=\"headerlink\" title=\"8.1 验证\"></a>8.1 验证</h2><p>你可以给用户提供的第一个也是最重要的反馈是，他们的输入有误。这与在R中编写好函数类似：用户友好的函数会给出清晰的错误消息，描述期望的输入是什么，以及你是如何违背这些期望的。思考用户可能会如何误用你的应用程序，可以让你在用户界面（UI）中提供有用的消息，而不是让错误渗透到R代码中并产生无用的错误信息。</p>\n<h3 id=\"8-1-1-验证输入\"><a href=\"#8-1-1-验证输入\" class=\"headerlink\" title=\"8.1.1 验证输入\"></a>8.1.1 验证输入</h3><p>通过shinyFeedback包向用户提供额外的反馈是一个很好的方法。使用它分为两步。首先，你需要在用户界面（ui）中添加useShinyFeedback()。这将为显示美观的错误消息设置所需的HTML和JavaScript：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  shinyFeedback<span class=\"operator\">::</span>useShinyFeedback<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">10</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;half&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>然后在您的server()函数中，您调用反馈函数之一：feedback()、feedbackWarning()、feedbackDanger()和feedbackSuccess()。他们都有三个关键参数：</p>\n<ul>\n<li><code>inputId</code>，放置反馈的输入的id。</li>\n<li><code>show</code>，一个逻辑值，确定是否显示反馈。</li>\n<li><code>text</code>，要显示的文本。</li>\n</ul>\n<p>它们还有颜色和图标参数，你可以使用它们进一步自定义外观。更多详细信息请查阅文档。</p>\n<p>让我们看看这在一个真实例子中是如何实现的，假设我们只允许输入偶数。图8.1显示了结果。</p>\n<figure class=\"highlight plaintext\"><figcaption><span><- function(input, output, session) &#123;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  half &lt;- reactive(&#123;</span><br><span class=\"line\">    even &lt;- input$n %% 2 == 0</span><br><span class=\"line\">    shinyFeedback::feedbackWarning(&quot;n&quot;, !even, &quot;Please select an even number&quot;)</span><br><span class=\"line\">    input$n / 2    </span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  </span><br><span class=\"line\">  output$half &lt;- renderText(half())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/4ce6e5665e89d296ce5ee685d1b44ac44f648c1c/42897/demos/action-feedback/feedback-odd.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/4ce6e5665e89d296ce5ee685d1b44ac44f648c1c/42897/demos/action-feedback/feedback-odd.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图8.1：使用feedbackWarning()显示无效输入的警告。左侧的应用程序显示了一个有效的输入，右侧的应用程序显示了一个无效的（奇数）输入并带有警告消息。请访问https://hadley.shinyapps.io/ms-feedback查看实时效果。\"></p>\n<p>请注意，错误消息已经显示，但输出仍然更新了。通常，你不想这样做，因为无效的输入可能会引发你不希望显示给用户的无用的R错误。要阻止输入触发响应式更改，你需要一个新工具：req()，即“required”的缩写。它的用法如下：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  half <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    even <span class=\"operator\">&lt;-</span> input<span class=\"operator\">$</span>n <span class=\"operator\">%%</span> <span class=\"number\">2</span> <span class=\"operator\">==</span> <span class=\"number\">0</span></span><br><span class=\"line\">    shinyFeedback<span class=\"operator\">::</span>feedbackWarning<span class=\"punctuation\">(</span><span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">,</span> <span class=\"operator\">!</span>even<span class=\"punctuation\">,</span> <span class=\"string\">&quot;Please select an even number&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    req<span class=\"punctuation\">(</span>even<span class=\"punctuation\">)</span></span><br><span class=\"line\">    input<span class=\"operator\">$</span>n <span class=\"operator\">/</span> <span class=\"number\">2</span>    </span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>half <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span>half<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>当<code>req()</code>的输入不为真时，它会发送一个特殊信号，告诉Shiny这个响应式组件没有它所需的所有输入，因此应该“暂停”。在将其与<code>validate()</code>结合使用之前，我们先简要讨论一下这个问题。</p>\n<h3 id=\"8-1-2-使用req-取消执行\"><a href=\"#8-1-2-使用req-取消执行\" class=\"headerlink\" title=\"8.1.2 使用req()取消执行\"></a>8.1.2 使用<code>req()</code>取消执行</h3><p>通过跳出验证的范畴，可以更容易地理解<a href=\"https://rdrr.io/pkg/shiny/man/req.html\">req()</a>。你可能已经注意到，当你启动一个应用程序时，即使用户还没有进行任何操作，完整的响应式图也会被计算出来。当你能够为输入选择有意义的默认<code>值</code>时，这可以很好地工作。但这并不总是可能的，有时你可能希望等到用户实际执行了某些操作再进行计算。这种情况通常出现在以下三种控件中：</p>\n<ul>\n<li><p>在<a href=\"https://rdrr.io/pkg/shiny/man/textInput.html\">textInput()</a>中，你使用了<code>value = &quot;&quot;</code>，并且不希望用户输入任何内容之前执行任何操作。</p>\n</li>\n<li><p>在<a href=\"https://rdrr.io/pkg/shiny/man/selectInput.html\">selectInput()</a>中，你提供了一个空选项<code>&quot;&quot;</code>，并且不希望用户进行选择之前执行任何操作。</p>\n</li>\n<li><p>在<a href=\"https://rdrr.io/pkg/shiny/man/fileInput.html\">fileInput()</a>中，用户在上传任何内容之前，其结果都是空的。我们将在<code>9.1</code>节中再次讨论这个问题。</p>\n</li>\n</ul>\n<p>我们需要一种方法来“暂停”响应式组件，以便在满足某个条件之前不会发生任何事情。这就是<code>req()</code>的工作，它会在允许响应式生产者继续之前检查所需的值。</p>\n<p>例如，考虑以下应用程序，它将生成英语或毛利语的问候语。如果你运行这个应用程序，你会看到一个错误，如图<code>8.2</code>所示，因为在<code>greetings</code>向量中没有与默认选项<code>&quot;&quot;</code>相对应的条目。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;language&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Language&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;English&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Maori&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;name&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Name&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;greeting&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  greetings <span class=\"operator\">&lt;-</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span></span><br><span class=\"line\">    English <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">    Maori <span class=\"operator\">=</span> <span class=\"string\">&quot;Kia ora&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>greeting <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    paste0<span class=\"punctuation\">(</span>greetings<span class=\"punctuation\">[[</span>input<span class=\"operator\">$</span>language<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot; &quot;</span><span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>name<span class=\"punctuation\">,</span> <span class=\"string\">&quot;!&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/8983f6fd77bdc3b97d45f06a7fdd0c67aaf52b3d/b3d13/demos/action-feedback/require-simple.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/8983f6fd77bdc3b97d45f06a7fdd0c67aaf52b3d/b3d13/demos/action-feedback/require-simple.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图8.2：当应用程序加载时，由于尚未选择语言，因此会显示一条无信息量的错误消息。\"></p>\n<p>我们可以使用<code>req()</code>来解决这个问题，如下所示。现在，在用户为语言和姓名都提供了值之前，将不会显示任何内容，如图<code>8.3</code>所示</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  greetings <span class=\"operator\">&lt;-</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span></span><br><span class=\"line\">    English <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">    Maori <span class=\"operator\">=</span> <span class=\"string\">&quot;Kia ora&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>greeting <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    req<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>language<span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>name<span class=\"punctuation\">)</span></span><br><span class=\"line\">    paste0<span class=\"punctuation\">(</span>greetings<span class=\"punctuation\">[[</span>input<span class=\"operator\">$</span>language<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot; &quot;</span><span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>name<span class=\"punctuation\">,</span> <span class=\"string\">&quot;!&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/e8048494af9066952f69e4c7e9ec06c826202c34/4933a/demos/action-feedback/require-simple2-langauge.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/e8048494af9066952f69e4c7e9ec06c826202c34/4933a/demos/action-feedback/require-simple2-langauge.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图8.3：通过使用req()，只有在提供了语言和姓名之后，输出才会显示。请访问https://hadley.shinyapps.io/ms-require-simple2查看实时效果。\"><br><code>req()</code>通过发出一个特殊<code>条件</code>来工作。这个特殊条件导致所有下游的响应式组件和输出停止执行。从技术上讲，它使任何下游的响应式消费者处于无效状态。我们将在第<code>16</code>章中再次回到这个术语。</p>\n<p><code>req()</code>的设计是使得<code>req(inputx)</code>只有在用户提供了值的情况下才会继续执行，而不考虑输入控件的类型。如果需要，你也可以使用<code>req()</code>与自己的逻辑语句结合使用。例如，<code>req(inputa &gt; 0)</code>会在<code>a</code>大于0时允许计算继续进行；这通常是我们执行验证时使用的形式，我们将在下面看到。</p>\n<h3 id=\"8-1-3-req-和验证\"><a href=\"#8-1-3-req-和验证\" class=\"headerlink\" title=\"8.1.3 req()和验证\"></a>8.1.3 <code>req()</code>和验证</h3><p>让我们将<code>req()</code>和shinyFeedback结合起来，解决一个更具挑战性的问题。我将回到我们在第1章中制作的简单应用程序，该应用程序允许你选择内置数据集并查看其内容。我将通过使用<code>textInput()</code>而不是<code>selectInput()</code>来使其更加通用和复杂。用户界面几乎没有变化：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  shinyFeedback<span class=\"operator\">::</span>useShinyFeedback<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;dataset&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Dataset name&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;data&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>但是服务器函数需要变得稍微复杂一些。我们将以两种方式使用<code>req()</code>：</p>\n<ul>\n<li><p>我们只想在用户输入了值之后才进行计算，所以我们使用<code>req(input$dataset)</code>。</p>\n</li>\n<li><p>然后，我们检查提供的名称是否确实存在。如果不存在，我们将显示一条错误消息，然后使用<code>req()</code>取消计算。请注意<code>cancelOutput = TRUE</code>的使用：通常取消响应式组件会重置所有下游输出；使用<code>cancelOutput = TRUE</code>会使它们保持显示上一次的有效值。这对于<code>textInput()</code>来说很重要，因为您可能在输入名称的过程中触发更新。</p>\n</li>\n</ul>\n<p>结果如图<code>8.4</code>所示。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  data <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    req<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dataset<span class=\"punctuation\">)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    exists <span class=\"operator\">&lt;-</span> exists<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dataset<span class=\"punctuation\">,</span> <span class=\"string\">&quot;package:datasets&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    shinyFeedback<span class=\"operator\">::</span>feedbackDanger<span class=\"punctuation\">(</span><span class=\"string\">&quot;dataset&quot;</span><span class=\"punctuation\">,</span> <span class=\"operator\">!</span>exists<span class=\"punctuation\">,</span> <span class=\"string\">&quot;Unknown dataset&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    req<span class=\"punctuation\">(</span>exists<span class=\"punctuation\">,</span> cancelOutput <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    get<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dataset<span class=\"punctuation\">,</span> <span class=\"string\">&quot;package:datasets&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>data <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    head<span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/12970a9665fbc639f4428c014c524b62f9e72373/5af05/demos/action-feedback/require-cancel-ok.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/12970a9665fbc639f4428c014c524b62f9e72373/5af05/demos/action-feedback/require-cancel-ok.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图8.4：加载时，表格为空，因为数据集名称为空。在我们输入一个有效数据集名称（iris）后，数据会显示出来，即使按下退格键以输入新的数据集名称时，数据仍会继续显示。请访问https://hadley.shinyapps.io/ms-require-cancel查看实时效果。\"></p>\n<h3 id=\"8-1-4-验证输出\"><a href=\"#8-1-4-验证输出\" class=\"headerlink\" title=\"8.1.4 验证输出\"></a>8.1.4 验证输出</h3><p>当问题与单个输入相关时，shinyFeedback非常有用。但有时无效状态是多个输入组合的结果。在这种情况下，将错误放在输入旁边并没有太大意义（应该放在哪个输入旁边呢？），相反，将其放在输出中更有意义。</p>\n<p>您可以使用shiny内置的一个工具来实现：<a href=\"https://rdrr.io/pkg/shiny/man/validate.html\">validate()</a>。当在响应式组件或输出中调用时，<code>validate(message)</code>会停止其余代码的执行，并在任何下游输出中显示<code>message</code>。以下代码显示了一个简单示例，其中我们不想记录或取负值的平方根。您可以在图<code>8.5</code>中查看结果。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;x&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;x&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;trans&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;transformation&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">    choices <span class=\"operator\">=</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;square&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;log&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;square-root&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;out&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>out <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>x <span class=\"operator\">&lt;</span> <span class=\"number\">0</span> <span class=\"operator\">&amp;&amp;</span> input<span class=\"operator\">$</span>trans <span class=\"operator\">%in%</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;log&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;square-root&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      validate<span class=\"punctuation\">(</span><span class=\"string\">&quot;x can not be negative for this transformation&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">switch</span><span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>trans<span class=\"punctuation\">,</span></span><br><span class=\"line\">      square <span class=\"operator\">=</span> input<span class=\"operator\">$</span>x <span class=\"operator\">^</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;square-root&quot;</span> <span class=\"operator\">=</span> <span class=\"built_in\">sqrt</span><span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>x<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"built_in\">log</span> <span class=\"operator\">=</span> <span class=\"built_in\">log</span><span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>x<span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/c1c59bed1d77fa2aea32024bbaa907e5dbba6244/b5824/demos/action-feedback/validate-init.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/c1c59bed1d77fa2aea32024bbaa907e5dbba6244/b5824/demos/action-feedback/validate-init.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图8.5：如果输入有效，输出会显示转换结果。如果输入的组合无效，则输出会被替换为一条信息性消息。\"></p>\n<h2 id=\"8-2-通知\"><a href=\"#8-2-通知\" class=\"headerlink\" title=\"8.2 通知\"></a>8.2 通知</h2><p>如果没有问题，您只是想让用户知道发生了什么，那么您需要一个<code>通知</code>。在Shiny中，通知是通过<a href=\"https://rdrr.io/pkg/shiny/man/showNotification.html\">showNotification()</a>创建的，并堆叠在页面的右下角。使用<code>showNotification()</code>有三种基本方式：</p>\n<ul>\n<li><p>显示一个临时通知，该通知在固定时间后自动消失。</p>\n</li>\n<li><p>在进程开始时显示通知，并在进程结束时将其移除。</p>\n</li>\n<li><p>使用渐进更新来更新单个通知。</p>\n</li>\n</ul>\n<p>下面将讨论这三种技术。</p>\n<h3 id=\"8-2-1-临时通知\"><a href=\"#8-2-1-临时通知\" class=\"headerlink\" title=\"8.2.1 临时通知\"></a>8.2.1 临时通知</h3><p>使用<code>showNotification()</code>的最简单方法是只传入一个参数：您想要显示的消息。由于很难通过截图捕捉这种行为，所以如果您想看到它的实际效果，请访问<a href=\"https://hadley.shinyapps.io/ms-notification-transient\">https://hadley.shinyapps.io/ms-notification-transient</a>。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;goodnight&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Good night&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>goodnight<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;So long&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;Farewell&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;Auf Wiedersehen&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;Adieu&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>默认情况下，消息将在5秒后消失，你可以通过设置<code>duration</code>来覆盖这个时间，或者用户可以点击关闭按钮提前关闭它。如果你想让通知更加醒目，你可以将<code>type</code>参数设置为“message”、“warning”或“error”其中之一。图<code>8.6</code>展示了这些通知的外观。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>goodnight<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;So long&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;Farewell&quot;</span><span class=\"punctuation\">,</span> type <span class=\"operator\">=</span> <span class=\"string\">&quot;message&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;Auf Wiedersehen&quot;</span><span class=\"punctuation\">,</span> type <span class=\"operator\">=</span> <span class=\"string\">&quot;warning&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;Adieu&quot;</span><span class=\"punctuation\">,</span> type <span class=\"operator\">=</span> <span class=\"string\">&quot;error&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/87c1065fb140b5924f0a32297421656e48ef7e11/4fe18/images/action-feedback/notify-1.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/87c1065fb140b5924f0a32297421656e48ef7e11/4fe18/images/action-feedback/notify-1.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\"></p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/d2d0c53e19a116f900ef892da0dd4580b47cf71e/993ed/images/action-feedback/notify-2.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/d2d0c53e19a116f900ef892da0dd4580b47cf71e/993ed/images/action-feedback/notify-2.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\"></p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/9fea3bd7890e9ec4ba7ab1fa1f84d0881cea23ee/d4571/images/action-feedback/notify-3.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/9fea3bd7890e9ec4ba7ab1fa1f84d0881cea23ee/d4571/images/action-feedback/notify-3.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图8.6：点击“晚安”后通知的显示过程：第一个通知出现，再过三秒，所有通知都将显示出来，随后通知开始消失。实时查看效果，请访问https://hadley.shinyapps.io/ms-notify-persistent。\"></p>\n<h3 id=\"8-2-2-完成时移除\"><a href=\"#8-2-2-完成时移除\" class=\"headerlink\" title=\"8.2.2 完成时移除\"></a>8.2.2 完成时移除</h3><p>将通知的存在与一个长时间运行的任务关联起来通常很有用。在这种情况下，你希望在任务开始时显示通知，并在任务完成时移除通知。为此，你需要：</p>\n<ul>\n<li><p>设置<code>duration = NULL</code>和<code>closeButton = FALSE</code>，以确保通知在任务完成之前一直保持可见状态。</p>\n</li>\n<li><p>保存<a href=\"https://rdrr.io/pkg/shiny/man/showNotification.html\">showNotification()</a>返回的id，然后将其传递给<a href=\"https://rdrr.io/pkg/shiny/man/showNotification.html\">removeNotification()</a>。最可靠的方法是使用<a href=\"https://rdrr.io/r/base/on.exit.html\">on.exit()</a>，这可以确保无论任务如何完成（成功或出错），通知都会被移除。你可以在“<a href=\"v\">更改和恢复状态</a>”一章中了解更多关于<code>on.exit()</code>的信息。</p>\n</li>\n</ul>\n<p>以下示例将各个部分组合在一起，展示了如何在读取大型csv文件时向用户更新状态：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  data <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    id <span class=\"operator\">&lt;-</span> showNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;Reading data...&quot;</span><span class=\"punctuation\">,</span> duration <span class=\"operator\">=</span> <span class=\"literal\">NULL</span><span class=\"punctuation\">,</span> closeButton <span class=\"operator\">=</span> <span class=\"literal\">FALSE</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"built_in\">on.exit</span><span class=\"punctuation\">(</span>removeNotification<span class=\"punctuation\">(</span>id<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> add <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    read.csv<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>file<span class=\"operator\">$</span>datapath<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>一般来说，这类通知会存在于一个响应式环境中，因为这可以确保只有当需要时，长时间运行的计算才会重新执行。</p>\n<h3 id=\"8-2-3-渐进式更新\"><a href=\"#8-2-3-渐进式更新\" class=\"headerlink\" title=\"8.2.3 渐进式更新\"></a>8.2.3 渐进式更新</h3><p>正如你在第一个示例中所看到的，多次调用showNotification()通常会创建多个通知。相反，你可以通过捕获第一次调用的id并在后续调用中使用它来更新单个通知。如果你的长时间运行的任务包含多个子组件，这将非常有用。你可以在<a href=\"https://hadley.shinyapps.io/ms-notification-updates\">https://hadley.shinyapps.io/ms-notification-updates</a>查看结果。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;data&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  notify <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>msg<span class=\"punctuation\">,</span> id <span class=\"operator\">=</span> <span class=\"literal\">NULL</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span>msg<span class=\"punctuation\">,</span> id <span class=\"operator\">=</span> id<span class=\"punctuation\">,</span> duration <span class=\"operator\">=</span> <span class=\"literal\">NULL</span><span class=\"punctuation\">,</span> closeButton <span class=\"operator\">=</span> <span class=\"literal\">FALSE</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  data <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span> </span><br><span class=\"line\">    id <span class=\"operator\">&lt;-</span> notify<span class=\"punctuation\">(</span><span class=\"string\">&quot;Reading data...&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"built_in\">on.exit</span><span class=\"punctuation\">(</span>removeNotification<span class=\"punctuation\">(</span>id<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> add <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">      </span><br><span class=\"line\">    notify<span class=\"punctuation\">(</span><span class=\"string\">&quot;Reticulating splines...&quot;</span><span class=\"punctuation\">,</span> id <span class=\"operator\">=</span> id<span class=\"punctuation\">)</span></span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    notify<span class=\"punctuation\">(</span><span class=\"string\">&quot;Herding llamas...&quot;</span><span class=\"punctuation\">,</span> id <span class=\"operator\">=</span> id<span class=\"punctuation\">)</span></span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    notify<span class=\"punctuation\">(</span><span class=\"string\">&quot;Orthogonalizing matrices...&quot;</span><span class=\"punctuation\">,</span> id <span class=\"operator\">=</span> id<span class=\"punctuation\">)</span></span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    mtcars</span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>data <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span>head<span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"8-3-进度条\"><a href=\"#8-3-进度条\" class=\"headerlink\" title=\"8.3 进度条\"></a>8.3 进度条</h2><p>对于长时间运行的任务，最好的反馈形式就是进度条。它不仅可以告诉你任务进行到了哪一步，还可以帮助你估计还需要多长时间：你是应该深吸一口气，去喝杯咖啡，还是明天再来？在本节中，我将展示两种显示进度条的技术，一种是Shiny内置的，另一种是John Coene开发的<a href=\"https://waiter.john-coene.com/\">waiter</a>包提供的。</p>\n<p>不幸的是，这两种技术都存在同样的主要缺点：要使用进度条，你需要能够将大任务分成已知数量的、每个都大致需要相同时间来完成的小任务。这通常很难做到，特别是当底层代码是用C语言编写的，且没有办法向你传达进度更新时。我们正在努力开发<a href=\"https://github.com/r-lib/progress\">progress包</a>中的工具，以便有一天像dplyr、readr和vroom这样的包能够生成进度条，你可以轻松地将它们转发给Shiny。</p>\n<h3 id=\"8-3-1-Shiny\"><a href=\"#8-3-1-Shiny\" class=\"headerlink\" title=\"8.3.1 Shiny\"></a>8.3.1 Shiny</h3><p>要使用Shiny创建进度条，你需要使用<a href=\"https://rdrr.io/pkg/shiny/man/withProgress.html\">withProgress()</a>和<a href=\"https://rdrr.io/pkg/shiny/man/withProgress.html\">incProgress()</a>。假设你有一段运行缓慢的代码，如下所示：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"punctuation\">(</span>i <span class=\"keyword\">in</span> <span class=\"built_in\">seq_len</span><span class=\"punctuation\">(</span>step<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  x <span class=\"operator\">&lt;-</span> function_that_takes_a_long_time<span class=\"punctuation\">(</span>x<span class=\"punctuation\">)</span>     </span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>你首先需要用<code>withProgress()</code>将其包裹起来。当代码开始运行时，这会显示进度条，并在完成时自动移除它：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">withProgress<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> <span class=\"punctuation\">(</span>i <span class=\"keyword\">in</span> <span class=\"built_in\">seq_len</span><span class=\"punctuation\">(</span>step<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    x <span class=\"operator\">&lt;-</span> function_that_takes_a_long_time<span class=\"punctuation\">(</span>x<span class=\"punctuation\">)</span>     </span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>然后在每个步骤之后调用<code>incProgress()</code>：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">withProgress<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> <span class=\"punctuation\">(</span>i <span class=\"keyword\">in</span> <span class=\"built_in\">seq_len</span><span class=\"punctuation\">(</span>step<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    x <span class=\"operator\">&lt;-</span> function_that_takes_a_long_time<span class=\"punctuation\">(</span>x<span class=\"punctuation\">)</span></span><br><span class=\"line\">    incProgress<span class=\"punctuation\">(</span><span class=\"number\">1</span> <span class=\"operator\">/</span> <span class=\"built_in\">length</span><span class=\"punctuation\">(</span>step<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p><code>incProgress()</code>的第一个参数是进度条要增加的量。默认情况下，进度条从0开始，到1结束，因此通过步骤数除以来增加进度条，可以确保循环结束时进度条完成。</p>\n<p>图<code>8.7</code>展示了在一个完整的Shiny应用程序中，这可能看起来是什么样子。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;steps&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;How many steps?&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">10</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;result&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  data <span class=\"operator\">&lt;-</span> eventReactive<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>go<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    withProgress<span class=\"punctuation\">(</span>message <span class=\"operator\">=</span> <span class=\"string\">&quot;Computing random number&quot;</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> <span class=\"punctuation\">(</span>i <span class=\"keyword\">in</span> <span class=\"built_in\">seq_len</span><span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>steps<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">0.5</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">        incProgress<span class=\"punctuation\">(</span><span class=\"number\">1</span> <span class=\"operator\">/</span> input<span class=\"operator\">$</span>steps<span class=\"punctuation\">)</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      runif<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>result <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"built_in\">round</span><span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> <span class=\"number\">2</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/f8653f6a9d2e8c56ebf035d48a3ec299f67fa99e/19ffd/images/action-feedback/progress-2.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/f8653f6a9d2e8c56ebf035d48a3ec299f67fa99e/19ffd/images/action-feedback/progress-2.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图8.7：进度条有助于指示计算还需运行多长时间。请在线查看https://hadley.shinyapps.io/ms-progress。\"></p>\n<p>需要注意的几个事项：</p>\n<ul>\n<li><p>我使用了可选的<code>message</code>参数，在进度条中添加了一些解释性文本。</p>\n</li>\n<li><p>我使用了<a href=\"https://rdrr.io/r/base/Sys.sleep.html\">Sys.sleep()</a>来模拟一个长时间运行的操作；在你的代码中，这将是一个耗时函数。</p>\n</li>\n<li><p>我通过将一个按钮与<a href=\"https://rdrr.io/pkg/shiny/man/observeEvent.html\">eventReactive()</a>结合，允许用户控制事件何时开始。这是任何需要进度条的任务的良好做法。</p>\n</li>\n</ul>\n<h3 id=\"8-3-2-Waiter\"><a href=\"#8-3-2-Waiter\" class=\"headerlink\" title=\"8.3.2 Waiter\"></a>8.3.2 Waiter</h3><p>内置的进度条对于基础操作来说非常好，但如果你想要提供更多视觉选项的进度条，你可以尝试使用<a href=\"https://waiter.john-coene.com/\">waiter</a>包。将上面的代码适配为与Waiter一起工作很简单。在UI中，我们添加use_waitress()：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  waiter<span class=\"operator\">::</span>use_waitress<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;steps&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;How many steps?&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">10</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;result&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>Waiter的进度条接口略有不同。Waiter包使用R6对象将所有与进度相关的函数捆绑到一个单独的对象中。如果你以前从未使用过R6对象，不必太担心细节；你可以直接复制和粘贴这个模板。基本的生命周期看起来像这样：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Create a new progress bar</span></span><br><span class=\"line\">waitress <span class=\"operator\">&lt;-</span> waiter<span class=\"operator\">::</span>Waitress<span class=\"operator\">$</span>new<span class=\"punctuation\">(</span><span class=\"built_in\">max</span> <span class=\"operator\">=</span> input<span class=\"operator\">$</span>steps<span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\"># Automatically close it when done</span></span><br><span class=\"line\"><span class=\"built_in\">on.exit</span><span class=\"punctuation\">(</span>waitress<span class=\"operator\">$</span>close<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"punctuation\">(</span>i <span class=\"keyword\">in</span> <span class=\"built_in\">seq_len</span><span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>steps<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">0.5</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"comment\"># increment one step</span></span><br><span class=\"line\">  waitress<span class=\"operator\">$</span>inc<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>我们可以在 Shiny 应用程序中使用它，如下所示：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  data <span class=\"operator\">&lt;-</span> eventReactive<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>go<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    waitress <span class=\"operator\">&lt;-</span> waiter<span class=\"operator\">::</span>Waitress<span class=\"operator\">$</span>new<span class=\"punctuation\">(</span><span class=\"built_in\">max</span> <span class=\"operator\">=</span> input<span class=\"operator\">$</span>steps<span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"built_in\">on.exit</span><span class=\"punctuation\">(</span>waitress<span class=\"operator\">$</span>close<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"punctuation\">(</span>i <span class=\"keyword\">in</span> <span class=\"built_in\">seq_len</span><span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>steps<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">0.5</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">      waitress<span class=\"operator\">$</span>inc<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    runif<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>result <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"built_in\">round</span><span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> <span class=\"number\">2</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>默认显示是在页面顶部的细长进度条（你可以查看<a href=\"https://hadley.shinyapps.io/ms-waiter\">https://hadley.shinyapps.io/ms-waiter</a>），但有许多方法可以自定义输出：</p>\n<p>你可以覆盖默认<code>主题</code>，选择使用以下主题之一：</p>\n<ul>\n<li><code>overlay</code>：一个不透明的进度条，会隐藏整个页面</li>\n<li><code>overlay-opacity</code>：一个透明的进度条，会覆盖整个页面</li>\n<li><code>overlay-percent</code>：一个不透明的进度条，同时还会显示一个数字百分比。</li>\n<li>除了为整个页面显示进度条之外，你还可以通过设置<code>selector</code>参数将其覆盖在现有的输入或输出上，例如：</li>\n</ul>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">waitress <span class=\"operator\">&lt;-</span> Waitress<span class=\"operator\">$</span>new<span class=\"punctuation\">(</span>selector <span class=\"operator\">=</span> <span class=\"string\">&quot;#steps&quot;</span><span class=\"punctuation\">,</span> theme <span class=\"operator\">=</span> <span class=\"string\">&quot;overlay&quot;</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-3-3-Spinners\"><a href=\"#8-3-3-Spinners\" class=\"headerlink\" title=\"8.3.3 Spinners\"></a>8.3.3 Spinners</h3><p>有时，你不知道一个操作需要多长时间才能完成，你只想显示一个动画旋转器，让用户知道有事情正在发生。对于这个任务，你也可以使用waiter包；只需从使用<code>Waitress</code>切换到使用<code>Waiter</code>即可：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  waiter<span class=\"operator\">::</span>use_waiter<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;result&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  data <span class=\"operator\">&lt;-</span> eventReactive<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>go<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    waiter <span class=\"operator\">&lt;-</span> waiter<span class=\"operator\">::</span>Waiter<span class=\"operator\">$</span>new<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    waiter<span class=\"operator\">$</span>show<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"built_in\">on.exit</span><span class=\"punctuation\">(</span>waiter<span class=\"operator\">$</span>hide<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span>sample<span class=\"punctuation\">(</span><span class=\"number\">5</span><span class=\"punctuation\">,</span> <span class=\"number\">1</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    runif<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>result <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"built_in\">round</span><span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> <span class=\"number\">2</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/876e7420c98f7344ee1eac35650c26d6257eb839/7c919/images/action-feedback/spinner-1.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/876e7420c98f7344ee1eac35650c26d6257eb839/7c919/images/action-feedback/spinner-1.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图8.8：“Waiter”会在某个操作发生时显示整个应用程序的旋转器。请在线查看https://hadley.shinyapps.io/ms-spinner-1。\"></p>\n<p>与Waitress一样，你也可以针对特定的输出使用Waiters。这些waiter可以在输出更新时自动移除旋转器，因此代码甚至更简单：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  waiter<span class=\"operator\">::</span>use_waiter<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  plotOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;plot&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  data <span class=\"operator\">&lt;-</span> eventReactive<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>go<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    waiter<span class=\"operator\">::</span>Waiter<span class=\"operator\">$</span>new<span class=\"punctuation\">(</span>id <span class=\"operator\">=</span> <span class=\"string\">&quot;plot&quot;</span><span class=\"punctuation\">)</span><span class=\"operator\">$</span>show<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">3</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    data.frame<span class=\"punctuation\">(</span>x <span class=\"operator\">=</span> runif<span class=\"punctuation\">(</span><span class=\"number\">50</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> y <span class=\"operator\">=</span> runif<span class=\"punctuation\">(</span><span class=\"number\">50</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>plot <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span>plot<span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> res <span class=\"operator\">=</span> <span class=\"number\">96</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/0fa7426c91728627f36b69d91036aef0876f278c/84714/images/action-feedback/spinner-2.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/0fa7426c91728627f36b69d91036aef0876f278c/84714/images/action-feedback/spinner-2.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图8.9：你也可以为单个输出显示旋转器。请在线查看https://hadley.shinyapps.io/ms-spinner-2。\"></p>\n<p>waiter包提供了多种旋转器供你选择；你可以在<a href=\"https://rdrr.io/pkg/waiter/man/spinners.html\">?waiter::spinners</a>中查看你的选项，然后选择其中一个（例如）使用<code>Waiter$new(html = spin_ripple())</code>。</p>\n<p>一个更简单的选择是使用Dean Attali的<a href=\"https://github.com/daattali/shinycssloaders\">shinycssloaders</a>包。它使用JavaScript监听Shiny事件，因此甚至不需要服务器端代码。相反，你只需使用<a href=\"https://rdrr.io/pkg/shinycssloaders/man/withSpinner.html\">shinycssloaders::withSpinner()</a>来包装你希望在其失效时自动获得旋转器的输出。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>shinycssloaders<span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  withSpinner<span class=\"punctuation\">(</span>plotOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;plot&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  data <span class=\"operator\">&lt;-</span> eventReactive<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>go<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">3</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    data.frame<span class=\"punctuation\">(</span>x <span class=\"operator\">=</span> runif<span class=\"punctuation\">(</span><span class=\"number\">50</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> y <span class=\"operator\">=</span> runif<span class=\"punctuation\">(</span><span class=\"number\">50</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>plot <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span>plot<span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> res <span class=\"operator\">=</span> <span class=\"number\">96</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"8-4-确认和撤销\"><a href=\"#8-4-确认和撤销\" class=\"headerlink\" title=\"8.4 确认和撤销\"></a>8.4 确认和撤销</h2><p>有时某个操作可能具有潜在的危险性，你可能想要确保用户确实想要执行该操作，或者你想要在一切都太晚之前给他们一个撤销的机会。本节中的三个技巧列出了你的基本选项，并给出了一些如何在你的应用程序中实现它们的建议。</p>\n<h3 id=\"8-4-1-明确确认\"><a href=\"#8-4-1-明确确认\" class=\"headerlink\" title=\"8.4.1 明确确认\"></a>8.4.1 明确确认</h3><p>保护用户避免因误操作执行危险动作的最简单方法是要求用户进行明确的确认。最简单的方法是使用对话框，该对话框会强制用户从一组小动作中选择。在Shiny中，你可以使用<a href=\"https://rdrr.io/pkg/shiny/man/modalDialog.html\">modalDialog()</a>创建一个对话框。这被称为“模态”对话框，因为它创建了一种新的交互“模式”；在处理对话框之前，你无法与主应用程序进行交互。</p>\n<p>假设你有一个Shiny应用程序，用于从目录中删除一些文件（或从数据库中删除一些行等）。这个操作很难撤销，因此你需要确保用户确实想要这么做。你可以创建一个对话框，如图<code>8.10</code>所示，要求用户进行明确的确认，如下所示：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">modal_confirm <span class=\"operator\">&lt;-</span> modalDialog<span class=\"punctuation\">(</span></span><br><span class=\"line\">  <span class=\"string\">&quot;Are you sure you want to continue?&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  title <span class=\"operator\">=</span> <span class=\"string\">&quot;Deleting files&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  footer <span class=\"operator\">=</span> tagList<span class=\"punctuation\">(</span></span><br><span class=\"line\">    actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;cancel&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Cancel&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;ok&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Delete&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">class</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;btn btn-danger&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/1fd6b657c2fd4df4ef9de687459e433e0b6144f4/93f7d/demos/action-feedback/dialog.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/1fd6b657c2fd4df4ef9de687459e433e0b6144f4/93f7d/demos/action-feedback/dialog.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图 8.10：检查是否要删除某些文件的对话框。\"></p>\n<p>在创建对话框时，需要注意一些虽小但重要的细节：</p>\n<ul>\n<li><p>按钮应该怎么命名？最好描述得具体一些，因此要避免使用“是&#x2F;否”或“继续&#x2F;取消”，而应该复述关键的动词。</p>\n</li>\n<li><p>按钮应该如何排序？你是把“取消”放在前面（像Mac那样），还是把“继续”放在前面（像Windows那样）？你最好的选择是模仿大多数人将使用的平台。</p>\n</li>\n<li><p>你能让危险选项更明显吗？这里我使用了<code>class = &quot;btn btn-danger&quot;</code>来突出显示按钮。</p>\n</li>\n</ul>\n<p>Jakob Nielsen在<a href=\"http://www.useit.com/alertbox/ok-cancel.html\">http://www.useit.com/alertbox/ok-cancel.html</a>上给出了更多好建议。</p>\n<p>让我们在一个真实（尽管很简单）的应用程序中使用这个对话框。我们的用户界面暴露了一个“删除所有文件”的按钮：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;delete&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Delete all files?&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>在<code>server()</code>中有两个新的想法：</p>\n<ul>\n<li><p>我们使用<a href=\"https://rdrr.io/pkg/shiny/man/showModal.html\">showModal()</a>和<a href=\"https://rdrr.io/pkg/shiny/man/showModal.html\">removeModal()</a>来显示和隐藏对话框。</p>\n</li>\n<li><p>我们观察由UI从<code>modal_confirm</code>生成的事件。这些对象不是静态地在ui中创建的，而是由<code>server()</code>中的<code>showModal()</code>动态添加的。在第<code>10</code>章中，你将更详细地看到这个想法。</p>\n</li>\n</ul>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>delete<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    showModal<span class=\"punctuation\">(</span>modal_confirm<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>ok<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;Files deleted&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    removeModal<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>cancel<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    removeModal<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"8-4-2-撤消操作\"><a href=\"#8-4-2-撤消操作\" class=\"headerlink\" title=\"8.4.2 撤消操作\"></a>8.4.2 撤消操作</h3><p>明确的确认对于很少执行且具有破坏性的操作最有用。如果你想要减少因频繁操作而产生的错误，那么应该避免使用它。例如，这种技术不适用于Twitter——如果有一个对话框说“你确定要发这条推文吗？”你会很快学会自动点击“是”，并且在发送推文10秒后注意到拼写错误时，仍然会感到同样的后悔。</p>\n<p>在这种情况下，更好的方法是在实际执行操作前等待几秒钟，给用户一个发现并撤销任何问题的机会。这并不是真正的撤销（因为你实际上没有做任何事情），但这是一个让用户能够理解的词汇。</p>\n<p>我将用一个我个人希望拥有撤销按钮的网站——Twitter来举例说明这项技术。Twitter用户界面的本质非常简单：有一个文本区域用来编辑推文，还有一个发送按钮：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  textAreaInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;message&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">    label <span class=\"operator\">=</span> <span class=\"literal\">NULL</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">    placeholder <span class=\"operator\">=</span> <span class=\"string\">&quot;What&#x27;s happening?&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    rows <span class=\"operator\">=</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;tweet&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Tweet&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>服务器函数相当复杂，需要一些我们尚未讨论过的技术。不要太担心理解代码，要专注于基本思路：我们使用一些<a href=\"https://rdrr.io/pkg/shiny/man/observeEvent.html\">observeEvent()</a>特殊的参数，以便在几秒钟后运行一些代码。主要的新想法是，我们捕获<code>observeEvent()</code>的结果并将其保存到一个变量中；这样我们就可以销毁观察者，从而确保实际发送推文的代码永远不会被执行。你可以尝试访问实时应用程序<a href=\"https://hadley.shinyapps.io/ms-undo\">https://hadley.shinyapps.io/ms-undo</a>。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runLater <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>action<span class=\"punctuation\">,</span> seconds <span class=\"operator\">=</span> <span class=\"number\">3</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span></span><br><span class=\"line\">    invalidateLater<span class=\"punctuation\">(</span>seconds <span class=\"operator\">*</span> <span class=\"number\">1000</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> action<span class=\"punctuation\">,</span> </span><br><span class=\"line\">    ignoreInit <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">    once <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">    ignoreNULL <span class=\"operator\">=</span> <span class=\"literal\">FALSE</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    autoDestroy <span class=\"operator\">=</span> <span class=\"literal\">FALSE</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  waiting <span class=\"operator\">&lt;-</span> <span class=\"literal\">NULL</span></span><br><span class=\"line\">  last_message <span class=\"operator\">&lt;-</span> <span class=\"literal\">NULL</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>tweet<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    notification <span class=\"operator\">&lt;-</span> glue<span class=\"operator\">::</span>glue<span class=\"punctuation\">(</span><span class=\"string\">&quot;Tweeted &#x27;&#123;input$message&#125;&#x27;&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    last_message <span class=\"operator\">&lt;&lt;-</span> input<span class=\"operator\">$</span>message</span><br><span class=\"line\">    updateTextAreaInput<span class=\"punctuation\">(</span>session<span class=\"punctuation\">,</span> <span class=\"string\">&quot;message&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span></span><br><span class=\"line\">      notification<span class=\"punctuation\">,</span></span><br><span class=\"line\">      action <span class=\"operator\">=</span> actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;undo&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Undo?&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      duration <span class=\"operator\">=</span> <span class=\"literal\">NULL</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      closeButton <span class=\"operator\">=</span> <span class=\"literal\">FALSE</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      id <span class=\"operator\">=</span> <span class=\"string\">&quot;tweeted&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      type <span class=\"operator\">=</span> <span class=\"string\">&quot;warning&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    waiting <span class=\"operator\">&lt;&lt;-</span> runLater<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      cat<span class=\"punctuation\">(</span><span class=\"string\">&quot;Actually sending tweet...\\n&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">      removeNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;tweeted&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>undo<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    waiting<span class=\"operator\">$</span>destroy<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;Tweet retracted&quot;</span><span class=\"punctuation\">,</span> id <span class=\"operator\">=</span> <span class=\"string\">&quot;tweeted&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    updateTextAreaInput<span class=\"punctuation\">(</span>session<span class=\"punctuation\">,</span> <span class=\"string\">&quot;message&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> last_message<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-4-3-回收站\"><a href=\"#8-4-3-回收站\" class=\"headerlink\" title=\"8.4.3 回收站\"></a>8.4.3 回收站</h3><p>对于几天后可能会后悔的操作，一种更高级的模式是在计算机上实现类似回收站或垃圾箱的功能。当你删除一个文件时，它并不会被永久删除，而是被移动到一个暂存区，需要执行另一个操作才能清空。这就像是一个强化版的“撤销”选项，你有很长的时间来后悔你的操作。这也有点像确认操作，你需要执行两个分开的操作才能使删除操作永久生效。</p>\n<p>这种技术的主要缺点是实现起来相当复杂（你需要有一个单独的“暂存区”来存储撤销操作所需的信息），并且需要用户定期干预以避免信息积累。因此，我认为除了最复杂的Shiny应用程序之外，这种技术都超出了其他应用程序的范围，所以这里我不会展示它的实现方法。</p>\n<h2 id=\"8-5-总结\"><a href=\"#8-5-总结\" class=\"headerlink\" title=\"8.5 总结\"></a>8.5 总结</h2><p>本章为你提供了一些工具，帮助你向用户传达应用程序正在发生的事情。从某种意义上说，这些技术大多是可选的。虽然你的应用程序没有它们也能工作，但它们的精心应用会对用户体验的质量产生巨大影响。当你是应用程序的唯一用户时，通常可以省略反馈，但使用它的人越多，精心设计的通知就越能发挥作用。</p>\n<p>在下一章中，你将学习如何向用户传输文件。</p>\n<h1 id=\"加关注\"><a href=\"#加关注\" class=\"headerlink\" title=\"加关注\"></a>加关注</h1><p>关注公众号“生信之巅”。</p>\n<table align=\"center\"><tr>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅微信公众号\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-right: 0px;margin-bottom: 5px;align: center;\"></td>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅小程序码\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-left: 0px;margin-bottom: 5px;align: center\"></td>\n</tr></table>\n\n\n<p><font color=\"#FF0000\"><ruby><b>敬告</b>：使用文中脚本请引用本文网址，请尊重本人的劳动成果，谢谢！<rt><b>Notice</b>: When you use the scripts in this article, please cite the link of this webpage. Thank you!</rt></ruby></font></p>\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"编程","path":"api/tags/编程.json"},{"name":"Shiny入门系列","path":"api/tags/Shiny入门系列.json"}]},{"title":"Shiny从入门到入定——7-图形","slug":"Shiny从入门到入定——7-图形","date":"2024-01-26T14:09:43.000Z","updated":"2024-03-11T13:07:17.000Z","comments":true,"path":"api/articles/Shiny从入门到入定——7-图形.json","excerpt":null,"keywords":null,"cover":"https://d33wubrfki0l68.cloudfront.net/8e3506131c2af7ac0ddd07569f277dd03e05ff0e/f836c/images/action-graphics/click.png","content":"<h1 id=\"7-图形\"><a href=\"#7-图形\" class=\"headerlink\" title=\"7 图形\"></a>7 图形</h1><ul>\n<li>第7章向您展示了如何向绘图添加直接交互以及如何显示以其他方式生成的图像。</li>\n</ul>\n<p>我们在第 2 章中简要讨论了 <a href=\"\">renderPlot()</a> ;它是在应用程序中显示图形的强大工具。本章将向您展示如何充分利用它来创建交互式绘图，即响应鼠标事件的绘图。您还将学习一些其他有用的技术，包括制作具有动态宽度和高度的绘图以及使用 <a href=\"https://rdrr.io/pkg/shiny/man/renderImage.html\">renderImage()</a> 显示图像。</p>\n<p>在本章中，我们将需要 ggplot2 和 Shiny，因为我们将其用于大多数图形的绘制。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>shiny<span class=\"punctuation\">)</span></span><br><span class=\"line\">library<span class=\"punctuation\">(</span>ggplot2<span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-1-交互性\"><a href=\"#7-1-交互性\" class=\"headerlink\" title=\"7.1 交互性\"></a>7.1 交互性</h2><p><a href=\"https://rdrr.io/pkg/shiny/man/plotOutput.html\">plotOutput()</a> 最酷的一点是，它不仅可以作为显示绘图的输出，还可以作为响应指针事件的输入。这允许您创建交互式图形，用户直接与绘图上的数据进行交互。交互式图形是一种强大的工具，具有广泛的应用范围。我没有空间向你展示所有的可能性，所以在这里我将重点介绍基础知识，然后向你指出资源以了解更多信息。</p>\n<h3 id=\"7-1-1-基础知识\"><a href=\"#7-1-1-基础知识\" class=\"headerlink\" title=\"7.1.1 基础知识\"></a>7.1.1 基础知识</h3><p>绘图可以响应四种不同的鼠标事件： <code>click</code> 、 <code>dblclick</code> （双击）、 <code>hover</code> （当鼠标在同一位置停留一段时间时）和 <code>brush</code> （矩形选择工具）。要将这些事件转换为Shiny的输入，您需要为相应的 <code>plotOutput()</code> 参数提供一个字符串，例如 <code>plotOutput(&quot;plot&quot;, click = &quot;plot_click&quot;)</code>。这将创建一个 <code>input$plot_click</code> ，您可以使用它来处理鼠标在绘图上的单击。</p>\n<p>下面是一个非常简单的处理鼠标单击的示例。我们注册 <code>plot_click</code> 输入，然后使用鼠标单击的坐标更新输出。图 7.1 显示了结果。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  plotOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;plot&quot;</span><span class=\"punctuation\">,</span> click <span class=\"operator\">=</span> <span class=\"string\">&quot;plot_click&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  verbatimTextOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;info&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>plot <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    plot<span class=\"punctuation\">(</span>mtcars<span class=\"operator\">$</span>wt<span class=\"punctuation\">,</span> mtcars<span class=\"operator\">$</span>mpg<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> res <span class=\"operator\">=</span> <span class=\"number\">96</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  output<span class=\"operator\">$</span>info <span class=\"operator\">&lt;-</span> renderPrint<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    req<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>plot_click<span class=\"punctuation\">)</span></span><br><span class=\"line\">    x <span class=\"operator\">&lt;-</span> <span class=\"built_in\">round</span><span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>plot_click<span class=\"operator\">$</span>x<span class=\"punctuation\">,</span> <span class=\"number\">2</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    y <span class=\"operator\">&lt;-</span> <span class=\"built_in\">round</span><span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>plot_click<span class=\"operator\">$</span>y<span class=\"punctuation\">,</span> <span class=\"number\">2</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    cat<span class=\"punctuation\">(</span><span class=\"string\">&quot;[&quot;</span><span class=\"punctuation\">,</span> x<span class=\"punctuation\">,</span> <span class=\"string\">&quot;, &quot;</span><span class=\"punctuation\">,</span> y<span class=\"punctuation\">,</span> <span class=\"string\">&quot;]&quot;</span><span class=\"punctuation\">,</span> sep <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/8e3506131c2af7ac0ddd07569f277dd03e05ff0e/f836c/images/action-graphics/click.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/8e3506131c2af7ac0ddd07569f277dd03e05ff0e/f836c/images/action-graphics/click.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图 7.1 单击左上角的点可更新打印的坐标 查看演示实例 https://hadley.shinyapps.io/ms-click 。\"></p>\n<p>（请注意使用 <a href=\"https://rdrr.io/pkg/shiny/man/req.html\">req()</a> ，以确保应用在第一次单击之前不会执行任何操作，且坐标以<code>wt</code>和<code>mpg</code>变量表示。</p>\n<p>以下各节更详细地介绍了这些事件。我们将从点击事件开始，然后简要讨论密切相关的 <code>dblclick</code> 和 <code>hover</code> 。然后，您将了解 <code>brush</code> 事件，该事件提供了一个矩形<code>brush</code>，由其四个边（ <code>xmin</code> ， <code>xmax </code>， <code>ymin </code>和 <code>ymax </code>定义。然后，我将举几个示例，使用动作结果更新绘图，然后讨论 Shiny 中交互式图形的一些局限性。</p>\n<h3 id=\"7-1-2-点击\"><a href=\"#7-1-2-点击\" class=\"headerlink\" title=\"7.1.2 点击\"></a>7.1.2 点击</h3><p>点事件返回一个相对丰富的列表，其中包含大量信息。最重要的组件是 <code>x</code> 和 <code>y</code> ，它们在数据坐标中给出事件的位置。但我不打算谈论这种数据结构，因为你只在相对罕见的情况下需要（如果你确实想要细节，请在 Shiny 图库中使用这个应用程序）。相反，您将使用 <a href=\"https://rdrr.io/pkg/shiny/man/brushedPoints.html\">nearPoints()</a> 帮助程序，该帮助程序返回一个数据框，其中包含单击附近的行，并处理一堆繁琐的细节。</p>\n<p>下面是 <code>nearPoints()</code> 运行的简单示例，其中显示了有关事件附近点的数据表。图 7.2 显示了该应用的屏幕截图。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  plotOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;plot&quot;</span><span class=\"punctuation\">,</span> click <span class=\"operator\">=</span> <span class=\"string\">&quot;plot_click&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;data&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>plot <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    plot<span class=\"punctuation\">(</span>mtcars<span class=\"operator\">$</span>wt<span class=\"punctuation\">,</span> mtcars<span class=\"operator\">$</span>mpg<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> res <span class=\"operator\">=</span> <span class=\"number\">96</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>data <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    nearPoints<span class=\"punctuation\">(</span>mtcars<span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>plot_click<span class=\"punctuation\">,</span> xvar <span class=\"operator\">=</span> <span class=\"string\">&quot;wt&quot;</span><span class=\"punctuation\">,</span> yvar <span class=\"operator\">=</span> <span class=\"string\">&quot;mpg&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">````</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">!</span><span class=\"punctuation\">[</span>图 <span class=\"number\">7.2</span> nearPoints<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> 将绘图坐标转换为数据行，从而可以轻松显示您单击的点的基础数据 查看实例 https<span class=\"operator\">:</span><span class=\"operator\">/</span><span class=\"operator\">/</span>hadley.shinyapps.io<span class=\"operator\">/</span>ms<span class=\"operator\">-</span>nearPoints 。<span class=\"punctuation\">]</span><span class=\"punctuation\">(</span>https<span class=\"operator\">:</span><span class=\"operator\">/</span><span class=\"operator\">/</span>d33wubrfki0l68.cloudfront.net<span class=\"operator\">/</span><span class=\"number\">7</span>c89122f2822dac1dbe5640e4aab942bebb46ef9<span class=\"operator\">/</span><span class=\"number\">8</span>d5d6<span class=\"operator\">/</span>images<span class=\"operator\">/</span>action<span class=\"operator\">-</span>graphics<span class=\"operator\">/</span>nearpoints.png<span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">在这里，我们给出 `nearPoints()` 四个参数：作为绘图基础的数据框、输入事件和轴上变量的名称。如果使用 `ggplot2`，则只需提供前两个参数，因为 `xvar` 和 `yvar` 可以从绘图数据结构中自动插补。出于这个原因，我将在本章的其余部分使用 `ggplot2`。下面是使用 `ggplot2` 重新实现的上一个示例：</span><br><span class=\"line\"></span><br><span class=\"line\">```r</span><br><span class=\"line\">ui &lt;- fluidPage(</span><br><span class=\"line\">  plotOutput(&quot;plot&quot;, click = &quot;plot_click&quot;),</span><br><span class=\"line\">  tableOutput(&quot;data&quot;)</span><br><span class=\"line\">)</span><br><span class=\"line\">server &lt;- function(input, output, session) &#123;</span><br><span class=\"line\">  output$plot &lt;- renderPlot(&#123;</span><br><span class=\"line\">    ggplot(mtcars, aes(wt, mpg)) + geom_point()</span><br><span class=\"line\">  &#125;, res = 96)</span><br><span class=\"line\">  </span><br><span class=\"line\">  output$data &lt;- renderTable(&#123;</span><br><span class=\"line\">    req(input$plot_click)</span><br><span class=\"line\">    nearPoints(mtcars, input$plot_click)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>您可能想知道 <code>nearPoints()</code> 究竟返回了什么。这是使用 <a href=\"https://rdrr.io/r/base/browser.html\">browser()</a> 的好地方，我们在 Section 5.2.3 中讨论过：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">  output<span class=\"operator\">$</span>data <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    req<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>plot_click<span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"built_in\">browser</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    nearPoints<span class=\"punctuation\">(</span>mtcars<span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>plot_click<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>现在，在我启动应用程序并单击一个点后，我被放入交互式调试器，在那里我可以运行 <code>nearPoints()</code> 并查看它返回的内容：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nearPoints<span class=\"punctuation\">(</span>mtcars<span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>plot_click<span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;             mpg cyl disp hp drat   wt  qsec vs am gear carb</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; Datsun 710 22.8   4  108 93 3.85 2.32 18.61  1  1    4    1</span></span><br></pre></td></tr></table></figure>\n\n\n<p>使用 <code>nearPoints()</code> 的另一种方法是使用 <code>allRows = TRUE</code> 和 <code>addDist = TRUE</code> 。这将返回包含两个新列的原始数据框：</p>\n<ul>\n<li><code>dist_</code> 给出行和事件之间的距离（以像素为单位）。</li>\n<li><code>selected_</code> 表示它是否靠近 click 事件（即它是否是 <code>allRows = FALSE</code>) 时返回的行。</li>\n</ul>\n<p>我们稍后会看到一个例子。</p>\n<h3 id=\"7-1-3-其他点事件\"><a href=\"#7-1-3-其他点事件\" class=\"headerlink\" title=\"7.1.3 其他点事件\"></a>7.1.3 其他点事件</h3><p>同样的方法对 <code>click</code>、<code>dblclick</code> 和 <code>hover</code> 同样有效：只需更改参数的名称。如果需要，可以通过提供 <a href=\"https://rdrr.io/pkg/shiny/man/clickOpts.html\">clickOps()</a>、<a href=\"https://rdrr.io/pkg/shiny/man/clickOpts.html\">dblclickOps()</a> 或 <a href=\"https://rdrr.io/pkg/shiny/man/clickOpts.html\">hoverOps()</a> 而不是给出输入 id 的字符串来获得对事件的额外控制。这些很少需要，所以我这里不讨论它们；请参阅文档以获取详细信息。</p>\n<p>您可以在一个图上使用多种交互类型。只需确保向用户解释他们可以做什么：使用鼠标事件与应用程序交互的一个缺点是它们不能立即被发现。</p>\n<h3 id=\"7-1-4-刷涂（Brushing）\"><a href=\"#7-1-4-刷涂（Brushing）\" class=\"headerlink\" title=\"7.1.4 刷涂（Brushing）\"></a>7.1.4 刷涂（Brushing）</h3><p>在绘图上选择点的另一种方法是使用画笔，画笔是由四个边定义的矩形选择。在 Shiny 中，一旦掌握了 <code>click</code> 和 <code>nearPoints()</code>，使用画笔就非常简单：只需切换到 <code>brush</code> 参数和 <a href=\"https://rdrr.io/pkg/shiny/man/brushedPoints.html\">brushedPoints()</a> 辅助函数。</p>\n<p>这是另一个简单的例子，显示了画笔选择了哪些点。图7.3显示了结果。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  plotOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;plot&quot;</span><span class=\"punctuation\">,</span> brush <span class=\"operator\">=</span> <span class=\"string\">&quot;plot_brush&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;data&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>plot <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    ggplot<span class=\"punctuation\">(</span>mtcars<span class=\"punctuation\">,</span> aes<span class=\"punctuation\">(</span>wt<span class=\"punctuation\">,</span> mpg<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"operator\">+</span> geom_point<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> res <span class=\"operator\">=</span> <span class=\"number\">96</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>data <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    brushedPoints<span class=\"punctuation\">(</span>mtcars<span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>plot_brush<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/72c746e68848220485ba12c028382dd0de8a3a00/fc713/images/action-graphics/brushedpoints.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/72c746e68848220485ba12c028382dd0de8a3a00/fc713/images/action-graphics/brushedpoints.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图 7.3 设置 brush 参数为用户提供了一个可拖动的“画笔”。在此应用程序中，画笔下方的点显示在表格中。在 https://hadley.shinyapps.io/ms-brushedPoints 上查看演示。\"></p>\n<p>使用 <a href=\"https://rdrr.io/pkg/shiny/man/brushOpts.html\">brushOptions()</a> 控制颜色（填充和描边），或将刷涂限制为<code>direction = &quot;x&quot;</code> 或 <code>&quot;y&quot;</code> 的单个维度（例如，用于刷涂时间序列）。</p>\n<h3 id=\"7-1-5-修改绘图\"><a href=\"#7-1-5-修改绘图\" class=\"headerlink\" title=\"7.1.5 修改绘图\"></a>7.1.5 修改绘图</h3><p>到目前为止，我们已经展示了交互的结果。但是，交互的真正魅力在于，当你显示你正在交互的同一图中的变化时。不幸的是，这需要你尚未学过的先进反应技术：<a href=\"https://rdrr.io/pkg/shiny/man/reactiveVal.html\">reactiveVal()</a>。我们将在第16章中回到<code>reactiveVal()</code>，但我想在这里展示它，因为它是一种非常有用的技术。你可能需要在阅读了那章之后重新阅读这一节，但即使没有所有的理论，你也会对潜在的应用有所了解。</p>\n<p>正如你可能从名字中猜到的那样，<code>reactiveVal()</code> 非常类似于 <code>reactive()</code>。通过调用带有初始值的 <code>reactiveVal()</code> 来创建反应性值，并以与反应性相同的方式检索该值：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val <span class=\"operator\">&lt;-</span> reactiveVal<span class=\"punctuation\">(</span><span class=\"number\">10</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">val<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">### #&gt; [1] 10</span></span><br></pre></td></tr></table></figure>\n\n<p>最大的区别是，你也可以更新一个响应式值，并且引用该值的所有反应式使用者都将重新计算。响应式值使用特殊的语法进行更新——你像调用函数一样调用它，第一个参数是新的值：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val<span class=\"punctuation\">(</span><span class=\"number\">20</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">val<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] 20</span></span><br></pre></td></tr></table></figure>\n\n<p>这意味着使用当前值更新反应值看起来像这样：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val<span class=\"punctuation\">(</span>val<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">+</span> <span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">val<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] 21</span></span><br></pre></td></tr></table></figure>\n\n<p>不幸的是，如果你真的想在控制台中运行这段代码，你会得到一个错误，因为它必须在响应式环境中运行。这使得实验和调试更具挑战性，因为你需要 <a href=\"https://rdrr.io/r/base/browser.html\">browser()</a> 或类似方法来暂停 <a href=\"https://rdrr.io/pkg/shiny/man/shinyApp.html\">shinyApp()</a> 调用中的执行。这是我们将在第 16 章后面讨论的挑战之一。</p>\n<p>现在，让我们把学习 <code>reactiveVal()</code> 的挑战放在一边，告诉你为什么你可能会烦恼。想象一下，您想要可视化单击与图上的点之间的距离。在下面的应用程序中，我们首先创建一个反应值来存储这些距离，并使用一个常量对其进行初始化，该常量将在我们单击任何内容之前使用。然后，我们使用 <a href=\"https://rdrr.io/pkg/shiny/man/observeEvent.html\">observeEvent()</a> 来更新单击鼠标时的反应值，并使用 <code>ggplot</code> 可视化具有点大小的距离。总而言之，这看起来像下面的代码，结果如图 7.4 所示。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set.seed<span class=\"punctuation\">(</span><span class=\"number\">1014</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">df <span class=\"operator\">&lt;-</span> data.frame<span class=\"punctuation\">(</span>x <span class=\"operator\">=</span> rnorm<span class=\"punctuation\">(</span><span class=\"number\">100</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> y <span class=\"operator\">=</span> rnorm<span class=\"punctuation\">(</span><span class=\"number\">100</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  plotOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;plot&quot;</span><span class=\"punctuation\">,</span> click <span class=\"operator\">=</span> <span class=\"string\">&quot;plot_click&quot;</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  dist <span class=\"operator\">&lt;-</span> reactiveVal<span class=\"punctuation\">(</span><span class=\"built_in\">rep</span><span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">,</span> nrow<span class=\"punctuation\">(</span>df<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>plot_click<span class=\"punctuation\">,</span></span><br><span class=\"line\">    dist<span class=\"punctuation\">(</span>nearPoints<span class=\"punctuation\">(</span>df<span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>plot_click<span class=\"punctuation\">,</span> allRows <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">,</span> addDist <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span><span class=\"operator\">$</span>dist_<span class=\"punctuation\">)</span>  </span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>plot <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    df<span class=\"operator\">$</span>dist <span class=\"operator\">&lt;-</span> dist<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    ggplot<span class=\"punctuation\">(</span>df<span class=\"punctuation\">,</span> aes<span class=\"punctuation\">(</span>x<span class=\"punctuation\">,</span> y<span class=\"punctuation\">,</span> size <span class=\"operator\">=</span> dist<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"operator\">+</span> </span><br><span class=\"line\">      geom_point<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">+</span> </span><br><span class=\"line\">      scale_size_area<span class=\"punctuation\">(</span>limits <span class=\"operator\">=</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"number\">1000</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> max_size <span class=\"operator\">=</span> <span class=\"number\">10</span><span class=\"punctuation\">,</span> guide <span class=\"operator\">=</span> <span class=\"literal\">NULL</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> res <span class=\"operator\">=</span> <span class=\"number\">96</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/28b14f04bca5f6a00be49c50bdc09220ff421283/059c4/images/action-graphics/modifying-size-1.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/28b14f04bca5f6a00be49c50bdc09220ff421283/059c4/images/action-graphics/modifying-size-1.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图 7.4 此应用使用 reactiveVal() 来存储到上次单击的点的距离，然后将其映射到点大小。在这里，我显示了单击最左侧的点的结果 See live at https://hadley.shinyapps.io/ms-modifying-size 。\"></p>\n<p>这里有两个重要的ggplot2技术需要注意：</p>\n<ul>\n<li>在绘制之前，我将距离添加到数据框中。我认为在可视化之前，将相关变量放在数据框中是一种很好的做法。</li>\n<li>我为 <a href=\"https://ggplot2.tidyverse.org/reference/scale_size.html\">scale_size_area()</a> 设置了限制，以确保点击之间的尺寸具有可比性。为了找到正确的范围，我做了一些交互式实验，但如有需要，您可以计算出确切的细节（参见本章末尾的练习）。</li>\n</ul>\n<p>有一个更复杂的想法。我想用画笔逐步添加点到一个选择。在这里，我使用不同的颜色显示选择，但你可以想象许多其他的应用程序。为了使这个工作，我将<code>reactiveVal()</code>初始化为一个<code>FALSE</code>的向量，然后使用<a href=\"https://rdrr.io/pkg/shiny/man/brushedPoints.html\">brushedPoints()</a>和|将画笔下的任何点添加到选择。为了给用户一种重新开始的方式，我双击重置选择。图7.5显示了运行应用程序的几个截图。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  plotOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;plot&quot;</span><span class=\"punctuation\">,</span> brush <span class=\"operator\">=</span> <span class=\"string\">&quot;plot_brush&quot;</span><span class=\"punctuation\">,</span> dblclick <span class=\"operator\">=</span> <span class=\"string\">&quot;plot_reset&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  selected <span class=\"operator\">&lt;-</span> reactiveVal<span class=\"punctuation\">(</span><span class=\"built_in\">rep</span><span class=\"punctuation\">(</span><span class=\"literal\">FALSE</span><span class=\"punctuation\">,</span> nrow<span class=\"punctuation\">(</span>mtcars<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>plot_brush<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    brushed <span class=\"operator\">&lt;-</span> brushedPoints<span class=\"punctuation\">(</span>mtcars<span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>plot_brush<span class=\"punctuation\">,</span> allRows <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span><span class=\"operator\">$</span>selected_</span><br><span class=\"line\">    selected<span class=\"punctuation\">(</span>brushed <span class=\"operator\">|</span> selected<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>plot_reset<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    selected<span class=\"punctuation\">(</span><span class=\"built_in\">rep</span><span class=\"punctuation\">(</span><span class=\"literal\">FALSE</span><span class=\"punctuation\">,</span> nrow<span class=\"punctuation\">(</span>mtcars<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  output<span class=\"operator\">$</span>plot <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    mtcars<span class=\"operator\">$</span>sel <span class=\"operator\">&lt;-</span> selected<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    ggplot<span class=\"punctuation\">(</span>mtcars<span class=\"punctuation\">,</span> aes<span class=\"punctuation\">(</span>wt<span class=\"punctuation\">,</span> mpg<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"operator\">+</span> </span><br><span class=\"line\">      geom_point<span class=\"punctuation\">(</span>aes<span class=\"punctuation\">(</span>colour <span class=\"operator\">=</span> sel<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"operator\">+</span></span><br><span class=\"line\">      scale_colour_discrete<span class=\"punctuation\">(</span>limits <span class=\"operator\">=</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;TRUE&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;FALSE&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> res <span class=\"operator\">=</span> <span class=\"number\">96</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/da63b234ad81bc5e1e592a904a1eaed0f4ee092d/794de/images/action-graphics/persistent-1.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/da63b234ad81bc5e1e592a904a1eaed0f4ee092d/794de/images/action-graphics/persistent-1.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\"><br><img src=\"https://d33wubrfki0l68.cloudfront.net/8c5a7aead6640c2720f28c4d05925d3a29e92730/e8f2e/images/action-graphics/persistent-3.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/8c5a7aead6640c2720f28c4d05925d3a29e92730/e8f2e/images/action-graphics/persistent-3.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图 7.5 此应用程序使画笔“持续”，因此拖动它会增加当前选择。\"></p>\n<p>再次，我设定了比例的限制，以确保图例（和颜色）在第一次点击后不会改变。</p>\n<h3 id=\"7-1-6-互动限制\"><a href=\"#7-1-6-互动限制\" class=\"headerlink\" title=\"7.1.6 互动限制\"></a>7.1.6 互动限制</h3><p>在我们继续之前，了解交互式图中的基本数据流以了解其局限性非常重要。基本流程是这样的：</p>\n<ul>\n<li>JavaScript捕获鼠标事件。</li>\n<li>Shiny将鼠标事件数据发送回R，告诉应用程序输入已过时。</li>\n<li>重新计算所有下游反应式使用者。</li>\n<li><code>plotOutput()</code>生成一个新的PNG并将其发送到浏览器。</li>\n</ul>\n<p>对于本地应用程序，瓶颈往往是绘制图表所花费的时间。根据图表的复杂程度，这可能需要几分之一秒的时间。但对于托管应用程序，您还必须考虑将事件从浏览器传输到R所需的时间，然后将渲染的图表从R传输回浏览器。</p>\n<p>一般来说，这意味着不可能创建动作和响应被视为即时的Shiny应用程序（即绘图似乎与您的操作同时更新）。如果您需要这种速度，您必须在JavaScript中执行更多的计算。一种方法是使用一个封装了JavaScript图形库的R包。现在，在我写这本书的时候，我认为你会得到<code>plotly</code>包的最佳体验，正如Carson Sievert在《<a href=\"https://plotly-r.com/\">使用R、plotly和shiny进行基于Web的交互式数据可视化</a>》一书中所述。</p>\n<h2 id=\"7-2-动态高度和宽度\"><a href=\"#7-2-动态高度和宽度\" class=\"headerlink\" title=\"7.2 动态高度和宽度\"></a>7.2 动态高度和宽度</h2><p>本章的其余部分不如交互式图形那么令人兴奋，但包含了一些重要的内容。</p>\n<p>首先，可以使绘图大小具有反应性，因此宽度和高度会根据用户操作而变化。为此，向<code>renderPlot()</code>的<code>width</code>和<code>height</code>参数提供零参数函数，这些参数现在必须在server中定义，而不是在UI中定义，因为它们可以更改。这些函数不应有参数，并返回所需的大小（以像素为单位）。它们在反应式环境中进行评估，以便您可以动态地调整绘图的大小。</p>\n<p>以下应用程序演示了基本思想。它提供了两个直接控制绘图大小的滑块。图 7.6 中显示了几个示例屏幕截图。请注意，当您调整绘图大小时，数据保持不变：您不会获得新的随机数。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;height&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;height&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">100</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">500</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">250</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;width&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;width&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">100</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">500</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">250</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  plotOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;plot&quot;</span><span class=\"punctuation\">,</span> width <span class=\"operator\">=</span> <span class=\"number\">250</span><span class=\"punctuation\">,</span> height <span class=\"operator\">=</span> <span class=\"number\">250</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>plot <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span></span><br><span class=\"line\">    width <span class=\"operator\">=</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> input<span class=\"operator\">$</span>width<span class=\"punctuation\">,</span></span><br><span class=\"line\">    height <span class=\"operator\">=</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> input<span class=\"operator\">$</span>height<span class=\"punctuation\">,</span></span><br><span class=\"line\">    res <span class=\"operator\">=</span> <span class=\"number\">96</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      plot<span class=\"punctuation\">(</span>rnorm<span class=\"punctuation\">(</span><span class=\"number\">20</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> rnorm<span class=\"punctuation\">(</span><span class=\"number\">20</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><img src=\"https://d33wubrfki0l68.cloudfront.net/187b93086b15e4f5f6afe04cb609019d1a37b424/537a6/demos/action-graphics/resize-narrow.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/187b93086b15e4f5f6afe04cb609019d1a37b424/537a6/demos/action-graphics/resize-narrow.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\"></td>\n<td><img src=\"https://d33wubrfki0l68.cloudfront.net/46c07091eaf6a8cd82a342e6fc55692e54740b7c/d0566/demos/action-graphics/resize-wide.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/46c07091eaf6a8cd82a342e6fc55692e54740b7c/d0566/demos/action-graphics/resize-wide.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图 7.6 您可以使绘图大小动态化，以便它响应用户操作。该图显示了更改宽度的效果。在 https://hadley.shinyapps.io/ms-resize 上查看演示。\"></td>\n</tr>\n<tr>\n<td>图 7.6 您可以使绘图大小动态化，以便它响应用户操作。该图显示了更改宽度的效果。</td>\n<td>在 <a href=\"https://hadley.shinyapps.io/ms-resize\">https://hadley.shinyapps.io/ms-resize</a> 上查看演示。</td>\n</tr>\n<tr>\n<td>在实际应用中，您将在 <code>width</code> 和 <code>height</code> 函数中使用更复杂的表达式。例如，如果您在 ggplot2 中使用分面图，则可以使用它来增加图的大小，以保持各个分面大小大致相同。</td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"7-3-图片\"><a href=\"#7-3-图片\" class=\"headerlink\" title=\"7.3 图片\"></a>7.3 图片</h2><p>如果要显示现有图像（而不是绘图），则可以使用 <a href=\"https://rdrr.io/pkg/shiny/man/renderImage.html\">renderImage()</a> 。例如，您可能有一个要向用户显示的照片目录。以下应用通过展示可爱的小狗照片来说明 <code>renderImage()</code> 的基础知识。这些照片来自 <a href=\"https://unsplash.com/\">https://unsplash.com</a> ，我最喜欢的免版税库存照片来源。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">puppies <span class=\"operator\">&lt;-</span> tibble<span class=\"operator\">::</span>tribble<span class=\"punctuation\">(</span></span><br><span class=\"line\">  <span class=\"operator\">~</span>breed<span class=\"punctuation\">,</span> <span class=\"operator\">~</span> id<span class=\"punctuation\">,</span> <span class=\"operator\">~</span>author<span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"string\">&quot;corgi&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;eoqnr8ikwFE&quot;</span><span class=\"punctuation\">,</span><span class=\"string\">&quot;alvannee&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"string\">&quot;labrador&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;KCdYn0xu2fU&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;shaneguymon&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"string\">&quot;spaniel&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;TzjMd7i5WQI&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;_redo_&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;id&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Pick a breed&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> setNames<span class=\"punctuation\">(</span>puppies<span class=\"operator\">$</span>id<span class=\"punctuation\">,</span> puppies<span class=\"operator\">$</span>breed<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  htmlOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;source&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  imageOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;photo&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>photo <span class=\"operator\">&lt;-</span> renderImage<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"built_in\">list</span><span class=\"punctuation\">(</span></span><br><span class=\"line\">      src <span class=\"operator\">=</span> file.path<span class=\"punctuation\">(</span><span class=\"string\">&quot;puppy-photos&quot;</span><span class=\"punctuation\">,</span> paste0<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>id<span class=\"punctuation\">,</span> <span class=\"string\">&quot;.jpg&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      contentType <span class=\"operator\">=</span> <span class=\"string\">&quot;image/jpeg&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      width <span class=\"operator\">=</span> <span class=\"number\">500</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      height <span class=\"operator\">=</span> <span class=\"number\">650</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> deleteFile <span class=\"operator\">=</span> <span class=\"literal\">FALSE</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>source <span class=\"operator\">&lt;-</span> renderUI<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    info <span class=\"operator\">&lt;-</span> puppies<span class=\"punctuation\">[</span>puppies<span class=\"operator\">$</span>id <span class=\"operator\">==</span> input<span class=\"operator\">$</span>id<span class=\"punctuation\">,</span> <span class=\"punctuation\">,</span> drop <span class=\"operator\">=</span> <span class=\"literal\">FALSE</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">    HTML<span class=\"punctuation\">(</span>glue<span class=\"operator\">::</span>glue<span class=\"punctuation\">(</span><span class=\"string\">&quot;&lt;p&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;a href=&#x27;https://unsplash.com/photos/&#123;info$id&#125;&#x27;&gt;original&lt;/a&gt; by</span></span><br><span class=\"line\"><span class=\"string\">      &lt;a href=&#x27;https://unsplash.com/@&#123;info$author&#125;&#x27;&gt;&#123;info$author&#125;&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/p&gt;&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/70de2ab74b8c9f3984ea503ef40af3930324c62a/43790/demos/action-graphics/puppies-corgi.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/70de2ab74b8c9f3984ea503ef40af3930324c62a/43790/demos/action-graphics/puppies-corgi.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图 7.7 使用 renderImage() 显示小狗可爱图片的应用。在 https://hadley.shinyapps.io/ms-puppies 上查看演示。\"><br><code>renderImage()</code> 需要返回一个列表。唯一关键的参数是 <code>src</code>，一个指向图像文件的本地路径。此外，您还可以提供：</p>\n<ul>\n<li><p><code>content-type</code>，它定义了图像的 MIME 类型。如果没有提供，Shiny 将从文件扩展名中猜测，因此只有在图像没有扩展名时才需要提供此内容。</p>\n</li>\n<li><p>图像的<code>width</code> 和 <code>height</code>（如果已知）。</p>\n</li>\n<li><p>任何其他参数，如 <code>class</code> 或 <code>alt</code>，都将作为属性添加到 HTML 中的<code>&lt;img&gt;</code>标记中。</p>\n</li>\n</ul>\n<p>您还必须提供<code>deleteFile</code>参数。不幸的是，<code>renderImage()</code>最初是设计用于处理临时文件的，因此在渲染后会自动删除图像。这显然是非常危险的，因此在Shiny 1.5.0中改变了行为。现在Shiny不再删除图像，而是强制您明确选择想要的行为。</p>\n<p>你可以在<br><a href=\"https://shiny.rstudio.com/articles/images.html\">https://shiny.rstudio.com/articles/images.html</a><br>了解更多关于 <code>renderImage()</code> 的信息，并查看你可能使用它的其他方式。</p>\n<h2 id=\"7-4-总结\"><a href=\"#7-4-总结\" class=\"headerlink\" title=\"7.4 总结\"></a>7.4 总结</h2><p>可视化是数据交流的强大方式，本章为您提供了几种高级技术来增强您的Shiny应用程序。接下来，您将学习向用户提供有关应用程序中正在发生的事情的反馈的技术，这对于需要花费大量时间的操作尤为重要。</p>\n<h1 id=\"加关注\"><a href=\"#加关注\" class=\"headerlink\" title=\"加关注\"></a>加关注</h1><p>关注公众号“生信之巅”。</p>\n<table align=\"center\"><tr>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅微信公众号\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-right: 0px;margin-bottom: 5px;align: center;\"></td>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅小程序码\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-left: 0px;margin-bottom: 5px;align: center\"></td>\n</tr></table>\n\n\n<p><font color=\"#FF0000\"><ruby><b>敬告</b>：使用文中脚本请引用本文网址，请尊重本人的劳动成果，谢谢！<rt><b>Notice</b>: When you use the scripts in this article, please cite the link of this webpage. Thank you!</rt></ruby></font></p>\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"编程","path":"api/tags/编程.json"},{"name":"Shiny入门系列","path":"api/tags/Shiny入门系列.json"}]},{"title":"Shiny从入门到入定——6-布局、主题、HTML","slug":"Shiny从入门到入定——6-布局、主题、HTML","date":"2024-01-25T13:49:44.000Z","updated":"2024-03-11T13:07:17.000Z","comments":true,"path":"api/articles/Shiny从入门到入定——6-布局、主题、HTML.json","excerpt":null,"keywords":null,"cover":"https://d33wubrfki0l68.cloudfront.net/ad1d199cecafc2c2be10425930b1dcfb5e8dd5d7/1f5c9/images/action-layout/fluid-page.png","content":"<h1 id=\"6-布局，主题，HTML\"><a href=\"#6-布局，主题，HTML\" class=\"headerlink\" title=\"6 布局，主题，HTML\"></a>6 布局，主题，HTML</h1><ul>\n<li>第6章详细介绍了在页面上布局输入和输出组件的各种方法，以及如何使用主题定制它们的外观。</li>\n</ul>\n<h2 id=\"6-1-前言\"><a href=\"#6-1-前言\" class=\"headerlink\" title=\"6.1 前言\"></a>6.1 前言</h2><p>在本章中，你将解锁一些控制应用程序整体外观的新工具。我们将首先讨论页面布局（包括单页和“多页”），让你组织你的输入和输出。然后你将学习Bootstrap，Shiny使用的CSS工具包，以及如何用主题定制它的整体视觉外观。最后，我们将简要讨论一下幕后发生了什么，这样如果你知道HTML和CSS，你就可以进一步定制Shiny应用程序。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>shiny<span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-2-单页布局\"><a href=\"#6-2-单页布局\" class=\"headerlink\" title=\"6.2 单页布局\"></a>6.2 单页布局</h2><p>在第2章中，你学习了构成应用程序交互组件的输入和输出。但是我没有谈到如何在页面上布局它们，而是使用 <a href=\"https://rdrr.io/pkg/shiny/man/fluidPage.html\">fluidPage()</a> 尽可能快地将它们拼凑在一起。虽然这对于学习 Shiny 来说是很好的，但它并不能创建可用或视觉上吸引人的应用程序，所以现在是时候学习一些更多的布局函数了。</p>\n<p>布局功能提供了应用程序的高级视觉结构。布局由函数调用的层次结构创建，其中R中的层次结构与生成的HTML中的层次结构相匹配。这有助于您理解布局代码。例如，当您查看这样的布局代码时：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  titlePanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;Hello Shiny!&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  sidebarLayout<span class=\"punctuation\">(</span></span><br><span class=\"line\">    sidebarPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;obs&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Observations:&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">1000</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">500</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    mainPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      plotOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;distPlot&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>关注函数调用的层次结构：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  titlePanel<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  sidebarLayout<span class=\"punctuation\">(</span></span><br><span class=\"line\">    sidebarPanel<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    mainPanel<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>即使你还没有学习这些函数，通过阅读它们的名字，你也可以猜到发生了什么。你可能会想象这段代码会生成一个经典的应用程序设计：顶部有一个标题栏，后面是一个侧边栏（包含一个滑块）和主面板（包含一个绘图）。通过缩进轻松查看层次结构的能力是使用一致风格的一个好主意的原因之一。</p>\n<p>在本节的剩余部分中，我将讨论帮助您设计单页应用程序的功能，然后在下一节中讨论多页应用程序。我还建议您查看Shiny Application布局指南；它有点过时，但包含一些有用的精华。</p>\n<h3 id=\"6-2-1-页面功能\"><a href=\"#6-2-1-页面功能\" class=\"headerlink\" title=\"6.2.1 页面功能\"></a>6.2.1 页面功能</h3><p>最重要的，但最无趣的布局函数是 <a href=\"https://rdrr.io/pkg/shiny/man/fluidPage.html\">fluidPage()</a>，到目前为止，您在几乎每个示例中都看到了它。但是它做了什么，如果单独使用它会怎么样？图6.1显示了结果：它看起来像一个非常无聊的应用程序，但幕后有很多事情，因为 <code>fluidPage()</code> 设置了 Shiny 所需的所有 HTML、CSS 和 JavaScript。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/ad1d199cecafc2c2be10425930b1dcfb5e8dd5d7/1f5c9/images/action-layout/fluid-page.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/ad1d199cecafc2c2be10425930b1dcfb5e8dd5d7/1f5c9/images/action-layout/fluid-page.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图6.1 仅由 fluidPage() 构成的UI\"></p>\n<p>除了<code>fluidPage()</code>，Shiny还提供了其他几个页面函数，在更特殊的情况下可以派上用场：<a href=\"https://rdrr.io/pkg/shiny/man/fixedPage.html\">fixedPage()</a>和<a href=\"https://rdrr.io/pkg/shiny/man/fillPage.html\">fillPage()</a>。<code>fixedPage()</code>的工作原理类似于<code>fluidPage()</code>，但有一个固定的最大宽度，可以防止你的应用程序在更大的屏幕上变得不合理地宽。<code>fillPage()</code>填充浏览器的整个高度，如果你想制作一个占据整个屏幕的图表，它很有用。你可以在他们的文档中找到详细信息。</p>\n<h3 id=\"6-2-2-带侧边栏的页面\"><a href=\"#6-2-2-带侧边栏的页面\" class=\"headerlink\" title=\"6.2.2 带侧边栏的页面\"></a>6.2.2 带侧边栏的页面</h3><p>要制作更复杂的布局，您需要在 <code>fluidPage()</code> 中调用布局函数。例如，要制作左侧有输入、右侧有输出的两列布局，可以使用 <a href=\"https://rdrr.io/pkg/shiny/man/sidebarLayout.html\">sidebarLayout()</a>（以及它的朋友 <a href=\"https://rdrr.io/pkg/shiny/man/titlePanel.html\">titlePanel()</a>、 <a href=\"https://rdrr.io/pkg/shiny/man/sidebarLayout.html\">sidebarPanel()</a> 和 <a href=\"https://rdrr.io/pkg/shiny/man/sidebarLayout.html\">mainPanel()</a>）。以下代码显示了生成图 6.2 的基本结构：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  titlePanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">    <span class=\"comment\"># app title/description</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  sidebarLayout<span class=\"punctuation\">(</span></span><br><span class=\"line\">    sidebarPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      <span class=\"comment\"># inputs</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    mainPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      <span class=\"comment\"># outputs</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/37aa2b1c61a6141cc95188bffd0cfc782fdb27d5/b6aa6/diagrams/action-layout/sidebar.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/37aa2b1c61a6141cc95188bffd0cfc782fdb27d5/b6aa6/diagrams/action-layout/sidebar.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图6.2 基础app的侧边栏结构\"></p>\n<p>为了让其更加真实，让我们增加一个输入和输出以创建一个演示中心极限定理的非常简单的应用程序，如图6.3所示。如果你自己运行这个应用程序，你可以增加样本数量以看到分布变得更加正常。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  titlePanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;Central limit theorem&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  sidebarLayout<span class=\"punctuation\">(</span></span><br><span class=\"line\">    sidebarPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;m&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Number of samples:&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">100</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    mainPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      plotOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;hist&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>hist <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    means <span class=\"operator\">&lt;-</span> replicate<span class=\"punctuation\">(</span><span class=\"number\">1e4</span><span class=\"punctuation\">,</span> mean<span class=\"punctuation\">(</span>runif<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>m<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    hist<span class=\"punctuation\">(</span>means<span class=\"punctuation\">,</span> breaks <span class=\"operator\">=</span> <span class=\"number\">20</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> res <span class=\"operator\">=</span> <span class=\"number\">96</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/4558a562a7be6b3c8bca4a25f3122d7322b536cc/6e6a0/demos/action-layout/sidebar.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/4558a562a7be6b3c8bca4a25f3122d7322b536cc/6e6a0/demos/action-layout/sidebar.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图6.3 常见的应用程序设计是将控件放在侧边栏中，并将结果显示在主面板中\"></p>\n<h3 id=\"6-2-3-多行\"><a href=\"#6-2-3-多行\" class=\"headerlink\" title=\"6.2.3 多行\"></a>6.2.3 多行</h3><p>在幕后，<a href=\"https://rdrr.io/pkg/shiny/man/sidebarLayout.html\">sidebarLayout()</a>建立在灵活的多行布局之上，您可以直接使用它来创建更具视觉复杂性的应用程序。像往常一样，您从<code>fluidPage()</code>开始。然后，您使用<a href=\"https://rdrr.io/pkg/shiny/man/fluidPage.html\">fluidRow()</a>创建行，使用<a href=\"https://rdrr.io/pkg/shiny/man/column.html\">column()</a>创建列。以下模板生成图6.4所示的结构：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  fluidRow<span class=\"punctuation\">(</span></span><br><span class=\"line\">    column<span class=\"punctuation\">(</span><span class=\"number\">4</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">      ...</span><br><span class=\"line\">    <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    column<span class=\"punctuation\">(</span><span class=\"number\">8</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">      ...</span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  fluidRow<span class=\"punctuation\">(</span></span><br><span class=\"line\">    column<span class=\"punctuation\">(</span><span class=\"number\">6</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">      ...</span><br><span class=\"line\">    <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    column<span class=\"punctuation\">(</span><span class=\"number\">6</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">      ...</span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/15ea13e6dd0ba26014225718b5541abb983e0a45/7b30e/diagrams/action-layout/multirow.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/15ea13e6dd0ba26014225718b5541abb983e0a45/7b30e/diagrams/action-layout/multirow.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图6.4 简单多行应用程序的基础结构\"></p>\n<p>每一行由12列组成，<code>column()</code> 的第一个参数给出了要占用的列数。12列布局为您提供极大的灵活性，因为您可以轻松创建2、3或4列布局，或使用窄列创建间隔。您可以在第4.4节中看到这种布局的示例。</p>\n<p>如果你想了解更多关于使用网格系统进行设计的知识，我强烈推荐由约瑟夫·穆勒-布罗克曼撰写的关于这个主题的经典文本：<a href=\"https://www.amazon.com/dp/3721201450\">《平面设计中的网格系统》</a>。</p>\n<h3 id=\"6-2-4-练习\"><a href=\"#6-2-4-练习\" class=\"headerlink\" title=\"6.2.4 练习\"></a>6.2.4 练习</h3><p><strong>6.2.4.1</strong> 阅读 <a href=\"https://rdrr.io/pkg/shiny/man/sidebarLayout.html\">sidebarLayout()</a> 的文档，确定侧边栏和主面板的宽度（以列为单位）。你能使用 fluidRow() 和 column() 重新创建它的外观吗？你缺少什么？</p>\n<p><strong>6.2.4.2</strong> 修改中心极限定理应用程序，将侧边栏放在右侧而不是左侧。</p>\n<p><strong>6.2.4.3</strong> 创建一个包含两个图的应用程序，每个图占一半宽度。将控件放在图下方的全宽容器中。</p>\n<h2 id=\"6-3-多页布局\"><a href=\"#6-3-多页布局\" class=\"headerlink\" title=\"6.3 多页布局\"></a>6.3 多页布局</h2><p>随着应用程序复杂性的增加，可能无法将所有内容都放在一个页面上。在本节中，您将学习 <a href=\"https://rdrr.io/pkg/shiny/man/tabPanel.html\">tabPanel()</a> 的各种用途，以创建多个页面的假象。这是一种假象，因为您仍然只有一个应用程序和一个基础 HTML 文件，但现在它被分解成多个部分，一次只能看到一个部分。</p>\n<p>多页应用程序与模块搭配得特别好，你将在第19章了解模块。模块允许你以与划分用户界面相同的方式划分server函数，创建仅通过定义良好的连接进行交互的独立组件。</p>\n<h3 id=\"6-3-1-选项卡集\"><a href=\"#6-3-1-选项卡集\" class=\"headerlink\" title=\"6.3.1 选项卡集\"></a>6.3.1 选项卡集</h3><p>将页面分解成块的简单方法是使用 <a href=\"https://rdrr.io/pkg/shiny/man/tabsetPanel.html\">tabsetPanel()</a> 及其亲密朋友 <code>tabPanel()</code>。正如您在下面的代码中看到的，<code>tabsetPanel()</code> 为任意数量的 <code>tabPanels()</code> 创建一个容器，而 <code>tabPanels()</code> 反过来又包含任何其他 HTML 组件。图 6.5 显示了一个简单的例子。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  tabsetPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">    tabPanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;Import data&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">      fileInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;file&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Data&quot;</span><span class=\"punctuation\">,</span> buttonLabel <span class=\"operator\">=</span> <span class=\"string\">&quot;Upload...&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      textInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;delim&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Delimiter (leave blank to guess)&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;skip&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Rows to skip&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;rows&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Rows to preview&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">10</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    tabPanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;Set parameters&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    tabPanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;Visualise results&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/9c03ba6941047ea3face093a70f248673f4c824a/98580/demos/action-layout/tabset.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/9c03ba6941047ea3face093a70f248673f4c824a/98580/demos/action-layout/tabset.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图6.5 tabsetPanel()允许用户选择单个tabPanel()进行查看\"></p>\n<p>如果您想知道用户选择了哪个选项卡，您可以将 <code>id</code> 参数提供给 <code>tabsetPanel()</code> 并将它设为输入。图6.6显示了这一点。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  sidebarLayout<span class=\"punctuation\">(</span></span><br><span class=\"line\">    sidebarPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;panel&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    mainPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      tabsetPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">        id <span class=\"operator\">=</span> <span class=\"string\">&quot;tabset&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        tabPanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;panel 1&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;one&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        tabPanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;panel 2&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;two&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        tabPanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;panel 3&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;three&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">      <span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>panel <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    paste<span class=\"punctuation\">(</span><span class=\"string\">&quot;Current panel: &quot;</span><span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>tabset<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/a856fa6a960d4e7e7b1cd2755c91934853e0e500/f7fbe/demos/action-layout/tabset-input-1.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/a856fa6a960d4e7e7b1cd2755c91934853e0e500/f7fbe/demos/action-layout/tabset-input-1.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图6.6 当您使用id参数时，tabset成为输入。这允许您根据当前可见的选项卡使您的应用程序表现不同。\"></p>\n<p>注意，<code>tabsetPanel()</code>可以在应用程序中的任何地方使用；如果需要，将选项卡集嵌套在其他组件（包括选项卡集！）中是完全可以的。</p>\n<h3 id=\"6-3-2-导航列表和导航栏\"><a href=\"#6-3-2-导航列表和导航栏\" class=\"headerlink\" title=\"6.3.2 导航列表和导航栏\"></a>6.3.2 导航列表和导航栏</h3><p>因为标签是水平显示的，所以你可以使用的标签数量有一个基本的限制，特别是如果它们的标题很长。<a href=\"https://rdrr.io/pkg/shiny/man/navbarPage.html\">navbarPage()</a>和<a href=\"https://rdrr.io/pkg/shiny/man/navbarPage.html\">navbarMenu()</a>提供了两种替代布局，让你使用更多标签和更长的标题。</p>\n<p><a href=\"https://rdrr.io/pkg/shiny/man/navlistPanel.html\">navlistPanel()</a>类似于<a href=\"https://rdrr.io/pkg/shiny/man/tabsetPanel.html\">tabsetPanel()</a>，但不会水平显示标签标题，而是在侧边栏中垂直显示。它还允许您使用纯字符串添加标题，如下面的代码所示，生成图6.7。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  navlistPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">    id <span class=\"operator\">=</span> <span class=\"string\">&quot;tabset&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;Heading 1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    tabPanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;panel 1&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Panel one contents&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;Heading 2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    tabPanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;panel 2&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Panel two contents&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    tabPanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;panel 3&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Panel three contents&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/56785160c5b2c58ecebd5c89454f41ca8ba01132/3504e/demos/action-layout/navlistpanel.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/56785160c5b2c58ecebd5c89454f41ca8ba01132/3504e/demos/action-layout/navlistpanel.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图6.7 navlistPanel()垂直显示选项卡标题，而不是水平显示\"></p>\n<p>另一种方法是使用<code>navbarPage()</code>：它仍然产生水平选项卡标题，但您可以使用<code>navbarMenu()</code>添加下拉菜单以实现额外的层次结构。图6.8显示了一个简单的示例。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> navbarPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  <span class=\"string\">&quot;Page title&quot;</span><span class=\"punctuation\">,</span>   </span><br><span class=\"line\">  tabPanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;panel 1&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;one&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tabPanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;panel 2&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;two&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tabPanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;panel 3&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;three&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  navbarMenu<span class=\"punctuation\">(</span><span class=\"string\">&quot;subpanels&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">    tabPanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;panel 4a&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;four-a&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    tabPanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;panel 4b&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;four-b&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    tabPanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;panel 4c&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;four-c&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/a2d6dc2e78a21f32db77925f1d28122e6288a44d/3c1ec/demos/action-layout/navbarpage.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/a2d6dc2e78a21f32db77925f1d28122e6288a44d/3c1ec/demos/action-layout/navbarpage.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图6.8 navbarPage()在页面顶部生成一个水平导航栏\"></p>\n<p>这些布局为你提供了相当大的能力来创建丰富而令人满意的应用程序。要更进一步，你需要更多地了解底层设计系统。</p>\n<h2 id=\"6-4-引导程序（Bootstrap）\"><a href=\"#6-4-引导程序（Bootstrap）\" class=\"headerlink\" title=\"6.4 引导程序（Bootstrap）\"></a>6.4 引导程序（Bootstrap）</h2><p>要继续你的应用程序定制之旅，你需要更多地了解 Shiny 所使用的 <a href=\"https://getbootstrap.com/\">Bootstrap</a> 框架。Bootstrap 是一系列 HTML 约定、CSS 样式和 JS 代码片段的集合，打包成一种方便的形式。Bootstrap 最初是 Twitter 开发的一个框架，在过去的 10 年里，它已经发展成为网络上最流行的 CSS 框架之一。Bootstrap 在 R 中也很受欢迎——你无疑已经看到过许多由 <a href=\"https://pkgs.rstudio.com/rmarkdown/reference/html_document.html\">rmarkdown::html_document()</a> 生成的文档，并使用了许多由 <a href=\"http://pkgdown.r-lib.org/\">pkgdown</a> 制作的包网站，这两个网站也都使用了 Bootstrap。</p>\n<p>作为 Shiny 开发人员，您不需要过多考虑 Bootstrap，因为 Shiny 会自动为您生成与 Bootstrap 兼容的 HTML。但是知道 Bootstrap 存在是件好事，因为这样：</p>\n<ul>\n<li><p>你可以使用<a href=\"https://rstudio.github.io/bslib/reference/bs_theme.html\">bslib::bs_theme()</a>来定制代码的视觉外观，第6.5节。</p>\n</li>\n<li><p>你可以使用<code>class</code>参数来使用Bootstrap class名定制一些布局、输入和输出，正如你在第2.2.7节中所看到的。</p>\n</li>\n<li><p>你可以自己编写函数来生成 Shiny 不提供的 Bootstrap 组件，如<a href=\"https://rstudio.github.io/bslib/articles/theming.html#utility-classes\">Utility classes</a>中所述。</p>\n</li>\n</ul>\n<p>也可以使用完全不同的CSS框架。许多现有的R包通过包装流行的Bootstrap替代品来简化这一过程：</p>\n<ul>\n<li><p><a href=\"https://appsilon.com/\">Appsilon</a> 构建在 <a href=\"https://fomantic-ui.com/\">formantic UI</a> 之上的<a href=\"https://appsilon.github.io/shiny.semantic/\">shiny.semantic</a>。</p>\n</li>\n<li><p><a href=\"https://rinterface.com/\">RInterface</a> 基于 <a href=\"https://framework7.io/\">framework 7</a>  构建的  <a href=\"https://github.com/RinteRface/shinyMobile\">shinyMobile</a> ，专为移动应用程序而设计。</p>\n</li>\n<li><p>由 <a href=\"https://github.com/ericrayanderson\">Eric Anderson</a> 开发的 <a href=\"https://ericrayanderson.github.io/shinymaterial/\">shinymaterial</a>，建立在谷歌的 <a href=\"https://material.io/design\">Material</a> 设计框架之上。</p>\n</li>\n<li><p><a href=\"https://rstudio.github.io/shinydashboard/\">shinydashboard</a> 也是由RStudio开发的，它提供了一个用于创建仪表板的布局系统。</p>\n</li>\n</ul>\n<p>你可以在 <a href=\"https://github.com/nanxstats/awesome-shiny-extensions\">https://github.com/nanxstats/awesome-shiny-extensions</a> 上找到一个更完整、维护更活跃的列表。</p>\n<h2 id=\"6-5-主题\"><a href=\"#6-5-主题\" class=\"headerlink\" title=\"6.5 主题\"></a>6.5 主题</h2><p>Bootstrap在R社区中无处不在，很容易让人产生审美疲劳：过了一段时间，每个Shiny应用程序和Rmd看起来都差不多。解决方案是使用<a href=\"https://rstudio.github.io/bslib\">bslib</a>包进行主题化。bslib是一个相对较新的包，允许您覆盖许多Bootstrap默认值，以创建独特的外观。在我写这篇文章的时候，bslib主要适用于Shiny，但正在努力将其增强的主题化功能引入RMarkdown、pkgdown等。</p>\n<p>如果你正在为公司开发应用程序，我强烈建议你花点时间在主题化上——将你的应用程序主题化，以匹配你的企业风格指南，这是一种让你看起来很好的简单方法。</p>\n<h3 id=\"6-5-1-开始\"><a href=\"#6-5-1-开始\" class=\"headerlink\" title=\"6.5.1 开始\"></a>6.5.1 开始</h3><p>使用 <a href=\"https://rstudio.github.io/bslib/reference/bs_theme.html\">bslib::bs_theme()</a> 创建一个主题，然后使用页面布局函数的<code>theme</code>参数将其应用于应用程序：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  theme <span class=\"operator\">=</span> bslib<span class=\"operator\">::</span>bs_theme<span class=\"punctuation\">(</span>...<span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>如果不特别指定，Shiny将使用其自创建以来基本上使用的经典Bootstrap v3主题。默认情况下，<code>bslib::bs_theme()</code>将使用 Bootstrap v4。如果您只使用内置组件，使用Bootstrap v4替代v3不会造成问题。如果您使用了自定义HTML，它可能会造成问题，因此您可以通过设置<code>version = 3</code>来强制它保持v3。</p>\n<h3 id=\"6-5-2-Shiny主题\"><a href=\"#6-5-2-Shiny主题\" class=\"headerlink\" title=\"6.5.2 Shiny主题\"></a>6.5.2 Shiny主题</h3><p>更改应用程序整体外观的最简单方法是使用<code>bootswatch</code>参数对<code>bslib::bs_theme()</code>选择一个预先制作的<code>bootswatch</code>主题。图6.9显示了以下代码的结果，切换其他主题为“darkly”。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  theme <span class=\"operator\">=</span> bslib<span class=\"operator\">::</span>bs_theme<span class=\"punctuation\">(</span>bootswatch <span class=\"operator\">=</span> <span class=\"string\">&quot;darkly&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  sidebarLayout<span class=\"punctuation\">(</span></span><br><span class=\"line\">    sidebarPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      textInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;txt&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Text input:&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;text here&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;slider&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Slider input:&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span> <span class=\"number\">100</span><span class=\"punctuation\">,</span> <span class=\"number\">30</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    mainPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      h1<span class=\"punctuation\">(</span>paste0<span class=\"punctuation\">(</span><span class=\"string\">&quot;Theme: darkly&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      h2<span class=\"punctuation\">(</span><span class=\"string\">&quot;Header 2&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      p<span class=\"punctuation\">(</span><span class=\"string\">&quot;Some text&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/6850c18bfcfd5671f12f1f638c2c76b4ccb5b11d/07f6a/demos/action-layout/theme-flatly.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/6850c18bfcfd5671f12f1f638c2c76b4ccb5b11d/07f6a/demos/action-layout/theme-flatly.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图6.9 相同的app采用了用四个bootswatch主题风格：darkly、flatly、sandstone和united\"></p>\n<p>此外，你可以利用<code>bs_theme()</code>的其他参数创建自己的主题，如 <code>bg</code> （背景颜色），<code>fg</code>（前景色）和 <code>base_font</code>：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme <span class=\"operator\">&lt;-</span> bslib<span class=\"operator\">::</span>bs_theme<span class=\"punctuation\">(</span></span><br><span class=\"line\">  bg <span class=\"operator\">=</span> <span class=\"string\">&quot;#0b3d91&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  fg <span class=\"operator\">=</span> <span class=\"string\">&quot;white&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  base_font <span class=\"operator\">=</span> <span class=\"string\">&quot;Source Sans Pro&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>一种预览和自定义主题的简单方法是使用<code>bslib::bs_theme_preview(theme)</code>。这将打开一个Shiny应用程序，展示该主题在应用于许多标准控件时的外观，同时还为你提供交互式控件，用于自定义最重要的参数。</p>\n<h3 id=\"6-5-3-图表主题\"><a href=\"#6-5-3-图表主题\" class=\"headerlink\" title=\"6.5.3 图表主题\"></a>6.5.3 图表主题</h3><p>如果你已经对你的应用程序样式进行了大量自定义，你可能还想自定义图表以匹配整体风格。幸运的是，这非常简单，多亏了<a href=\"https://rstudio.github.io/thematic/\">thematic</a>包，它可以自动对ggplot2、lattice和基础图表进行主题化。只需在server函数中调用<code>thematic_shiny()</code>。这将自动确定你的应用程序主题的所有设置，如图6.10所示。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>ggplot2<span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  theme <span class=\"operator\">=</span> bslib<span class=\"operator\">::</span>bs_theme<span class=\"punctuation\">(</span>bootswatch <span class=\"operator\">=</span> <span class=\"string\">&quot;darkly&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  titlePanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;A themed plot&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  plotOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;plot&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  thematic<span class=\"operator\">::</span>thematic_shiny<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>plot <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    ggplot<span class=\"punctuation\">(</span>mtcars<span class=\"punctuation\">,</span> aes<span class=\"punctuation\">(</span>wt<span class=\"punctuation\">,</span> mpg<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"operator\">+</span></span><br><span class=\"line\">      geom_point<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">+</span></span><br><span class=\"line\">      geom_smooth<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> res <span class=\"operator\">=</span> <span class=\"number\">96</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/0e7243ec6ca6821445c04bff6488fcf612c3fe88/e378c/demos/action-layout/thematic.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/0e7243ec6ca6821445c04bff6488fcf612c3fe88/e378c/demos/action-layout/thematic.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图6.10 使用thematic::thematic_shiny()确保ggplot2自动匹配应用程序主题\"></p>\n<h3 id=\"6-5-4-练习\"><a href=\"#6-5-4-练习\" class=\"headerlink\" title=\"6.5.4 练习\"></a>6.5.4 练习</h3><p><strong>6.4.5.1</strong> 使用<code>bslib::bs_theme_preview()</code>制作你能想到的最丑的主题。</p>\n<h2 id=\"6-6-面罩之下\"><a href=\"#6-6-面罩之下\" class=\"headerlink\" title=\"6.6 面罩之下\"></a>6.6 面罩之下</h2><p>Shiny的设计是为了让R用户不需要了解HTML的细节。但是，如果你知道一些HTML和CSS，你仍然可以进一步定制Shiny。不幸的是，教授HTML和CSS不在本书的范围内，但MDN的<a href=\"https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/HTML_basics\">HTML</a>和<a href=\"https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/CSS_basics\">CSS</a>基础教程是一个很好的起点。</p>\n<p>最重要的是要知道，所有输入、输出和布局函数背后都没有魔法：它们只是生成HTML。您可以通过在控制台中直接执行UI函数来查看HTML：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  textInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;name&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;What&#x27;s your name?&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group shiny-input-container&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>What&#x27;s your name?<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>请注意，这是 <code>&lt;body&gt;</code> 标签的内容；Shiny 的其他部分负责生成 <code>&lt;head&gt;</code>。如果你想包含额外的 CSS 或 JS 依赖项，你需要学习 <a href=\"https://rdrr.io/pkg/htmltools/man/htmlDependency.html\">htmltools::htmlDependency()</a>。两个好的起点是 <a href=\"https://blog.r-hub.io/2020/08/25/js-r/#web-dependency-management\">https://blog.r-hub.io/2020/08/25/js-r/#web-dependency-management</a> 和 <a href=\"https://unleash-shiny.rinterface.com/htmltools-dependencies.html\">https://unleash-shiny.rinterface.com/htmltools-dependencies.html</a>。</p>\n<p>可以将自己的 HTML 添加到 <code>ui</code>。一种方法是通过 <a href=\"https://rdrr.io/pkg/htmltools/man/HTML.html\">HTML()</a> 函数包含文本 HTML。在下面的例子中，我使用“原始字符常量”，<code>r&quot;()&quot;</code>，以便更容易在字符串中包含引号：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  HTML<span class=\"punctuation\">(</span><span class=\"string\">r&quot;(</span></span><br><span class=\"line\"><span class=\"string\">    &lt;h1&gt;This is a heading&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;p class=&quot;my-class&quot;&gt;This is some text!&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;li&gt;First bullet&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;li&gt;Second bullet&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">  )&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>如果您是 HTML&#x2F;CSS 专家，您可能想知道是否可以完全跳过 <code>fluidPage()</code> 并提供原始 HTML。有关更多详细信息，请参阅“<a href=\"https://shiny.rstudio.com/articles/html-ui.html\">使用 HTML 构建整个 UI</a>”。</p>\n<p>或者，您可以使用Shiny提供的HTML辅助函数。对于最重要的元素，如<code>h1()</code>和<code>p()</code>，有常规函数，所有其他元素都可以通过其他标签辅助函数访问。命名参数成为属性，未命名参数成为子元素，因此我们可以将上面的HTML重新创建为：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  h1<span class=\"punctuation\">(</span><span class=\"string\">&quot;This is a heading&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  p<span class=\"punctuation\">(</span><span class=\"string\">&quot;This is some text&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">class</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;my-class&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tags<span class=\"operator\">$</span>ul<span class=\"punctuation\">(</span></span><br><span class=\"line\">    tags<span class=\"operator\">$</span>li<span class=\"punctuation\">(</span><span class=\"string\">&quot;First bullet&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">    tags<span class=\"operator\">$</span>li<span class=\"punctuation\">(</span><span class=\"string\">&quot;Second bullet&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>使用代码生成 HTML 的一个优点是，你可以将现有的 Shiny 组件交织到自定义结构中。例如，以下代码生成了一段包含两个输出的文本段落，其中一个为粗体：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tags<span class=\"operator\">$</span>p<span class=\"punctuation\">(</span></span><br><span class=\"line\">  <span class=\"string\">&quot;You made &quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  tags<span class=\"operator\">$</span>b<span class=\"punctuation\">(</span><span class=\"string\">&quot;$&quot;</span><span class=\"punctuation\">,</span> textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;amount&quot;</span><span class=\"punctuation\">,</span> inline <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"string\">&quot; in the last &quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;days&quot;</span><span class=\"punctuation\">,</span> inline <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"string\">&quot; days &quot;</span> </span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>请注意使用<code>inline = TRUE</code>；<code>textOutput()</code>默认是生成一个完整的段落。</p>\n<p>要了解更多关于使用HTML、CSS和JavaScript制作引人注目的用户界面的知识，我强烈推荐David Granjon的<a href=\"https://unleash-shiny.rinterface.com/index.html\">《Shiny的杰出用户界面》</a>。</p>\n<h2 id=\"6-7-总结\"><a href=\"#6-7-总结\" class=\"headerlink\" title=\"6.7 总结\"></a>6.7 总结</h2><p>本章为你提供了制作复杂而吸引人的Shiny应用程序所需的工具。你已经学习了Shiny函数，这些函数允许你布局单页和多页应用程序（如<code>fluidPage()</code>和<code>tabsetPanel()</code>），以及如何使用主题定制整体视觉外观。你还学到了一些关于底层的东西：你知道Shiny使用Bootstrap，并且输入和输出函数只返回HTML，你也可以自己创建自己的HTML。</p>\n<p>在下一章中，您将了解有关应用程序中另一个重要视觉组件的更多信息：图形。</p>\n<h1 id=\"加关注\"><a href=\"#加关注\" class=\"headerlink\" title=\"加关注\"></a>加关注</h1><p>关注公众号“生信之巅”。</p>\n<table align=\"center\"><tr>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅微信公众号\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-right: 0px;margin-bottom: 5px;align: center;\"></td>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅小程序码\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-left: 0px;margin-bottom: 5px;align: center\"></td>\n</tr></table>\n\n\n<p><font color=\"#FF0000\"><ruby><b>敬告</b>：使用文中脚本请引用本文网址，请尊重本人的劳动成果，谢谢！<rt><b>Notice</b>: When you use the scripts in this article, please cite the link of this webpage. Thank you!</rt></ruby></font></p>\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"编程","path":"api/tags/编程.json"},{"name":"Shiny入门系列","path":"api/tags/Shiny入门系列.json"}]}]}