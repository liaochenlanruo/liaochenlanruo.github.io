{"total":102,"pageSize":10,"pageCount":11,"data":[{"title":"Perl获取外部命令执行结果的输出","slug":"Perl获取外部命令执行结果的输出","date":"2019-04-19T07:54:38.000Z","updated":"2022-02-28T05:08:34.946Z","comments":true,"path":"api/articles/Perl获取外部命令执行结果的输出.json","excerpt":null,"keywords":null,"cover":null,"content":"<p>有时候 perl 脚本需要与 Linux 外部命令进行交互，本文讲解如何将外部命令的执行结果的输出（此处指的不是运行结果的返回值，而是标准输出上的内容之类）赋给 perl 变量。</p>\n<span id=\"more\"></span>\n<p>首先需要了解 perl 调用 shell 命令的三种方式：</p>\n</br>\n**1. system**\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">system<span class=\"token punctuation\">(</span><span class=\"token string\">\"command\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</br>\n通过system运行得到的结果是一个返回值，其实是一串数字，若外部命令运行成功，则返回值为“0”，若运行失败，则返回非0的值。\n</br>\n**2. 反引号** （ESC下面的那个键）\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token builtin class-name\">command</span><span class=\"token variable\">`</span></span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</br>\n通过反引号运行，会返回shell运行结果的输出，下面的脚本通过“which”查询“COG_2014.phr”的绝对路径，并将其赋值给`$path`。然后通过正则表达式获取“COG_2014.phr”所在的目录的路径，并将其赋值给变量`$cogdb_dir`。\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">my <span class=\"token variable\">$cogdb_dir</span><span class=\"token punctuation\">;</span>\nmy <span class=\"token variable\">$path</span> <span class=\"token operator\">=</span> <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">which</span> COG_2014.phr<span class=\"token variable\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$path</span><span class=\"token operator\">=~</span>/<span class=\"token punctuation\">(</span>.+<span class=\"token punctuation\">)</span>COG_2014.*/<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token variable\">$cogdb_dir</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nprint <span class=\"token variable\">$cogdb_dir</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</br>\n**3. exec**\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">exec<span class=\"token punctuation\">(</span><span class=\"token string\">\"command\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</br>\nexec与system相似，但是执行完exec命令之后，perl会终止运行，不再执行后续的代码。\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"Linux","path":"api/tags/Linux.json"},{"name":"perl","path":"api/tags/perl.json"},{"name":"编程","path":"api/tags/编程.json"}]},{"title":"Perl捕获外部命令执行异常并继续运行后续代码","slug":"Perl捕获外部命令执行异常并继续运行后续代码","date":"2019-04-19T02:34:49.000Z","updated":"2022-01-08T02:16:28.411Z","comments":true,"path":"api/articles/Perl捕获外部命令执行异常并继续运行后续代码.json","excerpt":null,"keywords":null,"cover":null,"content":"<p>在编写 perl 脚本时经常会调用外部命令，由于种种原因，会遇到外部命令执行异常，而导致整个脚本终止运行。这对于大的项目来说很不经济，因此，可以想办法越过这个异常并继续执行后续脚本。</p>\n<span id=\"more\"></span>\n<p>Examples：</p>\n</br>\n假设有一个外部命令“command”需要执行，将该命令存到一个数组当中：\n</br>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">my @arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"command\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</br>\n将外部命令的返回值赋给一个变量：\n</br>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">my <span class=\"token variable\">$return</span> <span class=\"token operator\">=</span> sysstem<span class=\"token punctuation\">(</span>@arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</br>\n判断返回值是否为“0”，0代表运行正常，任何非0的值均表示有运行异常。如果返回值不为0，则记录错误，然后继续运行后续代码：\n</br>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$return</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">&#123;</span>\n    print <span class=\"token string\">\"There are some errors when running the command!<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span><span class=\"token punctuation\">;</span>\n    command2<span class=\"token punctuation\">;</span><span class=\"token comment\">#继续运行其他命令</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</br>\n<p>** 注：** 本方案仅在 Linux 系统下测试，不晓得 Windows 和 Mac 的返回值与 Linux 是否一致，Linux 中的 “core dump” 就可以如此来捕获。</p>\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"Linux","path":"api/tags/Linux.json"},{"name":"perl","path":"api/tags/perl.json"},{"name":"编程","path":"api/tags/编程.json"}]},{"title":"Wget 技巧","slug":"Wget-技巧","date":"2019-04-14T12:17:46.000Z","updated":"2022-01-08T02:16:28.420Z","comments":true,"path":"api/articles/Wget-技巧.json","excerpt":null,"keywords":null,"cover":null,"content":"<p>本文例举一些 Linux 系统下的下载工具 “wget” 的高级用法。</p>\n<span id=\"more\"></span>\n<h3 id=\"1下载目录下所有文件\"><a class=\"markdownIt-Anchor\" href=\"#1下载目录下所有文件\"></a> 1. 下载目录下所有文件：</h3>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> -c -r -nH -np -nd -R index.html -P ./data ftp://ftp.ncbi.nih.gov/pub/COG/COG2014/data/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p></br>-c：断点续传</p>\n<p>-r：遍历子目录</p>\n<p>-nH：不将文件保存在 FTP 主机名目录下</p>\n<p>-np：递归下载时不搜索上层目录</p>\n<p>-nd：递归下载时不创建一层一层的目录，把所有的文件下载到当前目录</p>\n<p>-R index.html：不生成 index.html 文件</p>\n<p>-P ./data：将数据下载到当前目录下的 data 目录下</p>\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"Linux","path":"api/tags/Linux.json"},{"name":"下载","path":"api/tags/下载.json"}]},{"title":"Github操作","slug":"github操作","date":"2019-04-01T00:46:44.000Z","updated":"2022-01-08T02:16:28.420Z","comments":true,"path":"api/articles/github操作.json","excerpt":null,"keywords":null,"cover":null,"content":"<p>本文讲述了 Github 一些操作技巧……</p>\n<span id=\"more\"></span>\n<h1 id=\"tag相关操作\"><a class=\"markdownIt-Anchor\" href=\"#tag相关操作\"></a> TAG 相关操作</h1>\n<p></br>通过 Tag 可以将项目生成不同的版本，并进行存档，供用户下载。这在软件中是很常见的。</p>\n<ul>\n<li>\n<p><strong>创建 tag</strong></p>\n  <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> tag v1.0.0 -m <span class=\"token string\">'first version'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p><strong>上传到 github</strong></p>\n  <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push origin v1.0.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p><strong>存档某个 tag</strong></p>\n  <pre class=\"line-numbers language-bassh\" data-language=\"bassh\"><code class=\"language-bassh\">git archive -v --format&#x3D;tar v1.0.0 &gt; v1.0.0.tar.gz<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p><strong>删除 tag</strong></p>\n  <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> tag -d v1.0.0\n<span class=\"token function\">git</span> push origin :refs/tags/v1.0.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h1 id=\"branch\"><a class=\"markdownIt-Anchor\" href=\"#branch\"></a> Branch</h1>\n<h2 id=\"创建分支\"><a class=\"markdownIt-Anchor\" href=\"#创建分支\"></a> 创建分支</h2>\n<ul>\n<li>\n<p>创建并切换到名为 <code>pgcgap</code>  的分支</p>\n  <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout -b pgcgap<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>将 <code>pgcgap</code>  分支推送到远程端</p>\n  <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push -u origin pgcgap<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ul>\n<h2 id=\"删除分支\"><a class=\"markdownIt-Anchor\" href=\"#删除分支\"></a> 删除分支</h2>\n<p>假设要删除当前所处的 <code>pgcgap</code>  分支。</p>\n<ul>\n<li>\n<p>切换到别的分支，如 master</p>\n  <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>删除本地分支</p>\n  <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> branch -d pgcgap\n\n<span class=\"token comment\"># 有时候需要强制删除</span>\n<span class=\"token function\">git</span> branch -D pgcgap<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>删除远程分支</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push origin --delete pgcgap<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ul>\n<h1 id=\"git-加速\"><a class=\"markdownIt-Anchor\" href=\"#git-加速\"></a> Git 加速</h1>\n<p>进行 git 操作时以 <code>github.com.cnpmjs.org</code>  替换 <code>github.com</code>  可以提速 10 倍左右。</p>\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"Github","path":"api/tags/Github.json"}]},{"title":"Ubuntu open-mpi运行错误","slug":"Ubuntu-open-mpi运行错误","date":"2019-03-30T07:07:30.000Z","updated":"2022-01-08T02:16:28.416Z","comments":true,"path":"api/articles/Ubuntu-open-mpi运行错误.json","excerpt":null,"keywords":null,"cover":null,"content":"<span id=\"more\"></span>\n<p>我在 win10 Linux 子系统下使用 mpirun 多线程运行 ABySS 基因组拼接软件的时候，出现以下错误提示：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Linux kernel CMA support was requested via the btl_vader_single_copy_mechanism MCA variable, but CMA support is not available due to restrictive ptrace settings.\n\n<span class=\"token punctuation\">[</span>liaochenlanruo:49950<span class=\"token punctuation\">]</span> <span class=\"token number\">4</span> <span class=\"token function\">more</span> processes have sent <span class=\"token builtin class-name\">help</span> message help-mpi-btl-openib-cpc-base.txt / ibv_create_qp failed\n\n<span class=\"token punctuation\">[</span>liaochenlanruo:49950<span class=\"token punctuation\">]</span> Set MCA parameter <span class=\"token string\">\"orte_base_help_aggregate\"</span> to <span class=\"token number\">0</span> to see all <span class=\"token builtin class-name\">help</span> / error messages <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</br>\n<p>结果就是无法运行多线程，跑了一夜的程序没有任何动静，似乎是卡死了。</p>\n</br>\nGoogle到的解决方案，root用户下，终端运行如下命令：\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#echo 0 > /proc/sys/kernel/yama/ptrace_scope</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</br>\n**提示：\"ptrace_scope\"文件中原来的值为“1”，改成“0”就可以了。**\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"Linux","path":"api/tags/Linux.json"}]},{"title":"OrthoFinder2—同源蛋白家族聚类","slug":"OrthoFinder2—同源蛋白家族聚类","date":"2019-03-20T02:42:16.000Z","updated":"2022-01-08T02:16:28.408Z","comments":true,"path":"api/articles/OrthoFinder2—同源蛋白家族聚类.json","excerpt":null,"keywords":null,"cover":"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/orthofinder01.png","content":"<p>寻找同源蛋白家族用的比较多的是 Orthomcl，但是该软件多年前已经停止更新，且使用的时候需要安装和使用 MySQL，操作起来比较繁琐。因此 OrthoFinder 应运而生，并且更新到版本 2。后者不但可以寻找同源家族，并且可以构建基因家族进化树。</p>\n<span id=\"more\"></span>\n<ol>\n<li>OrthoFinder 及依赖包的安装</li>\n</ol>\n<ul>\n<li>下载</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> https://github.com/davidemms/OrthoFinder/releases/download/v2.2.7/OrthoFinder-2.2.7.tar.gz<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>解压</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">tar</span> zxvf OrthoFinder-2.2.7.tar.gz<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>安装（加入环境变量即可）</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> ~/.bashrc\n\ni\n\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$PATH</span><span class=\"token builtin class-name\">:</span><span class=\"token environment constant\">$HOME</span>/tools/OrthoFinder-2.2.7\n\nEsc\n\n<span class=\"token builtin class-name\">shift</span> + <span class=\"token punctuation\">;</span>\n\nwq<span class=\"token operator\">!</span>\n\n<span class=\"token builtin class-name\">source</span> ~/.bashrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>依赖包</p>\n<p>（1）<a href=\"url:https://github.com/bbuchfink/diamond/releases\">DIAMOND</a></p>\n<p>下载对应版本，解压并将主程序拷贝至存在于环境变量的目录下或将其所在的目录加入环境变量：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> https://github.com/bbuchfink/diamond/releases/download/v0.9.24/diamond-linux64.tar.gz\n\n<span class=\"token function\">tar</span> xzf diamond-linux64.tar.gz\n\n<span class=\"token function\">sudo</span> <span class=\"token function\">cp</span> diamond /usr/local/bin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>没有 root 权限的可以把 diamond 所在目录加入环境变量。</p>\n<p>(2) <a href=\"url:https://github.com/soedinglab/MMseqs2/releases\">MMseqs2</a></p>\n<p>下载对应版本，解压并将主程序拷贝至存在于环境变量的目录下或将其所在的目录加入环境变量：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> https://github.com/soedinglab/MMseqs2/releases/download/7-4e23d/MMseqs2-Linux-AVX2.tar.gz\n\n<span class=\"token function\">tar</span> xzf MMseqs2-Linux-AVX2.tar.gz\n\n<span class=\"token function\">sudo</span> <span class=\"token function\">cp</span> mmseqs2/bin/mmseqs /usr/local/bin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>(3) <a href=\"url:http://micans.org/mcl/\">MCL</a></p>\n<ul>\n<li>Ubuntu, Debian, Linux Mint 安装方法：</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> mcl<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>Centos, Redhat 安装方法：</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> https://micans.org/mcl/src/mcl-latest.tar.gz\n<span class=\"token function\">tar</span> zxvf mcl-latest.tar.gz\n<span class=\"token builtin class-name\">cd</span> mcl-14-137（视具体情况而定）\n./configure\n<span class=\"token function\">make</span>\n<span class=\"token function\">make</span> check\n<span class=\"token function\">sudo</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>(4) <a href=\"url:http://www.atgc-montpellier.fr/fastme/binaries.php\">FastME</a></p>\n<p>下载二进制文件，解压并将主程序拷贝至存在于环境变量的目录下或将其所在的目录加入环境变量：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> http://www.atgc-montpellier.fr/download/sources/fastme/fastme-2.1.5.tar.gz\n<span class=\"token function\">tar</span> zxvf fastme-2.1.5.tar.gz\n<span class=\"token function\">sudo</span> <span class=\"token function\">cp</span> fastme-2.1.5/binaries/fastme-2.1.5-linux64 /usr/local/bin/fastme<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>(5) 可选: <a href=\"url:ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/\">BLAST+</a></p>\n<ul>\n<li>Ubuntu, Debian, Linux Mint 安装方法：</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> ncbi-blast+<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>Centos, Redhat 安装方法：</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/ncbi-blast-2.8.1+-x64-linux.tar.gz\n<span class=\"token function\">tar</span> zxvf ncbi-blast-2.8.1+-x64-linux.tar.gz\n<span class=\"token function\">vim</span> ~/.bashrc\ni\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$PATH</span><span class=\"token builtin class-name\">:</span><span class=\"token environment constant\">$HOME</span>/tools/ncbi-blast-2.8.1+/bin\nEsc\n<span class=\"token builtin class-name\">shift</span> + <span class=\"token punctuation\">;</span>\nwq<span class=\"token operator\">!</span>\n<span class=\"token builtin class-name\">source</span> ~/.bashrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"2\">\n<li>运行 OrthoFinder<br />\n (1) 运行示例数据：</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> OrthoFinder-2.2.7\northofinder -f ExampleData<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>运行结果如下，会显示输出文件的路径，表明运行成功：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/orthofinder01.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/orthofinder01.png\" srcset=\"https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg\" alt=\"示例数据运行结果\" /></p>\n<p>(2) 运行自己的数据：</p>\n<ul>\n<li>step1：数据准备</li>\n</ul>\n<p>下载氨基酸序列，要求为 fasta 格式，每个物种一个文件。将所有 fasta 文件存于一个目录中（如 Data 目录），如下图所示。文件名要简洁并有区分性，因为文件名会作为最终的物种 ID。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/orthofinder02.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/orthofinder02.png\" srcset=\"https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg\" alt=\"目录结构与文件准备\" /></p>\n<ul>\n<li>step2：运行程序</li>\n</ul>\n<p>在 Data 目录的上一级目录打开终端，运行如下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">orthofinder -f Data -t 线程数<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol start=\"3\">\n<li>结果解读</li>\n</ol>\n<p>(1) Results Files: Orthogroups</p>\n<p>包含一个主文件 “Orthogroups.csv” 和两个支持文件：</p>\n<ul>\n<li>\n<p>Orthogroups.csv，每一行为一个 group，每一列为一个物种，行列交汇处为基因名称。</p>\n</li>\n<li>\n<p>Orthogroups_UnassignedGenes.csv，包含所有未分配到任何 group 的基因名称。</p>\n</li>\n<li>\n<p>Orthogroups.txt，OrthoMCL 格式的输出结果，内容等同于 Orthogroups.csv。</p>\n</li>\n</ul>\n<p>（2）Results Files: Orthogroup Statistics</p>\n<p>包含一些统计数据，可用于比较基因组分析、绘图以及质控。</p>\n<ul>\n<li>\n<p>Statistics_Overall.csv 和 Statistics_PerSpecies.csv，提供基本的描述信息</p>\n</li>\n<li>\n<p>Orthogroups_SpeciesOverlaps.csv，两两物种的 group 共享矩阵</p>\n</li>\n<li>\n<p>Species-specific orthogroup：该 group 仅包含一个物种的基因。</p>\n</li>\n<li>\n<p>G50：group 中的基因数，使得 50％的基因处于该大小或更大的 group 中。</p>\n</li>\n<li>\n<p>O50：最小数量的 group，使得 50％的基因处于该大小或更大的 group 中。</p>\n</li>\n<li>\n<p>Single-copy orthogroup：每个物种中只有一个基因的 group（相当于单拷贝核心基因）。这些 group 是构建物种树和许多其他分析的理想选择。</p>\n</li>\n<li>\n<p>Unassigned gene：未与任何其他基因划分到一个 group 的基因。</p>\n</li>\n</ul>\n<p>(3) Results Files: Orthologues</p>\n<p>两两物种间的直系同源基因，每一行为一个 group，第一列为 group 编号，第二列为第一个物种的基因，第三列为第二个物种的基因。同一物种的基因名以 “,” 分割。直向同源物可以是一对一，一对多或多对多。</p>\n<p>(4) Results Files: Gene Trees and Species Tree</p>\n<p>每个 group 的基因树和定根的物种树以 newick 格式输出，可以用各种看树软件展示，如 MEGA、iTOL、Dendroscope 和 FigTree 等，个人推荐用 iTOL。</p>\n<ol start=\"4\">\n<li>高级用法</li>\n</ol>\n<p>（1）添加新物种到之前的分析<br />\n（previous_orthofinder_directory 指的是包含 “SpeciesIDs.txt” 的目录）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">orthofinder -b previous_orthofinder_directory -f new_fasta_directory<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>（2）从之前的分析中移除物种</p>\n<p>从输出目录下找到工作目录 “WorkingDirectory” 中的 “SpeciesIDs.txt” 文件，在要移除的物种那一行最前面加上一个 “#” 并保存，然后运行（previous_orthofinder_directory 指的是包含 “SpeciesIDs.txt” 的目录）：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">orthofinder -b previous_orthofinder_directory<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>（3）同时添加和删除物种</p>\n<p>编辑好 “SpeciesIDs.txt” 后，运行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">orthofinder -b previous_orthofinder_directory -f new_fasta_directory<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>（4）更多高级功能请阅读官方文档<br />\n主要包括 “Inferring MSA Gene Trees”、并行计算、单独运行 BLAST、使用预先计算的 BLAST 结果以及回归检测。</p>\n","raw":null,"categories":[{"name":"生物信息","path":"api/categories/生物信息.json"}],"tags":[{"name":"同源家族","path":"api/tags/同源家族.json"}]},{"title":"为PubMed添加功能","slug":"为PubMed添加功能","date":"2019-03-18T03:29:24.000Z","updated":"2022-01-08T02:16:28.425Z","comments":true,"path":"api/articles/为PubMed添加功能.json","excerpt":null,"keywords":null,"cover":"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/PubMed.png","content":"<p>对于搞科研的小伙伴们来说，PubMed 是一个必不可少的文献查阅数据库，然而输入关键字后，出来的文章少则几十篇，多则上百篇。而这些文章的质量却参差不齐，那么如何高效的选择高水平的文章来下载和阅读呢？</br></p>\n<span id=\"more\"></span>\n<p>首先上图，看一下我的 PubMed 界面：</br><br />\n<img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/PubMed.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/PubMed.png\" srcset=\"https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg\" alt=\"PubMed\" /><br />\n</br>从图片中可以看出，文章的影响因子、分区一目了然，甚至提供了全文下载链接，解决了学校图书馆未购买杂志数据库而需付费下载的烦恼。该效果是通过两个谷歌浏览器插件实现的，分别是<a href=\"https://www.novoprolabs.com/support/articles/pubmedy-a-chrome-extension-for-ncbi-201712191285.html\"> PubMedy</a> 和<a href=\"https://www.scholarscope.cn/\"> Scholarscope</a>。前者可以展示影响因子、参考文献格式，并提供全文下载链接；后者可以展示期刊影响因子、领域排名、引用次数及中科院分区。<br />\n</br>这两个插件都可以在谷歌商店中下载，墙内的小伙伴需要想办法科学上网，这里推荐另一款插件 ——“<a href=\"https://www.skyzip.de/\">skyZIP™ Proxy</a>”。<br />\n</br>插件可以自行搜索下载，也可以加入 QQ 群（945751012）下载。</p>\n","raw":null,"categories":[{"name":"生物信息","path":"api/categories/生物信息.json"}],"tags":[{"name":"PubMed","path":"api/tags/PubMed.json"}]},{"title":"Hexo博客导航栏menu无法跳转https","slug":"Hexo博客导航栏menu无法跳转https","date":"2019-03-05T04:08:12.000Z","updated":"2022-01-08T02:16:28.397Z","comments":true,"path":"api/articles/Hexo博客导航栏menu无法跳转https.json","excerpt":null,"keywords":null,"cover":null,"content":"<p>Hexo 博客部署到 github/coding 后，点击菜单栏 menu 跳转至 http 而非 https，提示找不到页面。</p>\n<span id=\"more\"></span>\n<p>解决方案：</p>\n<p>修改主题配置文件 “_config.yml”，在每一个 menu 的路径后面（url 那一行）加一条正斜线，重新部署即可。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">menu:\n\n<span class=\"token comment\"># index</span>\n\n  - title: 首页\n\n    icon: home\n\n    url: /\n\n  <span class=\"token comment\"># archives</span>\n\n  - title: 归档\n\n    icon: archive\n\n    url: archives/\n\n  <span class=\"token comment\"># categories</span>\n\n  - title: 分类\n\n    icon: list\n\n    url: categories/\n\n  <span class=\"token comment\"># tags</span>\n\n  - title: 标签\n\n    icon: tags\n\n    url: tags/\n\n  <span class=\"token comment\"># about</span>\n\n  - title: 关于我\n\n    icon: user\n\n    url: /about/\n\n  <span class=\"token comment\"># archives</span>\n\n  - title: 留言板\n\n    icon: comments\n\n    url: Message/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","raw":null,"categories":[{"name":"网站建设","path":"api/categories/网站建设.json"}],"tags":[{"name":"Hexo","path":"api/tags/Hexo.json"}]},{"title":"windows 10 中文乱码解决方案","slug":"windows-10-中文乱码解决方案","date":"2019-03-01T13:53:01.000Z","updated":"2022-01-08T02:16:28.424Z","comments":true,"path":"api/articles/windows-10-中文乱码解决方案.json","excerpt":null,"keywords":null,"cover":"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/control_panel_1.png","content":"<p>安装的英文原版系统，导致多数中文乱码，即便是安装了中文语言包，如果设置错误，仍旧无法正确显示中文。</p>\n<span id=\"more\"></span>\n<p>进入正题，按如图所示一步步完成设置，重启系统便可解决问题。我的系统是 18845.1001 版本，其他版本应该不会差别太大。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/control_panel_1.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/control_panel_1.png\" srcset=\"https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg\" alt=\"通过开始菜单进入控制面板\" /></p>\n<center>通过开始菜单进入控制面板</center>\n<p><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/control_panel_2.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/control_panel_2.png\" srcset=\"https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg\" alt=\"日期、时间和区域格式设置\" /></p>\n<center>日期、时间和区域格式设置</center>\n<p><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/control_panel_3.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/control_panel_3.png\" srcset=\"https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg\" alt=\"下拉相关设置\" /></p>\n<center>下拉相关设置</center>\n<p><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/control_panel_4.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/control_panel_4.png\" srcset=\"https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg\" alt=\"选择区域\" /></p>\n<center>选择区域</center>\n<p><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/control_panel_5.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/control_panel_5.png\" srcset=\"https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg\" alt=\"管理-更改系统区域设置\" /></p>\n<center>管理-更改系统区域设置</center>\n<p><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/control_panel_6.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/control_panel_6.png\" srcset=\"https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg\" alt=\"设置为中文，不要选择Beta版\" /></p>\n<center>设置为中文，不要选择Beta版</center>\n<p><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/control_panel_7.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/control_panel_7.png\" srcset=\"https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg\" alt=\"复制设置\" /></p>\n<center>复制设置</center>\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"系统","path":"api/tags/系统.json"}]},{"title":"R语言自定义坐标轴排序","slug":"R语言自定义坐标轴排序","date":"2019-02-22T08:57:21.000Z","updated":"2022-01-08T02:16:28.414Z","comments":true,"path":"api/articles/R语言自定义坐标轴排序.json","excerpt":null,"keywords":null,"cover":null,"content":"<p>R 语言作图时，默认情况下软件会按照自己的方式对坐标轴的项目进行排序，然而这种排序往往不是我们所希望的，因此需要想办法让坐标轴的项目按照我们希望的顺序输出。</p>\n<span id=\"more\"></span>\n<p>如下所示，我有两列数据，要绘制箱线图，以第一列为 Y 轴，第二列为 X 轴，希望 X 轴的输出顺序按照第二列由上到下排列。</br></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">size    <span class=\"token builtin class-name\">type</span>\n<span class=\"token number\">6.612309456</span>    T-8\n<span class=\"token number\">5.878857613</span>    T-10\n<span class=\"token number\">6.724282265</span>    T-15\n<span class=\"token number\">5.68136692</span>    T-56\n<span class=\"token number\">5.863334656</span>    T-1723<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p></br>然而软件输出的顺序如下：</br></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">T-10    T-15    T-1723    T-56    T-8<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>解决方案：</br></p>\n<p>通过一个因子事先自定义 X 轴顺序，作图命令如下：</br></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#读入数据</span>\ngsize <span class=\"token operator\">&lt;</span>- read.delim<span class=\"token punctuation\">(</span><span class=\"token string\">\"gsize.txt\"</span>, <span class=\"token assign-left variable\">header</span><span class=\"token operator\">=</span>TRUE, <span class=\"token assign-left variable\">sep</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token entity\" title=\"\\t\">\\t</span>\"</span>, <span class=\"token assign-left variable\">stringsAsFactors</span><span class=\"token operator\">=</span>FALSE<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#自定义X轴顺序</span>\nx1 <span class=\"token operator\">=</span> factor<span class=\"token punctuation\">(</span>gsize<span class=\"token variable\">$type</span>, <span class=\"token assign-left variable\">levels</span><span class=\"token operator\">=</span>c<span class=\"token punctuation\">(</span><span class=\"token string\">\"T-8\"</span>,<span class=\"token string\">\"T-10\"</span>,<span class=\"token string\">\"T-15\"</span>,<span class=\"token string\">\"T-56\"</span>,<span class=\"token string\">\"T-1723\"</span><span class=\"token punctuation\">))</span>\n<span class=\"token comment\">#用x1代替gsize$type绘图</span>\nboxplot<span class=\"token punctuation\">(</span>size~x1, <span class=\"token assign-left variable\">data</span><span class=\"token operator\">=</span>gsize, <span class=\"token assign-left variable\">xlab</span><span class=\"token operator\">=</span><span class=\"token string\">\"Sequence Type\"</span>, <span class=\"token assign-left variable\">ylab</span><span class=\"token operator\">=</span><span class=\"token string\">\"Genome Size\"</span>, <span class=\"token assign-left variable\">varwidth</span><span class=\"token operator\">=</span>TRUE, <span class=\"token assign-left variable\">notch</span><span class=\"token operator\">=</span>FALSE<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p></br>至此，X 轴各项目会按照我们自定义的顺序排列。</p>\n","raw":null,"categories":[{"name":"可视化","path":"api/categories/可视化.json"}],"tags":[{"name":"R语言","path":"api/tags/R语言.json"},{"name":"绘图","path":"api/tags/绘图.json"}]}]}