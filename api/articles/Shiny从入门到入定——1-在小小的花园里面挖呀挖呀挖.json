{"title":"Shiny从入门到入定——1.在小小的花园里面挖呀挖呀挖","slug":"Shiny从入门到入定——1-在小小的花园里面挖呀挖呀挖","date":"2023-11-10T13:16:23.000Z","updated":"2024-03-11T13:07:17.000Z","comments":true,"path":"api/articles/Shiny从入门到入定——1-在小小的花园里面挖呀挖呀挖.json","excerpt":null,"covers":["https://d33wubrfki0l68.cloudfront.net/fbf45a58e2a82900449f9eb35deba4e670f54624/530cb/images/basic-app/run-app.png","https://d33wubrfki0l68.cloudfront.net/e9e6b44c85c169aedd2c4e630022e7958aa57696/06ba0/images/basic-app/hello-world.png","https://d33wubrfki0l68.cloudfront.net/17eadbf2ccdea8d4648b05d486dfb465f562df69/d077d/demos/basic-app/ui.png","https://d33wubrfki0l68.cloudfront.net/349cbcca50af85a9214e552296f33f14be37f768/52241/images/basic-app/cheatsheet.png","https://d33wubrfki0l68.cloudfront.net/cc947455e46b88242e9c3460d3c2291f9f9393c2/093b0/demos/basic-app/ex-x-times-5.png","https://d33wubrfki0l68.cloudfront.net/6a4de45b5dd90ca5c9e9ba6bf90d4be54d5ac8db/dc9e2/demos/basic-app/ex-x-times-y.png","https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg","https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png"],"content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>本部分为学习Shiny的第一阶段——挖坑。</p>\n<p>在接下来的四章中，目标是让读者尽快学会编写Shiny应用程序。</p>\n<ul>\n<li><p>在第一章中，作者将从小处着手，但内容完整，向读者展示应用程序的所有主要部分以及它们如何组合在一起。</p>\n</li>\n<li><p>在第二章和第三章中，读者将开始详细了解Shiny应用程序的两个主要部分：前端（用户在浏览器中看到的内容）和后端（使应用程序起作用的代码）。</p>\n</li>\n<li><p>第四章将通过案例研究来完成，以帮助巩固读者迄今为止所学的概念。</p>\n</li>\n</ul>\n<h1 id=\"第一个Shiny-app\"><a href=\"#第一个Shiny-app\" class=\"headerlink\" title=\"第一个Shiny app\"></a>第一个Shiny app</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>在本章中，我们将创建一个简单的Shiny应用程序。首先，我将向您展示Shiny应用程序所需的最低样板，然后您将学习如何启动和停止它。接下来，您将学习每个Shiny应用程序的两个关键组件：UI（用户界面的缩写），它定义了应用程序的外观，以及服务器功能，它定义了应用程序的工作方式。Shiny使用响应式编程在输入更改时自动更新输出，因此我们将通过学习Shiny应用程序的第三个重要组件：响应式表达式来结束本章。</p>\n<p>如果你还没有安装Shiny，现在用以下命令安装它</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">install.packages<span class=\"punctuation\">(</span><span class=\"string\">&quot;shiny&quot;</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>如果您已经安装了Shiny，请使用<code>packageVersion(&quot;shiny&quot;)</code>检查您是否安装了1.5.0或更高版本。然后在当前的R会话中加载：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>shiny<span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建应用程序目录和文件\"><a href=\"#创建应用程序目录和文件\" class=\"headerlink\" title=\"创建应用程序目录和文件\"></a>创建应用程序目录和文件</h2><p>创建Shiny应用程序有多种方法，最简单的是为您的应用程序创建一个新目录，并在其中放置一个名为<code>app.R</code>的单个文件。这个app.R文件将用于告诉Shiny应用程序应该如何展示界面以及应该如何运行。</p>\n<p>通过创建新目录并添加如下所示的app.R文件来尝试一下：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>shiny<span class=\"punctuation\">)</span></span><br><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  <span class=\"string\">&quot;Hello, world!&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">shinyApp<span class=\"punctuation\">(</span>ui<span class=\"punctuation\">,</span> server<span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>以上是完整的、基础的Shiny应用程序！仔细观察上面的代码，app.R做了四件事：</p>\n<ul>\n<li><p>它调用<code>library(shiny)</code>来加载shiny包。</p>\n</li>\n<li><p>它定义了用户界面，即人类与之交互的HTML网页。在这种情况下，它是一个包含<code>“Hello，world！”</code>的页面。</p>\n</li>\n<li><p>它通过定义<code>server</code>函数来指定应用程序的行为。目前为空，因此我们的应用程序不做任何事情，但我们稍后会回过头来重新审视这一点。</p>\n</li>\n<li><p>它使用<code>shinyApp(ui，server)</code>来构建并启动一个从用户界面和服务器构建的Shiny应用程序。</p>\n</li>\n</ul>\n<p><strong>RStudio提示</strong>：在RStudio中有两种方便的方法可以创建新的应用程序：</p>\n<ul>\n<li><p>通过点击<code>File | New Project</code>，然后选择<code>New Directory</code>和<code>Shiny Web Application</code>，可以一次性创建一个新的目录和<code>app.R</code>文件，其中包含基本的应用程序。</p>\n</li>\n<li><p>如果您已经创建了<code>app.R</code>文件，可以通过键入<code>“shinyapp”</code>并按<code>Shift+Tab</code>快速添加应用程序样板。</p>\n</li>\n</ul>\n<h2 id=\"运行和停止\"><a href=\"#运行和停止\" class=\"headerlink\" title=\"运行和停止\"></a>运行和停止</h2><p>您可以通过几种方式运行此应用程序：</p>\n<ul>\n<li><p>单击文档工具栏中的<code>Run App</code>（图1.1）按钮。</p>\n</li>\n<li><p>使用键盘快捷键：<code>Cmd / Ctrl + Shift + Enter</code>。</p>\n</li>\n<li><p>如果您没有使用RStudio，则可以使用<code>(source())</code><sup>1</sup> 整个文档，或使用包含app.R的目录的路径调用<code>shiny::runApp()</code>。</p>\n</li>\n</ul>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/fbf45a58e2a82900449f9eb35deba4e670f54624/530cb/images/basic-app/run-app.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/fbf45a58e2a82900449f9eb35deba4e670f54624/530cb/images/basic-app/run-app.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图1.1 Run App 按钮可以在源码窗格的右上角找到。\"></p>\n<p>从这些选项中选择一个，并确认您看到的与图1.2中的相同的应用程序。恭喜！您已经制作了您的第一个Shiny应用程序。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/e9e6b44c85c169aedd2c4e630022e7958aa57696/06ba0/images/basic-app/hello-world.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/e9e6b44c85c169aedd2c4e630022e7958aa57696/06ba0/images/basic-app/hello-world.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图1.2 当你运行上面的代码时，你会看到最简单的shiny应用程序\"></p>\n<p>在你关闭应用程序之前，回到RStudio并查看R控制台。你会注意到它说类似于：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#&gt; Listening on http://127.0.0.1:3827</span><br></pre></td></tr></table></figure>\n\n<p>这告诉你应用程序的URL：127.0.0.1是一个标准地址，表示“这台计算机”，而3827是一个随机分配的端口号。你可以将该URL输入到任何兼容的web浏览器中以打开应用程序的另一个副本。</p>\n<p>另外请注意，R正在运行：R提示符不可见，控制台工具栏显示一个停止符号图标。当Shiny应用程序正在运行时，它会“阻止”R控制台。这意味着在Shiny应用程序停止之前，您无法在R控制台运行新的命令。</p>\n<p>您可以使用以下选项之一停止应用程序并返回对控制台的访问权限：</p>\n<ul>\n<li><p>点击R控制台工具栏上的停止符号图标。</p>\n</li>\n<li><p>单击控制台，然后按Esc（或按<code>Ctrl + C</code>如果您没有使用RStudio）。</p>\n</li>\n<li><p>关闭Shiny应用程序窗口。</p>\n</li>\n</ul>\n<p>Shiny应用程序开发的基本工作流程是编写一些代码，启动应用程序，与应用程序交互，编写更多代码，然后重复。如果你使用的是RStudio，你甚至不需要停止和重新启动应用程序来查看你的更改 - 你可以按下工具箱中的<code>Reload app</code>按钮或使用<code>Cmd/Ctrl + Shift + Enter</code>键盘快捷键。我将在第5章中介绍其他工作流程模式。</p>\n<h2 id=\"添加用户界面控件\"><a href=\"#添加用户界面控件\" class=\"headerlink\" title=\"添加用户界面控件\"></a>添加用户界面控件</h2><p>接下来，我们将向用户界面添加一些输入和输出，使其不再如此简约。我们将创建一个非常简单的应用程序，向您展示datasets包中包含的所有内置数据框。</p>\n<p>用以下代码替换您的ui：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;dataset&quot;</span><span class=\"punctuation\">,</span> label <span class=\"operator\">=</span> <span class=\"string\">&quot;Dataset&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> ls<span class=\"punctuation\">(</span><span class=\"string\">&quot;package:datasets&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  verbatimTextOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;summary&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;table&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>这个例子使用了四个新函数：</p>\n<ul>\n<li><p><code>fluidPage()</code>是一个布局函数，用于设置页面的基本视觉结构。您将在第6.2节中了解更多关于它们的信息。</p>\n</li>\n<li><p><code>selectInput()</code>是一种输入控件，使用户可以通过提供值与应用程序进行交互。在这种情况下，它是一个带有标签“Dataset”的下拉菜单，允许您从R自带的内置数据集中选择一个。您将在第2.2节中了解更多关于输入的信息。</p>\n</li>\n<li><p><code>verbatimTextOutput()</code>和<code>tableOutput()</code>是输出控件，它们告诉Shiny将渲染的输出放在哪里（我们稍后再了解）。<code>verbatimTextOutput()</code>显示代码，<code>tableOutput()</code>显示表格。您将在第2.3节中了解更多关于输出的信息。</p>\n</li>\n</ul>\n<p>布局函数、输入和输出有不同的用途，但它们在本质上都是相同的：它们都是生成HTML的巧妙方式，如果您在Shiny应用程序之外调用其中任何一个，您将在控制台上看到HTML输出。不要害怕深入研究这些不同的布局和控件是如何工作的。</p>\n<p>现在运行应用程序。您将看到图1.3，一个包含下拉框的页面。我们只看到了输入，而没有看到两个输出，因为我们还没有告诉Shiny输入和输出之间的关系。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/17eadbf2ccdea8d4648b05d486dfb465f562df69/d077d/demos/basic-app/ui.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/17eadbf2ccdea8d4648b05d486dfb465f562df69/d077d/demos/basic-app/ui.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图1.3 具有用户界面的datasets应用程序\"></p>\n<h2 id=\"添加行为\"><a href=\"#添加行为\" class=\"headerlink\" title=\"添加行为\"></a>添加行为</h2><p>接下来，我们将通过在<code>server</code>函数中定义它们来为输出提供生命。</p>\n<p>Shiny使用响应式编程使应用程序具有交互性。您将在第3章中了解更多关于响应式编程的信息，但现在只需知道，它涉及到告诉Shiny如何执行计算，而不是命令Shiny实际去做。这就像给某人食谱与命令他们给您做三明治之间的区别。</p>\n<p>我们将为样本应用程序中的摘要和表格输出提供“食谱”，以告诉Shiny如何填充这些输出。用以下代码替换您的空server函数：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>summary <span class=\"operator\">&lt;-</span> renderPrint<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    dataset <span class=\"operator\">&lt;-</span> get<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dataset<span class=\"punctuation\">,</span> <span class=\"string\">&quot;package:datasets&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    summary<span class=\"punctuation\">(</span>dataset<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>table <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    dataset <span class=\"operator\">&lt;-</span> get<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dataset<span class=\"punctuation\">,</span> <span class=\"string\">&quot;package:datasets&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    dataset</span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>赋值运算符（&lt;-）的左侧，<code>output$ID</code>，表示您正在为具有该ID的Shiny输出提供食谱。赋值运算符的右侧使用特定的render函数来包装您提供的代码。每个<code>render&#123;Type&#125;</code>函数旨在生成特定类型的输出（例如文本、表格和图形），并且通常与<code>&#123;type&#125;Output</code>函数配对。例如，在此应用程序中，<code>renderPrint()</code>与<code>verbatimTextOutput()</code>配对以显示具有固定宽度（逐字）文本的统计摘要，而<code>renderTable()</code>与<code>tableOutput()</code>配对以在表格中显示输入数据。</p>\n<p>再次运行应用程序并尝试使用，观察更改输入时输出会发生什么变化。图1.4显示了打开应用程序时应该看到的内容。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/bb766cc235f190fd2c28d8f011edb7f9cbe526a7/5d540/demos/basic-app/server.png\" alt=\"图1.4 \n现在我们已经提供了一个将输出和输入连接起来的服务器函数，我们已经有了一个功能完整的应用程序\"></p>\n<p>请注意，每当您更改输入数据集时，摘要和表格都会自动更新。这种依赖性是通过在输出函数中引用<code>input$dataset</code>而隐式创建的。<code>input$dataset</code>被填充为UI组件中id为dataset的当前值，并且当该值发生变化时，将导致输出自动更新。这就是反应性的本质：输出在输入发生更改时自动（重新计算）。</p>\n<h2 id=\"使用反应式表达式减少重复\"><a href=\"#使用反应式表达式减少重复\" class=\"headerlink\" title=\"使用反应式表达式减少重复\"></a>使用反应式表达式减少重复</h2><p>即使在这个简单的例子中，我们也有一些重复的代码：下面的这行代码在两个输出中都存在。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataset <span class=\"operator\">&lt;-</span> get<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dataset<span class=\"punctuation\">,</span> <span class=\"string\">&quot;package:datasets&quot;</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>在任何一种编程中，重复的代码都是不良的实践；它可能在计算上是浪费的，更重要的是，它增加了维护或调试代码的难度。在这里不是那么重要，但我想在一个非常简单的上下文中说明这个基本概念。</p>\n<p>在传统的R脚本中，我们使用两种技术来处理重复的代码：要么捕获变量的值，要么用函数捕获计算。不幸的是，这两种方法在这里都不适用，原因将在第13.2节中介绍，我们需要一个新的机制：<code>反应式表达式</code>。</p>\n<p>您可以通过将代码块包装在<code>reactive(&#123;...&#125;)</code>中并将其分配给变量来创建反应式表达式，并且可以通过像调用函数一样来使用反应式表达式。然而，尽管看起来像是在调用函数，但反应式表达式有一个重要的区别：它只在其第一次被调用时运行，然后将其结果缓存直到需要更新。</p>\n<p>我们可以更新我们的server()函数来使用反应式表达式，如下所示。这个应用程序的行为完全相同，但运行更有效率，因为它只需要检索数据集一次，而不是两次。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"comment\"># Create a reactive expression</span></span><br><span class=\"line\">  dataset <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    get<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dataset<span class=\"punctuation\">,</span> <span class=\"string\">&quot;package:datasets&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  output<span class=\"operator\">$</span>summary <span class=\"operator\">&lt;-</span> renderPrint<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"comment\"># Use a reactive expression by calling it like a function</span></span><br><span class=\"line\">    summary<span class=\"punctuation\">(</span>dataset<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>table <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    dataset<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们会多次回到响应式编程，但即使只有对输入、输出和反应式表达式的粗略了解，也可以构建非常有用的Shiny应用程序！</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在本章中，您创建了一个简单的应用程序-这不是很有趣或很有用，但是您已经看到了使用现有的R知识构建Web应用程序的容易程度。在接下来的两章中，您将学习更多关于用户界面和响应式编程的知识，这是Shiny的两个基本构建块。现在是获取Shiny速查表的绝佳时机。这是一个很好的资源，可以帮助您记住Shiny应用程序的主要组件。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/349cbcca50af85a9214e552296f33f14be37f768/52241/images/basic-app/cheatsheet.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/349cbcca50af85a9214e552296f33f14be37f768/52241/images/basic-app/cheatsheet.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图1.5 Shiny速查表，可从[https://www.rstudio.com/resources/cheatsheets/]获取\"></p>\n<h2 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h2><p><strong>1.8.1</strong> 创建一个应用程序，通过姓名向用户打招呼。您可能不知道需要使用哪些函数来完成此操作，因此我已经在下方包含了一些代码行。请考虑需要使用哪些行，然后将它们复制并粘贴到Shiny应用程序的适当位置。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;mortgage&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">output<span class=\"operator\">$</span>greeting <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  paste0<span class=\"punctuation\">(</span><span class=\"string\">&quot;Hello &quot;</span><span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>name<span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;age&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;How old are you?&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"literal\">NA</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">textInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;name&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;What&#x27;s your name?&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;greeting&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">output<span class=\"operator\">$</span>histogram <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  hist<span class=\"punctuation\">(</span>rnorm<span class=\"punctuation\">(</span><span class=\"number\">1000</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> res <span class=\"operator\">=</span> <span class=\"number\">96</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>1.8.2</strong> 假设你的朋友想设计一个应用程序，允许用户设置一个介于1和50之间的数字（x），并显示这个数字乘以5的结果。以下是他&#x2F;她的第一次尝试：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>shiny<span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;x&quot;</span><span class=\"punctuation\">,</span> label <span class=\"operator\">=</span> <span class=\"string\">&quot;If x is&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">50</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">30</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"string\">&quot;then x times 5 is&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;product&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>product <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span> </span><br><span class=\"line\">    x <span class=\"operator\">*</span> <span class=\"number\">5</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">shinyApp<span class=\"punctuation\">(</span>ui<span class=\"punctuation\">,</span> server<span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>其不幸报错如下，请尝试修复错误：</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/cc947455e46b88242e9c3460d3c2291f9f9393c2/093b0/demos/basic-app/ex-x-times-5.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/cc947455e46b88242e9c3460d3c2291f9f9393c2/093b0/demos/basic-app/ex-x-times-5.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"error\"></p>\n<p><strong>1.8.3</strong> 将前一个练习中的应用程序扩展为允许用户设置乘数y的值，以便应用程序产生x * y的值。最终结果应如下所示：</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/6a4de45b5dd90ca5c9e9ba6bf90d4be54d5ac8db/dc9e2/demos/basic-app/ex-x-times-y.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/6a4de45b5dd90ca5c9e9ba6bf90d4be54d5ac8db/dc9e2/demos/basic-app/ex-x-times-y.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"xy\"></p>\n<p><strong>1.8.4</strong> 以下面的应用程序为例，它为上一练习中描述的最后一个应用程序添加了一些附加功能。有什么新功能？如何使用响应式表达式减少应用程序中的重复代码量。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>shiny<span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;x&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;If x is&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">50</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">30</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;y&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;and y is&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">50</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">5</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"string\">&quot;then, (x * y) is&quot;</span><span class=\"punctuation\">,</span> textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;product&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"string\">&quot;and, (x * y) + 5 is&quot;</span><span class=\"punctuation\">,</span> textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;product_plus5&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"string\">&quot;and (x * y) + 10 is&quot;</span><span class=\"punctuation\">,</span> textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;product_plus10&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>product <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span> </span><br><span class=\"line\">    product <span class=\"operator\">&lt;-</span> input<span class=\"operator\">$</span>x <span class=\"operator\">*</span> input<span class=\"operator\">$</span>y</span><br><span class=\"line\">    product</span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>product_plus5 <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span> </span><br><span class=\"line\">    product <span class=\"operator\">&lt;-</span> input<span class=\"operator\">$</span>x <span class=\"operator\">*</span> input<span class=\"operator\">$</span>y</span><br><span class=\"line\">    product <span class=\"operator\">+</span> <span class=\"number\">5</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>product_plus10 <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span> </span><br><span class=\"line\">    product <span class=\"operator\">&lt;-</span> input<span class=\"operator\">$</span>x <span class=\"operator\">*</span> input<span class=\"operator\">$</span>y</span><br><span class=\"line\">    product <span class=\"operator\">+</span> <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">shinyApp<span class=\"punctuation\">(</span>ui<span class=\"punctuation\">,</span> server<span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>1.8.5</strong> 以下应用程序与您在本章前面看到的应用程序非常相似：您从包中选择一个数据集（这次我们使用ggplot2包），应用程序会打印出数据的摘要和图表。它还遵循良好的实践，并利用响应式表达式来避免代码冗余。但是，下面提供的代码存在三个错误。您可以找到并修复它们吗？</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>shiny<span class=\"punctuation\">)</span></span><br><span class=\"line\">library<span class=\"punctuation\">(</span>ggplot2<span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">datasets <span class=\"operator\">&lt;-</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;economics&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;faithfuld&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;seals&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;dataset&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Dataset&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> datasets<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  verbatimTextOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;summary&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;plot&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  dataset <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    get<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dataset<span class=\"punctuation\">,</span> <span class=\"string\">&quot;package:ggplot2&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>summmry <span class=\"operator\">&lt;-</span> renderPrint<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    summary<span class=\"punctuation\">(</span>dataset<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>plot <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    plot<span class=\"punctuation\">(</span>dataset<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> res <span class=\"operator\">=</span> <span class=\"number\">96</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">shinyApp<span class=\"punctuation\">(</span>ui<span class=\"punctuation\">,</span> server<span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"练习题答案获取\"><a href=\"#练习题答案获取\" class=\"headerlink\" title=\"练习题答案获取\"></a>练习题答案获取</h1><p>关注公众号“生信之巅”，聊天窗口回复“b376”获取习题答案。</p>\n<table align=\"center\"><tr>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅微信公众号\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-right: 0px;margin-bottom: 5px;align: center;\"></td>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅小程序码\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-left: 0px;margin-bottom: 5px;align: center\"></td>\n</tr></table>\n\n\n<p><font color=\"#FF0000\"><ruby><b>敬告</b>：使用文中脚本请引用本文网址，请尊重本人的劳动成果，谢谢！<rt><b>Notice</b>: When you use the scripts in this article, please cite the link of this webpage. Thank you!</rt></ruby></font></p>\n","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>本部分为学习Shiny的第一阶段——挖坑。</p>\n<p>在接下来的四章中，目标是让读者尽快学会编写Shiny应用程序。</p>\n<ul>\n<li><p>在第一章中，作者将从小处着手，但内容完整，向读者展示应用程序的所有主要部分以及它们如何组合在一起。</p>\n</li>\n<li><p>在第二章和第三章中，读者将开始详细了解Shiny应用程序的两个主要部分：前端（用户在浏览器中看到的内容）和后端（使应用程序起作用的代码）。</p>\n</li>\n<li><p>第四章将通过案例研究来完成，以帮助巩固读者迄今为止所学的概念。</p>\n</li>\n</ul>\n<h1 id=\"第一个Shiny-app\"><a href=\"#第一个Shiny-app\" class=\"headerlink\" title=\"第一个Shiny app\"></a>第一个Shiny app</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>在本章中，我们将创建一个简单的Shiny应用程序。首先，我将向您展示Shiny应用程序所需的最低样板，然后您将学习如何启动和停止它。接下来，您将学习每个Shiny应用程序的两个关键组件：UI（用户界面的缩写），它定义了应用程序的外观，以及服务器功能，它定义了应用程序的工作方式。Shiny使用响应式编程在输入更改时自动更新输出，因此我们将通过学习Shiny应用程序的第三个重要组件：响应式表达式来结束本章。</p>\n<p>如果你还没有安装Shiny，现在用以下命令安装它</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">install.packages<span class=\"punctuation\">(</span><span class=\"string\">&quot;shiny&quot;</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>如果您已经安装了Shiny，请使用<code>packageVersion(&quot;shiny&quot;)</code>检查您是否安装了1.5.0或更高版本。然后在当前的R会话中加载：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>shiny<span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建应用程序目录和文件\"><a href=\"#创建应用程序目录和文件\" class=\"headerlink\" title=\"创建应用程序目录和文件\"></a>创建应用程序目录和文件</h2><p>创建Shiny应用程序有多种方法，最简单的是为您的应用程序创建一个新目录，并在其中放置一个名为<code>app.R</code>的单个文件。这个app.R文件将用于告诉Shiny应用程序应该如何展示界面以及应该如何运行。</p>\n<p>通过创建新目录并添加如下所示的app.R文件来尝试一下：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>shiny<span class=\"punctuation\">)</span></span><br><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  <span class=\"string\">&quot;Hello, world!&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">shinyApp<span class=\"punctuation\">(</span>ui<span class=\"punctuation\">,</span> server<span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>以上是完整的、基础的Shiny应用程序！仔细观察上面的代码，app.R做了四件事：</p>\n<ul>\n<li><p>它调用<code>library(shiny)</code>来加载shiny包。</p>\n</li>\n<li><p>它定义了用户界面，即人类与之交互的HTML网页。在这种情况下，它是一个包含<code>“Hello，world！”</code>的页面。</p>\n</li>\n<li><p>它通过定义<code>server</code>函数来指定应用程序的行为。目前为空，因此我们的应用程序不做任何事情，但我们稍后会回过头来重新审视这一点。</p>\n</li>\n<li><p>它使用<code>shinyApp(ui，server)</code>来构建并启动一个从用户界面和服务器构建的Shiny应用程序。</p>\n</li>\n</ul>\n<p><strong>RStudio提示</strong>：在RStudio中有两种方便的方法可以创建新的应用程序：</p>\n<ul>\n<li><p>通过点击<code>File | New Project</code>，然后选择<code>New Directory</code>和<code>Shiny Web Application</code>，可以一次性创建一个新的目录和<code>app.R</code>文件，其中包含基本的应用程序。</p>\n</li>\n<li><p>如果您已经创建了<code>app.R</code>文件，可以通过键入<code>“shinyapp”</code>并按<code>Shift+Tab</code>快速添加应用程序样板。</p>\n</li>\n</ul>\n<h2 id=\"运行和停止\"><a href=\"#运行和停止\" class=\"headerlink\" title=\"运行和停止\"></a>运行和停止</h2><p>您可以通过几种方式运行此应用程序：</p>\n<ul>\n<li><p>单击文档工具栏中的<code>Run App</code>（图1.1）按钮。</p>\n</li>\n<li><p>使用键盘快捷键：<code>Cmd / Ctrl + Shift + Enter</code>。</p>\n</li>\n<li><p>如果您没有使用RStudio，则可以使用<code>(source())</code><sup>1</sup> 整个文档，或使用包含app.R的目录的路径调用<code>shiny::runApp()</code>。</p>\n</li>\n</ul>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/fbf45a58e2a82900449f9eb35deba4e670f54624/530cb/images/basic-app/run-app.png\" alt=\"图1.1 Run App 按钮可以在源码窗格的右上角找到。\"></p>\n<p>从这些选项中选择一个，并确认您看到的与图1.2中的相同的应用程序。恭喜！您已经制作了您的第一个Shiny应用程序。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/e9e6b44c85c169aedd2c4e630022e7958aa57696/06ba0/images/basic-app/hello-world.png\" alt=\"图1.2 当你运行上面的代码时，你会看到最简单的shiny应用程序\"></p>\n<p>在你关闭应用程序之前，回到RStudio并查看R控制台。你会注意到它说类似于：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#&gt; Listening on http://127.0.0.1:3827</span><br></pre></td></tr></table></figure>\n\n<p>这告诉你应用程序的URL：127.0.0.1是一个标准地址，表示“这台计算机”，而3827是一个随机分配的端口号。你可以将该URL输入到任何兼容的web浏览器中以打开应用程序的另一个副本。</p>\n<p>另外请注意，R正在运行：R提示符不可见，控制台工具栏显示一个停止符号图标。当Shiny应用程序正在运行时，它会“阻止”R控制台。这意味着在Shiny应用程序停止之前，您无法在R控制台运行新的命令。</p>\n<p>您可以使用以下选项之一停止应用程序并返回对控制台的访问权限：</p>\n<ul>\n<li><p>点击R控制台工具栏上的停止符号图标。</p>\n</li>\n<li><p>单击控制台，然后按Esc（或按<code>Ctrl + C</code>如果您没有使用RStudio）。</p>\n</li>\n<li><p>关闭Shiny应用程序窗口。</p>\n</li>\n</ul>\n<p>Shiny应用程序开发的基本工作流程是编写一些代码，启动应用程序，与应用程序交互，编写更多代码，然后重复。如果你使用的是RStudio，你甚至不需要停止和重新启动应用程序来查看你的更改 - 你可以按下工具箱中的<code>Reload app</code>按钮或使用<code>Cmd/Ctrl + Shift + Enter</code>键盘快捷键。我将在第5章中介绍其他工作流程模式。</p>\n<h2 id=\"添加用户界面控件\"><a href=\"#添加用户界面控件\" class=\"headerlink\" title=\"添加用户界面控件\"></a>添加用户界面控件</h2><p>接下来，我们将向用户界面添加一些输入和输出，使其不再如此简约。我们将创建一个非常简单的应用程序，向您展示datasets包中包含的所有内置数据框。</p>\n<p>用以下代码替换您的ui：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;dataset&quot;</span><span class=\"punctuation\">,</span> label <span class=\"operator\">=</span> <span class=\"string\">&quot;Dataset&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> ls<span class=\"punctuation\">(</span><span class=\"string\">&quot;package:datasets&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  verbatimTextOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;summary&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;table&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>这个例子使用了四个新函数：</p>\n<ul>\n<li><p><code>fluidPage()</code>是一个布局函数，用于设置页面的基本视觉结构。您将在第6.2节中了解更多关于它们的信息。</p>\n</li>\n<li><p><code>selectInput()</code>是一种输入控件，使用户可以通过提供值与应用程序进行交互。在这种情况下，它是一个带有标签“Dataset”的下拉菜单，允许您从R自带的内置数据集中选择一个。您将在第2.2节中了解更多关于输入的信息。</p>\n</li>\n<li><p><code>verbatimTextOutput()</code>和<code>tableOutput()</code>是输出控件，它们告诉Shiny将渲染的输出放在哪里（我们稍后再了解）。<code>verbatimTextOutput()</code>显示代码，<code>tableOutput()</code>显示表格。您将在第2.3节中了解更多关于输出的信息。</p>\n</li>\n</ul>\n<p>布局函数、输入和输出有不同的用途，但它们在本质上都是相同的：它们都是生成HTML的巧妙方式，如果您在Shiny应用程序之外调用其中任何一个，您将在控制台上看到HTML输出。不要害怕深入研究这些不同的布局和控件是如何工作的。</p>\n<p>现在运行应用程序。您将看到图1.3，一个包含下拉框的页面。我们只看到了输入，而没有看到两个输出，因为我们还没有告诉Shiny输入和输出之间的关系。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/17eadbf2ccdea8d4648b05d486dfb465f562df69/d077d/demos/basic-app/ui.png\" alt=\"图1.3 具有用户界面的datasets应用程序\"></p>\n<h2 id=\"添加行为\"><a href=\"#添加行为\" class=\"headerlink\" title=\"添加行为\"></a>添加行为</h2><p>接下来，我们将通过在<code>server</code>函数中定义它们来为输出提供生命。</p>\n<p>Shiny使用响应式编程使应用程序具有交互性。您将在第3章中了解更多关于响应式编程的信息，但现在只需知道，它涉及到告诉Shiny如何执行计算，而不是命令Shiny实际去做。这就像给某人食谱与命令他们给您做三明治之间的区别。</p>\n<p>我们将为样本应用程序中的摘要和表格输出提供“食谱”，以告诉Shiny如何填充这些输出。用以下代码替换您的空server函数：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>summary <span class=\"operator\">&lt;-</span> renderPrint<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    dataset <span class=\"operator\">&lt;-</span> get<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dataset<span class=\"punctuation\">,</span> <span class=\"string\">&quot;package:datasets&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    summary<span class=\"punctuation\">(</span>dataset<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>table <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    dataset <span class=\"operator\">&lt;-</span> get<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dataset<span class=\"punctuation\">,</span> <span class=\"string\">&quot;package:datasets&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    dataset</span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>赋值运算符（&lt;-）的左侧，<code>output$ID</code>，表示您正在为具有该ID的Shiny输出提供食谱。赋值运算符的右侧使用特定的render函数来包装您提供的代码。每个<code>render&#123;Type&#125;</code>函数旨在生成特定类型的输出（例如文本、表格和图形），并且通常与<code>&#123;type&#125;Output</code>函数配对。例如，在此应用程序中，<code>renderPrint()</code>与<code>verbatimTextOutput()</code>配对以显示具有固定宽度（逐字）文本的统计摘要，而<code>renderTable()</code>与<code>tableOutput()</code>配对以在表格中显示输入数据。</p>\n<p>再次运行应用程序并尝试使用，观察更改输入时输出会发生什么变化。图1.4显示了打开应用程序时应该看到的内容。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/bb766cc235f190fd2c28d8f011edb7f9cbe526a7/5d540/demos/basic-app/server.png\" alt=\"图1.4 \n现在我们已经提供了一个将输出和输入连接起来的服务器函数，我们已经有了一个功能完整的应用程序\"></p>\n<p>请注意，每当您更改输入数据集时，摘要和表格都会自动更新。这种依赖性是通过在输出函数中引用<code>input$dataset</code>而隐式创建的。<code>input$dataset</code>被填充为UI组件中id为dataset的当前值，并且当该值发生变化时，将导致输出自动更新。这就是反应性的本质：输出在输入发生更改时自动（重新计算）。</p>\n<h2 id=\"使用反应式表达式减少重复\"><a href=\"#使用反应式表达式减少重复\" class=\"headerlink\" title=\"使用反应式表达式减少重复\"></a>使用反应式表达式减少重复</h2><p>即使在这个简单的例子中，我们也有一些重复的代码：下面的这行代码在两个输出中都存在。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataset <span class=\"operator\">&lt;-</span> get<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dataset<span class=\"punctuation\">,</span> <span class=\"string\">&quot;package:datasets&quot;</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>在任何一种编程中，重复的代码都是不良的实践；它可能在计算上是浪费的，更重要的是，它增加了维护或调试代码的难度。在这里不是那么重要，但我想在一个非常简单的上下文中说明这个基本概念。</p>\n<p>在传统的R脚本中，我们使用两种技术来处理重复的代码：要么捕获变量的值，要么用函数捕获计算。不幸的是，这两种方法在这里都不适用，原因将在第13.2节中介绍，我们需要一个新的机制：<code>反应式表达式</code>。</p>\n<p>您可以通过将代码块包装在<code>reactive(&#123;...&#125;)</code>中并将其分配给变量来创建反应式表达式，并且可以通过像调用函数一样来使用反应式表达式。然而，尽管看起来像是在调用函数，但反应式表达式有一个重要的区别：它只在其第一次被调用时运行，然后将其结果缓存直到需要更新。</p>\n<p>我们可以更新我们的server()函数来使用反应式表达式，如下所示。这个应用程序的行为完全相同，但运行更有效率，因为它只需要检索数据集一次，而不是两次。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"comment\"># Create a reactive expression</span></span><br><span class=\"line\">  dataset <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    get<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dataset<span class=\"punctuation\">,</span> <span class=\"string\">&quot;package:datasets&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  output<span class=\"operator\">$</span>summary <span class=\"operator\">&lt;-</span> renderPrint<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"comment\"># Use a reactive expression by calling it like a function</span></span><br><span class=\"line\">    summary<span class=\"punctuation\">(</span>dataset<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>table <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    dataset<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们会多次回到响应式编程，但即使只有对输入、输出和反应式表达式的粗略了解，也可以构建非常有用的Shiny应用程序！</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在本章中，您创建了一个简单的应用程序-这不是很有趣或很有用，但是您已经看到了使用现有的R知识构建Web应用程序的容易程度。在接下来的两章中，您将学习更多关于用户界面和响应式编程的知识，这是Shiny的两个基本构建块。现在是获取Shiny速查表的绝佳时机。这是一个很好的资源，可以帮助您记住Shiny应用程序的主要组件。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/349cbcca50af85a9214e552296f33f14be37f768/52241/images/basic-app/cheatsheet.png\" alt=\"图1.5 Shiny速查表，可从[https://www.rstudio.com/resources/cheatsheets/]获取\"></p>\n<h2 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h2><p><strong>1.8.1</strong> 创建一个应用程序，通过姓名向用户打招呼。您可能不知道需要使用哪些函数来完成此操作，因此我已经在下方包含了一些代码行。请考虑需要使用哪些行，然后将它们复制并粘贴到Shiny应用程序的适当位置。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;mortgage&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">output<span class=\"operator\">$</span>greeting <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  paste0<span class=\"punctuation\">(</span><span class=\"string\">&quot;Hello &quot;</span><span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>name<span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;age&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;How old are you?&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"literal\">NA</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">textInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;name&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;What&#x27;s your name?&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;greeting&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">output<span class=\"operator\">$</span>histogram <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  hist<span class=\"punctuation\">(</span>rnorm<span class=\"punctuation\">(</span><span class=\"number\">1000</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> res <span class=\"operator\">=</span> <span class=\"number\">96</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>1.8.2</strong> 假设你的朋友想设计一个应用程序，允许用户设置一个介于1和50之间的数字（x），并显示这个数字乘以5的结果。以下是他&#x2F;她的第一次尝试：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>shiny<span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;x&quot;</span><span class=\"punctuation\">,</span> label <span class=\"operator\">=</span> <span class=\"string\">&quot;If x is&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">50</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">30</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"string\">&quot;then x times 5 is&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;product&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>product <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span> </span><br><span class=\"line\">    x <span class=\"operator\">*</span> <span class=\"number\">5</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">shinyApp<span class=\"punctuation\">(</span>ui<span class=\"punctuation\">,</span> server<span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>其不幸报错如下，请尝试修复错误：</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/cc947455e46b88242e9c3460d3c2291f9f9393c2/093b0/demos/basic-app/ex-x-times-5.png\" alt=\"error\"></p>\n<p><strong>1.8.3</strong> 将前一个练习中的应用程序扩展为允许用户设置乘数y的值，以便应用程序产生x * y的值。最终结果应如下所示：</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/6a4de45b5dd90ca5c9e9ba6bf90d4be54d5ac8db/dc9e2/demos/basic-app/ex-x-times-y.png\" alt=\"xy\"></p>\n<p><strong>1.8.4</strong> 以下面的应用程序为例，它为上一练习中描述的最后一个应用程序添加了一些附加功能。有什么新功能？如何使用响应式表达式减少应用程序中的重复代码量。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>shiny<span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;x&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;If x is&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">50</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">30</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;y&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;and y is&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">50</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">5</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"string\">&quot;then, (x * y) is&quot;</span><span class=\"punctuation\">,</span> textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;product&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"string\">&quot;and, (x * y) + 5 is&quot;</span><span class=\"punctuation\">,</span> textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;product_plus5&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"string\">&quot;and (x * y) + 10 is&quot;</span><span class=\"punctuation\">,</span> textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;product_plus10&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>product <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span> </span><br><span class=\"line\">    product <span class=\"operator\">&lt;-</span> input<span class=\"operator\">$</span>x <span class=\"operator\">*</span> input<span class=\"operator\">$</span>y</span><br><span class=\"line\">    product</span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>product_plus5 <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span> </span><br><span class=\"line\">    product <span class=\"operator\">&lt;-</span> input<span class=\"operator\">$</span>x <span class=\"operator\">*</span> input<span class=\"operator\">$</span>y</span><br><span class=\"line\">    product <span class=\"operator\">+</span> <span class=\"number\">5</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>product_plus10 <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span> </span><br><span class=\"line\">    product <span class=\"operator\">&lt;-</span> input<span class=\"operator\">$</span>x <span class=\"operator\">*</span> input<span class=\"operator\">$</span>y</span><br><span class=\"line\">    product <span class=\"operator\">+</span> <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">shinyApp<span class=\"punctuation\">(</span>ui<span class=\"punctuation\">,</span> server<span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>1.8.5</strong> 以下应用程序与您在本章前面看到的应用程序非常相似：您从包中选择一个数据集（这次我们使用ggplot2包），应用程序会打印出数据的摘要和图表。它还遵循良好的实践，并利用响应式表达式来避免代码冗余。但是，下面提供的代码存在三个错误。您可以找到并修复它们吗？</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>shiny<span class=\"punctuation\">)</span></span><br><span class=\"line\">library<span class=\"punctuation\">(</span>ggplot2<span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">datasets <span class=\"operator\">&lt;-</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;economics&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;faithfuld&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;seals&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;dataset&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Dataset&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> datasets<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  verbatimTextOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;summary&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;plot&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  dataset <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    get<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dataset<span class=\"punctuation\">,</span> <span class=\"string\">&quot;package:ggplot2&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>summmry <span class=\"operator\">&lt;-</span> renderPrint<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    summary<span class=\"punctuation\">(</span>dataset<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>plot <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    plot<span class=\"punctuation\">(</span>dataset<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> res <span class=\"operator\">=</span> <span class=\"number\">96</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">shinyApp<span class=\"punctuation\">(</span>ui<span class=\"punctuation\">,</span> server<span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"练习题答案获取\"><a href=\"#练习题答案获取\" class=\"headerlink\" title=\"练习题答案获取\"></a>练习题答案获取</h1><p>关注公众号“生信之巅”，聊天窗口回复“b376”获取习题答案。</p>\n<table align=\"center\"><tr>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" alt=\"生信之巅微信公众号\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-right: 0px;margin-bottom: 5px;align: center;\"></td>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" alt=\"生信之巅小程序码\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-left: 0px;margin-bottom: 5px;align: center\"></td>\n</tr></table>\n\n\n<p><font color=\"#FF0000\"><ruby><b>敬告</b>：使用文中脚本请引用本文网址，请尊重本人的劳动成果，谢谢！<rt><b>Notice</b>: When you use the scripts in this article, please cite the link of this webpage. Thank you!</rt></ruby></font></p>\n","categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"编程","path":"api/tags/编程.json"},{"name":"Shiny入门系列","path":"api/tags/Shiny入门系列.json"}]}