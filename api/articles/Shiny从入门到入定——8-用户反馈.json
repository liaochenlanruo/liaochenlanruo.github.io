{"title":"Shiny从入门到入定——8-用户反馈","slug":"Shiny从入门到入定——8-用户反馈","date":"2024-04-14T05:18:07.000Z","updated":"2024-04-14T05:20:22.501Z","comments":true,"path":"api/articles/Shiny从入门到入定——8-用户反馈.json","excerpt":null,"covers":["https://d33wubrfki0l68.cloudfront.net/4ce6e5665e89d296ce5ee685d1b44ac44f648c1c/42897/demos/action-feedback/feedback-odd.png","https://d33wubrfki0l68.cloudfront.net/8983f6fd77bdc3b97d45f06a7fdd0c67aaf52b3d/b3d13/demos/action-feedback/require-simple.png","https://d33wubrfki0l68.cloudfront.net/e8048494af9066952f69e4c7e9ec06c826202c34/4933a/demos/action-feedback/require-simple2-langauge.png","https://d33wubrfki0l68.cloudfront.net/12970a9665fbc639f4428c014c524b62f9e72373/5af05/demos/action-feedback/require-cancel-ok.png","https://d33wubrfki0l68.cloudfront.net/c1c59bed1d77fa2aea32024bbaa907e5dbba6244/b5824/demos/action-feedback/validate-init.png","https://d33wubrfki0l68.cloudfront.net/87c1065fb140b5924f0a32297421656e48ef7e11/4fe18/images/action-feedback/notify-1.png","https://d33wubrfki0l68.cloudfront.net/d2d0c53e19a116f900ef892da0dd4580b47cf71e/993ed/images/action-feedback/notify-2.png","https://d33wubrfki0l68.cloudfront.net/9fea3bd7890e9ec4ba7ab1fa1f84d0881cea23ee/d4571/images/action-feedback/notify-3.png","https://d33wubrfki0l68.cloudfront.net/f8653f6a9d2e8c56ebf035d48a3ec299f67fa99e/19ffd/images/action-feedback/progress-2.png","https://d33wubrfki0l68.cloudfront.net/876e7420c98f7344ee1eac35650c26d6257eb839/7c919/images/action-feedback/spinner-1.png","https://d33wubrfki0l68.cloudfront.net/0fa7426c91728627f36b69d91036aef0876f278c/84714/images/action-feedback/spinner-2.png","https://d33wubrfki0l68.cloudfront.net/1fd6b657c2fd4df4ef9de687459e433e0b6144f4/93f7d/demos/action-feedback/dialog.png","https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg","https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png"],"content":"<h1 id=\"8-用户反馈\"><a href=\"#8-用户反馈\" class=\"headerlink\" title=\"8 用户反馈\"></a>8 用户反馈</h1><p>你通常可以通过向用户展示更多关于正在发生的事情的信息来提高应用程序的可用性。这可能表现为当输入不合理时显示更好的消息，或者对需要很长时间的操作使用进度条。一些反馈是通过输出自然发生的，你已经知道如何使用它们，但你经常还需要其他的东西。本章的目标是向你展示一些其他的选择。</p>\n<p>我们将从<code>验证</code>技术开始，在输入（或输入组合）处于无效状态时通知用户。然后我们将继续讨论<code>通知</code>，向用户发送一般消息，以及<code>进度条</code>，这些为包含许多小步骤的耗时操作提供了详细信息。最后，我们将讨论危险操作，以及如何使用<code>确认</code>对话框或<code>撤销</code>操作的能力来让你的用户安心。</p>\n<p>在本章中，我们将使用Andy Merlino的<a href=\"https://github.com/merlinoa/shinyFeedback\">shinyFeedback</a>和John Coene的<a href=\"http://waiter.john-coene.com/\">waiter</a>。你还应该关注Joe Cheng正在开发的<a href=\"https://rstudio.github.io/shinyvalidate/\">shinyvalidate</a>包。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>shiny<span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-1-验证\"><a href=\"#8-1-验证\" class=\"headerlink\" title=\"8.1 验证\"></a>8.1 验证</h2><p>你可以给用户提供的第一个也是最重要的反馈是，他们的输入有误。这与在R中编写好函数类似：用户友好的函数会给出清晰的错误消息，描述期望的输入是什么，以及你是如何违背这些期望的。思考用户可能会如何误用你的应用程序，可以让你在用户界面（UI）中提供有用的消息，而不是让错误渗透到R代码中并产生无用的错误信息。</p>\n<h3 id=\"8-1-1-验证输入\"><a href=\"#8-1-1-验证输入\" class=\"headerlink\" title=\"8.1.1 验证输入\"></a>8.1.1 验证输入</h3><p>通过shinyFeedback包向用户提供额外的反馈是一个很好的方法。使用它分为两步。首先，你需要在用户界面（ui）中添加useShinyFeedback()。这将为显示美观的错误消息设置所需的HTML和JavaScript：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  shinyFeedback<span class=\"operator\">::</span>useShinyFeedback<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">10</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;half&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>然后在您的server()函数中，您调用反馈函数之一：feedback()、feedbackWarning()、feedbackDanger()和feedbackSuccess()。他们都有三个关键参数：</p>\n<ul>\n<li><code>inputId</code>，放置反馈的输入的id。</li>\n<li><code>show</code>，一个逻辑值，确定是否显示反馈。</li>\n<li><code>text</code>，要显示的文本。</li>\n</ul>\n<p>它们还有颜色和图标参数，你可以使用它们进一步自定义外观。更多详细信息请查阅文档。</p>\n<p>让我们看看这在一个真实例子中是如何实现的，假设我们只允许输入偶数。图8.1显示了结果。</p>\n<figure class=\"highlight plaintext\"><figcaption><span><- function(input, output, session) &#123;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  half &lt;- reactive(&#123;</span><br><span class=\"line\">    even &lt;- input$n %% 2 == 0</span><br><span class=\"line\">    shinyFeedback::feedbackWarning(&quot;n&quot;, !even, &quot;Please select an even number&quot;)</span><br><span class=\"line\">    input$n / 2    </span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  </span><br><span class=\"line\">  output$half &lt;- renderText(half())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/4ce6e5665e89d296ce5ee685d1b44ac44f648c1c/42897/demos/action-feedback/feedback-odd.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/4ce6e5665e89d296ce5ee685d1b44ac44f648c1c/42897/demos/action-feedback/feedback-odd.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图8.1：使用feedbackWarning()显示无效输入的警告。左侧的应用程序显示了一个有效的输入，右侧的应用程序显示了一个无效的（奇数）输入并带有警告消息。请访问https://hadley.shinyapps.io/ms-feedback查看实时效果。\"></p>\n<p>请注意，错误消息已经显示，但输出仍然更新了。通常，你不想这样做，因为无效的输入可能会引发你不希望显示给用户的无用的R错误。要阻止输入触发响应式更改，你需要一个新工具：req()，即“required”的缩写。它的用法如下：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  half <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    even <span class=\"operator\">&lt;-</span> input<span class=\"operator\">$</span>n <span class=\"operator\">%%</span> <span class=\"number\">2</span> <span class=\"operator\">==</span> <span class=\"number\">0</span></span><br><span class=\"line\">    shinyFeedback<span class=\"operator\">::</span>feedbackWarning<span class=\"punctuation\">(</span><span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">,</span> <span class=\"operator\">!</span>even<span class=\"punctuation\">,</span> <span class=\"string\">&quot;Please select an even number&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    req<span class=\"punctuation\">(</span>even<span class=\"punctuation\">)</span></span><br><span class=\"line\">    input<span class=\"operator\">$</span>n <span class=\"operator\">/</span> <span class=\"number\">2</span>    </span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>half <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span>half<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>当<code>req()</code>的输入不为真时，它会发送一个特殊信号，告诉Shiny这个响应式组件没有它所需的所有输入，因此应该“暂停”。在将其与<code>validate()</code>结合使用之前，我们先简要讨论一下这个问题。</p>\n<h3 id=\"8-1-2-使用req-取消执行\"><a href=\"#8-1-2-使用req-取消执行\" class=\"headerlink\" title=\"8.1.2 使用req()取消执行\"></a>8.1.2 使用<code>req()</code>取消执行</h3><p>通过跳出验证的范畴，可以更容易地理解<a href=\"https://rdrr.io/pkg/shiny/man/req.html\">req()</a>。你可能已经注意到，当你启动一个应用程序时，即使用户还没有进行任何操作，完整的响应式图也会被计算出来。当你能够为输入选择有意义的默认<code>值</code>时，这可以很好地工作。但这并不总是可能的，有时你可能希望等到用户实际执行了某些操作再进行计算。这种情况通常出现在以下三种控件中：</p>\n<ul>\n<li><p>在<a href=\"https://rdrr.io/pkg/shiny/man/textInput.html\">textInput()</a>中，你使用了<code>value = &quot;&quot;</code>，并且不希望用户输入任何内容之前执行任何操作。</p>\n</li>\n<li><p>在<a href=\"https://rdrr.io/pkg/shiny/man/selectInput.html\">selectInput()</a>中，你提供了一个空选项<code>&quot;&quot;</code>，并且不希望用户进行选择之前执行任何操作。</p>\n</li>\n<li><p>在<a href=\"https://rdrr.io/pkg/shiny/man/fileInput.html\">fileInput()</a>中，用户在上传任何内容之前，其结果都是空的。我们将在<code>9.1</code>节中再次讨论这个问题。</p>\n</li>\n</ul>\n<p>我们需要一种方法来“暂停”响应式组件，以便在满足某个条件之前不会发生任何事情。这就是<code>req()</code>的工作，它会在允许响应式生产者继续之前检查所需的值。</p>\n<p>例如，考虑以下应用程序，它将生成英语或毛利语的问候语。如果你运行这个应用程序，你会看到一个错误，如图<code>8.2</code>所示，因为在<code>greetings</code>向量中没有与默认选项<code>&quot;&quot;</code>相对应的条目。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;language&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Language&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;English&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Maori&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;name&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Name&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;greeting&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  greetings <span class=\"operator\">&lt;-</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span></span><br><span class=\"line\">    English <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">    Maori <span class=\"operator\">=</span> <span class=\"string\">&quot;Kia ora&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>greeting <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    paste0<span class=\"punctuation\">(</span>greetings<span class=\"punctuation\">[[</span>input<span class=\"operator\">$</span>language<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot; &quot;</span><span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>name<span class=\"punctuation\">,</span> <span class=\"string\">&quot;!&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/8983f6fd77bdc3b97d45f06a7fdd0c67aaf52b3d/b3d13/demos/action-feedback/require-simple.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/8983f6fd77bdc3b97d45f06a7fdd0c67aaf52b3d/b3d13/demos/action-feedback/require-simple.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图8.2：当应用程序加载时，由于尚未选择语言，因此会显示一条无信息量的错误消息。\"></p>\n<p>我们可以使用<code>req()</code>来解决这个问题，如下所示。现在，在用户为语言和姓名都提供了值之前，将不会显示任何内容，如图<code>8.3</code>所示</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  greetings <span class=\"operator\">&lt;-</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span></span><br><span class=\"line\">    English <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">    Maori <span class=\"operator\">=</span> <span class=\"string\">&quot;Kia ora&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>greeting <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    req<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>language<span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>name<span class=\"punctuation\">)</span></span><br><span class=\"line\">    paste0<span class=\"punctuation\">(</span>greetings<span class=\"punctuation\">[[</span>input<span class=\"operator\">$</span>language<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot; &quot;</span><span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>name<span class=\"punctuation\">,</span> <span class=\"string\">&quot;!&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/e8048494af9066952f69e4c7e9ec06c826202c34/4933a/demos/action-feedback/require-simple2-langauge.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/e8048494af9066952f69e4c7e9ec06c826202c34/4933a/demos/action-feedback/require-simple2-langauge.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图8.3：通过使用req()，只有在提供了语言和姓名之后，输出才会显示。请访问https://hadley.shinyapps.io/ms-require-simple2查看实时效果。\"><br><code>req()</code>通过发出一个特殊<code>条件</code>来工作。这个特殊条件导致所有下游的响应式组件和输出停止执行。从技术上讲，它使任何下游的响应式消费者处于无效状态。我们将在第<code>16</code>章中再次回到这个术语。</p>\n<p><code>req()</code>的设计是使得<code>req(inputx)</code>只有在用户提供了值的情况下才会继续执行，而不考虑输入控件的类型。如果需要，你也可以使用<code>req()</code>与自己的逻辑语句结合使用。例如，<code>req(inputa &gt; 0)</code>会在<code>a</code>大于0时允许计算继续进行；这通常是我们执行验证时使用的形式，我们将在下面看到。</p>\n<h3 id=\"8-1-3-req-和验证\"><a href=\"#8-1-3-req-和验证\" class=\"headerlink\" title=\"8.1.3 req()和验证\"></a>8.1.3 <code>req()</code>和验证</h3><p>让我们将<code>req()</code>和shinyFeedback结合起来，解决一个更具挑战性的问题。我将回到我们在第1章中制作的简单应用程序，该应用程序允许你选择内置数据集并查看其内容。我将通过使用<code>textInput()</code>而不是<code>selectInput()</code>来使其更加通用和复杂。用户界面几乎没有变化：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  shinyFeedback<span class=\"operator\">::</span>useShinyFeedback<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;dataset&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Dataset name&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;data&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>但是服务器函数需要变得稍微复杂一些。我们将以两种方式使用<code>req()</code>：</p>\n<ul>\n<li><p>我们只想在用户输入了值之后才进行计算，所以我们使用<code>req(input$dataset)</code>。</p>\n</li>\n<li><p>然后，我们检查提供的名称是否确实存在。如果不存在，我们将显示一条错误消息，然后使用<code>req()</code>取消计算。请注意<code>cancelOutput = TRUE</code>的使用：通常取消响应式组件会重置所有下游输出；使用<code>cancelOutput = TRUE</code>会使它们保持显示上一次的有效值。这对于<code>textInput()</code>来说很重要，因为您可能在输入名称的过程中触发更新。</p>\n</li>\n</ul>\n<p>结果如图<code>8.4</code>所示。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  data <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    req<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dataset<span class=\"punctuation\">)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    exists <span class=\"operator\">&lt;-</span> exists<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dataset<span class=\"punctuation\">,</span> <span class=\"string\">&quot;package:datasets&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    shinyFeedback<span class=\"operator\">::</span>feedbackDanger<span class=\"punctuation\">(</span><span class=\"string\">&quot;dataset&quot;</span><span class=\"punctuation\">,</span> <span class=\"operator\">!</span>exists<span class=\"punctuation\">,</span> <span class=\"string\">&quot;Unknown dataset&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    req<span class=\"punctuation\">(</span>exists<span class=\"punctuation\">,</span> cancelOutput <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    get<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dataset<span class=\"punctuation\">,</span> <span class=\"string\">&quot;package:datasets&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>data <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    head<span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/12970a9665fbc639f4428c014c524b62f9e72373/5af05/demos/action-feedback/require-cancel-ok.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/12970a9665fbc639f4428c014c524b62f9e72373/5af05/demos/action-feedback/require-cancel-ok.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图8.4：加载时，表格为空，因为数据集名称为空。在我们输入一个有效数据集名称（iris）后，数据会显示出来，即使按下退格键以输入新的数据集名称时，数据仍会继续显示。请访问https://hadley.shinyapps.io/ms-require-cancel查看实时效果。\"></p>\n<h3 id=\"8-1-4-验证输出\"><a href=\"#8-1-4-验证输出\" class=\"headerlink\" title=\"8.1.4 验证输出\"></a>8.1.4 验证输出</h3><p>当问题与单个输入相关时，shinyFeedback非常有用。但有时无效状态是多个输入组合的结果。在这种情况下，将错误放在输入旁边并没有太大意义（应该放在哪个输入旁边呢？），相反，将其放在输出中更有意义。</p>\n<p>您可以使用shiny内置的一个工具来实现：<a href=\"https://rdrr.io/pkg/shiny/man/validate.html\">validate()</a>。当在响应式组件或输出中调用时，<code>validate(message)</code>会停止其余代码的执行，并在任何下游输出中显示<code>message</code>。以下代码显示了一个简单示例，其中我们不想记录或取负值的平方根。您可以在图<code>8.5</code>中查看结果。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;x&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;x&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;trans&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;transformation&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">    choices <span class=\"operator\">=</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;square&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;log&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;square-root&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;out&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>out <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>x <span class=\"operator\">&lt;</span> <span class=\"number\">0</span> <span class=\"operator\">&amp;&amp;</span> input<span class=\"operator\">$</span>trans <span class=\"operator\">%in%</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;log&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;square-root&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      validate<span class=\"punctuation\">(</span><span class=\"string\">&quot;x can not be negative for this transformation&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">switch</span><span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>trans<span class=\"punctuation\">,</span></span><br><span class=\"line\">      square <span class=\"operator\">=</span> input<span class=\"operator\">$</span>x <span class=\"operator\">^</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;square-root&quot;</span> <span class=\"operator\">=</span> <span class=\"built_in\">sqrt</span><span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>x<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"built_in\">log</span> <span class=\"operator\">=</span> <span class=\"built_in\">log</span><span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>x<span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/c1c59bed1d77fa2aea32024bbaa907e5dbba6244/b5824/demos/action-feedback/validate-init.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/c1c59bed1d77fa2aea32024bbaa907e5dbba6244/b5824/demos/action-feedback/validate-init.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图8.5：如果输入有效，输出会显示转换结果。如果输入的组合无效，则输出会被替换为一条信息性消息。\"></p>\n<h2 id=\"8-2-通知\"><a href=\"#8-2-通知\" class=\"headerlink\" title=\"8.2 通知\"></a>8.2 通知</h2><p>如果没有问题，您只是想让用户知道发生了什么，那么您需要一个<code>通知</code>。在Shiny中，通知是通过<a href=\"https://rdrr.io/pkg/shiny/man/showNotification.html\">showNotification()</a>创建的，并堆叠在页面的右下角。使用<code>showNotification()</code>有三种基本方式：</p>\n<ul>\n<li><p>显示一个临时通知，该通知在固定时间后自动消失。</p>\n</li>\n<li><p>在进程开始时显示通知，并在进程结束时将其移除。</p>\n</li>\n<li><p>使用渐进更新来更新单个通知。</p>\n</li>\n</ul>\n<p>下面将讨论这三种技术。</p>\n<h3 id=\"8-2-1-临时通知\"><a href=\"#8-2-1-临时通知\" class=\"headerlink\" title=\"8.2.1 临时通知\"></a>8.2.1 临时通知</h3><p>使用<code>showNotification()</code>的最简单方法是只传入一个参数：您想要显示的消息。由于很难通过截图捕捉这种行为，所以如果您想看到它的实际效果，请访问<a href=\"https://hadley.shinyapps.io/ms-notification-transient\">https://hadley.shinyapps.io/ms-notification-transient</a>。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;goodnight&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Good night&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>goodnight<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;So long&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;Farewell&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;Auf Wiedersehen&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;Adieu&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>默认情况下，消息将在5秒后消失，你可以通过设置<code>duration</code>来覆盖这个时间，或者用户可以点击关闭按钮提前关闭它。如果你想让通知更加醒目，你可以将<code>type</code>参数设置为“message”、“warning”或“error”其中之一。图<code>8.6</code>展示了这些通知的外观。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>goodnight<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;So long&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;Farewell&quot;</span><span class=\"punctuation\">,</span> type <span class=\"operator\">=</span> <span class=\"string\">&quot;message&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;Auf Wiedersehen&quot;</span><span class=\"punctuation\">,</span> type <span class=\"operator\">=</span> <span class=\"string\">&quot;warning&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;Adieu&quot;</span><span class=\"punctuation\">,</span> type <span class=\"operator\">=</span> <span class=\"string\">&quot;error&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/87c1065fb140b5924f0a32297421656e48ef7e11/4fe18/images/action-feedback/notify-1.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/87c1065fb140b5924f0a32297421656e48ef7e11/4fe18/images/action-feedback/notify-1.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\"></p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/d2d0c53e19a116f900ef892da0dd4580b47cf71e/993ed/images/action-feedback/notify-2.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/d2d0c53e19a116f900ef892da0dd4580b47cf71e/993ed/images/action-feedback/notify-2.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\"></p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/9fea3bd7890e9ec4ba7ab1fa1f84d0881cea23ee/d4571/images/action-feedback/notify-3.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/9fea3bd7890e9ec4ba7ab1fa1f84d0881cea23ee/d4571/images/action-feedback/notify-3.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图8.6：点击“晚安”后通知的显示过程：第一个通知出现，再过三秒，所有通知都将显示出来，随后通知开始消失。实时查看效果，请访问https://hadley.shinyapps.io/ms-notify-persistent。\"></p>\n<h3 id=\"8-2-2-完成时移除\"><a href=\"#8-2-2-完成时移除\" class=\"headerlink\" title=\"8.2.2 完成时移除\"></a>8.2.2 完成时移除</h3><p>将通知的存在与一个长时间运行的任务关联起来通常很有用。在这种情况下，你希望在任务开始时显示通知，并在任务完成时移除通知。为此，你需要：</p>\n<ul>\n<li><p>设置<code>duration = NULL</code>和<code>closeButton = FALSE</code>，以确保通知在任务完成之前一直保持可见状态。</p>\n</li>\n<li><p>保存<a href=\"https://rdrr.io/pkg/shiny/man/showNotification.html\">showNotification()</a>返回的id，然后将其传递给<a href=\"https://rdrr.io/pkg/shiny/man/showNotification.html\">removeNotification()</a>。最可靠的方法是使用<a href=\"https://rdrr.io/r/base/on.exit.html\">on.exit()</a>，这可以确保无论任务如何完成（成功或出错），通知都会被移除。你可以在“<a href=\"v\">更改和恢复状态</a>”一章中了解更多关于<code>on.exit()</code>的信息。</p>\n</li>\n</ul>\n<p>以下示例将各个部分组合在一起，展示了如何在读取大型csv文件时向用户更新状态：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  data <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    id <span class=\"operator\">&lt;-</span> showNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;Reading data...&quot;</span><span class=\"punctuation\">,</span> duration <span class=\"operator\">=</span> <span class=\"literal\">NULL</span><span class=\"punctuation\">,</span> closeButton <span class=\"operator\">=</span> <span class=\"literal\">FALSE</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"built_in\">on.exit</span><span class=\"punctuation\">(</span>removeNotification<span class=\"punctuation\">(</span>id<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> add <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    read.csv<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>file<span class=\"operator\">$</span>datapath<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>一般来说，这类通知会存在于一个响应式环境中，因为这可以确保只有当需要时，长时间运行的计算才会重新执行。</p>\n<h3 id=\"8-2-3-渐进式更新\"><a href=\"#8-2-3-渐进式更新\" class=\"headerlink\" title=\"8.2.3 渐进式更新\"></a>8.2.3 渐进式更新</h3><p>正如你在第一个示例中所看到的，多次调用showNotification()通常会创建多个通知。相反，你可以通过捕获第一次调用的id并在后续调用中使用它来更新单个通知。如果你的长时间运行的任务包含多个子组件，这将非常有用。你可以在<a href=\"https://hadley.shinyapps.io/ms-notification-updates\">https://hadley.shinyapps.io/ms-notification-updates</a>查看结果。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;data&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  notify <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>msg<span class=\"punctuation\">,</span> id <span class=\"operator\">=</span> <span class=\"literal\">NULL</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span>msg<span class=\"punctuation\">,</span> id <span class=\"operator\">=</span> id<span class=\"punctuation\">,</span> duration <span class=\"operator\">=</span> <span class=\"literal\">NULL</span><span class=\"punctuation\">,</span> closeButton <span class=\"operator\">=</span> <span class=\"literal\">FALSE</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  data <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span> </span><br><span class=\"line\">    id <span class=\"operator\">&lt;-</span> notify<span class=\"punctuation\">(</span><span class=\"string\">&quot;Reading data...&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"built_in\">on.exit</span><span class=\"punctuation\">(</span>removeNotification<span class=\"punctuation\">(</span>id<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> add <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">      </span><br><span class=\"line\">    notify<span class=\"punctuation\">(</span><span class=\"string\">&quot;Reticulating splines...&quot;</span><span class=\"punctuation\">,</span> id <span class=\"operator\">=</span> id<span class=\"punctuation\">)</span></span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    notify<span class=\"punctuation\">(</span><span class=\"string\">&quot;Herding llamas...&quot;</span><span class=\"punctuation\">,</span> id <span class=\"operator\">=</span> id<span class=\"punctuation\">)</span></span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    notify<span class=\"punctuation\">(</span><span class=\"string\">&quot;Orthogonalizing matrices...&quot;</span><span class=\"punctuation\">,</span> id <span class=\"operator\">=</span> id<span class=\"punctuation\">)</span></span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    mtcars</span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>data <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span>head<span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"8-3-进度条\"><a href=\"#8-3-进度条\" class=\"headerlink\" title=\"8.3 进度条\"></a>8.3 进度条</h2><p>对于长时间运行的任务，最好的反馈形式就是进度条。它不仅可以告诉你任务进行到了哪一步，还可以帮助你估计还需要多长时间：你是应该深吸一口气，去喝杯咖啡，还是明天再来？在本节中，我将展示两种显示进度条的技术，一种是Shiny内置的，另一种是John Coene开发的<a href=\"https://waiter.john-coene.com/\">waiter</a>包提供的。</p>\n<p>不幸的是，这两种技术都存在同样的主要缺点：要使用进度条，你需要能够将大任务分成已知数量的、每个都大致需要相同时间来完成的小任务。这通常很难做到，特别是当底层代码是用C语言编写的，且没有办法向你传达进度更新时。我们正在努力开发<a href=\"https://github.com/r-lib/progress\">progress包</a>中的工具，以便有一天像dplyr、readr和vroom这样的包能够生成进度条，你可以轻松地将它们转发给Shiny。</p>\n<h3 id=\"8-3-1-Shiny\"><a href=\"#8-3-1-Shiny\" class=\"headerlink\" title=\"8.3.1 Shiny\"></a>8.3.1 Shiny</h3><p>要使用Shiny创建进度条，你需要使用<a href=\"https://rdrr.io/pkg/shiny/man/withProgress.html\">withProgress()</a>和<a href=\"https://rdrr.io/pkg/shiny/man/withProgress.html\">incProgress()</a>。假设你有一段运行缓慢的代码，如下所示：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"punctuation\">(</span>i <span class=\"keyword\">in</span> <span class=\"built_in\">seq_len</span><span class=\"punctuation\">(</span>step<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  x <span class=\"operator\">&lt;-</span> function_that_takes_a_long_time<span class=\"punctuation\">(</span>x<span class=\"punctuation\">)</span>     </span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>你首先需要用<code>withProgress()</code>将其包裹起来。当代码开始运行时，这会显示进度条，并在完成时自动移除它：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">withProgress<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> <span class=\"punctuation\">(</span>i <span class=\"keyword\">in</span> <span class=\"built_in\">seq_len</span><span class=\"punctuation\">(</span>step<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    x <span class=\"operator\">&lt;-</span> function_that_takes_a_long_time<span class=\"punctuation\">(</span>x<span class=\"punctuation\">)</span>     </span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>然后在每个步骤之后调用<code>incProgress()</code>：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">withProgress<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> <span class=\"punctuation\">(</span>i <span class=\"keyword\">in</span> <span class=\"built_in\">seq_len</span><span class=\"punctuation\">(</span>step<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    x <span class=\"operator\">&lt;-</span> function_that_takes_a_long_time<span class=\"punctuation\">(</span>x<span class=\"punctuation\">)</span></span><br><span class=\"line\">    incProgress<span class=\"punctuation\">(</span><span class=\"number\">1</span> <span class=\"operator\">/</span> <span class=\"built_in\">length</span><span class=\"punctuation\">(</span>step<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p><code>incProgress()</code>的第一个参数是进度条要增加的量。默认情况下，进度条从0开始，到1结束，因此通过步骤数除以来增加进度条，可以确保循环结束时进度条完成。</p>\n<p>图<code>8.7</code>展示了在一个完整的Shiny应用程序中，这可能看起来是什么样子。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;steps&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;How many steps?&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">10</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;result&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  data <span class=\"operator\">&lt;-</span> eventReactive<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>go<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    withProgress<span class=\"punctuation\">(</span>message <span class=\"operator\">=</span> <span class=\"string\">&quot;Computing random number&quot;</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> <span class=\"punctuation\">(</span>i <span class=\"keyword\">in</span> <span class=\"built_in\">seq_len</span><span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>steps<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">0.5</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">        incProgress<span class=\"punctuation\">(</span><span class=\"number\">1</span> <span class=\"operator\">/</span> input<span class=\"operator\">$</span>steps<span class=\"punctuation\">)</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      runif<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>result <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"built_in\">round</span><span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> <span class=\"number\">2</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/f8653f6a9d2e8c56ebf035d48a3ec299f67fa99e/19ffd/images/action-feedback/progress-2.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/f8653f6a9d2e8c56ebf035d48a3ec299f67fa99e/19ffd/images/action-feedback/progress-2.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图8.7：进度条有助于指示计算还需运行多长时间。请在线查看https://hadley.shinyapps.io/ms-progress。\"></p>\n<p>需要注意的几个事项：</p>\n<ul>\n<li><p>我使用了可选的<code>message</code>参数，在进度条中添加了一些解释性文本。</p>\n</li>\n<li><p>我使用了<a href=\"https://rdrr.io/r/base/Sys.sleep.html\">Sys.sleep()</a>来模拟一个长时间运行的操作；在你的代码中，这将是一个耗时函数。</p>\n</li>\n<li><p>我通过将一个按钮与<a href=\"https://rdrr.io/pkg/shiny/man/observeEvent.html\">eventReactive()</a>结合，允许用户控制事件何时开始。这是任何需要进度条的任务的良好做法。</p>\n</li>\n</ul>\n<h3 id=\"8-3-2-Waiter\"><a href=\"#8-3-2-Waiter\" class=\"headerlink\" title=\"8.3.2 Waiter\"></a>8.3.2 Waiter</h3><p>内置的进度条对于基础操作来说非常好，但如果你想要提供更多视觉选项的进度条，你可以尝试使用<a href=\"https://waiter.john-coene.com/\">waiter</a>包。将上面的代码适配为与Waiter一起工作很简单。在UI中，我们添加use_waitress()：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  waiter<span class=\"operator\">::</span>use_waitress<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;steps&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;How many steps?&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">10</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;result&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>Waiter的进度条接口略有不同。Waiter包使用R6对象将所有与进度相关的函数捆绑到一个单独的对象中。如果你以前从未使用过R6对象，不必太担心细节；你可以直接复制和粘贴这个模板。基本的生命周期看起来像这样：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Create a new progress bar</span></span><br><span class=\"line\">waitress <span class=\"operator\">&lt;-</span> waiter<span class=\"operator\">::</span>Waitress<span class=\"operator\">$</span>new<span class=\"punctuation\">(</span><span class=\"built_in\">max</span> <span class=\"operator\">=</span> input<span class=\"operator\">$</span>steps<span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\"># Automatically close it when done</span></span><br><span class=\"line\"><span class=\"built_in\">on.exit</span><span class=\"punctuation\">(</span>waitress<span class=\"operator\">$</span>close<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"punctuation\">(</span>i <span class=\"keyword\">in</span> <span class=\"built_in\">seq_len</span><span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>steps<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">0.5</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"comment\"># increment one step</span></span><br><span class=\"line\">  waitress<span class=\"operator\">$</span>inc<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>我们可以在 Shiny 应用程序中使用它，如下所示：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  data <span class=\"operator\">&lt;-</span> eventReactive<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>go<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    waitress <span class=\"operator\">&lt;-</span> waiter<span class=\"operator\">::</span>Waitress<span class=\"operator\">$</span>new<span class=\"punctuation\">(</span><span class=\"built_in\">max</span> <span class=\"operator\">=</span> input<span class=\"operator\">$</span>steps<span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"built_in\">on.exit</span><span class=\"punctuation\">(</span>waitress<span class=\"operator\">$</span>close<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"punctuation\">(</span>i <span class=\"keyword\">in</span> <span class=\"built_in\">seq_len</span><span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>steps<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">0.5</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">      waitress<span class=\"operator\">$</span>inc<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    runif<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>result <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"built_in\">round</span><span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> <span class=\"number\">2</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>默认显示是在页面顶部的细长进度条（你可以查看<a href=\"https://hadley.shinyapps.io/ms-waiter\">https://hadley.shinyapps.io/ms-waiter</a>），但有许多方法可以自定义输出：</p>\n<p>你可以覆盖默认<code>主题</code>，选择使用以下主题之一：</p>\n<ul>\n<li><code>overlay</code>：一个不透明的进度条，会隐藏整个页面</li>\n<li><code>overlay-opacity</code>：一个透明的进度条，会覆盖整个页面</li>\n<li><code>overlay-percent</code>：一个不透明的进度条，同时还会显示一个数字百分比。</li>\n<li>除了为整个页面显示进度条之外，你还可以通过设置<code>selector</code>参数将其覆盖在现有的输入或输出上，例如：</li>\n</ul>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">waitress <span class=\"operator\">&lt;-</span> Waitress<span class=\"operator\">$</span>new<span class=\"punctuation\">(</span>selector <span class=\"operator\">=</span> <span class=\"string\">&quot;#steps&quot;</span><span class=\"punctuation\">,</span> theme <span class=\"operator\">=</span> <span class=\"string\">&quot;overlay&quot;</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-3-3-Spinners\"><a href=\"#8-3-3-Spinners\" class=\"headerlink\" title=\"8.3.3 Spinners\"></a>8.3.3 Spinners</h3><p>有时，你不知道一个操作需要多长时间才能完成，你只想显示一个动画旋转器，让用户知道有事情正在发生。对于这个任务，你也可以使用waiter包；只需从使用<code>Waitress</code>切换到使用<code>Waiter</code>即可：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  waiter<span class=\"operator\">::</span>use_waiter<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;result&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  data <span class=\"operator\">&lt;-</span> eventReactive<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>go<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    waiter <span class=\"operator\">&lt;-</span> waiter<span class=\"operator\">::</span>Waiter<span class=\"operator\">$</span>new<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    waiter<span class=\"operator\">$</span>show<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"built_in\">on.exit</span><span class=\"punctuation\">(</span>waiter<span class=\"operator\">$</span>hide<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span>sample<span class=\"punctuation\">(</span><span class=\"number\">5</span><span class=\"punctuation\">,</span> <span class=\"number\">1</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    runif<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>result <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"built_in\">round</span><span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> <span class=\"number\">2</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/876e7420c98f7344ee1eac35650c26d6257eb839/7c919/images/action-feedback/spinner-1.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/876e7420c98f7344ee1eac35650c26d6257eb839/7c919/images/action-feedback/spinner-1.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图8.8：“Waiter”会在某个操作发生时显示整个应用程序的旋转器。请在线查看https://hadley.shinyapps.io/ms-spinner-1。\"></p>\n<p>与Waitress一样，你也可以针对特定的输出使用Waiters。这些waiter可以在输出更新时自动移除旋转器，因此代码甚至更简单：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  waiter<span class=\"operator\">::</span>use_waiter<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  plotOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;plot&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  data <span class=\"operator\">&lt;-</span> eventReactive<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>go<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    waiter<span class=\"operator\">::</span>Waiter<span class=\"operator\">$</span>new<span class=\"punctuation\">(</span>id <span class=\"operator\">=</span> <span class=\"string\">&quot;plot&quot;</span><span class=\"punctuation\">)</span><span class=\"operator\">$</span>show<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">3</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    data.frame<span class=\"punctuation\">(</span>x <span class=\"operator\">=</span> runif<span class=\"punctuation\">(</span><span class=\"number\">50</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> y <span class=\"operator\">=</span> runif<span class=\"punctuation\">(</span><span class=\"number\">50</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>plot <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span>plot<span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> res <span class=\"operator\">=</span> <span class=\"number\">96</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/0fa7426c91728627f36b69d91036aef0876f278c/84714/images/action-feedback/spinner-2.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/0fa7426c91728627f36b69d91036aef0876f278c/84714/images/action-feedback/spinner-2.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图8.9：你也可以为单个输出显示旋转器。请在线查看https://hadley.shinyapps.io/ms-spinner-2。\"></p>\n<p>waiter包提供了多种旋转器供你选择；你可以在<a href=\"https://rdrr.io/pkg/waiter/man/spinners.html\">?waiter::spinners</a>中查看你的选项，然后选择其中一个（例如）使用<code>Waiter$new(html = spin_ripple())</code>。</p>\n<p>一个更简单的选择是使用Dean Attali的<a href=\"https://github.com/daattali/shinycssloaders\">shinycssloaders</a>包。它使用JavaScript监听Shiny事件，因此甚至不需要服务器端代码。相反，你只需使用<a href=\"https://rdrr.io/pkg/shinycssloaders/man/withSpinner.html\">shinycssloaders::withSpinner()</a>来包装你希望在其失效时自动获得旋转器的输出。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>shinycssloaders<span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  withSpinner<span class=\"punctuation\">(</span>plotOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;plot&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  data <span class=\"operator\">&lt;-</span> eventReactive<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>go<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">3</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    data.frame<span class=\"punctuation\">(</span>x <span class=\"operator\">=</span> runif<span class=\"punctuation\">(</span><span class=\"number\">50</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> y <span class=\"operator\">=</span> runif<span class=\"punctuation\">(</span><span class=\"number\">50</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>plot <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span>plot<span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> res <span class=\"operator\">=</span> <span class=\"number\">96</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"8-4-确认和撤销\"><a href=\"#8-4-确认和撤销\" class=\"headerlink\" title=\"8.4 确认和撤销\"></a>8.4 确认和撤销</h2><p>有时某个操作可能具有潜在的危险性，你可能想要确保用户确实想要执行该操作，或者你想要在一切都太晚之前给他们一个撤销的机会。本节中的三个技巧列出了你的基本选项，并给出了一些如何在你的应用程序中实现它们的建议。</p>\n<h3 id=\"8-4-1-明确确认\"><a href=\"#8-4-1-明确确认\" class=\"headerlink\" title=\"8.4.1 明确确认\"></a>8.4.1 明确确认</h3><p>保护用户避免因误操作执行危险动作的最简单方法是要求用户进行明确的确认。最简单的方法是使用对话框，该对话框会强制用户从一组小动作中选择。在Shiny中，你可以使用<a href=\"https://rdrr.io/pkg/shiny/man/modalDialog.html\">modalDialog()</a>创建一个对话框。这被称为“模态”对话框，因为它创建了一种新的交互“模式”；在处理对话框之前，你无法与主应用程序进行交互。</p>\n<p>假设你有一个Shiny应用程序，用于从目录中删除一些文件（或从数据库中删除一些行等）。这个操作很难撤销，因此你需要确保用户确实想要这么做。你可以创建一个对话框，如图<code>8.10</code>所示，要求用户进行明确的确认，如下所示：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">modal_confirm <span class=\"operator\">&lt;-</span> modalDialog<span class=\"punctuation\">(</span></span><br><span class=\"line\">  <span class=\"string\">&quot;Are you sure you want to continue?&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  title <span class=\"operator\">=</span> <span class=\"string\">&quot;Deleting files&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  footer <span class=\"operator\">=</span> tagList<span class=\"punctuation\">(</span></span><br><span class=\"line\">    actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;cancel&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Cancel&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;ok&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Delete&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">class</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;btn btn-danger&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/1fd6b657c2fd4df4ef9de687459e433e0b6144f4/93f7d/demos/action-feedback/dialog.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/1fd6b657c2fd4df4ef9de687459e433e0b6144f4/93f7d/demos/action-feedback/dialog.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图 8.10：检查是否要删除某些文件的对话框。\"></p>\n<p>在创建对话框时，需要注意一些虽小但重要的细节：</p>\n<ul>\n<li><p>按钮应该怎么命名？最好描述得具体一些，因此要避免使用“是&#x2F;否”或“继续&#x2F;取消”，而应该复述关键的动词。</p>\n</li>\n<li><p>按钮应该如何排序？你是把“取消”放在前面（像Mac那样），还是把“继续”放在前面（像Windows那样）？你最好的选择是模仿大多数人将使用的平台。</p>\n</li>\n<li><p>你能让危险选项更明显吗？这里我使用了<code>class = &quot;btn btn-danger&quot;</code>来突出显示按钮。</p>\n</li>\n</ul>\n<p>Jakob Nielsen在<a href=\"http://www.useit.com/alertbox/ok-cancel.html\">http://www.useit.com/alertbox/ok-cancel.html</a>上给出了更多好建议。</p>\n<p>让我们在一个真实（尽管很简单）的应用程序中使用这个对话框。我们的用户界面暴露了一个“删除所有文件”的按钮：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;delete&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Delete all files?&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>在<code>server()</code>中有两个新的想法：</p>\n<ul>\n<li>我们使用<a href=\"https://rdrr.io/pkg/shiny/man/showModal.html\">showModal()</a>和<a href=\"https://rdrr.io/pkg/shiny/man/showModal.html\">removeModal()</a>来显示和隐藏对话框。</li>\n</ul>\n<p>我们观察由UI从<code>modal_confirm</code>生成的事件。这些对象不是静态地在ui中创建的，而是由<code>server()</code>中的<code>showModal()</code>动态添加的。在第<code>10</code>章中，你将更详细地看到这个想法。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>delete<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    showModal<span class=\"punctuation\">(</span>modal_confirm<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>ok<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;Files deleted&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    removeModal<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>cancel<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    removeModal<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"8-4-2-撤消操作\"><a href=\"#8-4-2-撤消操作\" class=\"headerlink\" title=\"8.4.2 撤消操作\"></a>8.4.2 撤消操作</h3><p>明确的确认对于很少执行且具有破坏性的操作最有用。如果你想要减少因频繁操作而产生的错误，那么应该避免使用它。例如，这种技术不适用于Twitter——如果有一个对话框说“你确定要发这条推文吗？”你会很快学会自动点击“是”，并且在发送推文10秒后注意到拼写错误时，仍然会感到同样的后悔。</p>\n<p>在这种情况下，更好的方法是在实际执行操作前等待几秒钟，给用户一个发现并撤销任何问题的机会。这并不是真正的撤销（因为你实际上没有做任何事情），但这是一个让用户能够理解的词汇。</p>\n<p>我将用一个我个人希望拥有撤销按钮的网站——Twitter来举例说明这项技术。Twitter用户界面的本质非常简单：有一个文本区域用来编辑推文，还有一个发送按钮：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  textAreaInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;message&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">    label <span class=\"operator\">=</span> <span class=\"literal\">NULL</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">    placeholder <span class=\"operator\">=</span> <span class=\"string\">&quot;What&#x27;s happening?&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    rows <span class=\"operator\">=</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;tweet&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Tweet&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>服务器函数相当复杂，需要一些我们尚未讨论过的技术。不要太担心理解代码，要专注于基本思路：我们使用一些<a href=\"https://rdrr.io/pkg/shiny/man/observeEvent.html\">observeEvent()</a>特殊的参数，以便在几秒钟后运行一些代码。主要的新想法是，我们捕获<code>observeEvent()</code>的结果并将其保存到一个变量中；这样我们就可以销毁观察者，从而确保实际发送推文的代码永远不会被执行。你可以尝试访问实时应用程序<a href=\"https://hadley.shinyapps.io/ms-undo\">https://hadley.shinyapps.io/ms-undo</a>。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runLater <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>action<span class=\"punctuation\">,</span> seconds <span class=\"operator\">=</span> <span class=\"number\">3</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span></span><br><span class=\"line\">    invalidateLater<span class=\"punctuation\">(</span>seconds <span class=\"operator\">*</span> <span class=\"number\">1000</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> action<span class=\"punctuation\">,</span> </span><br><span class=\"line\">    ignoreInit <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">    once <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">    ignoreNULL <span class=\"operator\">=</span> <span class=\"literal\">FALSE</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    autoDestroy <span class=\"operator\">=</span> <span class=\"literal\">FALSE</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  waiting <span class=\"operator\">&lt;-</span> <span class=\"literal\">NULL</span></span><br><span class=\"line\">  last_message <span class=\"operator\">&lt;-</span> <span class=\"literal\">NULL</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>tweet<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    notification <span class=\"operator\">&lt;-</span> glue<span class=\"operator\">::</span>glue<span class=\"punctuation\">(</span><span class=\"string\">&quot;Tweeted &#x27;&#123;input$message&#125;&#x27;&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    last_message <span class=\"operator\">&lt;&lt;-</span> input<span class=\"operator\">$</span>message</span><br><span class=\"line\">    updateTextAreaInput<span class=\"punctuation\">(</span>session<span class=\"punctuation\">,</span> <span class=\"string\">&quot;message&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span></span><br><span class=\"line\">      notification<span class=\"punctuation\">,</span></span><br><span class=\"line\">      action <span class=\"operator\">=</span> actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;undo&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Undo?&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      duration <span class=\"operator\">=</span> <span class=\"literal\">NULL</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      closeButton <span class=\"operator\">=</span> <span class=\"literal\">FALSE</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      id <span class=\"operator\">=</span> <span class=\"string\">&quot;tweeted&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      type <span class=\"operator\">=</span> <span class=\"string\">&quot;warning&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    waiting <span class=\"operator\">&lt;&lt;-</span> runLater<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      cat<span class=\"punctuation\">(</span><span class=\"string\">&quot;Actually sending tweet...\\n&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">      removeNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;tweeted&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>undo<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    waiting<span class=\"operator\">$</span>destroy<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;Tweet retracted&quot;</span><span class=\"punctuation\">,</span> id <span class=\"operator\">=</span> <span class=\"string\">&quot;tweeted&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    updateTextAreaInput<span class=\"punctuation\">(</span>session<span class=\"punctuation\">,</span> <span class=\"string\">&quot;message&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> last_message<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-4-3-回收站\"><a href=\"#8-4-3-回收站\" class=\"headerlink\" title=\"8.4.3 回收站\"></a>8.4.3 回收站</h3><p>对于几天后可能会后悔的操作，一种更高级的模式是在计算机上实现类似回收站或垃圾箱的功能。当你删除一个文件时，它并不会被永久删除，而是被移动到一个暂存区，需要执行另一个操作才能清空。这就像是一个强化版的“撤销”选项，你有很长的时间来后悔你的操作。这也有点像确认操作，你需要执行两个分开的操作才能使删除操作永久生效。</p>\n<p>这种技术的主要缺点是实现起来相当复杂（你需要有一个单独的“暂存区”来存储撤销操作所需的信息），并且需要用户定期干预以避免信息积累。因此，我认为除了最复杂的Shiny应用程序之外，这种技术都超出了其他应用程序的范围，所以这里我不会展示它的实现方法。</p>\n<h2 id=\"8-5-总结\"><a href=\"#8-5-总结\" class=\"headerlink\" title=\"8.5 总结\"></a>8.5 总结</h2><p>本章为你提供了一些工具，帮助你向用户传达应用程序正在发生的事情。从某种意义上说，这些技术大多是可选的。虽然你的应用程序没有它们也能工作，但它们的精心应用会对用户体验的质量产生巨大影响。当你是应用程序的唯一用户时，通常可以省略反馈，但使用它的人越多，精心设计的通知就越能发挥作用。</p>\n<p>在下一章中，你将学习如何向用户传输文件。</p>\n<h1 id=\"加关注\"><a href=\"#加关注\" class=\"headerlink\" title=\"加关注\"></a>加关注</h1><p>关注公众号“生信之巅”。</p>\n<table align=\"center\"><tr>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅微信公众号\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-right: 0px;margin-bottom: 5px;align: center;\"></td>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅小程序码\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-left: 0px;margin-bottom: 5px;align: center\"></td>\n</tr></table>\n\n\n<p><font color=\"#FF0000\"><ruby><b>敬告</b>：使用文中脚本请引用本文网址，请尊重本人的劳动成果，谢谢！<rt><b>Notice</b>: When you use the scripts in this article, please cite the link of this webpage. Thank you!</rt></ruby></font></p>\n","more":"<h1 id=\"8-用户反馈\"><a href=\"#8-用户反馈\" class=\"headerlink\" title=\"8 用户反馈\"></a>8 用户反馈</h1><p>你通常可以通过向用户展示更多关于正在发生的事情的信息来提高应用程序的可用性。这可能表现为当输入不合理时显示更好的消息，或者对需要很长时间的操作使用进度条。一些反馈是通过输出自然发生的，你已经知道如何使用它们，但你经常还需要其他的东西。本章的目标是向你展示一些其他的选择。</p>\n<p>我们将从<code>验证</code>技术开始，在输入（或输入组合）处于无效状态时通知用户。然后我们将继续讨论<code>通知</code>，向用户发送一般消息，以及<code>进度条</code>，这些为包含许多小步骤的耗时操作提供了详细信息。最后，我们将讨论危险操作，以及如何使用<code>确认</code>对话框或<code>撤销</code>操作的能力来让你的用户安心。</p>\n<p>在本章中，我们将使用Andy Merlino的<a href=\"https://github.com/merlinoa/shinyFeedback\">shinyFeedback</a>和John Coene的<a href=\"http://waiter.john-coene.com/\">waiter</a>。你还应该关注Joe Cheng正在开发的<a href=\"https://rstudio.github.io/shinyvalidate/\">shinyvalidate</a>包。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>shiny<span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-1-验证\"><a href=\"#8-1-验证\" class=\"headerlink\" title=\"8.1 验证\"></a>8.1 验证</h2><p>你可以给用户提供的第一个也是最重要的反馈是，他们的输入有误。这与在R中编写好函数类似：用户友好的函数会给出清晰的错误消息，描述期望的输入是什么，以及你是如何违背这些期望的。思考用户可能会如何误用你的应用程序，可以让你在用户界面（UI）中提供有用的消息，而不是让错误渗透到R代码中并产生无用的错误信息。</p>\n<h3 id=\"8-1-1-验证输入\"><a href=\"#8-1-1-验证输入\" class=\"headerlink\" title=\"8.1.1 验证输入\"></a>8.1.1 验证输入</h3><p>通过shinyFeedback包向用户提供额外的反馈是一个很好的方法。使用它分为两步。首先，你需要在用户界面（ui）中添加useShinyFeedback()。这将为显示美观的错误消息设置所需的HTML和JavaScript：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  shinyFeedback<span class=\"operator\">::</span>useShinyFeedback<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">10</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;half&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>然后在您的server()函数中，您调用反馈函数之一：feedback()、feedbackWarning()、feedbackDanger()和feedbackSuccess()。他们都有三个关键参数：</p>\n<ul>\n<li><code>inputId</code>，放置反馈的输入的id。</li>\n<li><code>show</code>，一个逻辑值，确定是否显示反馈。</li>\n<li><code>text</code>，要显示的文本。</li>\n</ul>\n<p>它们还有颜色和图标参数，你可以使用它们进一步自定义外观。更多详细信息请查阅文档。</p>\n<p>让我们看看这在一个真实例子中是如何实现的，假设我们只允许输入偶数。图8.1显示了结果。</p>\n<figure class=\"highlight plaintext\"><figcaption><span><- function(input, output, session) &#123;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  half &lt;- reactive(&#123;</span><br><span class=\"line\">    even &lt;- input$n %% 2 == 0</span><br><span class=\"line\">    shinyFeedback::feedbackWarning(&quot;n&quot;, !even, &quot;Please select an even number&quot;)</span><br><span class=\"line\">    input$n / 2    </span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  </span><br><span class=\"line\">  output$half &lt;- renderText(half())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/4ce6e5665e89d296ce5ee685d1b44ac44f648c1c/42897/demos/action-feedback/feedback-odd.png\" alt=\"图8.1：使用feedbackWarning()显示无效输入的警告。左侧的应用程序显示了一个有效的输入，右侧的应用程序显示了一个无效的（奇数）输入并带有警告消息。请访问https://hadley.shinyapps.io/ms-feedback查看实时效果。\"></p>\n<p>请注意，错误消息已经显示，但输出仍然更新了。通常，你不想这样做，因为无效的输入可能会引发你不希望显示给用户的无用的R错误。要阻止输入触发响应式更改，你需要一个新工具：req()，即“required”的缩写。它的用法如下：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  half <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    even <span class=\"operator\">&lt;-</span> input<span class=\"operator\">$</span>n <span class=\"operator\">%%</span> <span class=\"number\">2</span> <span class=\"operator\">==</span> <span class=\"number\">0</span></span><br><span class=\"line\">    shinyFeedback<span class=\"operator\">::</span>feedbackWarning<span class=\"punctuation\">(</span><span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">,</span> <span class=\"operator\">!</span>even<span class=\"punctuation\">,</span> <span class=\"string\">&quot;Please select an even number&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    req<span class=\"punctuation\">(</span>even<span class=\"punctuation\">)</span></span><br><span class=\"line\">    input<span class=\"operator\">$</span>n <span class=\"operator\">/</span> <span class=\"number\">2</span>    </span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>half <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span>half<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>当<code>req()</code>的输入不为真时，它会发送一个特殊信号，告诉Shiny这个响应式组件没有它所需的所有输入，因此应该“暂停”。在将其与<code>validate()</code>结合使用之前，我们先简要讨论一下这个问题。</p>\n<h3 id=\"8-1-2-使用req-取消执行\"><a href=\"#8-1-2-使用req-取消执行\" class=\"headerlink\" title=\"8.1.2 使用req()取消执行\"></a>8.1.2 使用<code>req()</code>取消执行</h3><p>通过跳出验证的范畴，可以更容易地理解<a href=\"https://rdrr.io/pkg/shiny/man/req.html\">req()</a>。你可能已经注意到，当你启动一个应用程序时，即使用户还没有进行任何操作，完整的响应式图也会被计算出来。当你能够为输入选择有意义的默认<code>值</code>时，这可以很好地工作。但这并不总是可能的，有时你可能希望等到用户实际执行了某些操作再进行计算。这种情况通常出现在以下三种控件中：</p>\n<ul>\n<li><p>在<a href=\"https://rdrr.io/pkg/shiny/man/textInput.html\">textInput()</a>中，你使用了<code>value = &quot;&quot;</code>，并且不希望用户输入任何内容之前执行任何操作。</p>\n</li>\n<li><p>在<a href=\"https://rdrr.io/pkg/shiny/man/selectInput.html\">selectInput()</a>中，你提供了一个空选项<code>&quot;&quot;</code>，并且不希望用户进行选择之前执行任何操作。</p>\n</li>\n<li><p>在<a href=\"https://rdrr.io/pkg/shiny/man/fileInput.html\">fileInput()</a>中，用户在上传任何内容之前，其结果都是空的。我们将在<code>9.1</code>节中再次讨论这个问题。</p>\n</li>\n</ul>\n<p>我们需要一种方法来“暂停”响应式组件，以便在满足某个条件之前不会发生任何事情。这就是<code>req()</code>的工作，它会在允许响应式生产者继续之前检查所需的值。</p>\n<p>例如，考虑以下应用程序，它将生成英语或毛利语的问候语。如果你运行这个应用程序，你会看到一个错误，如图<code>8.2</code>所示，因为在<code>greetings</code>向量中没有与默认选项<code>&quot;&quot;</code>相对应的条目。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;language&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Language&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;English&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Maori&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;name&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Name&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;greeting&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  greetings <span class=\"operator\">&lt;-</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span></span><br><span class=\"line\">    English <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">    Maori <span class=\"operator\">=</span> <span class=\"string\">&quot;Kia ora&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>greeting <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    paste0<span class=\"punctuation\">(</span>greetings<span class=\"punctuation\">[[</span>input<span class=\"operator\">$</span>language<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot; &quot;</span><span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>name<span class=\"punctuation\">,</span> <span class=\"string\">&quot;!&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/8983f6fd77bdc3b97d45f06a7fdd0c67aaf52b3d/b3d13/demos/action-feedback/require-simple.png\" alt=\"图8.2：当应用程序加载时，由于尚未选择语言，因此会显示一条无信息量的错误消息。\"></p>\n<p>我们可以使用<code>req()</code>来解决这个问题，如下所示。现在，在用户为语言和姓名都提供了值之前，将不会显示任何内容，如图<code>8.3</code>所示</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  greetings <span class=\"operator\">&lt;-</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span></span><br><span class=\"line\">    English <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">    Maori <span class=\"operator\">=</span> <span class=\"string\">&quot;Kia ora&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>greeting <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    req<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>language<span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>name<span class=\"punctuation\">)</span></span><br><span class=\"line\">    paste0<span class=\"punctuation\">(</span>greetings<span class=\"punctuation\">[[</span>input<span class=\"operator\">$</span>language<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot; &quot;</span><span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>name<span class=\"punctuation\">,</span> <span class=\"string\">&quot;!&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/e8048494af9066952f69e4c7e9ec06c826202c34/4933a/demos/action-feedback/require-simple2-langauge.png\" alt=\"图8.3：通过使用req()，只有在提供了语言和姓名之后，输出才会显示。请访问https://hadley.shinyapps.io/ms-require-simple2查看实时效果。\"><br><code>req()</code>通过发出一个特殊<code>条件</code>来工作。这个特殊条件导致所有下游的响应式组件和输出停止执行。从技术上讲，它使任何下游的响应式消费者处于无效状态。我们将在第<code>16</code>章中再次回到这个术语。</p>\n<p><code>req()</code>的设计是使得<code>req(inputx)</code>只有在用户提供了值的情况下才会继续执行，而不考虑输入控件的类型。如果需要，你也可以使用<code>req()</code>与自己的逻辑语句结合使用。例如，<code>req(inputa &gt; 0)</code>会在<code>a</code>大于0时允许计算继续进行；这通常是我们执行验证时使用的形式，我们将在下面看到。</p>\n<h3 id=\"8-1-3-req-和验证\"><a href=\"#8-1-3-req-和验证\" class=\"headerlink\" title=\"8.1.3 req()和验证\"></a>8.1.3 <code>req()</code>和验证</h3><p>让我们将<code>req()</code>和shinyFeedback结合起来，解决一个更具挑战性的问题。我将回到我们在第1章中制作的简单应用程序，该应用程序允许你选择内置数据集并查看其内容。我将通过使用<code>textInput()</code>而不是<code>selectInput()</code>来使其更加通用和复杂。用户界面几乎没有变化：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  shinyFeedback<span class=\"operator\">::</span>useShinyFeedback<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;dataset&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Dataset name&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;data&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>但是服务器函数需要变得稍微复杂一些。我们将以两种方式使用<code>req()</code>：</p>\n<ul>\n<li><p>我们只想在用户输入了值之后才进行计算，所以我们使用<code>req(input$dataset)</code>。</p>\n</li>\n<li><p>然后，我们检查提供的名称是否确实存在。如果不存在，我们将显示一条错误消息，然后使用<code>req()</code>取消计算。请注意<code>cancelOutput = TRUE</code>的使用：通常取消响应式组件会重置所有下游输出；使用<code>cancelOutput = TRUE</code>会使它们保持显示上一次的有效值。这对于<code>textInput()</code>来说很重要，因为您可能在输入名称的过程中触发更新。</p>\n</li>\n</ul>\n<p>结果如图<code>8.4</code>所示。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  data <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    req<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dataset<span class=\"punctuation\">)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    exists <span class=\"operator\">&lt;-</span> exists<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dataset<span class=\"punctuation\">,</span> <span class=\"string\">&quot;package:datasets&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    shinyFeedback<span class=\"operator\">::</span>feedbackDanger<span class=\"punctuation\">(</span><span class=\"string\">&quot;dataset&quot;</span><span class=\"punctuation\">,</span> <span class=\"operator\">!</span>exists<span class=\"punctuation\">,</span> <span class=\"string\">&quot;Unknown dataset&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    req<span class=\"punctuation\">(</span>exists<span class=\"punctuation\">,</span> cancelOutput <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    get<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dataset<span class=\"punctuation\">,</span> <span class=\"string\">&quot;package:datasets&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>data <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    head<span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/12970a9665fbc639f4428c014c524b62f9e72373/5af05/demos/action-feedback/require-cancel-ok.png\" alt=\"图8.4：加载时，表格为空，因为数据集名称为空。在我们输入一个有效数据集名称（iris）后，数据会显示出来，即使按下退格键以输入新的数据集名称时，数据仍会继续显示。请访问https://hadley.shinyapps.io/ms-require-cancel查看实时效果。\"></p>\n<h3 id=\"8-1-4-验证输出\"><a href=\"#8-1-4-验证输出\" class=\"headerlink\" title=\"8.1.4 验证输出\"></a>8.1.4 验证输出</h3><p>当问题与单个输入相关时，shinyFeedback非常有用。但有时无效状态是多个输入组合的结果。在这种情况下，将错误放在输入旁边并没有太大意义（应该放在哪个输入旁边呢？），相反，将其放在输出中更有意义。</p>\n<p>您可以使用shiny内置的一个工具来实现：<a href=\"https://rdrr.io/pkg/shiny/man/validate.html\">validate()</a>。当在响应式组件或输出中调用时，<code>validate(message)</code>会停止其余代码的执行，并在任何下游输出中显示<code>message</code>。以下代码显示了一个简单示例，其中我们不想记录或取负值的平方根。您可以在图<code>8.5</code>中查看结果。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;x&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;x&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;trans&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;transformation&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">    choices <span class=\"operator\">=</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;square&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;log&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;square-root&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;out&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>out <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>x <span class=\"operator\">&lt;</span> <span class=\"number\">0</span> <span class=\"operator\">&amp;&amp;</span> input<span class=\"operator\">$</span>trans <span class=\"operator\">%in%</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;log&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;square-root&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      validate<span class=\"punctuation\">(</span><span class=\"string\">&quot;x can not be negative for this transformation&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">switch</span><span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>trans<span class=\"punctuation\">,</span></span><br><span class=\"line\">      square <span class=\"operator\">=</span> input<span class=\"operator\">$</span>x <span class=\"operator\">^</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;square-root&quot;</span> <span class=\"operator\">=</span> <span class=\"built_in\">sqrt</span><span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>x<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"built_in\">log</span> <span class=\"operator\">=</span> <span class=\"built_in\">log</span><span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>x<span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/c1c59bed1d77fa2aea32024bbaa907e5dbba6244/b5824/demos/action-feedback/validate-init.png\" alt=\"图8.5：如果输入有效，输出会显示转换结果。如果输入的组合无效，则输出会被替换为一条信息性消息。\"></p>\n<h2 id=\"8-2-通知\"><a href=\"#8-2-通知\" class=\"headerlink\" title=\"8.2 通知\"></a>8.2 通知</h2><p>如果没有问题，您只是想让用户知道发生了什么，那么您需要一个<code>通知</code>。在Shiny中，通知是通过<a href=\"https://rdrr.io/pkg/shiny/man/showNotification.html\">showNotification()</a>创建的，并堆叠在页面的右下角。使用<code>showNotification()</code>有三种基本方式：</p>\n<ul>\n<li><p>显示一个临时通知，该通知在固定时间后自动消失。</p>\n</li>\n<li><p>在进程开始时显示通知，并在进程结束时将其移除。</p>\n</li>\n<li><p>使用渐进更新来更新单个通知。</p>\n</li>\n</ul>\n<p>下面将讨论这三种技术。</p>\n<h3 id=\"8-2-1-临时通知\"><a href=\"#8-2-1-临时通知\" class=\"headerlink\" title=\"8.2.1 临时通知\"></a>8.2.1 临时通知</h3><p>使用<code>showNotification()</code>的最简单方法是只传入一个参数：您想要显示的消息。由于很难通过截图捕捉这种行为，所以如果您想看到它的实际效果，请访问<a href=\"https://hadley.shinyapps.io/ms-notification-transient\">https://hadley.shinyapps.io/ms-notification-transient</a>。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;goodnight&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Good night&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>goodnight<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;So long&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;Farewell&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;Auf Wiedersehen&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;Adieu&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>默认情况下，消息将在5秒后消失，你可以通过设置<code>duration</code>来覆盖这个时间，或者用户可以点击关闭按钮提前关闭它。如果你想让通知更加醒目，你可以将<code>type</code>参数设置为“message”、“warning”或“error”其中之一。图<code>8.6</code>展示了这些通知的外观。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>goodnight<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;So long&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;Farewell&quot;</span><span class=\"punctuation\">,</span> type <span class=\"operator\">=</span> <span class=\"string\">&quot;message&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;Auf Wiedersehen&quot;</span><span class=\"punctuation\">,</span> type <span class=\"operator\">=</span> <span class=\"string\">&quot;warning&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;Adieu&quot;</span><span class=\"punctuation\">,</span> type <span class=\"operator\">=</span> <span class=\"string\">&quot;error&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/87c1065fb140b5924f0a32297421656e48ef7e11/4fe18/images/action-feedback/notify-1.png\"></p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/d2d0c53e19a116f900ef892da0dd4580b47cf71e/993ed/images/action-feedback/notify-2.png\"></p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/9fea3bd7890e9ec4ba7ab1fa1f84d0881cea23ee/d4571/images/action-feedback/notify-3.png\" alt=\"图8.6：点击“晚安”后通知的显示过程：第一个通知出现，再过三秒，所有通知都将显示出来，随后通知开始消失。实时查看效果，请访问https://hadley.shinyapps.io/ms-notify-persistent。\"></p>\n<h3 id=\"8-2-2-完成时移除\"><a href=\"#8-2-2-完成时移除\" class=\"headerlink\" title=\"8.2.2 完成时移除\"></a>8.2.2 完成时移除</h3><p>将通知的存在与一个长时间运行的任务关联起来通常很有用。在这种情况下，你希望在任务开始时显示通知，并在任务完成时移除通知。为此，你需要：</p>\n<ul>\n<li><p>设置<code>duration = NULL</code>和<code>closeButton = FALSE</code>，以确保通知在任务完成之前一直保持可见状态。</p>\n</li>\n<li><p>保存<a href=\"https://rdrr.io/pkg/shiny/man/showNotification.html\">showNotification()</a>返回的id，然后将其传递给<a href=\"https://rdrr.io/pkg/shiny/man/showNotification.html\">removeNotification()</a>。最可靠的方法是使用<a href=\"https://rdrr.io/r/base/on.exit.html\">on.exit()</a>，这可以确保无论任务如何完成（成功或出错），通知都会被移除。你可以在“<a href=\"v\">更改和恢复状态</a>”一章中了解更多关于<code>on.exit()</code>的信息。</p>\n</li>\n</ul>\n<p>以下示例将各个部分组合在一起，展示了如何在读取大型csv文件时向用户更新状态：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  data <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    id <span class=\"operator\">&lt;-</span> showNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;Reading data...&quot;</span><span class=\"punctuation\">,</span> duration <span class=\"operator\">=</span> <span class=\"literal\">NULL</span><span class=\"punctuation\">,</span> closeButton <span class=\"operator\">=</span> <span class=\"literal\">FALSE</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"built_in\">on.exit</span><span class=\"punctuation\">(</span>removeNotification<span class=\"punctuation\">(</span>id<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> add <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    read.csv<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>file<span class=\"operator\">$</span>datapath<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>一般来说，这类通知会存在于一个响应式环境中，因为这可以确保只有当需要时，长时间运行的计算才会重新执行。</p>\n<h3 id=\"8-2-3-渐进式更新\"><a href=\"#8-2-3-渐进式更新\" class=\"headerlink\" title=\"8.2.3 渐进式更新\"></a>8.2.3 渐进式更新</h3><p>正如你在第一个示例中所看到的，多次调用showNotification()通常会创建多个通知。相反，你可以通过捕获第一次调用的id并在后续调用中使用它来更新单个通知。如果你的长时间运行的任务包含多个子组件，这将非常有用。你可以在<a href=\"https://hadley.shinyapps.io/ms-notification-updates\">https://hadley.shinyapps.io/ms-notification-updates</a>查看结果。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;data&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  notify <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>msg<span class=\"punctuation\">,</span> id <span class=\"operator\">=</span> <span class=\"literal\">NULL</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span>msg<span class=\"punctuation\">,</span> id <span class=\"operator\">=</span> id<span class=\"punctuation\">,</span> duration <span class=\"operator\">=</span> <span class=\"literal\">NULL</span><span class=\"punctuation\">,</span> closeButton <span class=\"operator\">=</span> <span class=\"literal\">FALSE</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  data <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span> </span><br><span class=\"line\">    id <span class=\"operator\">&lt;-</span> notify<span class=\"punctuation\">(</span><span class=\"string\">&quot;Reading data...&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"built_in\">on.exit</span><span class=\"punctuation\">(</span>removeNotification<span class=\"punctuation\">(</span>id<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> add <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">      </span><br><span class=\"line\">    notify<span class=\"punctuation\">(</span><span class=\"string\">&quot;Reticulating splines...&quot;</span><span class=\"punctuation\">,</span> id <span class=\"operator\">=</span> id<span class=\"punctuation\">)</span></span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    notify<span class=\"punctuation\">(</span><span class=\"string\">&quot;Herding llamas...&quot;</span><span class=\"punctuation\">,</span> id <span class=\"operator\">=</span> id<span class=\"punctuation\">)</span></span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    notify<span class=\"punctuation\">(</span><span class=\"string\">&quot;Orthogonalizing matrices...&quot;</span><span class=\"punctuation\">,</span> id <span class=\"operator\">=</span> id<span class=\"punctuation\">)</span></span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    mtcars</span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>data <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span>head<span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"8-3-进度条\"><a href=\"#8-3-进度条\" class=\"headerlink\" title=\"8.3 进度条\"></a>8.3 进度条</h2><p>对于长时间运行的任务，最好的反馈形式就是进度条。它不仅可以告诉你任务进行到了哪一步，还可以帮助你估计还需要多长时间：你是应该深吸一口气，去喝杯咖啡，还是明天再来？在本节中，我将展示两种显示进度条的技术，一种是Shiny内置的，另一种是John Coene开发的<a href=\"https://waiter.john-coene.com/\">waiter</a>包提供的。</p>\n<p>不幸的是，这两种技术都存在同样的主要缺点：要使用进度条，你需要能够将大任务分成已知数量的、每个都大致需要相同时间来完成的小任务。这通常很难做到，特别是当底层代码是用C语言编写的，且没有办法向你传达进度更新时。我们正在努力开发<a href=\"https://github.com/r-lib/progress\">progress包</a>中的工具，以便有一天像dplyr、readr和vroom这样的包能够生成进度条，你可以轻松地将它们转发给Shiny。</p>\n<h3 id=\"8-3-1-Shiny\"><a href=\"#8-3-1-Shiny\" class=\"headerlink\" title=\"8.3.1 Shiny\"></a>8.3.1 Shiny</h3><p>要使用Shiny创建进度条，你需要使用<a href=\"https://rdrr.io/pkg/shiny/man/withProgress.html\">withProgress()</a>和<a href=\"https://rdrr.io/pkg/shiny/man/withProgress.html\">incProgress()</a>。假设你有一段运行缓慢的代码，如下所示：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"punctuation\">(</span>i <span class=\"keyword\">in</span> <span class=\"built_in\">seq_len</span><span class=\"punctuation\">(</span>step<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  x <span class=\"operator\">&lt;-</span> function_that_takes_a_long_time<span class=\"punctuation\">(</span>x<span class=\"punctuation\">)</span>     </span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>你首先需要用<code>withProgress()</code>将其包裹起来。当代码开始运行时，这会显示进度条，并在完成时自动移除它：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">withProgress<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> <span class=\"punctuation\">(</span>i <span class=\"keyword\">in</span> <span class=\"built_in\">seq_len</span><span class=\"punctuation\">(</span>step<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    x <span class=\"operator\">&lt;-</span> function_that_takes_a_long_time<span class=\"punctuation\">(</span>x<span class=\"punctuation\">)</span>     </span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>然后在每个步骤之后调用<code>incProgress()</code>：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">withProgress<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> <span class=\"punctuation\">(</span>i <span class=\"keyword\">in</span> <span class=\"built_in\">seq_len</span><span class=\"punctuation\">(</span>step<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    x <span class=\"operator\">&lt;-</span> function_that_takes_a_long_time<span class=\"punctuation\">(</span>x<span class=\"punctuation\">)</span></span><br><span class=\"line\">    incProgress<span class=\"punctuation\">(</span><span class=\"number\">1</span> <span class=\"operator\">/</span> <span class=\"built_in\">length</span><span class=\"punctuation\">(</span>step<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p><code>incProgress()</code>的第一个参数是进度条要增加的量。默认情况下，进度条从0开始，到1结束，因此通过步骤数除以来增加进度条，可以确保循环结束时进度条完成。</p>\n<p>图<code>8.7</code>展示了在一个完整的Shiny应用程序中，这可能看起来是什么样子。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;steps&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;How many steps?&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">10</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;result&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  data <span class=\"operator\">&lt;-</span> eventReactive<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>go<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    withProgress<span class=\"punctuation\">(</span>message <span class=\"operator\">=</span> <span class=\"string\">&quot;Computing random number&quot;</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> <span class=\"punctuation\">(</span>i <span class=\"keyword\">in</span> <span class=\"built_in\">seq_len</span><span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>steps<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">0.5</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">        incProgress<span class=\"punctuation\">(</span><span class=\"number\">1</span> <span class=\"operator\">/</span> input<span class=\"operator\">$</span>steps<span class=\"punctuation\">)</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      runif<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>result <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"built_in\">round</span><span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> <span class=\"number\">2</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/f8653f6a9d2e8c56ebf035d48a3ec299f67fa99e/19ffd/images/action-feedback/progress-2.png\" alt=\"图8.7：进度条有助于指示计算还需运行多长时间。请在线查看https://hadley.shinyapps.io/ms-progress。\"></p>\n<p>需要注意的几个事项：</p>\n<ul>\n<li><p>我使用了可选的<code>message</code>参数，在进度条中添加了一些解释性文本。</p>\n</li>\n<li><p>我使用了<a href=\"https://rdrr.io/r/base/Sys.sleep.html\">Sys.sleep()</a>来模拟一个长时间运行的操作；在你的代码中，这将是一个耗时函数。</p>\n</li>\n<li><p>我通过将一个按钮与<a href=\"https://rdrr.io/pkg/shiny/man/observeEvent.html\">eventReactive()</a>结合，允许用户控制事件何时开始。这是任何需要进度条的任务的良好做法。</p>\n</li>\n</ul>\n<h3 id=\"8-3-2-Waiter\"><a href=\"#8-3-2-Waiter\" class=\"headerlink\" title=\"8.3.2 Waiter\"></a>8.3.2 Waiter</h3><p>内置的进度条对于基础操作来说非常好，但如果你想要提供更多视觉选项的进度条，你可以尝试使用<a href=\"https://waiter.john-coene.com/\">waiter</a>包。将上面的代码适配为与Waiter一起工作很简单。在UI中，我们添加use_waitress()：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  waiter<span class=\"operator\">::</span>use_waitress<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;steps&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;How many steps?&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">10</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;result&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>Waiter的进度条接口略有不同。Waiter包使用R6对象将所有与进度相关的函数捆绑到一个单独的对象中。如果你以前从未使用过R6对象，不必太担心细节；你可以直接复制和粘贴这个模板。基本的生命周期看起来像这样：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Create a new progress bar</span></span><br><span class=\"line\">waitress <span class=\"operator\">&lt;-</span> waiter<span class=\"operator\">::</span>Waitress<span class=\"operator\">$</span>new<span class=\"punctuation\">(</span><span class=\"built_in\">max</span> <span class=\"operator\">=</span> input<span class=\"operator\">$</span>steps<span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\"># Automatically close it when done</span></span><br><span class=\"line\"><span class=\"built_in\">on.exit</span><span class=\"punctuation\">(</span>waitress<span class=\"operator\">$</span>close<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"punctuation\">(</span>i <span class=\"keyword\">in</span> <span class=\"built_in\">seq_len</span><span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>steps<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">0.5</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"comment\"># increment one step</span></span><br><span class=\"line\">  waitress<span class=\"operator\">$</span>inc<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>我们可以在 Shiny 应用程序中使用它，如下所示：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  data <span class=\"operator\">&lt;-</span> eventReactive<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>go<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    waitress <span class=\"operator\">&lt;-</span> waiter<span class=\"operator\">::</span>Waitress<span class=\"operator\">$</span>new<span class=\"punctuation\">(</span><span class=\"built_in\">max</span> <span class=\"operator\">=</span> input<span class=\"operator\">$</span>steps<span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"built_in\">on.exit</span><span class=\"punctuation\">(</span>waitress<span class=\"operator\">$</span>close<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"punctuation\">(</span>i <span class=\"keyword\">in</span> <span class=\"built_in\">seq_len</span><span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>steps<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">0.5</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">      waitress<span class=\"operator\">$</span>inc<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    runif<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>result <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"built_in\">round</span><span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> <span class=\"number\">2</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>默认显示是在页面顶部的细长进度条（你可以查看<a href=\"https://hadley.shinyapps.io/ms-waiter\">https://hadley.shinyapps.io/ms-waiter</a>），但有许多方法可以自定义输出：</p>\n<p>你可以覆盖默认<code>主题</code>，选择使用以下主题之一：</p>\n<ul>\n<li><code>overlay</code>：一个不透明的进度条，会隐藏整个页面</li>\n<li><code>overlay-opacity</code>：一个透明的进度条，会覆盖整个页面</li>\n<li><code>overlay-percent</code>：一个不透明的进度条，同时还会显示一个数字百分比。</li>\n<li>除了为整个页面显示进度条之外，你还可以通过设置<code>selector</code>参数将其覆盖在现有的输入或输出上，例如：</li>\n</ul>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">waitress <span class=\"operator\">&lt;-</span> Waitress<span class=\"operator\">$</span>new<span class=\"punctuation\">(</span>selector <span class=\"operator\">=</span> <span class=\"string\">&quot;#steps&quot;</span><span class=\"punctuation\">,</span> theme <span class=\"operator\">=</span> <span class=\"string\">&quot;overlay&quot;</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-3-3-Spinners\"><a href=\"#8-3-3-Spinners\" class=\"headerlink\" title=\"8.3.3 Spinners\"></a>8.3.3 Spinners</h3><p>有时，你不知道一个操作需要多长时间才能完成，你只想显示一个动画旋转器，让用户知道有事情正在发生。对于这个任务，你也可以使用waiter包；只需从使用<code>Waitress</code>切换到使用<code>Waiter</code>即可：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  waiter<span class=\"operator\">::</span>use_waiter<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;result&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  data <span class=\"operator\">&lt;-</span> eventReactive<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>go<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    waiter <span class=\"operator\">&lt;-</span> waiter<span class=\"operator\">::</span>Waiter<span class=\"operator\">$</span>new<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    waiter<span class=\"operator\">$</span>show<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"built_in\">on.exit</span><span class=\"punctuation\">(</span>waiter<span class=\"operator\">$</span>hide<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span>sample<span class=\"punctuation\">(</span><span class=\"number\">5</span><span class=\"punctuation\">,</span> <span class=\"number\">1</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    runif<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>result <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"built_in\">round</span><span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> <span class=\"number\">2</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/876e7420c98f7344ee1eac35650c26d6257eb839/7c919/images/action-feedback/spinner-1.png\" alt=\"图8.8：“Waiter”会在某个操作发生时显示整个应用程序的旋转器。请在线查看https://hadley.shinyapps.io/ms-spinner-1。\"></p>\n<p>与Waitress一样，你也可以针对特定的输出使用Waiters。这些waiter可以在输出更新时自动移除旋转器，因此代码甚至更简单：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  waiter<span class=\"operator\">::</span>use_waiter<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  plotOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;plot&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  data <span class=\"operator\">&lt;-</span> eventReactive<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>go<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    waiter<span class=\"operator\">::</span>Waiter<span class=\"operator\">$</span>new<span class=\"punctuation\">(</span>id <span class=\"operator\">=</span> <span class=\"string\">&quot;plot&quot;</span><span class=\"punctuation\">)</span><span class=\"operator\">$</span>show<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">3</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    data.frame<span class=\"punctuation\">(</span>x <span class=\"operator\">=</span> runif<span class=\"punctuation\">(</span><span class=\"number\">50</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> y <span class=\"operator\">=</span> runif<span class=\"punctuation\">(</span><span class=\"number\">50</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>plot <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span>plot<span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> res <span class=\"operator\">=</span> <span class=\"number\">96</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/0fa7426c91728627f36b69d91036aef0876f278c/84714/images/action-feedback/spinner-2.png\" alt=\"图8.9：你也可以为单个输出显示旋转器。请在线查看https://hadley.shinyapps.io/ms-spinner-2。\"></p>\n<p>waiter包提供了多种旋转器供你选择；你可以在<a href=\"https://rdrr.io/pkg/waiter/man/spinners.html\">?waiter::spinners</a>中查看你的选项，然后选择其中一个（例如）使用<code>Waiter$new(html = spin_ripple())</code>。</p>\n<p>一个更简单的选择是使用Dean Attali的<a href=\"https://github.com/daattali/shinycssloaders\">shinycssloaders</a>包。它使用JavaScript监听Shiny事件，因此甚至不需要服务器端代码。相反，你只需使用<a href=\"https://rdrr.io/pkg/shinycssloaders/man/withSpinner.html\">shinycssloaders::withSpinner()</a>来包装你希望在其失效时自动获得旋转器的输出。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>shinycssloaders<span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  withSpinner<span class=\"punctuation\">(</span>plotOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;plot&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  data <span class=\"operator\">&lt;-</span> eventReactive<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>go<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">3</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    data.frame<span class=\"punctuation\">(</span>x <span class=\"operator\">=</span> runif<span class=\"punctuation\">(</span><span class=\"number\">50</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> y <span class=\"operator\">=</span> runif<span class=\"punctuation\">(</span><span class=\"number\">50</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>plot <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span>plot<span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> res <span class=\"operator\">=</span> <span class=\"number\">96</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"8-4-确认和撤销\"><a href=\"#8-4-确认和撤销\" class=\"headerlink\" title=\"8.4 确认和撤销\"></a>8.4 确认和撤销</h2><p>有时某个操作可能具有潜在的危险性，你可能想要确保用户确实想要执行该操作，或者你想要在一切都太晚之前给他们一个撤销的机会。本节中的三个技巧列出了你的基本选项，并给出了一些如何在你的应用程序中实现它们的建议。</p>\n<h3 id=\"8-4-1-明确确认\"><a href=\"#8-4-1-明确确认\" class=\"headerlink\" title=\"8.4.1 明确确认\"></a>8.4.1 明确确认</h3><p>保护用户避免因误操作执行危险动作的最简单方法是要求用户进行明确的确认。最简单的方法是使用对话框，该对话框会强制用户从一组小动作中选择。在Shiny中，你可以使用<a href=\"https://rdrr.io/pkg/shiny/man/modalDialog.html\">modalDialog()</a>创建一个对话框。这被称为“模态”对话框，因为它创建了一种新的交互“模式”；在处理对话框之前，你无法与主应用程序进行交互。</p>\n<p>假设你有一个Shiny应用程序，用于从目录中删除一些文件（或从数据库中删除一些行等）。这个操作很难撤销，因此你需要确保用户确实想要这么做。你可以创建一个对话框，如图<code>8.10</code>所示，要求用户进行明确的确认，如下所示：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">modal_confirm <span class=\"operator\">&lt;-</span> modalDialog<span class=\"punctuation\">(</span></span><br><span class=\"line\">  <span class=\"string\">&quot;Are you sure you want to continue?&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  title <span class=\"operator\">=</span> <span class=\"string\">&quot;Deleting files&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  footer <span class=\"operator\">=</span> tagList<span class=\"punctuation\">(</span></span><br><span class=\"line\">    actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;cancel&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Cancel&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;ok&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Delete&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">class</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;btn btn-danger&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/1fd6b657c2fd4df4ef9de687459e433e0b6144f4/93f7d/demos/action-feedback/dialog.png\" alt=\"图 8.10：检查是否要删除某些文件的对话框。\"></p>\n<p>在创建对话框时，需要注意一些虽小但重要的细节：</p>\n<ul>\n<li><p>按钮应该怎么命名？最好描述得具体一些，因此要避免使用“是&#x2F;否”或“继续&#x2F;取消”，而应该复述关键的动词。</p>\n</li>\n<li><p>按钮应该如何排序？你是把“取消”放在前面（像Mac那样），还是把“继续”放在前面（像Windows那样）？你最好的选择是模仿大多数人将使用的平台。</p>\n</li>\n<li><p>你能让危险选项更明显吗？这里我使用了<code>class = &quot;btn btn-danger&quot;</code>来突出显示按钮。</p>\n</li>\n</ul>\n<p>Jakob Nielsen在<a href=\"http://www.useit.com/alertbox/ok-cancel.html\">http://www.useit.com/alertbox/ok-cancel.html</a>上给出了更多好建议。</p>\n<p>让我们在一个真实（尽管很简单）的应用程序中使用这个对话框。我们的用户界面暴露了一个“删除所有文件”的按钮：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;delete&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Delete all files?&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>在<code>server()</code>中有两个新的想法：</p>\n<ul>\n<li>我们使用<a href=\"https://rdrr.io/pkg/shiny/man/showModal.html\">showModal()</a>和<a href=\"https://rdrr.io/pkg/shiny/man/showModal.html\">removeModal()</a>来显示和隐藏对话框。</li>\n</ul>\n<p>我们观察由UI从<code>modal_confirm</code>生成的事件。这些对象不是静态地在ui中创建的，而是由<code>server()</code>中的<code>showModal()</code>动态添加的。在第<code>10</code>章中，你将更详细地看到这个想法。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>delete<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    showModal<span class=\"punctuation\">(</span>modal_confirm<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>ok<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;Files deleted&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    removeModal<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>cancel<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    removeModal<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"8-4-2-撤消操作\"><a href=\"#8-4-2-撤消操作\" class=\"headerlink\" title=\"8.4.2 撤消操作\"></a>8.4.2 撤消操作</h3><p>明确的确认对于很少执行且具有破坏性的操作最有用。如果你想要减少因频繁操作而产生的错误，那么应该避免使用它。例如，这种技术不适用于Twitter——如果有一个对话框说“你确定要发这条推文吗？”你会很快学会自动点击“是”，并且在发送推文10秒后注意到拼写错误时，仍然会感到同样的后悔。</p>\n<p>在这种情况下，更好的方法是在实际执行操作前等待几秒钟，给用户一个发现并撤销任何问题的机会。这并不是真正的撤销（因为你实际上没有做任何事情），但这是一个让用户能够理解的词汇。</p>\n<p>我将用一个我个人希望拥有撤销按钮的网站——Twitter来举例说明这项技术。Twitter用户界面的本质非常简单：有一个文本区域用来编辑推文，还有一个发送按钮：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  textAreaInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;message&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">    label <span class=\"operator\">=</span> <span class=\"literal\">NULL</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">    placeholder <span class=\"operator\">=</span> <span class=\"string\">&quot;What&#x27;s happening?&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    rows <span class=\"operator\">=</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;tweet&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Tweet&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>服务器函数相当复杂，需要一些我们尚未讨论过的技术。不要太担心理解代码，要专注于基本思路：我们使用一些<a href=\"https://rdrr.io/pkg/shiny/man/observeEvent.html\">observeEvent()</a>特殊的参数，以便在几秒钟后运行一些代码。主要的新想法是，我们捕获<code>observeEvent()</code>的结果并将其保存到一个变量中；这样我们就可以销毁观察者，从而确保实际发送推文的代码永远不会被执行。你可以尝试访问实时应用程序<a href=\"https://hadley.shinyapps.io/ms-undo\">https://hadley.shinyapps.io/ms-undo</a>。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runLater <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>action<span class=\"punctuation\">,</span> seconds <span class=\"operator\">=</span> <span class=\"number\">3</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span></span><br><span class=\"line\">    invalidateLater<span class=\"punctuation\">(</span>seconds <span class=\"operator\">*</span> <span class=\"number\">1000</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> action<span class=\"punctuation\">,</span> </span><br><span class=\"line\">    ignoreInit <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">    once <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">    ignoreNULL <span class=\"operator\">=</span> <span class=\"literal\">FALSE</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    autoDestroy <span class=\"operator\">=</span> <span class=\"literal\">FALSE</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  waiting <span class=\"operator\">&lt;-</span> <span class=\"literal\">NULL</span></span><br><span class=\"line\">  last_message <span class=\"operator\">&lt;-</span> <span class=\"literal\">NULL</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>tweet<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    notification <span class=\"operator\">&lt;-</span> glue<span class=\"operator\">::</span>glue<span class=\"punctuation\">(</span><span class=\"string\">&quot;Tweeted &#x27;&#123;input$message&#125;&#x27;&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    last_message <span class=\"operator\">&lt;&lt;-</span> input<span class=\"operator\">$</span>message</span><br><span class=\"line\">    updateTextAreaInput<span class=\"punctuation\">(</span>session<span class=\"punctuation\">,</span> <span class=\"string\">&quot;message&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span></span><br><span class=\"line\">      notification<span class=\"punctuation\">,</span></span><br><span class=\"line\">      action <span class=\"operator\">=</span> actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;undo&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Undo?&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      duration <span class=\"operator\">=</span> <span class=\"literal\">NULL</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      closeButton <span class=\"operator\">=</span> <span class=\"literal\">FALSE</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      id <span class=\"operator\">=</span> <span class=\"string\">&quot;tweeted&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      type <span class=\"operator\">=</span> <span class=\"string\">&quot;warning&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    waiting <span class=\"operator\">&lt;&lt;-</span> runLater<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      cat<span class=\"punctuation\">(</span><span class=\"string\">&quot;Actually sending tweet...\\n&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">      removeNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;tweeted&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>undo<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    waiting<span class=\"operator\">$</span>destroy<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;Tweet retracted&quot;</span><span class=\"punctuation\">,</span> id <span class=\"operator\">=</span> <span class=\"string\">&quot;tweeted&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    updateTextAreaInput<span class=\"punctuation\">(</span>session<span class=\"punctuation\">,</span> <span class=\"string\">&quot;message&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> last_message<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-4-3-回收站\"><a href=\"#8-4-3-回收站\" class=\"headerlink\" title=\"8.4.3 回收站\"></a>8.4.3 回收站</h3><p>对于几天后可能会后悔的操作，一种更高级的模式是在计算机上实现类似回收站或垃圾箱的功能。当你删除一个文件时，它并不会被永久删除，而是被移动到一个暂存区，需要执行另一个操作才能清空。这就像是一个强化版的“撤销”选项，你有很长的时间来后悔你的操作。这也有点像确认操作，你需要执行两个分开的操作才能使删除操作永久生效。</p>\n<p>这种技术的主要缺点是实现起来相当复杂（你需要有一个单独的“暂存区”来存储撤销操作所需的信息），并且需要用户定期干预以避免信息积累。因此，我认为除了最复杂的Shiny应用程序之外，这种技术都超出了其他应用程序的范围，所以这里我不会展示它的实现方法。</p>\n<h2 id=\"8-5-总结\"><a href=\"#8-5-总结\" class=\"headerlink\" title=\"8.5 总结\"></a>8.5 总结</h2><p>本章为你提供了一些工具，帮助你向用户传达应用程序正在发生的事情。从某种意义上说，这些技术大多是可选的。虽然你的应用程序没有它们也能工作，但它们的精心应用会对用户体验的质量产生巨大影响。当你是应用程序的唯一用户时，通常可以省略反馈，但使用它的人越多，精心设计的通知就越能发挥作用。</p>\n<p>在下一章中，你将学习如何向用户传输文件。</p>\n<h1 id=\"加关注\"><a href=\"#加关注\" class=\"headerlink\" title=\"加关注\"></a>加关注</h1><p>关注公众号“生信之巅”。</p>\n<table align=\"center\"><tr>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" alt=\"生信之巅微信公众号\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-right: 0px;margin-bottom: 5px;align: center;\"></td>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" alt=\"生信之巅小程序码\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-left: 0px;margin-bottom: 5px;align: center\"></td>\n</tr></table>\n\n\n<p><font color=\"#FF0000\"><ruby><b>敬告</b>：使用文中脚本请引用本文网址，请尊重本人的劳动成果，谢谢！<rt><b>Notice</b>: When you use the scripts in this article, please cite the link of this webpage. Thank you!</rt></ruby></font></p>\n","categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"编程","path":"api/tags/编程.json"},{"name":"Shiny入门系列","path":"api/tags/Shiny入门系列.json"}]}