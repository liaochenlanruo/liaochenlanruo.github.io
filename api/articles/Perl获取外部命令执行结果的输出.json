{"title":"Perl获取外部命令执行结果的输出","slug":"Perl获取外部命令执行结果的输出","date":"2019-04-19T07:54:38.000Z","updated":"2024-03-11T13:07:17.323Z","comments":true,"path":"api/articles/Perl获取外部命令执行结果的输出.json","excerpt":"有时候perl脚本需要与Linux外部命令进行交互，本文讲解如何将外部命令的执行结果的输出（此处指的不是运行结果的返回值，而是标准输出上的内容之类）赋给perl变量。","covers":null,"content":"<p>有时候perl脚本需要与Linux外部命令进行交互，本文讲解如何将外部命令的执行结果的输出（此处指的不是运行结果的返回值，而是标准输出上的内容之类）赋给perl变量。</p>\n<span id=\"more\"></span>\n<p>首先需要了解perl调用shell命令的三种方式：</p>\n</br>\n**1. system**\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">system(<span class=\"string\">&quot;command&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n</br>\n通过system运行得到的结果是一个返回值，其实是一串数字，若外部命令运行成功，则返回值为“0”，若运行失败，则返回非0的值。\n\n</br>\n**2. 反引号** （ESC下面的那个键）\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"built_in\">command</span>`;</span><br></pre></td></tr></table></figure>\n\n</br>\n通过反引号运行，会返回shell运行结果的输出，下面的脚本通过“which”查询“COG_2014.phr”的绝对路径，并将其赋值给`$path`。然后通过正则表达式获取“COG_2014.phr”所在的目录的路径，并将其赋值给变量`$cogdb_dir`。\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my <span class=\"variable\">$cogdb_dir</span>;</span><br><span class=\"line\">my <span class=\"variable\">$path</span> = `<span class=\"built_in\">which</span> COG_2014.phr`;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$path</span>=~/(.+)COG_2014.*/) &#123;</span><br><span class=\"line\">\t<span class=\"variable\">$cogdb_dir</span> = <span class=\"variable\">$1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"variable\">$cogdb_dir</span>;</span><br></pre></td></tr></table></figure>\n\n</br>\n**3. exec**\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">exec</span>(<span class=\"string\">&quot;command&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n</br>\nexec与system相似，但是执行完exec命令之后，perl会终止运行，不再执行后续的代码。\n","more":"<p>首先需要了解perl调用shell命令的三种方式：</p>\n</br>\n**1. system**\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">system(<span class=\"string\">&quot;command&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n</br>\n通过system运行得到的结果是一个返回值，其实是一串数字，若外部命令运行成功，则返回值为“0”，若运行失败，则返回非0的值。\n\n</br>\n**2. 反引号** （ESC下面的那个键）\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"built_in\">command</span>`;</span><br></pre></td></tr></table></figure>\n\n</br>\n通过反引号运行，会返回shell运行结果的输出，下面的脚本通过“which”查询“COG_2014.phr”的绝对路径，并将其赋值给`$path`。然后通过正则表达式获取“COG_2014.phr”所在的目录的路径，并将其赋值给变量`$cogdb_dir`。\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my <span class=\"variable\">$cogdb_dir</span>;</span><br><span class=\"line\">my <span class=\"variable\">$path</span> = `<span class=\"built_in\">which</span> COG_2014.phr`;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$path</span>=~/(.+)COG_2014.*/) &#123;</span><br><span class=\"line\">\t<span class=\"variable\">$cogdb_dir</span> = <span class=\"variable\">$1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"variable\">$cogdb_dir</span>;</span><br></pre></td></tr></table></figure>\n\n</br>\n**3. exec**\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">exec</span>(<span class=\"string\">&quot;command&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n</br>\nexec与system相似，但是执行完exec命令之后，perl会终止运行，不再执行后续的代码。","categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"Linux","path":"api/tags/Linux.json"},{"name":"perl","path":"api/tags/perl.json"},{"name":"编程","path":"api/tags/编程.json"}]}