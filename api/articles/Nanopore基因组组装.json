{"title":"Nanopore基因组组装","slug":"Nanopore基因组组装","date":"2022-02-26T02:37:14.000Z","updated":"2024-03-11T13:07:17.000Z","comments":true,"path":"api/articles/Nanopore基因组组装.json","excerpt":null,"covers":["https://github.com/rrwick/Trycycler/wiki/images/dotplots.png"],"content":"<h1 id=\"安装软件\"><a href=\"#安装软件\" class=\"headerlink\" title=\"安装软件\"></a>安装软件</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mamba install miniasm minipolish raven-assembler flye medaka python=3.8 fastp bwa masurca trycycler</span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/rrwick/Minipolish.git</span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/rrwick/Polypolish.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> Polypolish</span><br><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install cargo</span><br><span class=\"line\">cargo build --release</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Step-1-Generating-assemblies\"><a href=\"#Step-1-Generating-assemblies\" class=\"headerlink\" title=\"Step 1: Generating assemblies\"></a>Step 1: <a href=\"https://github.com/rrwick/Trycycler/wiki/Generating-assemblies\">Generating assemblies</a></h1><h2 id=\"准备三代数据\"><a href=\"#准备三代数据\" class=\"headerlink\" title=\"准备三代数据\"></a>准备三代数据</h2><p>如果是含有多个文件的话，需要合并到一个文件里</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> WHQ17/barcode14/*.fastq &gt; WHQ17.fastq</span><br></pre></td></tr></table></figure>\n<h2 id=\"质控\"><a href=\"#质控\" class=\"headerlink\" title=\"质控\"></a>质控</h2><p>This will discard short reads (less than 1 kbp) and very bad reads (the worst 5%)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filtlong --min_length 1000 --keep_percent 95 WHQ17.fastq &gt; WHQ17.good.fastq</span><br></pre></td></tr></table></figure>\n<h2 id=\"取子集-Subsampling-reads\"><a href=\"#取子集-Subsampling-reads\" class=\"headerlink\" title=\"取子集 Subsampling reads\"></a>取子集 Subsampling reads</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trycycler subsample --reads WHQ17.good.fastq --out_dir read_subsets --threads 8</span><br></pre></td></tr></table></figure>\n<p>+++ info 参数解析</p>\n<ul>\n<li>--count: 输出的Reads子集的数量，大部分情况使用默认的12即可。</li>\n<li>--genome_size: 预估的基因组大小 (e.g. –genome_size 5.5m)。不提供的话会通过miniasm 组装基因组，以估计大小，但是速度会慢。此值用于计算reads深度，不需要很精确，10%的错误是允许的。</li>\n<li>--min_read_depth: 允许的最小read深度，控制着取子集的深度。</li>\n<li>--threads: 使用的线程数（越大越好），影响miniasm 的组装速度。<br>+++</li>\n</ul>\n<p><strong>得到</strong>：<code>read_subsets/sample_*.fastq</code></p>\n<h2 id=\"组装-Generating-assemblies\"><a href=\"#组装-Generating-assemblies\" class=\"headerlink\" title=\"组装 Generating assemblies\"></a>组装 Generating assemblies</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">threads=6  <span class=\"comment\"># change as appropriate for your system</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> assemblies</span><br><span class=\"line\"></span><br><span class=\"line\">flye --nano-raw read_subsets/sample_01.fastq --threads <span class=\"string\">&quot;<span class=\"variable\">$threads</span>&quot;</span> --out-dir assembly_01 &amp;&amp; <span class=\"built_in\">cp</span> assembly_01/assembly.fasta assemblies/assembly_01.fasta &amp;&amp; <span class=\"built_in\">rm</span> -r assembly_01</span><br><span class=\"line\">./Minipolish/miniasm_and_minipolish.sh read_subsets/sample_02.fastq <span class=\"string\">&quot;<span class=\"variable\">$threads</span>&quot;</span> &gt; assembly_02.gfa &amp;&amp; any2fasta assembly_02.gfa &gt; assemblies/assembly_02.fasta &amp;&amp; <span class=\"built_in\">rm</span> assembly_02.gfa</span><br><span class=\"line\">raven --threads <span class=\"string\">&quot;<span class=\"variable\">$threads</span>&quot;</span> read_subsets/sample_03.fastq &gt; assemblies/assembly_03.fasta &amp;&amp; <span class=\"built_in\">rm</span> raven.cereal</span><br><span class=\"line\"></span><br><span class=\"line\">flye --nano-raw read_subsets/sample_04.fastq --threads <span class=\"string\">&quot;<span class=\"variable\">$threads</span>&quot;</span> --out-dir assembly_04 &amp;&amp; <span class=\"built_in\">cp</span> assembly_04/assembly.fasta assemblies/assembly_04.fasta &amp;&amp; <span class=\"built_in\">rm</span> -r assembly_04</span><br><span class=\"line\">./Minipolish/miniasm_and_minipolish.sh read_subsets/sample_05.fastq <span class=\"string\">&quot;<span class=\"variable\">$threads</span>&quot;</span> &gt; assembly_05.gfa &amp;&amp; any2fasta assembly_05.gfa &gt; assemblies/assembly_05.fasta &amp;&amp; <span class=\"built_in\">rm</span> assembly_05.gfa</span><br><span class=\"line\">raven --threads <span class=\"string\">&quot;<span class=\"variable\">$threads</span>&quot;</span> read_subsets/sample_06.fastq &gt; assemblies/assembly_06.fasta &amp;&amp; <span class=\"built_in\">rm</span> raven.cereal</span><br><span class=\"line\"></span><br><span class=\"line\">flye --nano-raw read_subsets/sample_07.fastq --threads <span class=\"string\">&quot;<span class=\"variable\">$threads</span>&quot;</span> --out-dir assembly_07 &amp;&amp; <span class=\"built_in\">cp</span> assembly_07/assembly.fasta assemblies/assembly_07.fasta &amp;&amp; <span class=\"built_in\">rm</span> -r assembly_07</span><br><span class=\"line\">./Minipolish/miniasm_and_minipolish.sh read_subsets/sample_08.fastq <span class=\"string\">&quot;<span class=\"variable\">$threads</span>&quot;</span> &gt; assembly_08.gfa &amp;&amp; any2fasta assembly_08.gfa &gt; assemblies/assembly_08.fasta &amp;&amp; <span class=\"built_in\">rm</span> assembly_08.gfa</span><br><span class=\"line\">raven --threads <span class=\"string\">&quot;<span class=\"variable\">$threads</span>&quot;</span> read_subsets/sample_09.fastq &gt; assemblies/assembly_09.fasta &amp;&amp; <span class=\"built_in\">rm</span> raven.cereal</span><br><span class=\"line\"></span><br><span class=\"line\">flye --nano-raw read_subsets/sample_10.fastq --threads <span class=\"string\">&quot;<span class=\"variable\">$threads</span>&quot;</span> --out-dir assembly_10 &amp;&amp; <span class=\"built_in\">cp</span> assembly_10/assembly.fasta assemblies/assembly_10.fasta &amp;&amp; <span class=\"built_in\">rm</span> -r assembly_10</span><br><span class=\"line\">./Minipolish/miniasm_and_minipolish.sh read_subsets/sample_11.fastq <span class=\"string\">&quot;<span class=\"variable\">$threads</span>&quot;</span> &gt; assembly_11.gfa &amp;&amp; any2fasta assembly_11.gfa &gt; assemblies/assembly_11.fasta &amp;&amp; <span class=\"built_in\">rm</span> assembly_11.gfa</span><br><span class=\"line\">raven --threads <span class=\"string\">&quot;<span class=\"variable\">$threads</span>&quot;</span> read_subsets/sample_12.fastq &gt; assemblies/assembly_12.fasta &amp;&amp; <span class=\"built_in\">rm</span> raven.cereal</span><br></pre></td></tr></table></figure>\n\n<p><strong>得到</strong>：<code>assemblies/*.fasta</code></p>\n<p><strong>删除中间文件：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rm</span> -r read_subsets</span><br></pre></td></tr></table></figure>\n<h1 id=\"Step-2-Clustering-contigs\"><a href=\"#Step-2-Clustering-contigs\" class=\"headerlink\" title=\"Step 2: Clustering contigs\"></a><a href=\"https://github.com/rrwick/Trycycler/wiki/Clustering-contigs\">Step 2: Clustering contigs</a></h1><h2 id=\"Running-Trycycler-cluster\"><a href=\"#Running-Trycycler-cluster\" class=\"headerlink\" title=\"Running Trycycler cluster\"></a>Running Trycycler cluster</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trycycler cluster --assemblies assemblies/*.fasta --reads WHQ17.good.fastq --out_dir trycycler --threads 10</span><br></pre></td></tr></table></figure>\n<p>+++ info 参数解析</p>\n<ul>\n<li>--min_contig_len: 最小contig长度（默认1000），短于该长度的contigs将被丢弃。如果你的基因组含有长度更小的质粒，将该值设低。</li>\n<li>--min_contig_depth: 覆盖contigs的reads的最低深度。For example, if an assembly has a mean depth of 90× and this setting is 0.1 (the default), then any contig with &lt;9× depth will be removed.</li>\n<li>--distance: this is the Mash distance threshold used when defining clusters, and the default threshold is 0.01. Smaller thresholds (e.g. 0.005) can result in a larger number of tighter clusters. Larger thresholds (e.g. 0.02) can result in a smaller number of looser clusters.</li>\n<li>--threads: this is how many threads Trycycler will use for read alignment. It will only affect the speed performance, so you’ll probably want to use as many threads as you have available.<br>+++</li>\n</ul>\n<h2 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h2><ul>\n<li><code>trycycler/contigs.phylip</code>: a matrix of the Mash distances between all contigs in PHYLIP format.</li>\n<li><code>trycycler/contigs.newick</code>: a FastME tree of the contigs built from the distance matrix. This can be visualised in a phylogenetic tree viewer such as FigTree, Dendroscope or Archaeopteryx.</li>\n<li>One directory for each of the clusters: <code>trycycler/cluster_001, trycycler/cluster_002, etc</code>. These directories will each contain a subdirectory named 1_contigs which includes the FASTA files for the contigs in the cluster.</li>\n</ul>\n<h2 id=\"筛选-clusters\"><a href=\"#筛选-clusters\" class=\"headerlink\" title=\"筛选 clusters\"></a><font color=\"#FF0000\">筛选 clusters</font></h2><p>将<code>contigs.newick</code>导入进化树查看软件，肉眼观察，主观意愿挑选，有问题的cluster删掉。参照<a href=\"https://github.com/rrwick/Trycycler/wiki/Clustering-contigs\">Trycycler官方说明</a>。</p>\n<h1 id=\"Step-3-Reconciling-contigs\"><a href=\"#Step-3-Reconciling-contigs\" class=\"headerlink\" title=\"Step 3: Reconciling contigs\"></a>Step 3: <a href=\"https://github.com/rrwick/Trycycler/wiki/Reconciling-contigs\">Reconciling contigs</a></h1><h2 id=\"Running-Trycycler-reconcile\"><a href=\"#Running-Trycycler-reconcile\" class=\"headerlink\" title=\"Running Trycycler reconcile\"></a>Running Trycycler reconcile</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trycycler reconcile --reads WHQ17.good.fastq --cluster_dir trycycler/cluster_001 --threads 10</span><br><span class=\"line\">trycycler reconcile --reads WHQ17.good.fastq --cluster_dir trycycler/cluster_002 --threads 10</span><br><span class=\"line\">trycycler reconcile --reads WHQ17.good.fastq --cluster_dir trycycler/cluster_003 --threads 10</span><br><span class=\"line\">trycycler reconcile --reads WHQ17.good.fastq --cluster_dir trycycler/cluster_004 --threads 10</span><br><span class=\"line\">trycycler reconcile --reads WHQ17.good.fastq --cluster_dir trycycler/cluster_005 --threads 10</span><br><span class=\"line\">trycycler reconcile --reads WHQ17.good.fastq --cluster_dir trycycler/cluster_006 --threads 10</span><br></pre></td></tr></table></figure>\n<p>+++ info 参数解析<br>General settings:</p>\n<ul>\n<li>--linear: use this option if your input contigs are not circular. It will disable the circularisation-correction steps in Trycycler reconcile.</li>\n<li>--threads: this is how many threads Trycycler will use for read alignment. It will only affect the speed performance, so you’ll probably want to use as many threads as you have available.</li>\n<li>--verbose: use this flag to display extra output. Mainly there for debugging purposes.</li>\n</ul>\n<p>Initial check:</p>\n<ul>\n<li>--max_mash_dist: if any of the sequences have a pairwise Mash distance of more than this (default &#x3D; 0.02), then the contigs will fail the initial check.</li>\n<li>--max_length_diff: if any of the sequences have a pairwise relative length factor of more than this, then the contigs will fail the initial check. For example, if set to 1.1 (the default), then no contig can be more than 10% longer than any other.</li>\n</ul>\n<p>Circularisation:</p>\n<ul>\n<li>--max_add_seq and –max_add_seq_percent: these control how much sequence Trycycler is willing to add to a contig to circularise it. For example, if they are set to 1000 and 5 (the defaults), then Trycycler will be willing to add up to 1000 bp or 5% of a contig’s length (whichever is smaller) to circularise it. Any contig which requires more than 1000 bp or 5% of its length added to circularise will cause Trycycler reconcile to fail.</li>\n<li>--max_trim_seq and –max_trim_seq_percent: these control how much sequence Trycycler is willing to remove from a contig to circularise it. For example, if they are set to 50000 and 10 (the defaults), then Trycycler will be willing to remove up to 50000 bp or 10% of a contig’s length (whichever is smaller) to circularise it. Any contig which requires more than 50000 bp or 10% of its length removed to circularise will cause Trycycler reconcile to fail.</li>\n</ul>\n<p>Final check:</p>\n<ul>\n<li>--min_identity: if any of the sequences have a pairwise global alignment percent identity of less than this (default &#x3D; 98), then the contigs will fail the final check.</li>\n<li>--max_indel_size: if any of the sequences have a pairwise alignment indel size of more than this (default &#x3D; 250), then the contigs will fail the final check.<br>+++</li>\n</ul>\n<h2 id=\"输出-1\"><a href=\"#输出-1\" class=\"headerlink\" title=\"输出\"></a>输出</h2><p>When finished, Trycycler reconcile will make <code>2_all_seqs.fasta</code> in the cluster directory, a multi-FASTA file containing each of the contigs ready for multiple sequence alignment.</p>\n<h2 id=\"Dotplots\"><a href=\"#Dotplots\" class=\"headerlink\" title=\"Dotplots\"></a>Dotplots</h2><p>You can optionally run Trycycler dotplot on any problematic clusters to visualise the relationship between the sequences. For example:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trycycler dotplot --cluster_dir trycycler/cluster_002</span><br></pre></td></tr></table></figure>\n\n<p>This will create an image file (dotplots.png) in the cluster directory with a dotplot for all pairwise combinations of sequences. Same-strand k-mer matches are drawn in blue, and opposite-strand k-mer matches are drawn in red. For example:</p>\n<p><img src=\"https://github.com/rrwick/Trycycler/wiki/images/dotplots.png\" class=\"lazyload placeholder\" data-srcset=\"https://github.com/rrwick/Trycycler/wiki/images/dotplots.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"Dotplot\"><br>In the above example (taken from cluster 2 of the good demo dataset), you can see that most of the sequences are in very nice agreement with each other. They have shifted start positions relative to each other, but that’s expected for contigs of a circular sequence. One of the contigs (E_contig_2) is on the opposite strand as the others, but that too is normal. Sequence D_contig_2, however, is a problem! It contains two entire copies of the same sequence, visible in the dotplot with itself and the dotplots with other sequences. It will need to be excluded or trimmed in order for reconciliation to succeed.</p>\n<h1 id=\"Step-4-Multiple-sequence-alignment\"><a href=\"#Step-4-Multiple-sequence-alignment\" class=\"headerlink\" title=\"Step 4: Multiple sequence alignment\"></a><a href=\"https://github.com/rrwick/Trycycler/wiki/Multiple-sequence-alignment\">Step 4: Multiple sequence alignment</a></h1><h2 id=\"Running-Trycycler-msa\"><a href=\"#Running-Trycycler-msa\" class=\"headerlink\" title=\"Running Trycycler msa\"></a>Running Trycycler msa</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trycycler msa --cluster_dir trycycler/cluster_001 --threads 8</span><br><span class=\"line\">trycycler msa --cluster_dir trycycler/cluster_002 --threads 8</span><br><span class=\"line\">trycycler msa --cluster_dir trycycler/cluster_003 --threads 8</span><br><span class=\"line\">trycycler msa --cluster_dir trycycler/cluster_004 --threads 8</span><br><span class=\"line\">trycycler msa --cluster_dir trycycler/cluster_005 --threads 8</span><br><span class=\"line\">trycycler msa --cluster_dir trycycler/cluster_006 --threads 8</span><br></pre></td></tr></table></figure>\n<p>+++ info 参数解析<br>除了线程数外，其他三个参数可以用默认值。</p>\n<ul>\n<li>--kmer: the k-mer size used for sequence partitioning (default &#x3D; 32).</li>\n<li>--step: the step size used for sequence partitioning (default &#x3D; 1000).</li>\n<li>--lookahead: the look-ahead margin used for sequence partitioning (default &#x3D; 10000).</li>\n<li>--threads: this is how many parallel instances of MUSCLE will be used when aligning the sequence partitions. It will only affect the speed performance, so you’ll probably want to use as many threads as you have available.<br>+++</li>\n</ul>\n<h2 id=\"输出-2\"><a href=\"#输出-2\" class=\"headerlink\" title=\"输出\"></a>输出</h2><p>When finished, Trycycler reconcile will make a <code>3_msa.fasta</code> file in the cluster directory, a FASTA-formatted multiple sequence alignment of the contigs ready for use in generating a consensus. </p>\n<h1 id=\"Step-5-Partitioning-reads\"><a href=\"#Step-5-Partitioning-reads\" class=\"headerlink\" title=\"Step 5: Partitioning reads\"></a><a href=\"https://github.com/rrwick/Trycycler/wiki/Partitioning-reads\">Step 5: Partitioning reads</a></h1><h2 id=\"Running-Trycycler-partition\"><a href=\"#Running-Trycycler-partition\" class=\"headerlink\" title=\"Running Trycycler partition\"></a>Running Trycycler partition</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trycycler partition --reads WHQ17.good.fastq --cluster_dirs trycycler/cluster_* --threads 8</span><br></pre></td></tr></table></figure>\n\n<p>+++ info 参数解析</p>\n<ul>\n<li>--min_aligned_len: reads with less than this many bases aligned (default &#x3D; 1000) will be ignored.</li>\n<li>--min_read_cov: reads with less than this percentage of their length covered by alignments (default &#x3D; 90.0) will be ignored.</li>\n<li>--threads: this is how many threads Trycycler will use for read alignment. It will only affect the speed performance, so you’ll probably want to use as many threads as you have available.<br>+++</li>\n</ul>\n<h2 id=\"输出-3\"><a href=\"#输出-3\" class=\"headerlink\" title=\"输出\"></a>输出</h2><p>After Trycycler partition completes, each of the cluster directories should have a <code>4_reads.fastq</code> file which contains its share of the total reads.</p>\n<h1 id=\"Step-6-Generating-a-consensus\"><a href=\"#Step-6-Generating-a-consensus\" class=\"headerlink\" title=\"Step 6: Generating a consensus\"></a><a href=\"https://github.com/rrwick/Trycycler/wiki/Generating-a-consensus\">Step 6: Generating a consensus</a></h1><h2 id=\"Running-Trycycler-consensus\"><a href=\"#Running-Trycycler-consensus\" class=\"headerlink\" title=\"Running Trycycler consensus\"></a>Running Trycycler consensus</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trycycler consensus --cluster_dir trycycler/cluster_001 --threads 8</span><br><span class=\"line\">trycycler consensus --cluster_dir trycycler/cluster_002 --threads 8</span><br><span class=\"line\">trycycler consensus --cluster_dir trycycler/cluster_003 --threads 8</span><br><span class=\"line\">trycycler consensus --cluster_dir trycycler/cluster_004 --threads 8</span><br><span class=\"line\">trycycler consensus --cluster_dir trycycler/cluster_005 --threads 8</span><br><span class=\"line\">trycycler consensus --cluster_dir trycycler/cluster_006 --threads 8</span><br></pre></td></tr></table></figure>\n<p>+++ info 参数解析</p>\n<ul>\n<li>--linear: use this option if your input contigs are not circular. It will disable the circularisation steps when aligning reads and choosing variants.</li>\n<li>--min_aligned_len: reads with less than this many bases aligned (default &#x3D; 1000) will be ignored.</li>\n<li>--min_read_cov: reads with less than this percentage of their length aligned (default &#x3D; 90.0) will be ignored.</li>\n<li>--threads: this is how many threads Trycycler will use for read alignment. It will only affect the speed performance, so you’ll probably want to use as many threads as you have available.</li>\n<li>--verbose: use this flag to display extra output. For every read-assessed variant, this will show the alternative sequences and their read alignment scores.<br>+++</li>\n</ul>\n<h2 id=\"输出-4\"><a href=\"#输出-4\" class=\"headerlink\" title=\"输出\"></a>输出</h2><p>When finished, you should have a <code>7_final_consensus.fasta</code> file in each of your cluster directories. If you have multiple clusters, you can combine their consensus sequences into a single FASTA file like this:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> trycycler/cluster_*/7_final_consensus.fasta &gt; trycycler/consensus.fasta</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Step-7-Polishing-after-Trycycler\"><a href=\"#Step-7-Polishing-after-Trycycler\" class=\"headerlink\" title=\"Step 7: Polishing after Trycycler\"></a><a href=\"https://github.com/rrwick/Trycycler/wiki/Polishing-after-Trycycler\">Step 7: Polishing after Trycycler</a></h1><h2 id=\"Medaka-需要知道测序仪信息basecalling\"><a href=\"#Medaka-需要知道测序仪信息basecalling\" class=\"headerlink\" title=\"Medaka (需要知道测序仪信息basecalling)\"></a>Medaka (需要知道测序仪信息basecalling)</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> trycycler/cluster_*; <span class=\"keyword\">do</span></span><br><span class=\"line\">    medaka_consensus -i <span class=\"string\">&quot;<span class=\"variable\">$c</span>&quot;</span>/4_reads.fastq -d <span class=\"string\">&quot;<span class=\"variable\">$c</span>&quot;</span>/7_final_consensus.fasta -o <span class=\"string\">&quot;<span class=\"variable\">$c</span>&quot;</span>/medaka -m r941_prom_hac_g507 -t 8</span><br><span class=\"line\">    <span class=\"built_in\">mv</span> <span class=\"string\">&quot;<span class=\"variable\">$c</span>&quot;</span>/medaka/consensus.fasta <span class=\"string\">&quot;<span class=\"variable\">$c</span>&quot;</span>/8_medaka.fasta</span><br><span class=\"line\">    <span class=\"built_in\">rm</span> -r <span class=\"string\">&quot;<span class=\"variable\">$c</span>&quot;</span>/medaka <span class=\"string\">&quot;<span class=\"variable\">$c</span>&quot;</span>/*.fai <span class=\"string\">&quot;<span class=\"variable\">$c</span>&quot;</span>/*.mmi  <span class=\"comment\"># clean up</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> trycycler/cluster_*/8_medaka.fasta &gt; trycycler/consensus.fasta</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"Short-read-polishing\"><a href=\"#Short-read-polishing\" class=\"headerlink\" title=\"Short-read polishing\"></a>Short-read polishing</h2><h3 id=\"Step-1-read-QC\"><a href=\"#Step-1-read-QC\" class=\"headerlink\" title=\"Step 1: read QC\"></a>Step 1: read QC</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fastp --in1 WHQ17_BDMS190038054-1a_1.clean.fq.gz --in2 WHQ17_BDMS190038054-1a_2.clean.fq.gz --out1 WHQ17_1.fastq.gz --out2 WHQ17_2.fastq.gz --unpaired1 WHQ17_u.fastq.gz --unpaired2 WHQ17-u.fastq.gz</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Step-2-Polypolish\"><a href=\"#Step-2-Polypolish\" class=\"headerlink\" title=\"Step 2: Polypolish\"></a>Step 2: Polypolish</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bwa index trycycler/consensus.fasta</span><br><span class=\"line\">bwa mem -t 8 -a trycycler/consensus.fasta WHQ17_1.fastq.gz &gt; alignments_1.sam</span><br><span class=\"line\">bwa mem -t 8 -a trycycler/consensus.fasta WHQ17_2.fastq.gz &gt; alignments_2.sam</span><br><span class=\"line\">polypolish trycycler/consensus.fasta alignments_1.sam alignments_2.sam &gt; trycycler/polypolish.fasta</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Step-3-POLCA\"><a href=\"#Step-3-POLCA\" class=\"headerlink\" title=\"Step 3: POLCA\"></a>Step 3: POLCA</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这一步报错，暂未执行</span></span><br><span class=\"line\">polca.sh -a trycycler/polypolish.fasta -r <span class=\"string\">&quot;WHQ17_1.fastq.gz WHQ17_2.fastq.gz&quot;</span> -t 8 -m 10G</span><br><span class=\"line\"><span class=\"built_in\">mv</span> *.PolcaCorrected.fa polypolish_polca.fasta</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"删除无用信息\"><a href=\"#删除无用信息\" class=\"headerlink\" title=\"删除无用信息\"></a>删除无用信息</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rm</span> alignments_1.sam alignments_2.sam fastp.*</span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf *.read_subsets</span><br></pre></td></tr></table></figure>\n","more":"<h1 id=\"安装软件\"><a href=\"#安装软件\" class=\"headerlink\" title=\"安装软件\"></a>安装软件</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mamba install miniasm minipolish raven-assembler flye medaka python=3.8 fastp bwa masurca trycycler</span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/rrwick/Minipolish.git</span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/rrwick/Polypolish.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> Polypolish</span><br><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install cargo</span><br><span class=\"line\">cargo build --release</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Step-1-Generating-assemblies\"><a href=\"#Step-1-Generating-assemblies\" class=\"headerlink\" title=\"Step 1: Generating assemblies\"></a>Step 1: <a href=\"https://github.com/rrwick/Trycycler/wiki/Generating-assemblies\">Generating assemblies</a></h1><h2 id=\"准备三代数据\"><a href=\"#准备三代数据\" class=\"headerlink\" title=\"准备三代数据\"></a>准备三代数据</h2><p>如果是含有多个文件的话，需要合并到一个文件里</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> WHQ17/barcode14/*.fastq &gt; WHQ17.fastq</span><br></pre></td></tr></table></figure>\n<h2 id=\"质控\"><a href=\"#质控\" class=\"headerlink\" title=\"质控\"></a>质控</h2><p>This will discard short reads (less than 1 kbp) and very bad reads (the worst 5%)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filtlong --min_length 1000 --keep_percent 95 WHQ17.fastq &gt; WHQ17.good.fastq</span><br></pre></td></tr></table></figure>\n<h2 id=\"取子集-Subsampling-reads\"><a href=\"#取子集-Subsampling-reads\" class=\"headerlink\" title=\"取子集 Subsampling reads\"></a>取子集 Subsampling reads</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trycycler subsample --reads WHQ17.good.fastq --out_dir read_subsets --threads 8</span><br></pre></td></tr></table></figure>\n<p>+++ info 参数解析</p>\n<ul>\n<li>--count: 输出的Reads子集的数量，大部分情况使用默认的12即可。</li>\n<li>--genome_size: 预估的基因组大小 (e.g. –genome_size 5.5m)。不提供的话会通过miniasm 组装基因组，以估计大小，但是速度会慢。此值用于计算reads深度，不需要很精确，10%的错误是允许的。</li>\n<li>--min_read_depth: 允许的最小read深度，控制着取子集的深度。</li>\n<li>--threads: 使用的线程数（越大越好），影响miniasm 的组装速度。<br>+++</li>\n</ul>\n<p><strong>得到</strong>：<code>read_subsets/sample_*.fastq</code></p>\n<h2 id=\"组装-Generating-assemblies\"><a href=\"#组装-Generating-assemblies\" class=\"headerlink\" title=\"组装 Generating assemblies\"></a>组装 Generating assemblies</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">threads=6  <span class=\"comment\"># change as appropriate for your system</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> assemblies</span><br><span class=\"line\"></span><br><span class=\"line\">flye --nano-raw read_subsets/sample_01.fastq --threads <span class=\"string\">&quot;<span class=\"variable\">$threads</span>&quot;</span> --out-dir assembly_01 &amp;&amp; <span class=\"built_in\">cp</span> assembly_01/assembly.fasta assemblies/assembly_01.fasta &amp;&amp; <span class=\"built_in\">rm</span> -r assembly_01</span><br><span class=\"line\">./Minipolish/miniasm_and_minipolish.sh read_subsets/sample_02.fastq <span class=\"string\">&quot;<span class=\"variable\">$threads</span>&quot;</span> &gt; assembly_02.gfa &amp;&amp; any2fasta assembly_02.gfa &gt; assemblies/assembly_02.fasta &amp;&amp; <span class=\"built_in\">rm</span> assembly_02.gfa</span><br><span class=\"line\">raven --threads <span class=\"string\">&quot;<span class=\"variable\">$threads</span>&quot;</span> read_subsets/sample_03.fastq &gt; assemblies/assembly_03.fasta &amp;&amp; <span class=\"built_in\">rm</span> raven.cereal</span><br><span class=\"line\"></span><br><span class=\"line\">flye --nano-raw read_subsets/sample_04.fastq --threads <span class=\"string\">&quot;<span class=\"variable\">$threads</span>&quot;</span> --out-dir assembly_04 &amp;&amp; <span class=\"built_in\">cp</span> assembly_04/assembly.fasta assemblies/assembly_04.fasta &amp;&amp; <span class=\"built_in\">rm</span> -r assembly_04</span><br><span class=\"line\">./Minipolish/miniasm_and_minipolish.sh read_subsets/sample_05.fastq <span class=\"string\">&quot;<span class=\"variable\">$threads</span>&quot;</span> &gt; assembly_05.gfa &amp;&amp; any2fasta assembly_05.gfa &gt; assemblies/assembly_05.fasta &amp;&amp; <span class=\"built_in\">rm</span> assembly_05.gfa</span><br><span class=\"line\">raven --threads <span class=\"string\">&quot;<span class=\"variable\">$threads</span>&quot;</span> read_subsets/sample_06.fastq &gt; assemblies/assembly_06.fasta &amp;&amp; <span class=\"built_in\">rm</span> raven.cereal</span><br><span class=\"line\"></span><br><span class=\"line\">flye --nano-raw read_subsets/sample_07.fastq --threads <span class=\"string\">&quot;<span class=\"variable\">$threads</span>&quot;</span> --out-dir assembly_07 &amp;&amp; <span class=\"built_in\">cp</span> assembly_07/assembly.fasta assemblies/assembly_07.fasta &amp;&amp; <span class=\"built_in\">rm</span> -r assembly_07</span><br><span class=\"line\">./Minipolish/miniasm_and_minipolish.sh read_subsets/sample_08.fastq <span class=\"string\">&quot;<span class=\"variable\">$threads</span>&quot;</span> &gt; assembly_08.gfa &amp;&amp; any2fasta assembly_08.gfa &gt; assemblies/assembly_08.fasta &amp;&amp; <span class=\"built_in\">rm</span> assembly_08.gfa</span><br><span class=\"line\">raven --threads <span class=\"string\">&quot;<span class=\"variable\">$threads</span>&quot;</span> read_subsets/sample_09.fastq &gt; assemblies/assembly_09.fasta &amp;&amp; <span class=\"built_in\">rm</span> raven.cereal</span><br><span class=\"line\"></span><br><span class=\"line\">flye --nano-raw read_subsets/sample_10.fastq --threads <span class=\"string\">&quot;<span class=\"variable\">$threads</span>&quot;</span> --out-dir assembly_10 &amp;&amp; <span class=\"built_in\">cp</span> assembly_10/assembly.fasta assemblies/assembly_10.fasta &amp;&amp; <span class=\"built_in\">rm</span> -r assembly_10</span><br><span class=\"line\">./Minipolish/miniasm_and_minipolish.sh read_subsets/sample_11.fastq <span class=\"string\">&quot;<span class=\"variable\">$threads</span>&quot;</span> &gt; assembly_11.gfa &amp;&amp; any2fasta assembly_11.gfa &gt; assemblies/assembly_11.fasta &amp;&amp; <span class=\"built_in\">rm</span> assembly_11.gfa</span><br><span class=\"line\">raven --threads <span class=\"string\">&quot;<span class=\"variable\">$threads</span>&quot;</span> read_subsets/sample_12.fastq &gt; assemblies/assembly_12.fasta &amp;&amp; <span class=\"built_in\">rm</span> raven.cereal</span><br></pre></td></tr></table></figure>\n\n<p><strong>得到</strong>：<code>assemblies/*.fasta</code></p>\n<p><strong>删除中间文件：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rm</span> -r read_subsets</span><br></pre></td></tr></table></figure>\n<h1 id=\"Step-2-Clustering-contigs\"><a href=\"#Step-2-Clustering-contigs\" class=\"headerlink\" title=\"Step 2: Clustering contigs\"></a><a href=\"https://github.com/rrwick/Trycycler/wiki/Clustering-contigs\">Step 2: Clustering contigs</a></h1><h2 id=\"Running-Trycycler-cluster\"><a href=\"#Running-Trycycler-cluster\" class=\"headerlink\" title=\"Running Trycycler cluster\"></a>Running Trycycler cluster</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trycycler cluster --assemblies assemblies/*.fasta --reads WHQ17.good.fastq --out_dir trycycler --threads 10</span><br></pre></td></tr></table></figure>\n<p>+++ info 参数解析</p>\n<ul>\n<li>--min_contig_len: 最小contig长度（默认1000），短于该长度的contigs将被丢弃。如果你的基因组含有长度更小的质粒，将该值设低。</li>\n<li>--min_contig_depth: 覆盖contigs的reads的最低深度。For example, if an assembly has a mean depth of 90× and this setting is 0.1 (the default), then any contig with &lt;9× depth will be removed.</li>\n<li>--distance: this is the Mash distance threshold used when defining clusters, and the default threshold is 0.01. Smaller thresholds (e.g. 0.005) can result in a larger number of tighter clusters. Larger thresholds (e.g. 0.02) can result in a smaller number of looser clusters.</li>\n<li>--threads: this is how many threads Trycycler will use for read alignment. It will only affect the speed performance, so you’ll probably want to use as many threads as you have available.<br>+++</li>\n</ul>\n<h2 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h2><ul>\n<li><code>trycycler/contigs.phylip</code>: a matrix of the Mash distances between all contigs in PHYLIP format.</li>\n<li><code>trycycler/contigs.newick</code>: a FastME tree of the contigs built from the distance matrix. This can be visualised in a phylogenetic tree viewer such as FigTree, Dendroscope or Archaeopteryx.</li>\n<li>One directory for each of the clusters: <code>trycycler/cluster_001, trycycler/cluster_002, etc</code>. These directories will each contain a subdirectory named 1_contigs which includes the FASTA files for the contigs in the cluster.</li>\n</ul>\n<h2 id=\"筛选-clusters\"><a href=\"#筛选-clusters\" class=\"headerlink\" title=\"筛选 clusters\"></a><font color=\"#FF0000\">筛选 clusters</font></h2><p>将<code>contigs.newick</code>导入进化树查看软件，肉眼观察，主观意愿挑选，有问题的cluster删掉。参照<a href=\"https://github.com/rrwick/Trycycler/wiki/Clustering-contigs\">Trycycler官方说明</a>。</p>\n<h1 id=\"Step-3-Reconciling-contigs\"><a href=\"#Step-3-Reconciling-contigs\" class=\"headerlink\" title=\"Step 3: Reconciling contigs\"></a>Step 3: <a href=\"https://github.com/rrwick/Trycycler/wiki/Reconciling-contigs\">Reconciling contigs</a></h1><h2 id=\"Running-Trycycler-reconcile\"><a href=\"#Running-Trycycler-reconcile\" class=\"headerlink\" title=\"Running Trycycler reconcile\"></a>Running Trycycler reconcile</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trycycler reconcile --reads WHQ17.good.fastq --cluster_dir trycycler/cluster_001 --threads 10</span><br><span class=\"line\">trycycler reconcile --reads WHQ17.good.fastq --cluster_dir trycycler/cluster_002 --threads 10</span><br><span class=\"line\">trycycler reconcile --reads WHQ17.good.fastq --cluster_dir trycycler/cluster_003 --threads 10</span><br><span class=\"line\">trycycler reconcile --reads WHQ17.good.fastq --cluster_dir trycycler/cluster_004 --threads 10</span><br><span class=\"line\">trycycler reconcile --reads WHQ17.good.fastq --cluster_dir trycycler/cluster_005 --threads 10</span><br><span class=\"line\">trycycler reconcile --reads WHQ17.good.fastq --cluster_dir trycycler/cluster_006 --threads 10</span><br></pre></td></tr></table></figure>\n<p>+++ info 参数解析<br>General settings:</p>\n<ul>\n<li>--linear: use this option if your input contigs are not circular. It will disable the circularisation-correction steps in Trycycler reconcile.</li>\n<li>--threads: this is how many threads Trycycler will use for read alignment. It will only affect the speed performance, so you’ll probably want to use as many threads as you have available.</li>\n<li>--verbose: use this flag to display extra output. Mainly there for debugging purposes.</li>\n</ul>\n<p>Initial check:</p>\n<ul>\n<li>--max_mash_dist: if any of the sequences have a pairwise Mash distance of more than this (default &#x3D; 0.02), then the contigs will fail the initial check.</li>\n<li>--max_length_diff: if any of the sequences have a pairwise relative length factor of more than this, then the contigs will fail the initial check. For example, if set to 1.1 (the default), then no contig can be more than 10% longer than any other.</li>\n</ul>\n<p>Circularisation:</p>\n<ul>\n<li>--max_add_seq and –max_add_seq_percent: these control how much sequence Trycycler is willing to add to a contig to circularise it. For example, if they are set to 1000 and 5 (the defaults), then Trycycler will be willing to add up to 1000 bp or 5% of a contig’s length (whichever is smaller) to circularise it. Any contig which requires more than 1000 bp or 5% of its length added to circularise will cause Trycycler reconcile to fail.</li>\n<li>--max_trim_seq and –max_trim_seq_percent: these control how much sequence Trycycler is willing to remove from a contig to circularise it. For example, if they are set to 50000 and 10 (the defaults), then Trycycler will be willing to remove up to 50000 bp or 10% of a contig’s length (whichever is smaller) to circularise it. Any contig which requires more than 50000 bp or 10% of its length removed to circularise will cause Trycycler reconcile to fail.</li>\n</ul>\n<p>Final check:</p>\n<ul>\n<li>--min_identity: if any of the sequences have a pairwise global alignment percent identity of less than this (default &#x3D; 98), then the contigs will fail the final check.</li>\n<li>--max_indel_size: if any of the sequences have a pairwise alignment indel size of more than this (default &#x3D; 250), then the contigs will fail the final check.<br>+++</li>\n</ul>\n<h2 id=\"输出-1\"><a href=\"#输出-1\" class=\"headerlink\" title=\"输出\"></a>输出</h2><p>When finished, Trycycler reconcile will make <code>2_all_seqs.fasta</code> in the cluster directory, a multi-FASTA file containing each of the contigs ready for multiple sequence alignment.</p>\n<h2 id=\"Dotplots\"><a href=\"#Dotplots\" class=\"headerlink\" title=\"Dotplots\"></a>Dotplots</h2><p>You can optionally run Trycycler dotplot on any problematic clusters to visualise the relationship between the sequences. For example:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trycycler dotplot --cluster_dir trycycler/cluster_002</span><br></pre></td></tr></table></figure>\n\n<p>This will create an image file (dotplots.png) in the cluster directory with a dotplot for all pairwise combinations of sequences. Same-strand k-mer matches are drawn in blue, and opposite-strand k-mer matches are drawn in red. For example:</p>\n<p><img src=\"https://github.com/rrwick/Trycycler/wiki/images/dotplots.png\" alt=\"Dotplot\"><br>In the above example (taken from cluster 2 of the good demo dataset), you can see that most of the sequences are in very nice agreement with each other. They have shifted start positions relative to each other, but that’s expected for contigs of a circular sequence. One of the contigs (E_contig_2) is on the opposite strand as the others, but that too is normal. Sequence D_contig_2, however, is a problem! It contains two entire copies of the same sequence, visible in the dotplot with itself and the dotplots with other sequences. It will need to be excluded or trimmed in order for reconciliation to succeed.</p>\n<h1 id=\"Step-4-Multiple-sequence-alignment\"><a href=\"#Step-4-Multiple-sequence-alignment\" class=\"headerlink\" title=\"Step 4: Multiple sequence alignment\"></a><a href=\"https://github.com/rrwick/Trycycler/wiki/Multiple-sequence-alignment\">Step 4: Multiple sequence alignment</a></h1><h2 id=\"Running-Trycycler-msa\"><a href=\"#Running-Trycycler-msa\" class=\"headerlink\" title=\"Running Trycycler msa\"></a>Running Trycycler msa</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trycycler msa --cluster_dir trycycler/cluster_001 --threads 8</span><br><span class=\"line\">trycycler msa --cluster_dir trycycler/cluster_002 --threads 8</span><br><span class=\"line\">trycycler msa --cluster_dir trycycler/cluster_003 --threads 8</span><br><span class=\"line\">trycycler msa --cluster_dir trycycler/cluster_004 --threads 8</span><br><span class=\"line\">trycycler msa --cluster_dir trycycler/cluster_005 --threads 8</span><br><span class=\"line\">trycycler msa --cluster_dir trycycler/cluster_006 --threads 8</span><br></pre></td></tr></table></figure>\n<p>+++ info 参数解析<br>除了线程数外，其他三个参数可以用默认值。</p>\n<ul>\n<li>--kmer: the k-mer size used for sequence partitioning (default &#x3D; 32).</li>\n<li>--step: the step size used for sequence partitioning (default &#x3D; 1000).</li>\n<li>--lookahead: the look-ahead margin used for sequence partitioning (default &#x3D; 10000).</li>\n<li>--threads: this is how many parallel instances of MUSCLE will be used when aligning the sequence partitions. It will only affect the speed performance, so you’ll probably want to use as many threads as you have available.<br>+++</li>\n</ul>\n<h2 id=\"输出-2\"><a href=\"#输出-2\" class=\"headerlink\" title=\"输出\"></a>输出</h2><p>When finished, Trycycler reconcile will make a <code>3_msa.fasta</code> file in the cluster directory, a FASTA-formatted multiple sequence alignment of the contigs ready for use in generating a consensus. </p>\n<h1 id=\"Step-5-Partitioning-reads\"><a href=\"#Step-5-Partitioning-reads\" class=\"headerlink\" title=\"Step 5: Partitioning reads\"></a><a href=\"https://github.com/rrwick/Trycycler/wiki/Partitioning-reads\">Step 5: Partitioning reads</a></h1><h2 id=\"Running-Trycycler-partition\"><a href=\"#Running-Trycycler-partition\" class=\"headerlink\" title=\"Running Trycycler partition\"></a>Running Trycycler partition</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trycycler partition --reads WHQ17.good.fastq --cluster_dirs trycycler/cluster_* --threads 8</span><br></pre></td></tr></table></figure>\n\n<p>+++ info 参数解析</p>\n<ul>\n<li>--min_aligned_len: reads with less than this many bases aligned (default &#x3D; 1000) will be ignored.</li>\n<li>--min_read_cov: reads with less than this percentage of their length covered by alignments (default &#x3D; 90.0) will be ignored.</li>\n<li>--threads: this is how many threads Trycycler will use for read alignment. It will only affect the speed performance, so you’ll probably want to use as many threads as you have available.<br>+++</li>\n</ul>\n<h2 id=\"输出-3\"><a href=\"#输出-3\" class=\"headerlink\" title=\"输出\"></a>输出</h2><p>After Trycycler partition completes, each of the cluster directories should have a <code>4_reads.fastq</code> file which contains its share of the total reads.</p>\n<h1 id=\"Step-6-Generating-a-consensus\"><a href=\"#Step-6-Generating-a-consensus\" class=\"headerlink\" title=\"Step 6: Generating a consensus\"></a><a href=\"https://github.com/rrwick/Trycycler/wiki/Generating-a-consensus\">Step 6: Generating a consensus</a></h1><h2 id=\"Running-Trycycler-consensus\"><a href=\"#Running-Trycycler-consensus\" class=\"headerlink\" title=\"Running Trycycler consensus\"></a>Running Trycycler consensus</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trycycler consensus --cluster_dir trycycler/cluster_001 --threads 8</span><br><span class=\"line\">trycycler consensus --cluster_dir trycycler/cluster_002 --threads 8</span><br><span class=\"line\">trycycler consensus --cluster_dir trycycler/cluster_003 --threads 8</span><br><span class=\"line\">trycycler consensus --cluster_dir trycycler/cluster_004 --threads 8</span><br><span class=\"line\">trycycler consensus --cluster_dir trycycler/cluster_005 --threads 8</span><br><span class=\"line\">trycycler consensus --cluster_dir trycycler/cluster_006 --threads 8</span><br></pre></td></tr></table></figure>\n<p>+++ info 参数解析</p>\n<ul>\n<li>--linear: use this option if your input contigs are not circular. It will disable the circularisation steps when aligning reads and choosing variants.</li>\n<li>--min_aligned_len: reads with less than this many bases aligned (default &#x3D; 1000) will be ignored.</li>\n<li>--min_read_cov: reads with less than this percentage of their length aligned (default &#x3D; 90.0) will be ignored.</li>\n<li>--threads: this is how many threads Trycycler will use for read alignment. It will only affect the speed performance, so you’ll probably want to use as many threads as you have available.</li>\n<li>--verbose: use this flag to display extra output. For every read-assessed variant, this will show the alternative sequences and their read alignment scores.<br>+++</li>\n</ul>\n<h2 id=\"输出-4\"><a href=\"#输出-4\" class=\"headerlink\" title=\"输出\"></a>输出</h2><p>When finished, you should have a <code>7_final_consensus.fasta</code> file in each of your cluster directories. If you have multiple clusters, you can combine their consensus sequences into a single FASTA file like this:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> trycycler/cluster_*/7_final_consensus.fasta &gt; trycycler/consensus.fasta</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Step-7-Polishing-after-Trycycler\"><a href=\"#Step-7-Polishing-after-Trycycler\" class=\"headerlink\" title=\"Step 7: Polishing after Trycycler\"></a><a href=\"https://github.com/rrwick/Trycycler/wiki/Polishing-after-Trycycler\">Step 7: Polishing after Trycycler</a></h1><h2 id=\"Medaka-需要知道测序仪信息basecalling\"><a href=\"#Medaka-需要知道测序仪信息basecalling\" class=\"headerlink\" title=\"Medaka (需要知道测序仪信息basecalling)\"></a>Medaka (需要知道测序仪信息basecalling)</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> trycycler/cluster_*; <span class=\"keyword\">do</span></span><br><span class=\"line\">    medaka_consensus -i <span class=\"string\">&quot;<span class=\"variable\">$c</span>&quot;</span>/4_reads.fastq -d <span class=\"string\">&quot;<span class=\"variable\">$c</span>&quot;</span>/7_final_consensus.fasta -o <span class=\"string\">&quot;<span class=\"variable\">$c</span>&quot;</span>/medaka -m r941_prom_hac_g507 -t 8</span><br><span class=\"line\">    <span class=\"built_in\">mv</span> <span class=\"string\">&quot;<span class=\"variable\">$c</span>&quot;</span>/medaka/consensus.fasta <span class=\"string\">&quot;<span class=\"variable\">$c</span>&quot;</span>/8_medaka.fasta</span><br><span class=\"line\">    <span class=\"built_in\">rm</span> -r <span class=\"string\">&quot;<span class=\"variable\">$c</span>&quot;</span>/medaka <span class=\"string\">&quot;<span class=\"variable\">$c</span>&quot;</span>/*.fai <span class=\"string\">&quot;<span class=\"variable\">$c</span>&quot;</span>/*.mmi  <span class=\"comment\"># clean up</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> trycycler/cluster_*/8_medaka.fasta &gt; trycycler/consensus.fasta</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"Short-read-polishing\"><a href=\"#Short-read-polishing\" class=\"headerlink\" title=\"Short-read polishing\"></a>Short-read polishing</h2><h3 id=\"Step-1-read-QC\"><a href=\"#Step-1-read-QC\" class=\"headerlink\" title=\"Step 1: read QC\"></a>Step 1: read QC</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fastp --in1 WHQ17_BDMS190038054-1a_1.clean.fq.gz --in2 WHQ17_BDMS190038054-1a_2.clean.fq.gz --out1 WHQ17_1.fastq.gz --out2 WHQ17_2.fastq.gz --unpaired1 WHQ17_u.fastq.gz --unpaired2 WHQ17-u.fastq.gz</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Step-2-Polypolish\"><a href=\"#Step-2-Polypolish\" class=\"headerlink\" title=\"Step 2: Polypolish\"></a>Step 2: Polypolish</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bwa index trycycler/consensus.fasta</span><br><span class=\"line\">bwa mem -t 8 -a trycycler/consensus.fasta WHQ17_1.fastq.gz &gt; alignments_1.sam</span><br><span class=\"line\">bwa mem -t 8 -a trycycler/consensus.fasta WHQ17_2.fastq.gz &gt; alignments_2.sam</span><br><span class=\"line\">polypolish trycycler/consensus.fasta alignments_1.sam alignments_2.sam &gt; trycycler/polypolish.fasta</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Step-3-POLCA\"><a href=\"#Step-3-POLCA\" class=\"headerlink\" title=\"Step 3: POLCA\"></a>Step 3: POLCA</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这一步报错，暂未执行</span></span><br><span class=\"line\">polca.sh -a trycycler/polypolish.fasta -r <span class=\"string\">&quot;WHQ17_1.fastq.gz WHQ17_2.fastq.gz&quot;</span> -t 8 -m 10G</span><br><span class=\"line\"><span class=\"built_in\">mv</span> *.PolcaCorrected.fa polypolish_polca.fasta</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"删除无用信息\"><a href=\"#删除无用信息\" class=\"headerlink\" title=\"删除无用信息\"></a>删除无用信息</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rm</span> alignments_1.sam alignments_2.sam fastp.*</span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf *.read_subsets</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"生物信息","path":"api/categories/生物信息.json"}],"tags":[{"name":"WGS","path":"api/tags/WGS.json"},{"name":"生信软件","path":"api/tags/生信软件.json"}]}