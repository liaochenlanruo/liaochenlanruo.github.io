{"title":"Nanopore基因组组装","slug":"Nanopore基因组组装","date":"2022-02-26T02:37:14.000Z","updated":"2022-03-03T02:47:11.016Z","comments":true,"path":"api/articles/Nanopore基因组组装.json","excerpt":null,"covers":["https://github.com/rrwick/Trycycler/wiki/images/dotplots.png"],"content":"<h1 id=\"安装软件\"><a class=\"markdownIt-Anchor\" href=\"#安装软件\"></a> 安装软件</h1>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">mamba <span class=\"token function\">install</span> miniasm minipolish raven-assembler flye medaka <span class=\"token assign-left variable\">python</span><span class=\"token operator\">=</span><span class=\"token number\">3.8</span> fastp bwa masurca trycycler\n\n<span class=\"token function\">git</span> clone https://github.com/rrwick/Minipolish.git\n\n<span class=\"token function\">git</span> clone https://github.com/rrwick/Polypolish.git\n<span class=\"token builtin class-name\">cd</span> Polypolish\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> cargo\ncargo build --release<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"step-1-generating-assemblies\"><a class=\"markdownIt-Anchor\" href=\"#step-1-generating-assemblies\"></a> Step 1: <a href=\"https://github.com/rrwick/Trycycler/wiki/Generating-assemblies\">Generating assemblies</a></h1>\n<h2 id=\"准备三代数据\"><a class=\"markdownIt-Anchor\" href=\"#准备三代数据\"></a> 准备三代数据</h2>\n<p>如果是含有多个文件的话，需要合并到一个文件里</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> WHQ17/barcode14/*.fastq <span class=\"token operator\">></span> WHQ17.fastq<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"质控\"><a class=\"markdownIt-Anchor\" href=\"#质控\"></a> 质控</h2>\n<p>This will discard short reads (less than 1 kbp) and very bad reads (the worst 5%)</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">filtlong --min_length <span class=\"token number\">1000</span> --keep_percent <span class=\"token number\">95</span> WHQ17.fastq <span class=\"token operator\">></span> WHQ17.good.fastq<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"取子集-subsampling-reads\"><a class=\"markdownIt-Anchor\" href=\"#取子集-subsampling-reads\"></a> 取子集 Subsampling reads</h2>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">trycycler subsample --reads WHQ17.good.fastq --out_dir read_subsets --threads <span class=\"token number\">8</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<details><summary>info 参数解析</summary><div>\n<ul>\n<li>--count: 输出的 Reads 子集的数量，大部分情况使用默认的 12 即可。</li>\n<li>--genome_size: 预估的基因组大小 (e.g. --genome_size 5.5m)。不提供的话会通过 miniasm 组装基因组，以估计大小，但是速度会慢。此值用于计算 reads 深度，不需要很精确，10% 的错误是允许的。</li>\n<li>--min_read_depth: 允许的最小 read 深度，控制着取子集的深度。</li>\n<li>--threads: 使用的线程数（越大越好），影响 miniasm 的组装速度。</li>\n</ul>\n</div></details>\n<p><strong>得到</strong>： <code>read_subsets/sample_*.fastq</code></p>\n<h2 id=\"组装-generating-assemblies\"><a class=\"markdownIt-Anchor\" href=\"#组装-generating-assemblies\"></a> 组装 Generating assemblies</h2>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">threads</span><span class=\"token operator\">=</span><span class=\"token number\">6</span>  <span class=\"token comment\"># change as appropriate for your system</span>\n<span class=\"token function\">mkdir</span> assemblies\n\nflye --nano-raw read_subsets/sample_01.fastq --threads <span class=\"token string\">\"<span class=\"token variable\">$threads</span>\"</span> --out-dir assembly_01 <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">cp</span> assembly_01/assembly.fasta assemblies/assembly_01.fasta <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">rm</span> -r assembly_01\n./Minipolish/miniasm_and_minipolish.sh read_subsets/sample_02.fastq <span class=\"token string\">\"<span class=\"token variable\">$threads</span>\"</span> <span class=\"token operator\">></span> assembly_02.gfa <span class=\"token operator\">&amp;&amp;</span> any2fasta assembly_02.gfa <span class=\"token operator\">></span> assemblies/assembly_02.fasta <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">rm</span> assembly_02.gfa\nraven --threads <span class=\"token string\">\"<span class=\"token variable\">$threads</span>\"</span> read_subsets/sample_03.fastq <span class=\"token operator\">></span> assemblies/assembly_03.fasta <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">rm</span> raven.cereal\n\nflye --nano-raw read_subsets/sample_04.fastq --threads <span class=\"token string\">\"<span class=\"token variable\">$threads</span>\"</span> --out-dir assembly_04 <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">cp</span> assembly_04/assembly.fasta assemblies/assembly_04.fasta <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">rm</span> -r assembly_04\n./Minipolish/miniasm_and_minipolish.sh read_subsets/sample_05.fastq <span class=\"token string\">\"<span class=\"token variable\">$threads</span>\"</span> <span class=\"token operator\">></span> assembly_05.gfa <span class=\"token operator\">&amp;&amp;</span> any2fasta assembly_05.gfa <span class=\"token operator\">></span> assemblies/assembly_05.fasta <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">rm</span> assembly_05.gfa\nraven --threads <span class=\"token string\">\"<span class=\"token variable\">$threads</span>\"</span> read_subsets/sample_06.fastq <span class=\"token operator\">></span> assemblies/assembly_06.fasta <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">rm</span> raven.cereal\n\nflye --nano-raw read_subsets/sample_07.fastq --threads <span class=\"token string\">\"<span class=\"token variable\">$threads</span>\"</span> --out-dir assembly_07 <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">cp</span> assembly_07/assembly.fasta assemblies/assembly_07.fasta <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">rm</span> -r assembly_07\n./Minipolish/miniasm_and_minipolish.sh read_subsets/sample_08.fastq <span class=\"token string\">\"<span class=\"token variable\">$threads</span>\"</span> <span class=\"token operator\">></span> assembly_08.gfa <span class=\"token operator\">&amp;&amp;</span> any2fasta assembly_08.gfa <span class=\"token operator\">></span> assemblies/assembly_08.fasta <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">rm</span> assembly_08.gfa\nraven --threads <span class=\"token string\">\"<span class=\"token variable\">$threads</span>\"</span> read_subsets/sample_09.fastq <span class=\"token operator\">></span> assemblies/assembly_09.fasta <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">rm</span> raven.cereal\n\nflye --nano-raw read_subsets/sample_10.fastq --threads <span class=\"token string\">\"<span class=\"token variable\">$threads</span>\"</span> --out-dir assembly_10 <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">cp</span> assembly_10/assembly.fasta assemblies/assembly_10.fasta <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">rm</span> -r assembly_10\n./Minipolish/miniasm_and_minipolish.sh read_subsets/sample_11.fastq <span class=\"token string\">\"<span class=\"token variable\">$threads</span>\"</span> <span class=\"token operator\">></span> assembly_11.gfa <span class=\"token operator\">&amp;&amp;</span> any2fasta assembly_11.gfa <span class=\"token operator\">></span> assemblies/assembly_11.fasta <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">rm</span> assembly_11.gfa\nraven --threads <span class=\"token string\">\"<span class=\"token variable\">$threads</span>\"</span> read_subsets/sample_12.fastq <span class=\"token operator\">></span> assemblies/assembly_12.fasta <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">rm</span> raven.cereal<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>得到</strong>： <code>assemblies/*.fasta</code></p>\n<p><strong>删除中间文件：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">rm</span> -r read_subsets<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h1 id=\"step-2-clustering-contigs\"><a class=\"markdownIt-Anchor\" href=\"#step-2-clustering-contigs\"></a> <a href=\"https://github.com/rrwick/Trycycler/wiki/Clustering-contigs\">Step 2: Clustering contigs</a></h1>\n<h2 id=\"running-trycycler-cluster\"><a class=\"markdownIt-Anchor\" href=\"#running-trycycler-cluster\"></a> Running Trycycler cluster</h2>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">trycycler cluster --assemblies assemblies/*.fasta --reads WHQ17.good.fastq --out_dir trycycler --threads <span class=\"token number\">10</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<details><summary>info 参数解析</summary><div>\n<ul>\n<li>--min_contig_len: 最小 contig 长度（默认 1000），短于该长度的 contigs 将被丢弃。如果你的基因组含有长度更小的质粒，将该值设低。</li>\n<li>--min_contig_depth: 覆盖 contigs 的 reads 的最低深度。For example, if an assembly has a mean depth of 90× and this setting is 0.1 (the default), then any contig with &lt;9× depth will be removed.</li>\n<li>--distance: this is the Mash distance threshold used when defining clusters, and the default threshold is 0.01. Smaller thresholds (e.g. 0.005) can result in a larger number of tighter clusters. Larger thresholds (e.g. 0.02) can result in a smaller number of looser clusters.</li>\n<li>--threads: this is how many threads Trycycler will use for read alignment. It will only affect the speed performance, so you'll probably want to use as many threads as you have available.</li>\n</ul>\n</div></details>\n<h2 id=\"输出\"><a class=\"markdownIt-Anchor\" href=\"#输出\"></a> 输出</h2>\n<ul>\n<li><code>trycycler/contigs.phylip</code> : a matrix of the Mash distances between all contigs in PHYLIP format.</li>\n<li><code>trycycler/contigs.newick</code> : a FastME tree of the contigs built from the distance matrix. This can be visualised in a phylogenetic tree viewer such as FigTree, Dendroscope or Archaeopteryx.</li>\n<li>One directory for each of the clusters:  <code>trycycler/cluster_001, trycycler/cluster_002, etc</code> . These directories will each contain a subdirectory named 1_contigs which includes the FASTA files for the contigs in the cluster.</li>\n</ul>\n<h2 id=\"font-colorff0000筛选-clustersfont\"><a class=\"markdownIt-Anchor\" href=\"#font-colorff0000筛选-clustersfont\"></a> <font color=\"#FF0000\">筛选 clusters</font></h2>\n<p>将 <code>contigs.newick</code>  导入进化树查看软件，肉眼观察，主观意愿挑选，有问题的 cluster 删掉。参照<a href=\"https://github.com/rrwick/Trycycler/wiki/Clustering-contigs\"> Trycycler 官方说明</a>。</p>\n<h1 id=\"step-3-reconciling-contigs\"><a class=\"markdownIt-Anchor\" href=\"#step-3-reconciling-contigs\"></a> Step 3: <a href=\"https://github.com/rrwick/Trycycler/wiki/Reconciling-contigs\">Reconciling contigs</a></h1>\n<h2 id=\"running-trycycler-reconcile\"><a class=\"markdownIt-Anchor\" href=\"#running-trycycler-reconcile\"></a> Running Trycycler reconcile</h2>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">trycycler reconcile --reads WHQ17.good.fastq --cluster_dir trycycler/cluster_001 --threads <span class=\"token number\">10</span>\ntrycycler reconcile --reads WHQ17.good.fastq --cluster_dir trycycler/cluster_002 --threads <span class=\"token number\">10</span>\ntrycycler reconcile --reads WHQ17.good.fastq --cluster_dir trycycler/cluster_003 --threads <span class=\"token number\">10</span>\ntrycycler reconcile --reads WHQ17.good.fastq --cluster_dir trycycler/cluster_004 --threads <span class=\"token number\">10</span>\ntrycycler reconcile --reads WHQ17.good.fastq --cluster_dir trycycler/cluster_005 --threads <span class=\"token number\">10</span>\ntrycycler reconcile --reads WHQ17.good.fastq --cluster_dir trycycler/cluster_006 --threads <span class=\"token number\">10</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<details><summary>info 参数解析</summary><div>\n<p>General settings:</p>\n<ul>\n<li>--linear: use this option if your input contigs are not circular. It will disable the circularisation-correction steps in Trycycler reconcile.</li>\n<li>--threads: this is how many threads Trycycler will use for read alignment. It will only affect the speed performance, so you'll probably want to use as many threads as you have available.</li>\n<li>--verbose: use this flag to display extra output. Mainly there for debugging purposes.</li>\n</ul>\n<p>Initial check:</p>\n<ul>\n<li>--max_mash_dist: if any of the sequences have a pairwise Mash distance of more than this (default = 0.02), then the contigs will fail the initial check.</li>\n<li>--max_length_diff: if any of the sequences have a pairwise relative length factor of more than this, then the contigs will fail the initial check. For example, if set to 1.1 (the default), then no contig can be more than 10% longer than any other.</li>\n</ul>\n<p>Circularisation:</p>\n<ul>\n<li>--max_add_seq and --max_add_seq_percent: these control how much sequence Trycycler is willing to add to a contig to circularise it. For example, if they are set to 1000 and 5 (the defaults), then Trycycler will be willing to add up to 1000 bp or 5% of a contig's length (whichever is smaller) to circularise it. Any contig which requires more than 1000 bp or 5% of its length added to circularise will cause Trycycler reconcile to fail.</li>\n<li>--max_trim_seq and --max_trim_seq_percent: these control how much sequence Trycycler is willing to remove from a contig to circularise it. For example, if they are set to 50000 and 10 (the defaults), then Trycycler will be willing to remove up to 50000 bp or 10% of a contig's length (whichever is smaller) to circularise it. Any contig which requires more than 50000 bp or 10% of its length removed to circularise will cause Trycycler reconcile to fail.</li>\n</ul>\n<p>Final check:</p>\n<ul>\n<li>--min_identity: if any of the sequences have a pairwise global alignment percent identity of less than this (default = 98), then the contigs will fail the final check.</li>\n<li>--max_indel_size: if any of the sequences have a pairwise alignment indel size of more than this (default = 250), then the contigs will fail the final check.</li>\n</ul>\n</div></details>\n<h2 id=\"输出-2\"><a class=\"markdownIt-Anchor\" href=\"#输出-2\"></a> 输出</h2>\n<p>When finished, Trycycler reconcile will make  <code>2_all_seqs.fasta</code>  in the cluster directory, a multi-FASTA file containing each of the contigs ready for multiple sequence alignment.</p>\n<h2 id=\"dotplots\"><a class=\"markdownIt-Anchor\" href=\"#dotplots\"></a> Dotplots</h2>\n<p>You can optionally run Trycycler dotplot on any problematic clusters to visualise the relationship between the sequences. For example:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">trycycler dotplot --cluster_dir trycycler/cluster_002<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>This will create an image file (dotplots.png) in the cluster directory with a dotplot for all pairwise combinations of sequences. Same-strand k-mer matches are drawn in blue, and opposite-strand k-mer matches are drawn in red. For example:</p>\n<p><img src=\"https://github.com/rrwick/Trycycler/wiki/images/dotplots.png\" class=\"lazyload placeholder\" data-srcset=\"https://github.com/rrwick/Trycycler/wiki/images/dotplots.png\" srcset=\"https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg\" alt=\"Dotplot\" /><br />\nIn the above example (taken from cluster 2 of the good demo dataset), you can see that most of the sequences are in very nice agreement with each other. They have shifted start positions relative to each other, but that's expected for contigs of a circular sequence. One of the contigs (E_contig_2) is on the opposite strand as the others, but that too is normal. Sequence D_contig_2, however, is a problem! It contains two entire copies of the same sequence, visible in the dotplot with itself and the dotplots with other sequences. It will need to be excluded or trimmed in order for reconciliation to succeed.</p>\n<h1 id=\"step-4-multiple-sequence-alignment\"><a class=\"markdownIt-Anchor\" href=\"#step-4-multiple-sequence-alignment\"></a> <a href=\"https://github.com/rrwick/Trycycler/wiki/Multiple-sequence-alignment\">Step 4: Multiple sequence alignment</a></h1>\n<h2 id=\"running-trycycler-msa\"><a class=\"markdownIt-Anchor\" href=\"#running-trycycler-msa\"></a> Running Trycycler msa</h2>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">trycycler msa --cluster_dir trycycler/cluster_001 --threads <span class=\"token number\">8</span>\ntrycycler msa --cluster_dir trycycler/cluster_002 --threads <span class=\"token number\">8</span>\ntrycycler msa --cluster_dir trycycler/cluster_003 --threads <span class=\"token number\">8</span>\ntrycycler msa --cluster_dir trycycler/cluster_004 --threads <span class=\"token number\">8</span>\ntrycycler msa --cluster_dir trycycler/cluster_005 --threads <span class=\"token number\">8</span>\ntrycycler msa --cluster_dir trycycler/cluster_006 --threads <span class=\"token number\">8</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<details><summary>info 参数解析</summary><div>\n<p>除了线程数外，其他三个参数可以用默认值。</p>\n<ul>\n<li>--kmer: the k-mer size used for sequence partitioning (default = 32).</li>\n<li>--step: the step size used for sequence partitioning (default = 1000).</li>\n<li>--lookahead: the look-ahead margin used for sequence partitioning (default = 10000).</li>\n<li>--threads: this is how many parallel instances of MUSCLE will be used when aligning the sequence partitions. It will only affect the speed performance, so you'll probably want to use as many threads as you have available.</li>\n</ul>\n</div></details>\n<h2 id=\"输出-3\"><a class=\"markdownIt-Anchor\" href=\"#输出-3\"></a> 输出</h2>\n<p>When finished, Trycycler reconcile will make a  <code>3_msa.fasta</code>  file in the cluster directory, a FASTA-formatted multiple sequence alignment of the contigs ready for use in generating a consensus.</p>\n<h1 id=\"step-5-partitioning-reads\"><a class=\"markdownIt-Anchor\" href=\"#step-5-partitioning-reads\"></a> <a href=\"https://github.com/rrwick/Trycycler/wiki/Partitioning-reads\">Step 5: Partitioning reads</a></h1>\n<h2 id=\"running-trycycler-partition\"><a class=\"markdownIt-Anchor\" href=\"#running-trycycler-partition\"></a> Running Trycycler partition</h2>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">trycycler partition --reads WHQ17.good.fastq --cluster_dirs trycycler/cluster_* --threads <span class=\"token number\">8</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<details><summary>info 参数解析</summary><div>\n<ul>\n<li>--min_aligned_len: reads with less than this many bases aligned (default = 1000) will be ignored.</li>\n<li>--min_read_cov: reads with less than this percentage of their length covered by alignments (default = 90.0) will be ignored.</li>\n<li>--threads: this is how many threads Trycycler will use for read alignment. It will only affect the speed performance, so you'll probably want to use as many threads as you have available.</li>\n</ul>\n</div></details>\n<h2 id=\"输出-4\"><a class=\"markdownIt-Anchor\" href=\"#输出-4\"></a> 输出</h2>\n<p>After Trycycler partition completes, each of the cluster directories should have a  <code>4_reads.fastq</code>  file which contains its share of the total reads.</p>\n<h1 id=\"step-6-generating-a-consensus\"><a class=\"markdownIt-Anchor\" href=\"#step-6-generating-a-consensus\"></a> <a href=\"https://github.com/rrwick/Trycycler/wiki/Generating-a-consensus\">Step 6: Generating a consensus</a></h1>\n<h2 id=\"running-trycycler-consensus\"><a class=\"markdownIt-Anchor\" href=\"#running-trycycler-consensus\"></a> Running Trycycler consensus</h2>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">trycycler consensus --cluster_dir trycycler/cluster_001 --threads <span class=\"token number\">8</span>\ntrycycler consensus --cluster_dir trycycler/cluster_002 --threads <span class=\"token number\">8</span>\ntrycycler consensus --cluster_dir trycycler/cluster_003 --threads <span class=\"token number\">8</span>\ntrycycler consensus --cluster_dir trycycler/cluster_004 --threads <span class=\"token number\">8</span>\ntrycycler consensus --cluster_dir trycycler/cluster_005 --threads <span class=\"token number\">8</span>\ntrycycler consensus --cluster_dir trycycler/cluster_006 --threads <span class=\"token number\">8</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<details><summary>info 参数解析</summary><div>\n<ul>\n<li>--linear: use this option if your input contigs are not circular. It will disable the circularisation steps when aligning reads and choosing variants.</li>\n<li>--min_aligned_len: reads with less than this many bases aligned (default = 1000) will be ignored.</li>\n<li>--min_read_cov: reads with less than this percentage of their length aligned (default = 90.0) will be ignored.</li>\n<li>--threads: this is how many threads Trycycler will use for read alignment. It will only affect the speed performance, so you'll probably want to use as many threads as you have available.</li>\n<li>--verbose: use this flag to display extra output. For every read-assessed variant, this will show the alternative sequences and their read alignment scores.</li>\n</ul>\n</div></details>\n<h2 id=\"输出-5\"><a class=\"markdownIt-Anchor\" href=\"#输出-5\"></a> 输出</h2>\n<p>When finished, you should have a  <code>7_final_consensus.fasta</code>  file in each of your cluster directories. If you have multiple clusters, you can combine their consensus sequences into a single FASTA file like this:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> trycycler/cluster_*/7_final_consensus.fasta <span class=\"token operator\">></span> trycycler/consensus.fasta<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h1 id=\"step-7-polishing-after-trycycler\"><a class=\"markdownIt-Anchor\" href=\"#step-7-polishing-after-trycycler\"></a> <a href=\"https://github.com/rrwick/Trycycler/wiki/Polishing-after-Trycycler\">Step 7: Polishing after Trycycler</a></h1>\n<h2 id=\"medaka-需要知道测序仪信息basecalling\"><a class=\"markdownIt-Anchor\" href=\"#medaka-需要知道测序仪信息basecalling\"></a> Medaka (需要知道测序仪信息 basecalling)</h2>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">c</span> <span class=\"token keyword\">in</span> trycycler/cluster_*<span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n    medaka_consensus -i <span class=\"token string\">\"<span class=\"token variable\">$c</span>\"</span>/4_reads.fastq -d <span class=\"token string\">\"<span class=\"token variable\">$c</span>\"</span>/7_final_consensus.fasta -o <span class=\"token string\">\"<span class=\"token variable\">$c</span>\"</span>/medaka -m r941_prom_hac_g507 -t <span class=\"token number\">8</span>\n    <span class=\"token function\">mv</span> <span class=\"token string\">\"<span class=\"token variable\">$c</span>\"</span>/medaka/consensus.fasta <span class=\"token string\">\"<span class=\"token variable\">$c</span>\"</span>/8_medaka.fasta\n    <span class=\"token function\">rm</span> -r <span class=\"token string\">\"<span class=\"token variable\">$c</span>\"</span>/medaka <span class=\"token string\">\"<span class=\"token variable\">$c</span>\"</span>/*.fai <span class=\"token string\">\"<span class=\"token variable\">$c</span>\"</span>/*.mmi  <span class=\"token comment\"># clean up</span>\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> trycycler/cluster_*/8_medaka.fasta <span class=\"token operator\">></span> trycycler/consensus.fasta<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"short-read-polishing\"><a class=\"markdownIt-Anchor\" href=\"#short-read-polishing\"></a> Short-read polishing</h2>\n<h3 id=\"step-1-read-qc\"><a class=\"markdownIt-Anchor\" href=\"#step-1-read-qc\"></a> Step 1: read QC</h3>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">fastp --in1 WHQ17_BDMS190038054-1a_1.clean.fq.gz --in2 WHQ17_BDMS190038054-1a_2.clean.fq.gz --out1 WHQ17_1.fastq.gz --out2 WHQ17_2.fastq.gz --unpaired1 WHQ17_u.fastq.gz --unpaired2 WHQ17-u.fastq.gz<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"step-2-polypolish\"><a class=\"markdownIt-Anchor\" href=\"#step-2-polypolish\"></a> Step 2: Polypolish</h3>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">bwa index trycycler/consensus.fasta\nbwa mem -t <span class=\"token number\">8</span> -a trycycler/consensus.fasta WHQ17_1.fastq.gz <span class=\"token operator\">></span> alignments_1.sam\nbwa mem -t <span class=\"token number\">8</span> -a trycycler/consensus.fasta WHQ17_2.fastq.gz <span class=\"token operator\">></span> alignments_2.sam\npolypolish trycycler/consensus.fasta alignments_1.sam alignments_2.sam <span class=\"token operator\">></span> trycycler/polypolish.fasta<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"step-3-polca\"><a class=\"markdownIt-Anchor\" href=\"#step-3-polca\"></a> Step 3: POLCA</h3>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 这一步报错，暂未执行</span>\npolca.sh -a trycycler/polypolish.fasta -r <span class=\"token string\">\"WHQ17_1.fastq.gz WHQ17_2.fastq.gz\"</span> -t <span class=\"token number\">8</span> -m 10G\n<span class=\"token function\">mv</span> *.PolcaCorrected.fa polypolish_polca.fasta<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"删除无用信息\"><a class=\"markdownIt-Anchor\" href=\"#删除无用信息\"></a> 删除无用信息</h1>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">rm</span> alignments_1.sam alignments_2.sam fastp.*\n<span class=\"token function\">rm</span> -rf *.read_subsets<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n","more":"<h1 id=\"安装软件\"><a class=\"markdownIt-Anchor\" href=\"#安装软件\"></a> 安装软件</h1>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">mamba <span class=\"token function\">install</span> miniasm minipolish raven-assembler flye medaka <span class=\"token assign-left variable\">python</span><span class=\"token operator\">=</span><span class=\"token number\">3.8</span> fastp bwa masurca trycycler\n\n<span class=\"token function\">git</span> clone https://github.com/rrwick/Minipolish.git\n\n<span class=\"token function\">git</span> clone https://github.com/rrwick/Polypolish.git\n<span class=\"token builtin class-name\">cd</span> Polypolish\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> cargo\ncargo build --release<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"step-1-generating-assemblies\"><a class=\"markdownIt-Anchor\" href=\"#step-1-generating-assemblies\"></a> Step 1: <a href=\"https://github.com/rrwick/Trycycler/wiki/Generating-assemblies\">Generating assemblies</a></h1>\n<h2 id=\"准备三代数据\"><a class=\"markdownIt-Anchor\" href=\"#准备三代数据\"></a> 准备三代数据</h2>\n<p>如果是含有多个文件的话，需要合并到一个文件里</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> WHQ17/barcode14/*.fastq <span class=\"token operator\">></span> WHQ17.fastq<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"质控\"><a class=\"markdownIt-Anchor\" href=\"#质控\"></a> 质控</h2>\n<p>This will discard short reads (less than 1 kbp) and very bad reads (the worst 5%)</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">filtlong --min_length <span class=\"token number\">1000</span> --keep_percent <span class=\"token number\">95</span> WHQ17.fastq <span class=\"token operator\">></span> WHQ17.good.fastq<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"取子集-subsampling-reads\"><a class=\"markdownIt-Anchor\" href=\"#取子集-subsampling-reads\"></a> 取子集 Subsampling reads</h2>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">trycycler subsample --reads WHQ17.good.fastq --out_dir read_subsets --threads <span class=\"token number\">8</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<details><summary>info 参数解析</summary><div>\n<ul>\n<li>--count: 输出的 Reads 子集的数量，大部分情况使用默认的 12 即可。</li>\n<li>--genome_size: 预估的基因组大小 (e.g. --genome_size 5.5m)。不提供的话会通过 miniasm 组装基因组，以估计大小，但是速度会慢。此值用于计算 reads 深度，不需要很精确，10% 的错误是允许的。</li>\n<li>--min_read_depth: 允许的最小 read 深度，控制着取子集的深度。</li>\n<li>--threads: 使用的线程数（越大越好），影响 miniasm 的组装速度。</li>\n</ul>\n</div></details>\n<p><strong>得到</strong>： <code>read_subsets/sample_*.fastq</code></p>\n<h2 id=\"组装-generating-assemblies\"><a class=\"markdownIt-Anchor\" href=\"#组装-generating-assemblies\"></a> 组装 Generating assemblies</h2>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">threads</span><span class=\"token operator\">=</span><span class=\"token number\">6</span>  <span class=\"token comment\"># change as appropriate for your system</span>\n<span class=\"token function\">mkdir</span> assemblies\n\nflye --nano-raw read_subsets/sample_01.fastq --threads <span class=\"token string\">\"<span class=\"token variable\">$threads</span>\"</span> --out-dir assembly_01 <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">cp</span> assembly_01/assembly.fasta assemblies/assembly_01.fasta <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">rm</span> -r assembly_01\n./Minipolish/miniasm_and_minipolish.sh read_subsets/sample_02.fastq <span class=\"token string\">\"<span class=\"token variable\">$threads</span>\"</span> <span class=\"token operator\">></span> assembly_02.gfa <span class=\"token operator\">&amp;&amp;</span> any2fasta assembly_02.gfa <span class=\"token operator\">></span> assemblies/assembly_02.fasta <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">rm</span> assembly_02.gfa\nraven --threads <span class=\"token string\">\"<span class=\"token variable\">$threads</span>\"</span> read_subsets/sample_03.fastq <span class=\"token operator\">></span> assemblies/assembly_03.fasta <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">rm</span> raven.cereal\n\nflye --nano-raw read_subsets/sample_04.fastq --threads <span class=\"token string\">\"<span class=\"token variable\">$threads</span>\"</span> --out-dir assembly_04 <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">cp</span> assembly_04/assembly.fasta assemblies/assembly_04.fasta <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">rm</span> -r assembly_04\n./Minipolish/miniasm_and_minipolish.sh read_subsets/sample_05.fastq <span class=\"token string\">\"<span class=\"token variable\">$threads</span>\"</span> <span class=\"token operator\">></span> assembly_05.gfa <span class=\"token operator\">&amp;&amp;</span> any2fasta assembly_05.gfa <span class=\"token operator\">></span> assemblies/assembly_05.fasta <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">rm</span> assembly_05.gfa\nraven --threads <span class=\"token string\">\"<span class=\"token variable\">$threads</span>\"</span> read_subsets/sample_06.fastq <span class=\"token operator\">></span> assemblies/assembly_06.fasta <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">rm</span> raven.cereal\n\nflye --nano-raw read_subsets/sample_07.fastq --threads <span class=\"token string\">\"<span class=\"token variable\">$threads</span>\"</span> --out-dir assembly_07 <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">cp</span> assembly_07/assembly.fasta assemblies/assembly_07.fasta <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">rm</span> -r assembly_07\n./Minipolish/miniasm_and_minipolish.sh read_subsets/sample_08.fastq <span class=\"token string\">\"<span class=\"token variable\">$threads</span>\"</span> <span class=\"token operator\">></span> assembly_08.gfa <span class=\"token operator\">&amp;&amp;</span> any2fasta assembly_08.gfa <span class=\"token operator\">></span> assemblies/assembly_08.fasta <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">rm</span> assembly_08.gfa\nraven --threads <span class=\"token string\">\"<span class=\"token variable\">$threads</span>\"</span> read_subsets/sample_09.fastq <span class=\"token operator\">></span> assemblies/assembly_09.fasta <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">rm</span> raven.cereal\n\nflye --nano-raw read_subsets/sample_10.fastq --threads <span class=\"token string\">\"<span class=\"token variable\">$threads</span>\"</span> --out-dir assembly_10 <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">cp</span> assembly_10/assembly.fasta assemblies/assembly_10.fasta <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">rm</span> -r assembly_10\n./Minipolish/miniasm_and_minipolish.sh read_subsets/sample_11.fastq <span class=\"token string\">\"<span class=\"token variable\">$threads</span>\"</span> <span class=\"token operator\">></span> assembly_11.gfa <span class=\"token operator\">&amp;&amp;</span> any2fasta assembly_11.gfa <span class=\"token operator\">></span> assemblies/assembly_11.fasta <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">rm</span> assembly_11.gfa\nraven --threads <span class=\"token string\">\"<span class=\"token variable\">$threads</span>\"</span> read_subsets/sample_12.fastq <span class=\"token operator\">></span> assemblies/assembly_12.fasta <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">rm</span> raven.cereal<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>得到</strong>： <code>assemblies/*.fasta</code></p>\n<p><strong>删除中间文件：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">rm</span> -r read_subsets<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h1 id=\"step-2-clustering-contigs\"><a class=\"markdownIt-Anchor\" href=\"#step-2-clustering-contigs\"></a> <a href=\"https://github.com/rrwick/Trycycler/wiki/Clustering-contigs\">Step 2: Clustering contigs</a></h1>\n<h2 id=\"running-trycycler-cluster\"><a class=\"markdownIt-Anchor\" href=\"#running-trycycler-cluster\"></a> Running Trycycler cluster</h2>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">trycycler cluster --assemblies assemblies/*.fasta --reads WHQ17.good.fastq --out_dir trycycler --threads <span class=\"token number\">10</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<details><summary>info 参数解析</summary><div>\n<ul>\n<li>--min_contig_len: 最小 contig 长度（默认 1000），短于该长度的 contigs 将被丢弃。如果你的基因组含有长度更小的质粒，将该值设低。</li>\n<li>--min_contig_depth: 覆盖 contigs 的 reads 的最低深度。For example, if an assembly has a mean depth of 90× and this setting is 0.1 (the default), then any contig with &lt;9× depth will be removed.</li>\n<li>--distance: this is the Mash distance threshold used when defining clusters, and the default threshold is 0.01. Smaller thresholds (e.g. 0.005) can result in a larger number of tighter clusters. Larger thresholds (e.g. 0.02) can result in a smaller number of looser clusters.</li>\n<li>--threads: this is how many threads Trycycler will use for read alignment. It will only affect the speed performance, so you'll probably want to use as many threads as you have available.</li>\n</ul>\n</div></details>\n<h2 id=\"输出\"><a class=\"markdownIt-Anchor\" href=\"#输出\"></a> 输出</h2>\n<ul>\n<li><code>trycycler/contigs.phylip</code> : a matrix of the Mash distances between all contigs in PHYLIP format.</li>\n<li><code>trycycler/contigs.newick</code> : a FastME tree of the contigs built from the distance matrix. This can be visualised in a phylogenetic tree viewer such as FigTree, Dendroscope or Archaeopteryx.</li>\n<li>One directory for each of the clusters:  <code>trycycler/cluster_001, trycycler/cluster_002, etc</code> . These directories will each contain a subdirectory named 1_contigs which includes the FASTA files for the contigs in the cluster.</li>\n</ul>\n<h2 id=\"font-colorff0000筛选-clustersfont\"><a class=\"markdownIt-Anchor\" href=\"#font-colorff0000筛选-clustersfont\"></a> <font color=\"#FF0000\">筛选 clusters</font></h2>\n<p>将 <code>contigs.newick</code>  导入进化树查看软件，肉眼观察，主观意愿挑选，有问题的 cluster 删掉。参照<a href=\"https://github.com/rrwick/Trycycler/wiki/Clustering-contigs\"> Trycycler 官方说明</a>。</p>\n<h1 id=\"step-3-reconciling-contigs\"><a class=\"markdownIt-Anchor\" href=\"#step-3-reconciling-contigs\"></a> Step 3: <a href=\"https://github.com/rrwick/Trycycler/wiki/Reconciling-contigs\">Reconciling contigs</a></h1>\n<h2 id=\"running-trycycler-reconcile\"><a class=\"markdownIt-Anchor\" href=\"#running-trycycler-reconcile\"></a> Running Trycycler reconcile</h2>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">trycycler reconcile --reads WHQ17.good.fastq --cluster_dir trycycler/cluster_001 --threads <span class=\"token number\">10</span>\ntrycycler reconcile --reads WHQ17.good.fastq --cluster_dir trycycler/cluster_002 --threads <span class=\"token number\">10</span>\ntrycycler reconcile --reads WHQ17.good.fastq --cluster_dir trycycler/cluster_003 --threads <span class=\"token number\">10</span>\ntrycycler reconcile --reads WHQ17.good.fastq --cluster_dir trycycler/cluster_004 --threads <span class=\"token number\">10</span>\ntrycycler reconcile --reads WHQ17.good.fastq --cluster_dir trycycler/cluster_005 --threads <span class=\"token number\">10</span>\ntrycycler reconcile --reads WHQ17.good.fastq --cluster_dir trycycler/cluster_006 --threads <span class=\"token number\">10</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<details><summary>info 参数解析</summary><div>\n<p>General settings:</p>\n<ul>\n<li>--linear: use this option if your input contigs are not circular. It will disable the circularisation-correction steps in Trycycler reconcile.</li>\n<li>--threads: this is how many threads Trycycler will use for read alignment. It will only affect the speed performance, so you'll probably want to use as many threads as you have available.</li>\n<li>--verbose: use this flag to display extra output. Mainly there for debugging purposes.</li>\n</ul>\n<p>Initial check:</p>\n<ul>\n<li>--max_mash_dist: if any of the sequences have a pairwise Mash distance of more than this (default = 0.02), then the contigs will fail the initial check.</li>\n<li>--max_length_diff: if any of the sequences have a pairwise relative length factor of more than this, then the contigs will fail the initial check. For example, if set to 1.1 (the default), then no contig can be more than 10% longer than any other.</li>\n</ul>\n<p>Circularisation:</p>\n<ul>\n<li>--max_add_seq and --max_add_seq_percent: these control how much sequence Trycycler is willing to add to a contig to circularise it. For example, if they are set to 1000 and 5 (the defaults), then Trycycler will be willing to add up to 1000 bp or 5% of a contig's length (whichever is smaller) to circularise it. Any contig which requires more than 1000 bp or 5% of its length added to circularise will cause Trycycler reconcile to fail.</li>\n<li>--max_trim_seq and --max_trim_seq_percent: these control how much sequence Trycycler is willing to remove from a contig to circularise it. For example, if they are set to 50000 and 10 (the defaults), then Trycycler will be willing to remove up to 50000 bp or 10% of a contig's length (whichever is smaller) to circularise it. Any contig which requires more than 50000 bp or 10% of its length removed to circularise will cause Trycycler reconcile to fail.</li>\n</ul>\n<p>Final check:</p>\n<ul>\n<li>--min_identity: if any of the sequences have a pairwise global alignment percent identity of less than this (default = 98), then the contigs will fail the final check.</li>\n<li>--max_indel_size: if any of the sequences have a pairwise alignment indel size of more than this (default = 250), then the contigs will fail the final check.</li>\n</ul>\n</div></details>\n<h2 id=\"输出-2\"><a class=\"markdownIt-Anchor\" href=\"#输出-2\"></a> 输出</h2>\n<p>When finished, Trycycler reconcile will make  <code>2_all_seqs.fasta</code>  in the cluster directory, a multi-FASTA file containing each of the contigs ready for multiple sequence alignment.</p>\n<h2 id=\"dotplots\"><a class=\"markdownIt-Anchor\" href=\"#dotplots\"></a> Dotplots</h2>\n<p>You can optionally run Trycycler dotplot on any problematic clusters to visualise the relationship between the sequences. For example:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">trycycler dotplot --cluster_dir trycycler/cluster_002<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>This will create an image file (dotplots.png) in the cluster directory with a dotplot for all pairwise combinations of sequences. Same-strand k-mer matches are drawn in blue, and opposite-strand k-mer matches are drawn in red. For example:</p>\n<p><img src=\"https://github.com/rrwick/Trycycler/wiki/images/dotplots.png\" alt=\"Dotplot\" /><br />\nIn the above example (taken from cluster 2 of the good demo dataset), you can see that most of the sequences are in very nice agreement with each other. They have shifted start positions relative to each other, but that's expected for contigs of a circular sequence. One of the contigs (E_contig_2) is on the opposite strand as the others, but that too is normal. Sequence D_contig_2, however, is a problem! It contains two entire copies of the same sequence, visible in the dotplot with itself and the dotplots with other sequences. It will need to be excluded or trimmed in order for reconciliation to succeed.</p>\n<h1 id=\"step-4-multiple-sequence-alignment\"><a class=\"markdownIt-Anchor\" href=\"#step-4-multiple-sequence-alignment\"></a> <a href=\"https://github.com/rrwick/Trycycler/wiki/Multiple-sequence-alignment\">Step 4: Multiple sequence alignment</a></h1>\n<h2 id=\"running-trycycler-msa\"><a class=\"markdownIt-Anchor\" href=\"#running-trycycler-msa\"></a> Running Trycycler msa</h2>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">trycycler msa --cluster_dir trycycler/cluster_001 --threads <span class=\"token number\">8</span>\ntrycycler msa --cluster_dir trycycler/cluster_002 --threads <span class=\"token number\">8</span>\ntrycycler msa --cluster_dir trycycler/cluster_003 --threads <span class=\"token number\">8</span>\ntrycycler msa --cluster_dir trycycler/cluster_004 --threads <span class=\"token number\">8</span>\ntrycycler msa --cluster_dir trycycler/cluster_005 --threads <span class=\"token number\">8</span>\ntrycycler msa --cluster_dir trycycler/cluster_006 --threads <span class=\"token number\">8</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<details><summary>info 参数解析</summary><div>\n<p>除了线程数外，其他三个参数可以用默认值。</p>\n<ul>\n<li>--kmer: the k-mer size used for sequence partitioning (default = 32).</li>\n<li>--step: the step size used for sequence partitioning (default = 1000).</li>\n<li>--lookahead: the look-ahead margin used for sequence partitioning (default = 10000).</li>\n<li>--threads: this is how many parallel instances of MUSCLE will be used when aligning the sequence partitions. It will only affect the speed performance, so you'll probably want to use as many threads as you have available.</li>\n</ul>\n</div></details>\n<h2 id=\"输出-3\"><a class=\"markdownIt-Anchor\" href=\"#输出-3\"></a> 输出</h2>\n<p>When finished, Trycycler reconcile will make a  <code>3_msa.fasta</code>  file in the cluster directory, a FASTA-formatted multiple sequence alignment of the contigs ready for use in generating a consensus.</p>\n<h1 id=\"step-5-partitioning-reads\"><a class=\"markdownIt-Anchor\" href=\"#step-5-partitioning-reads\"></a> <a href=\"https://github.com/rrwick/Trycycler/wiki/Partitioning-reads\">Step 5: Partitioning reads</a></h1>\n<h2 id=\"running-trycycler-partition\"><a class=\"markdownIt-Anchor\" href=\"#running-trycycler-partition\"></a> Running Trycycler partition</h2>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">trycycler partition --reads WHQ17.good.fastq --cluster_dirs trycycler/cluster_* --threads <span class=\"token number\">8</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<details><summary>info 参数解析</summary><div>\n<ul>\n<li>--min_aligned_len: reads with less than this many bases aligned (default = 1000) will be ignored.</li>\n<li>--min_read_cov: reads with less than this percentage of their length covered by alignments (default = 90.0) will be ignored.</li>\n<li>--threads: this is how many threads Trycycler will use for read alignment. It will only affect the speed performance, so you'll probably want to use as many threads as you have available.</li>\n</ul>\n</div></details>\n<h2 id=\"输出-4\"><a class=\"markdownIt-Anchor\" href=\"#输出-4\"></a> 输出</h2>\n<p>After Trycycler partition completes, each of the cluster directories should have a  <code>4_reads.fastq</code>  file which contains its share of the total reads.</p>\n<h1 id=\"step-6-generating-a-consensus\"><a class=\"markdownIt-Anchor\" href=\"#step-6-generating-a-consensus\"></a> <a href=\"https://github.com/rrwick/Trycycler/wiki/Generating-a-consensus\">Step 6: Generating a consensus</a></h1>\n<h2 id=\"running-trycycler-consensus\"><a class=\"markdownIt-Anchor\" href=\"#running-trycycler-consensus\"></a> Running Trycycler consensus</h2>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">trycycler consensus --cluster_dir trycycler/cluster_001 --threads <span class=\"token number\">8</span>\ntrycycler consensus --cluster_dir trycycler/cluster_002 --threads <span class=\"token number\">8</span>\ntrycycler consensus --cluster_dir trycycler/cluster_003 --threads <span class=\"token number\">8</span>\ntrycycler consensus --cluster_dir trycycler/cluster_004 --threads <span class=\"token number\">8</span>\ntrycycler consensus --cluster_dir trycycler/cluster_005 --threads <span class=\"token number\">8</span>\ntrycycler consensus --cluster_dir trycycler/cluster_006 --threads <span class=\"token number\">8</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<details><summary>info 参数解析</summary><div>\n<ul>\n<li>--linear: use this option if your input contigs are not circular. It will disable the circularisation steps when aligning reads and choosing variants.</li>\n<li>--min_aligned_len: reads with less than this many bases aligned (default = 1000) will be ignored.</li>\n<li>--min_read_cov: reads with less than this percentage of their length aligned (default = 90.0) will be ignored.</li>\n<li>--threads: this is how many threads Trycycler will use for read alignment. It will only affect the speed performance, so you'll probably want to use as many threads as you have available.</li>\n<li>--verbose: use this flag to display extra output. For every read-assessed variant, this will show the alternative sequences and their read alignment scores.</li>\n</ul>\n</div></details>\n<h2 id=\"输出-5\"><a class=\"markdownIt-Anchor\" href=\"#输出-5\"></a> 输出</h2>\n<p>When finished, you should have a  <code>7_final_consensus.fasta</code>  file in each of your cluster directories. If you have multiple clusters, you can combine their consensus sequences into a single FASTA file like this:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> trycycler/cluster_*/7_final_consensus.fasta <span class=\"token operator\">></span> trycycler/consensus.fasta<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h1 id=\"step-7-polishing-after-trycycler\"><a class=\"markdownIt-Anchor\" href=\"#step-7-polishing-after-trycycler\"></a> <a href=\"https://github.com/rrwick/Trycycler/wiki/Polishing-after-Trycycler\">Step 7: Polishing after Trycycler</a></h1>\n<h2 id=\"medaka-需要知道测序仪信息basecalling\"><a class=\"markdownIt-Anchor\" href=\"#medaka-需要知道测序仪信息basecalling\"></a> Medaka (需要知道测序仪信息 basecalling)</h2>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">c</span> <span class=\"token keyword\">in</span> trycycler/cluster_*<span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n    medaka_consensus -i <span class=\"token string\">\"<span class=\"token variable\">$c</span>\"</span>/4_reads.fastq -d <span class=\"token string\">\"<span class=\"token variable\">$c</span>\"</span>/7_final_consensus.fasta -o <span class=\"token string\">\"<span class=\"token variable\">$c</span>\"</span>/medaka -m r941_prom_hac_g507 -t <span class=\"token number\">8</span>\n    <span class=\"token function\">mv</span> <span class=\"token string\">\"<span class=\"token variable\">$c</span>\"</span>/medaka/consensus.fasta <span class=\"token string\">\"<span class=\"token variable\">$c</span>\"</span>/8_medaka.fasta\n    <span class=\"token function\">rm</span> -r <span class=\"token string\">\"<span class=\"token variable\">$c</span>\"</span>/medaka <span class=\"token string\">\"<span class=\"token variable\">$c</span>\"</span>/*.fai <span class=\"token string\">\"<span class=\"token variable\">$c</span>\"</span>/*.mmi  <span class=\"token comment\"># clean up</span>\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> trycycler/cluster_*/8_medaka.fasta <span class=\"token operator\">></span> trycycler/consensus.fasta<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"short-read-polishing\"><a class=\"markdownIt-Anchor\" href=\"#short-read-polishing\"></a> Short-read polishing</h2>\n<h3 id=\"step-1-read-qc\"><a class=\"markdownIt-Anchor\" href=\"#step-1-read-qc\"></a> Step 1: read QC</h3>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">fastp --in1 WHQ17_BDMS190038054-1a_1.clean.fq.gz --in2 WHQ17_BDMS190038054-1a_2.clean.fq.gz --out1 WHQ17_1.fastq.gz --out2 WHQ17_2.fastq.gz --unpaired1 WHQ17_u.fastq.gz --unpaired2 WHQ17-u.fastq.gz<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"step-2-polypolish\"><a class=\"markdownIt-Anchor\" href=\"#step-2-polypolish\"></a> Step 2: Polypolish</h3>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">bwa index trycycler/consensus.fasta\nbwa mem -t <span class=\"token number\">8</span> -a trycycler/consensus.fasta WHQ17_1.fastq.gz <span class=\"token operator\">></span> alignments_1.sam\nbwa mem -t <span class=\"token number\">8</span> -a trycycler/consensus.fasta WHQ17_2.fastq.gz <span class=\"token operator\">></span> alignments_2.sam\npolypolish trycycler/consensus.fasta alignments_1.sam alignments_2.sam <span class=\"token operator\">></span> trycycler/polypolish.fasta<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"step-3-polca\"><a class=\"markdownIt-Anchor\" href=\"#step-3-polca\"></a> Step 3: POLCA</h3>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 这一步报错，暂未执行</span>\npolca.sh -a trycycler/polypolish.fasta -r <span class=\"token string\">\"WHQ17_1.fastq.gz WHQ17_2.fastq.gz\"</span> -t <span class=\"token number\">8</span> -m 10G\n<span class=\"token function\">mv</span> *.PolcaCorrected.fa polypolish_polca.fasta<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"删除无用信息\"><a class=\"markdownIt-Anchor\" href=\"#删除无用信息\"></a> 删除无用信息</h1>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">rm</span> alignments_1.sam alignments_2.sam fastp.*\n<span class=\"token function\">rm</span> -rf *.read_subsets<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n","categories":[{"name":"生物信息","path":"api/categories/生物信息.json"}],"tags":[{"name":"WGS","path":"api/tags/WGS.json"},{"name":"生信软件","path":"api/tags/生信软件.json"}]}