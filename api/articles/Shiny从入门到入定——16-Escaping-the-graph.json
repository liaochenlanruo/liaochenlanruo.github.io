{"title":"Shiny从入门到入定——16-Escaping the graph","slug":"Shiny从入门到入定——16-Escaping-the-graph","date":"2024-09-26T14:05:28.000Z","updated":"2024-09-26T14:29:04.963Z","comments":true,"path":"api/articles/Shiny从入门到入定——16-Escaping-the-graph.json","excerpt":null,"covers":["https://d33wubrfki0l68.cloudfront.net/df8aa242946fb586f90d40d735dd0ea497a56b4d/0d739/diagrams/reactivity-tracking/invalidate-1.png","https://d33wubrfki0l68.cloudfront.net/11c52cd6c1484323dcac858b7e003cc437ed83ae/3dcbe/diagrams/reactivity-components/button.png","https://d33wubrfki0l68.cloudfront.net/f86c5d20efbea98c76a10026851060db8cbede2d/d2245/diagrams/reactivity-components/danger.png","https://d33wubrfki0l68.cloudfront.net/216ca90acb1508ba9e1d7ee23d9db15becdb2ef2/ced9f/diagrams/reactivity-components/danger-2.png","https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg","https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png"],"content":"<h1 id=\"跳出反应式图\"><a href=\"#跳出反应式图\" class=\"headerlink\" title=\"跳出反应式图\"></a>跳出反应式图</h1><h2 id=\"16-1-引言\"><a href=\"#16-1-引言\" class=\"headerlink\" title=\"16.1 引言\"></a>16.1 引言</h2><p>Shiny的反应式编程框架极其有用，因为它能自动确定在输入变化时更新所有输出所需的最小计算集。但这个框架也故意施加了一些限制，有时你需要摆脱这些限制去做一些有风险但必要的事情。</p>\n<p>在本章中，你将学习如何结合<a href=\"https://rdrr.io/pkg/shiny/man/reactiveValues.html\">reactiveValues()</a>和<code>observe()</code>&#x2F;<code>observeEvent()</code>将反应式图的右侧连接到左侧。这些技术之所以强大，是因为它们让你能够手动控制图的一部分。但它们也很危险，因为它们会让你的应用做不必要的工作。最重要的是，你现在可以创建无限循环，让你的应用陷入永无止境的更新循环中。</p>\n<p>如果你发现本章中探讨的想法很有趣，你可能还想看看<a href=\"https://github.com/hadley/shinySignals/\">shinySignals</a>和<a href=\"https://github.com/jcheng5/rxtools\">rxtools</a>包。这两个都是实验性包，旨在探索“高阶”反应式，即通过其他反应式编程创建的反应式。我不建议你在“真实”应用中使用它们，但阅读源代码可能会很有启发性。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>shiny<span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"16-2-反应式图没有捕获什么？\"><a href=\"#16-2-反应式图没有捕获什么？\" class=\"headerlink\" title=\"16.2 反应式图没有捕获什么？\"></a>16.2 反应式图没有捕获什么？</h2><p>在第14.4节中，我们讨论了当用户导致输入失效时会发生什么。作为应用开发者，你可能还有两个重要的情况需要使输入失效：</p>\n<ul>\n<li><p>你调用一个更新函数并设置值参数。这会向浏览器发送消息以更改输入的值，然后通知R输入值已更改。</p>\n</li>\n<li><p>你修改了一个反应式值（使用<code>reactiveVal()</code>或<code>reactiveValues()</code>创建）的值。</p>\n</li>\n</ul>\n<p>重要的是要理解，在这两种情况下，反应式值和观察者之间并没有创建反应式依赖关系。虽然这些操作会导致图失效，但它们并没有通过新的连接被记录下来。</p>\n<p>为了具体说明这个想法，请考虑以下简单的应用，其反应式图如图16.1所示。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  textInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;nm&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;name&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;clr&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Clear&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;hi&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  hi <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span>paste0<span class=\"punctuation\">(</span><span class=\"string\">&quot;Hi &quot;</span><span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>nm<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>hi <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span>hi<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>clr<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    updateTextInput<span class=\"punctuation\">(</span>session<span class=\"punctuation\">,</span> <span class=\"string\">&quot;nm&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/df8aa242946fb586f90d40d735dd0ea497a56b4d/0d739/diagrams/reactivity-tracking/invalidate-1.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/df8aa242946fb586f90d40d735dd0ea497a56b4d/0d739/diagrams/reactivity-tracking/invalidate-1.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图16.1 反应式图没有记录未命名观察者和nm输入之间的连接；这种依赖关系超出了它的范围\"></p>\n<p>当你按下清除按钮时会发生什么？</p>\n<ul>\n<li><code>input$clr</code>失效，然后观察者也会失效。</li>\n<li>观察者重新计算，重新建立对<code>input$clr</code>的依赖，并告诉浏览器更改输入控件的值。</li>\n<li>浏览器更改nm的值。</li>\n<li><code>input$nm</code>失效，导致<code>hi()</code>失效，然后是<code>output$hi</code>。</li>\n<li><code>output$hi</code>重新计算，强制<code>hi()</code>重新计算。</li>\n</ul>\n<p>这些操作都没有改变反应式图，所以它仍然如图16.1所示，并且图没有捕获从观察者到<code>input$nm</code>的连接。</p>\n<h2 id=\"16-3-案例研究\"><a href=\"#16-3-案例研究\" class=\"headerlink\" title=\"16.3 案例研究\"></a>16.3 案例研究</h2><p>接下来，让我们看一些有用的案例，在这些案例中，你可能需要结合<code>reactiveValues()</code>和<code>observeEvent()</code>或<code>observe()</code>来解决一些非常具有挑战性（甚至不可能）的问题。这些是你的应用中有用的模板。</p>\n<h3 id=\"16-3-1-多个输入修改一个输出\"><a href=\"#16-3-1-多个输入修改一个输出\" class=\"headerlink\" title=\"16.3.1 多个输入修改一个输出\"></a>16.3.1 多个输入修改一个输出</h3><p>首先，我们将解决一个非常简单的问题：我希望有一个文本框，它可以由多个事件更新。</p>\n<figure class=\"highlight plaintext\"><figcaption><span><- fluidPage(</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  actionButton(&quot;drink&quot;, &quot;drink me&quot;),</span><br><span class=\"line\">  actionButton(&quot;eat&quot;, &quot;eat me&quot;),</span><br><span class=\"line\">  textOutput(&quot;notice&quot;)</span><br><span class=\"line\">)</span><br><span class=\"line\">server &lt;- function(input, output, session) &#123;</span><br><span class=\"line\">  r &lt;- reactiveValues(notice = &quot;&quot;)</span><br><span class=\"line\">  observeEvent(input$drink, &#123;</span><br><span class=\"line\">    r$notice &lt;- &quot;You are no longer thirsty&quot;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  observeEvent(input$eat, &#123;</span><br><span class=\"line\">    r$notice &lt;- &quot;You are no longer hungry&quot;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  output$notice &lt;- renderText(r$notice)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在下一个例子中，事情会变得稍微复杂一些，我们有一个应用，其中有两个按钮，分别用于增加和减少值。我们使用<code>reactiveValues()</code>来存储当前值，然后使用<code>observeEvent()</code>在按下相应的按钮时增加或减少该值。这里的主要额外复杂性在于，<code>r$n</code>的新值取决于之前的值。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;up&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;up&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;down&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;down&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  r <span class=\"operator\">&lt;-</span> reactiveValues<span class=\"punctuation\">(</span>n <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>up<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    r<span class=\"operator\">$</span>n <span class=\"operator\">&lt;-</span> r<span class=\"operator\">$</span>n <span class=\"operator\">+</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>down<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    r<span class=\"operator\">$</span>n <span class=\"operator\">&lt;-</span> r<span class=\"operator\">$</span>n <span class=\"operator\">-</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>n <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span>r<span class=\"operator\">$</span>n<span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>图16.2显示了此示例的反应式图。再次注意，反应式图不包括从观察者到反应式值<code>n</code>的任何连接。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/11c52cd6c1484323dcac858b7e003cc437ed83ae/3dcbe/diagrams/reactivity-components/button.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/11c52cd6c1484323dcac858b7e003cc437ed83ae/3dcbe/diagrams/reactivity-components/button.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图16.2 反应式图不捕获从观察者到输入值的连接\"></p>\n<h3 id=\"16-3-2-累加输入\"><a href=\"#16-3-2-累加输入\" class=\"headerlink\" title=\"16.3.2 累加输入\"></a>16.3.2 累加输入</h3><p>如果你想通过累加数据来支持数据输入，那么这也是一个类似的模式。这里的主要区别在于，我们使用<a href=\"https://rdrr.io/pkg/shiny/man/updateTextInput.html\">updateTextInput()</a>在用户点击添加按钮后重置文本框。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  textInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;name&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;name&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;add&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;add&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;names&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  r <span class=\"operator\">&lt;-</span> reactiveValues<span class=\"punctuation\">(</span><span class=\"built_in\">names</span> <span class=\"operator\">=</span> character<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>add<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    r<span class=\"operator\">$</span><span class=\"built_in\">names</span> <span class=\"operator\">&lt;-</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>name<span class=\"punctuation\">,</span> r<span class=\"operator\">$</span><span class=\"built_in\">names</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    updateTextInput<span class=\"punctuation\">(</span>session<span class=\"punctuation\">,</span> <span class=\"string\">&quot;name&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span><span class=\"built_in\">names</span> <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span>r<span class=\"operator\">$</span><span class=\"built_in\">names</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们可以让这个应用更加实用，方法是提供一个删除按钮，并确保添加按钮不会创建重复的名称：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  textInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;name&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;name&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;add&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;add&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;del&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;delete&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;names&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  r <span class=\"operator\">&lt;-</span> reactiveValues<span class=\"punctuation\">(</span><span class=\"built_in\">names</span> <span class=\"operator\">=</span> character<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>add<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    r<span class=\"operator\">$</span><span class=\"built_in\">names</span> <span class=\"operator\">&lt;-</span> union<span class=\"punctuation\">(</span>r<span class=\"operator\">$</span><span class=\"built_in\">names</span><span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>name<span class=\"punctuation\">)</span></span><br><span class=\"line\">    updateTextInput<span class=\"punctuation\">(</span>session<span class=\"punctuation\">,</span> <span class=\"string\">&quot;name&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>del<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    r<span class=\"operator\">$</span><span class=\"built_in\">names</span> <span class=\"operator\">&lt;-</span> setdiff<span class=\"punctuation\">(</span>r<span class=\"operator\">$</span><span class=\"built_in\">names</span><span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>name<span class=\"punctuation\">)</span></span><br><span class=\"line\">    updateTextInput<span class=\"punctuation\">(</span>session<span class=\"punctuation\">,</span> <span class=\"string\">&quot;name&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span><span class=\"built_in\">names</span> <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span>r<span class=\"operator\">$</span><span class=\"built_in\">names</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"16-3-3-暂停动画\"><a href=\"#16-3-3-暂停动画\" class=\"headerlink\" title=\"16.3.3 暂停动画\"></a>16.3.3 暂停动画</h3><p>另一个常见的用例是提供一个开始和停止按钮，以便你控制一些重复发生的事件。此示例使用运行中的反应式值来控制数字是否递增，并使用<code>invalidateLater()</code>来确保在运行时每250毫秒使观察者失效一次。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;start&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;start&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;stop&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;stop&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  r <span class=\"operator\">&lt;-</span> reactiveValues<span class=\"punctuation\">(</span>running <span class=\"operator\">=</span> <span class=\"literal\">FALSE</span><span class=\"punctuation\">,</span> n <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>start<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    r<span class=\"operator\">$</span>running <span class=\"operator\">&lt;-</span> <span class=\"literal\">TRUE</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>stop<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    r<span class=\"operator\">$</span>running <span class=\"operator\">&lt;-</span> <span class=\"literal\">FALSE</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  observe<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"punctuation\">(</span>r<span class=\"operator\">$</span>running<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      r<span class=\"operator\">$</span>n <span class=\"operator\">&lt;-</span> isolate<span class=\"punctuation\">(</span>r<span class=\"operator\">$</span>n<span class=\"punctuation\">)</span> <span class=\"operator\">+</span> <span class=\"number\">1</span></span><br><span class=\"line\">      invalidateLater<span class=\"punctuation\">(</span><span class=\"number\">250</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>n <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span>r<span class=\"operator\">$</span>n<span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>请注意，在这种情况下，我们不能轻松地使用<code>observeEvent()</code>，因为我们需要根据<code>running()</code>是TRUE还是FALSE来执行不同的操作。由于我们不能使用<code>observeEvent()</code>，因此我们必须使用<code>isolate()</code>——如果我们不使用它，这个观察者还会对<code>n</code>产生反应式依赖，而<code>n</code>正是它更新的对象，因此它会陷入无限循环。</p>\n<p>希望这些示例能让你对使用<code>reactiveValues()</code>和<code>observe()</code>进行编程有所感受。它非常直观：当发生这种情况时，执行那个操作；当发生那种情况时，执行另一个操作。这在小范围内更容易理解，但当更大的部分开始交互时就更难理解了。因此，一般来说，你会希望尽可能少地使用它，并将其隔离开来，以便尽可能少的观察者修改反应式值。</p>\n<h3 id=\"16-3-4-练习\"><a href=\"#16-3-4-练习\" class=\"headerlink\" title=\"16.3.4 练习\"></a>16.3.4 练习</h3><p>提供一个服务器函数，当点击“normal”时，绘制100个正态分布的随机数的直方图，当点击“uniform”时，绘制100个均匀分布的随机数。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;rnorm&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Normal&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;runif&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Uniform&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  plotOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;plot&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>修改你上面的代码以使其与以下UI一起工作：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;type&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;type&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;Normal&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Uniform&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  plotOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;plot&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>根据你之前的答案重写代码，以消除对<code>observe()</code>&#x2F;<code>observeEvent()</code>的使用，而仅使用<code>reactive()</code>。为什么你可以在第二个UI中这样做，而在第一个UI中却不能？</p>\n<h2 id=\"16-4-反模式-Anti-patterns\"><a href=\"#16-4-反模式-Anti-patterns\" class=\"headerlink\" title=\"16.4 反模式 (Anti-patterns)\"></a>16.4 反模式 (Anti-patterns)</h2><p>一旦你掌握了这种模式，就很容易养成坏习惯：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  r <span class=\"operator\">&lt;-</span> reactiveValues<span class=\"punctuation\">(</span>df <span class=\"operator\">=</span> cars<span class=\"punctuation\">)</span></span><br><span class=\"line\">  observe<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    r<span class=\"operator\">$</span>df <span class=\"operator\">&lt;-</span> head<span class=\"punctuation\">(</span>cars<span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>nrows<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>plot <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span>plot<span class=\"punctuation\">(</span>r<span class=\"operator\">$</span>df<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>table <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span>r<span class=\"operator\">$</span>df<span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>在这个简单的例子中，与使用<code>reactive()</code>的替代方案相比，这段代码并没有做太多额外的工作：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  df <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span>head<span class=\"punctuation\">(</span>cars<span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>nrows<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>plot <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span>plot<span class=\"punctuation\">(</span>df<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>table <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span>df<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>但仍然存在两个缺点：</p>\n<ul>\n<li><p>如果表格或图表位于当前不可见的标签页中，观察者仍然会绘制&#x2F;显示它们。</p>\n</li>\n<li><p>如果<code>head()</code>函数出错，<code>observe()</code>将终止应用，但<code>reactive()</code>会传播错误，以便显示。然而，如果<code>reactive()</code>抛出错误，它不会被传播。</p>\n</li>\n</ul>\n<p>随着应用变得越来越复杂，情况会逐渐变得更糟。很容易退回到第13.2.3节中描述的事件驱动编程情况。你最终会花费大量精力来分析应用中的事件流，而不是依赖Shiny自动为你处理。</p>\n<p>比较这两个反应式图是有启发性的。图16.3显示了第一个示例的图。这是误导性的，因为它看起来不像<code>nrows</code>与<code>df()</code>有连接。使用如图16.4所示的反应式，可以很容易地看到它们之间的精确连接。拥有一个尽可能简单的反应式图对于人类和Shiny来说都很重要。简单的图对人类来说更容易理解，对Shiny来说也更容易优化。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/f86c5d20efbea98c76a10026851060db8cbede2d/d2245/diagrams/reactivity-components/danger.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/f86c5d20efbea98c76a10026851060db8cbede2d/d2245/diagrams/reactivity-components/danger.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图16.3 使用响应式值和观察者会导致图表的一部分断开连接\"></p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/216ca90acb1508ba9e1d7ee23d9db15becdb2ef2/ced9f/diagrams/reactivity-components/danger-2.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/216ca90acb1508ba9e1d7ee23d9db15becdb2ef2/ced9f/diagrams/reactivity-components/danger-2.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图16.4 使用响应式编程使得组件之间的依赖关系非常清晰\"></p>\n<h2 id=\"16-5-总结\"><a href=\"#16-5-总结\" class=\"headerlink\" title=\"16.5 总结\"></a>16.5 总结</h2><p>在过去的四章中，您深入了解了Shiny使用的响应式编程模型。您学习了为什么响应式编程很重要（它允许Shiny仅完成所需的工作，不多也不少），以及响应式图的细节。您还稍微了解了一些基本构建块在内部的工作原理，以及如何在需要时利用它们来摆脱响应式图的限制。</p>\n<p>在接下来的七章中，您将学习如何保持Shiny应用程序的可维护性、性能和安全性，随着其规模和影响力的不断增长。</p>\n<h1 id=\"代码获取\"><a href=\"#代码获取\" class=\"headerlink\" title=\"代码获取\"></a>代码获取</h1><p>关注公众号“生信之巅”，聊天窗口回复“85d7”获取下载链接。</p>\n<table align=\"center\"><tr>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅微信公众号\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-right: 0px;margin-bottom: 5px;align: center;\"></td>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅小程序码\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-left: 0px;margin-bottom: 5px;align: center\"></td>\n</tr></table>\n\n\n<p><font color=\"#FF0000\"><ruby><b>敬告</b>：使用文中脚本请引用本文网址，请尊重本人的劳动成果，谢谢！<rt><b>Notice</b>: When you use the scripts in this article, please cite the link of this webpage. Thank you!</rt></ruby></font></p>\n","more":"<h1 id=\"跳出反应式图\"><a href=\"#跳出反应式图\" class=\"headerlink\" title=\"跳出反应式图\"></a>跳出反应式图</h1><h2 id=\"16-1-引言\"><a href=\"#16-1-引言\" class=\"headerlink\" title=\"16.1 引言\"></a>16.1 引言</h2><p>Shiny的反应式编程框架极其有用，因为它能自动确定在输入变化时更新所有输出所需的最小计算集。但这个框架也故意施加了一些限制，有时你需要摆脱这些限制去做一些有风险但必要的事情。</p>\n<p>在本章中，你将学习如何结合<a href=\"https://rdrr.io/pkg/shiny/man/reactiveValues.html\">reactiveValues()</a>和<code>observe()</code>&#x2F;<code>observeEvent()</code>将反应式图的右侧连接到左侧。这些技术之所以强大，是因为它们让你能够手动控制图的一部分。但它们也很危险，因为它们会让你的应用做不必要的工作。最重要的是，你现在可以创建无限循环，让你的应用陷入永无止境的更新循环中。</p>\n<p>如果你发现本章中探讨的想法很有趣，你可能还想看看<a href=\"https://github.com/hadley/shinySignals/\">shinySignals</a>和<a href=\"https://github.com/jcheng5/rxtools\">rxtools</a>包。这两个都是实验性包，旨在探索“高阶”反应式，即通过其他反应式编程创建的反应式。我不建议你在“真实”应用中使用它们，但阅读源代码可能会很有启发性。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>shiny<span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"16-2-反应式图没有捕获什么？\"><a href=\"#16-2-反应式图没有捕获什么？\" class=\"headerlink\" title=\"16.2 反应式图没有捕获什么？\"></a>16.2 反应式图没有捕获什么？</h2><p>在第14.4节中，我们讨论了当用户导致输入失效时会发生什么。作为应用开发者，你可能还有两个重要的情况需要使输入失效：</p>\n<ul>\n<li><p>你调用一个更新函数并设置值参数。这会向浏览器发送消息以更改输入的值，然后通知R输入值已更改。</p>\n</li>\n<li><p>你修改了一个反应式值（使用<code>reactiveVal()</code>或<code>reactiveValues()</code>创建）的值。</p>\n</li>\n</ul>\n<p>重要的是要理解，在这两种情况下，反应式值和观察者之间并没有创建反应式依赖关系。虽然这些操作会导致图失效，但它们并没有通过新的连接被记录下来。</p>\n<p>为了具体说明这个想法，请考虑以下简单的应用，其反应式图如图16.1所示。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  textInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;nm&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;name&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;clr&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Clear&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;hi&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  hi <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span>paste0<span class=\"punctuation\">(</span><span class=\"string\">&quot;Hi &quot;</span><span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>nm<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>hi <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span>hi<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>clr<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    updateTextInput<span class=\"punctuation\">(</span>session<span class=\"punctuation\">,</span> <span class=\"string\">&quot;nm&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/df8aa242946fb586f90d40d735dd0ea497a56b4d/0d739/diagrams/reactivity-tracking/invalidate-1.png\" alt=\"图16.1 反应式图没有记录未命名观察者和nm输入之间的连接；这种依赖关系超出了它的范围\"></p>\n<p>当你按下清除按钮时会发生什么？</p>\n<ul>\n<li><code>input$clr</code>失效，然后观察者也会失效。</li>\n<li>观察者重新计算，重新建立对<code>input$clr</code>的依赖，并告诉浏览器更改输入控件的值。</li>\n<li>浏览器更改nm的值。</li>\n<li><code>input$nm</code>失效，导致<code>hi()</code>失效，然后是<code>output$hi</code>。</li>\n<li><code>output$hi</code>重新计算，强制<code>hi()</code>重新计算。</li>\n</ul>\n<p>这些操作都没有改变反应式图，所以它仍然如图16.1所示，并且图没有捕获从观察者到<code>input$nm</code>的连接。</p>\n<h2 id=\"16-3-案例研究\"><a href=\"#16-3-案例研究\" class=\"headerlink\" title=\"16.3 案例研究\"></a>16.3 案例研究</h2><p>接下来，让我们看一些有用的案例，在这些案例中，你可能需要结合<code>reactiveValues()</code>和<code>observeEvent()</code>或<code>observe()</code>来解决一些非常具有挑战性（甚至不可能）的问题。这些是你的应用中有用的模板。</p>\n<h3 id=\"16-3-1-多个输入修改一个输出\"><a href=\"#16-3-1-多个输入修改一个输出\" class=\"headerlink\" title=\"16.3.1 多个输入修改一个输出\"></a>16.3.1 多个输入修改一个输出</h3><p>首先，我们将解决一个非常简单的问题：我希望有一个文本框，它可以由多个事件更新。</p>\n<figure class=\"highlight plaintext\"><figcaption><span><- fluidPage(</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  actionButton(&quot;drink&quot;, &quot;drink me&quot;),</span><br><span class=\"line\">  actionButton(&quot;eat&quot;, &quot;eat me&quot;),</span><br><span class=\"line\">  textOutput(&quot;notice&quot;)</span><br><span class=\"line\">)</span><br><span class=\"line\">server &lt;- function(input, output, session) &#123;</span><br><span class=\"line\">  r &lt;- reactiveValues(notice = &quot;&quot;)</span><br><span class=\"line\">  observeEvent(input$drink, &#123;</span><br><span class=\"line\">    r$notice &lt;- &quot;You are no longer thirsty&quot;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  observeEvent(input$eat, &#123;</span><br><span class=\"line\">    r$notice &lt;- &quot;You are no longer hungry&quot;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  output$notice &lt;- renderText(r$notice)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在下一个例子中，事情会变得稍微复杂一些，我们有一个应用，其中有两个按钮，分别用于增加和减少值。我们使用<code>reactiveValues()</code>来存储当前值，然后使用<code>observeEvent()</code>在按下相应的按钮时增加或减少该值。这里的主要额外复杂性在于，<code>r$n</code>的新值取决于之前的值。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;up&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;up&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;down&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;down&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  r <span class=\"operator\">&lt;-</span> reactiveValues<span class=\"punctuation\">(</span>n <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>up<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    r<span class=\"operator\">$</span>n <span class=\"operator\">&lt;-</span> r<span class=\"operator\">$</span>n <span class=\"operator\">+</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>down<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    r<span class=\"operator\">$</span>n <span class=\"operator\">&lt;-</span> r<span class=\"operator\">$</span>n <span class=\"operator\">-</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>n <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span>r<span class=\"operator\">$</span>n<span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>图16.2显示了此示例的反应式图。再次注意，反应式图不包括从观察者到反应式值<code>n</code>的任何连接。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/11c52cd6c1484323dcac858b7e003cc437ed83ae/3dcbe/diagrams/reactivity-components/button.png\" alt=\"图16.2 反应式图不捕获从观察者到输入值的连接\"></p>\n<h3 id=\"16-3-2-累加输入\"><a href=\"#16-3-2-累加输入\" class=\"headerlink\" title=\"16.3.2 累加输入\"></a>16.3.2 累加输入</h3><p>如果你想通过累加数据来支持数据输入，那么这也是一个类似的模式。这里的主要区别在于，我们使用<a href=\"https://rdrr.io/pkg/shiny/man/updateTextInput.html\">updateTextInput()</a>在用户点击添加按钮后重置文本框。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  textInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;name&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;name&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;add&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;add&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;names&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  r <span class=\"operator\">&lt;-</span> reactiveValues<span class=\"punctuation\">(</span><span class=\"built_in\">names</span> <span class=\"operator\">=</span> character<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>add<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    r<span class=\"operator\">$</span><span class=\"built_in\">names</span> <span class=\"operator\">&lt;-</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>name<span class=\"punctuation\">,</span> r<span class=\"operator\">$</span><span class=\"built_in\">names</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    updateTextInput<span class=\"punctuation\">(</span>session<span class=\"punctuation\">,</span> <span class=\"string\">&quot;name&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span><span class=\"built_in\">names</span> <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span>r<span class=\"operator\">$</span><span class=\"built_in\">names</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们可以让这个应用更加实用，方法是提供一个删除按钮，并确保添加按钮不会创建重复的名称：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  textInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;name&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;name&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;add&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;add&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;del&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;delete&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;names&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  r <span class=\"operator\">&lt;-</span> reactiveValues<span class=\"punctuation\">(</span><span class=\"built_in\">names</span> <span class=\"operator\">=</span> character<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>add<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    r<span class=\"operator\">$</span><span class=\"built_in\">names</span> <span class=\"operator\">&lt;-</span> union<span class=\"punctuation\">(</span>r<span class=\"operator\">$</span><span class=\"built_in\">names</span><span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>name<span class=\"punctuation\">)</span></span><br><span class=\"line\">    updateTextInput<span class=\"punctuation\">(</span>session<span class=\"punctuation\">,</span> <span class=\"string\">&quot;name&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>del<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    r<span class=\"operator\">$</span><span class=\"built_in\">names</span> <span class=\"operator\">&lt;-</span> setdiff<span class=\"punctuation\">(</span>r<span class=\"operator\">$</span><span class=\"built_in\">names</span><span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>name<span class=\"punctuation\">)</span></span><br><span class=\"line\">    updateTextInput<span class=\"punctuation\">(</span>session<span class=\"punctuation\">,</span> <span class=\"string\">&quot;name&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span><span class=\"built_in\">names</span> <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span>r<span class=\"operator\">$</span><span class=\"built_in\">names</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"16-3-3-暂停动画\"><a href=\"#16-3-3-暂停动画\" class=\"headerlink\" title=\"16.3.3 暂停动画\"></a>16.3.3 暂停动画</h3><p>另一个常见的用例是提供一个开始和停止按钮，以便你控制一些重复发生的事件。此示例使用运行中的反应式值来控制数字是否递增，并使用<code>invalidateLater()</code>来确保在运行时每250毫秒使观察者失效一次。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;start&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;start&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;stop&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;stop&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  r <span class=\"operator\">&lt;-</span> reactiveValues<span class=\"punctuation\">(</span>running <span class=\"operator\">=</span> <span class=\"literal\">FALSE</span><span class=\"punctuation\">,</span> n <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>start<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    r<span class=\"operator\">$</span>running <span class=\"operator\">&lt;-</span> <span class=\"literal\">TRUE</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>stop<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    r<span class=\"operator\">$</span>running <span class=\"operator\">&lt;-</span> <span class=\"literal\">FALSE</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  observe<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"punctuation\">(</span>r<span class=\"operator\">$</span>running<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      r<span class=\"operator\">$</span>n <span class=\"operator\">&lt;-</span> isolate<span class=\"punctuation\">(</span>r<span class=\"operator\">$</span>n<span class=\"punctuation\">)</span> <span class=\"operator\">+</span> <span class=\"number\">1</span></span><br><span class=\"line\">      invalidateLater<span class=\"punctuation\">(</span><span class=\"number\">250</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>n <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span>r<span class=\"operator\">$</span>n<span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>请注意，在这种情况下，我们不能轻松地使用<code>observeEvent()</code>，因为我们需要根据<code>running()</code>是TRUE还是FALSE来执行不同的操作。由于我们不能使用<code>observeEvent()</code>，因此我们必须使用<code>isolate()</code>——如果我们不使用它，这个观察者还会对<code>n</code>产生反应式依赖，而<code>n</code>正是它更新的对象，因此它会陷入无限循环。</p>\n<p>希望这些示例能让你对使用<code>reactiveValues()</code>和<code>observe()</code>进行编程有所感受。它非常直观：当发生这种情况时，执行那个操作；当发生那种情况时，执行另一个操作。这在小范围内更容易理解，但当更大的部分开始交互时就更难理解了。因此，一般来说，你会希望尽可能少地使用它，并将其隔离开来，以便尽可能少的观察者修改反应式值。</p>\n<h3 id=\"16-3-4-练习\"><a href=\"#16-3-4-练习\" class=\"headerlink\" title=\"16.3.4 练习\"></a>16.3.4 练习</h3><p>提供一个服务器函数，当点击“normal”时，绘制100个正态分布的随机数的直方图，当点击“uniform”时，绘制100个均匀分布的随机数。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;rnorm&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Normal&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;runif&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Uniform&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  plotOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;plot&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>修改你上面的代码以使其与以下UI一起工作：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;type&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;type&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;Normal&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Uniform&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  plotOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;plot&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>根据你之前的答案重写代码，以消除对<code>observe()</code>&#x2F;<code>observeEvent()</code>的使用，而仅使用<code>reactive()</code>。为什么你可以在第二个UI中这样做，而在第一个UI中却不能？</p>\n<h2 id=\"16-4-反模式-Anti-patterns\"><a href=\"#16-4-反模式-Anti-patterns\" class=\"headerlink\" title=\"16.4 反模式 (Anti-patterns)\"></a>16.4 反模式 (Anti-patterns)</h2><p>一旦你掌握了这种模式，就很容易养成坏习惯：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  r <span class=\"operator\">&lt;-</span> reactiveValues<span class=\"punctuation\">(</span>df <span class=\"operator\">=</span> cars<span class=\"punctuation\">)</span></span><br><span class=\"line\">  observe<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    r<span class=\"operator\">$</span>df <span class=\"operator\">&lt;-</span> head<span class=\"punctuation\">(</span>cars<span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>nrows<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>plot <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span>plot<span class=\"punctuation\">(</span>r<span class=\"operator\">$</span>df<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>table <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span>r<span class=\"operator\">$</span>df<span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>在这个简单的例子中，与使用<code>reactive()</code>的替代方案相比，这段代码并没有做太多额外的工作：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  df <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span>head<span class=\"punctuation\">(</span>cars<span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>nrows<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>plot <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span>plot<span class=\"punctuation\">(</span>df<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>table <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span>df<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>但仍然存在两个缺点：</p>\n<ul>\n<li><p>如果表格或图表位于当前不可见的标签页中，观察者仍然会绘制&#x2F;显示它们。</p>\n</li>\n<li><p>如果<code>head()</code>函数出错，<code>observe()</code>将终止应用，但<code>reactive()</code>会传播错误，以便显示。然而，如果<code>reactive()</code>抛出错误，它不会被传播。</p>\n</li>\n</ul>\n<p>随着应用变得越来越复杂，情况会逐渐变得更糟。很容易退回到第13.2.3节中描述的事件驱动编程情况。你最终会花费大量精力来分析应用中的事件流，而不是依赖Shiny自动为你处理。</p>\n<p>比较这两个反应式图是有启发性的。图16.3显示了第一个示例的图。这是误导性的，因为它看起来不像<code>nrows</code>与<code>df()</code>有连接。使用如图16.4所示的反应式，可以很容易地看到它们之间的精确连接。拥有一个尽可能简单的反应式图对于人类和Shiny来说都很重要。简单的图对人类来说更容易理解，对Shiny来说也更容易优化。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/f86c5d20efbea98c76a10026851060db8cbede2d/d2245/diagrams/reactivity-components/danger.png\" alt=\"图16.3 使用响应式值和观察者会导致图表的一部分断开连接\"></p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/216ca90acb1508ba9e1d7ee23d9db15becdb2ef2/ced9f/diagrams/reactivity-components/danger-2.png\" alt=\"图16.4 使用响应式编程使得组件之间的依赖关系非常清晰\"></p>\n<h2 id=\"16-5-总结\"><a href=\"#16-5-总结\" class=\"headerlink\" title=\"16.5 总结\"></a>16.5 总结</h2><p>在过去的四章中，您深入了解了Shiny使用的响应式编程模型。您学习了为什么响应式编程很重要（它允许Shiny仅完成所需的工作，不多也不少），以及响应式图的细节。您还稍微了解了一些基本构建块在内部的工作原理，以及如何在需要时利用它们来摆脱响应式图的限制。</p>\n<p>在接下来的七章中，您将学习如何保持Shiny应用程序的可维护性、性能和安全性，随着其规模和影响力的不断增长。</p>\n<h1 id=\"代码获取\"><a href=\"#代码获取\" class=\"headerlink\" title=\"代码获取\"></a>代码获取</h1><p>关注公众号“生信之巅”，聊天窗口回复“85d7”获取下载链接。</p>\n<table align=\"center\"><tr>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" alt=\"生信之巅微信公众号\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-right: 0px;margin-bottom: 5px;align: center;\"></td>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" alt=\"生信之巅小程序码\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-left: 0px;margin-bottom: 5px;align: center\"></td>\n</tr></table>\n\n\n<p><font color=\"#FF0000\"><ruby><b>敬告</b>：使用文中脚本请引用本文网址，请尊重本人的劳动成果，谢谢！<rt><b>Notice</b>: When you use the scripts in this article, please cite the link of this webpage. Thank you!</rt></ruby></font></p>\n","categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"编程","path":"api/tags/编程.json"},{"name":"Shiny入门系列","path":"api/tags/Shiny入门系列.json"}]}