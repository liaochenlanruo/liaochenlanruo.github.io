{"title":"Perl捕获外部命令执行异常并继续运行后续代码","slug":"Perl捕获外部命令执行异常并继续运行后续代码","date":"2019-04-19T02:34:49.000Z","updated":"2024-03-11T13:07:17.322Z","comments":true,"path":"api/articles/Perl捕获外部命令执行异常并继续运行后续代码.json","excerpt":"在编写perl脚本时经常会调用外部命令，由于种种原因，会遇到外部命令执行异常，而导致整个脚本终止运行。这对于大的项目来说很不经济，因此，可以想办法越过这个异常并继续执行后续脚本。","covers":null,"content":"<p>在编写perl脚本时经常会调用外部命令，由于种种原因，会遇到外部命令执行异常，而导致整个脚本终止运行。这对于大的项目来说很不经济，因此，可以想办法越过这个异常并继续执行后续脚本。</p>\n<span id=\"more\"></span>\n\n<p>Examples：</p>\n</br>\n假设有一个外部命令“command”需要执行，将该命令存到一个数组当中：\n\n</br>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my @arr = (<span class=\"string\">&quot;command&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n</br>\n将外部命令的返回值赋给一个变量：\n\n</br>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my <span class=\"variable\">$return</span> = sysstem(@arr);</span><br></pre></td></tr></table></figure>\n\n</br>\n判断返回值是否为“0”，0代表运行正常，任何非0的值均表示有运行异常。如果返回值不为0，则记录错误，然后继续运行后续代码：\n\n</br>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!(<span class=\"variable\">$return</span> == 0))&#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">&quot;There are some errors when running the command!\\n&quot;</span>;</span><br><span class=\"line\">    command2;<span class=\"comment\">#继续运行其他命令</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</br>\n\n<p><strong>注：</strong>本方案仅在Linux系统下测试，不晓得Windows和Mac的返回值与Linux是否一致，Linux中的“core dump”就可以如此来捕获。</p>\n","more":"<p>Examples：</p>\n</br>\n假设有一个外部命令“command”需要执行，将该命令存到一个数组当中：\n\n</br>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my @arr = (<span class=\"string\">&quot;command&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n</br>\n将外部命令的返回值赋给一个变量：\n\n</br>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my <span class=\"variable\">$return</span> = sysstem(@arr);</span><br></pre></td></tr></table></figure>\n\n</br>\n判断返回值是否为“0”，0代表运行正常，任何非0的值均表示有运行异常。如果返回值不为0，则记录错误，然后继续运行后续代码：\n\n</br>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!(<span class=\"variable\">$return</span> == 0))&#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">&quot;There are some errors when running the command!\\n&quot;</span>;</span><br><span class=\"line\">    command2;<span class=\"comment\">#继续运行其他命令</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</br>\n\n<p><strong>注：</strong>本方案仅在Linux系统下测试，不晓得Windows和Mac的返回值与Linux是否一致，Linux中的“core dump”就可以如此来捕获。</p>","categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"Linux","path":"api/tags/Linux.json"},{"name":"perl","path":"api/tags/perl.json"},{"name":"编程","path":"api/tags/编程.json"}]}