{"title":"根据assession number批量从NCB下载数据","slug":"根据assession-number批量从NCB下载数据","date":"2021-09-28T03:26:24.000Z","updated":"2022-01-08T02:16:28.455Z","comments":true,"path":"api/articles/根据assession-number批量从NCB下载数据.json","excerpt":null,"covers":["https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg","https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png"],"content":"<p>有时候我们手里会得到一些 NCBI 的 assession number，且数量比较多，而我们真正需要的是序列，这时候手动挨个搜索和下载是不太现实的，除非是你闲得无事可做。其实有一个网页是可以批量下载序列的，即<a href=\"https://www.ncbi.nlm.nih.gov/sites/batchentrez\"> https://www.ncbi.nlm.nih.gov/sites/batchentrez</a> ，下面演示一下其用法。<strong>请就着文末视频食用。</strong></p>\n<ul>\n<li>\n<p>首先，<u>准备一份列表文件，其中包含需要下载序列的 IDs，每行一个 ID</u>。这里有一个从网上下载的 CaZY 数据库，本以为是序列文件，下载后才发现里面没有序列。这个文件包含三列，以制表符分隔各列，最后一列是 Assession number，因此前两列可以删掉。可以将文件内容复制到 Excel 中，删除前两列，将最后一列复制到一个新的文本文档中。也可以在支持正则表达式的文本编辑器中直接查找替换。<strong>刚刚的示例文件可以从<a href=\"http://www.cazy.org/IMG/cazy_data/cazy_data.zip\">这里</a>下载</strong>。正则表达式查找的公式为 “.+\\t (.+)”，其中 “.+” 代表的是任意多个字符，“\\t” 匹配的是制表符，+ 是贪婪的，一直遇到最后一个 “\\t” 才终止匹配。即 “.+\\t” 匹配的是前两列以及第二列后面的制表符，最后的 “(.+)” 匹配的是第三列。小括号的作用是捕获匹配的内容。替换的公式为 “$1”，表示第一个小括号内的内容，即第三列。</p>\n</li>\n<li>\n<p>接下来将得到的列表文件提交至网站上以下载序列，需要选择对应的数据库，这里选择 protein，点击 “Retrieve” 开始下载。由于序列较多，因此反应比较慢，需要耐心等待。估计是崩了，再试一遍，文件包含 2650471 个 ID，估计服务器吃不消，实在不行就拆分成几个文件，分批次下载。我这里用的是 EmEditor 软件，按照 10000 行每个文件对整个文件进行了拆分，得到了 266 个文件，现在拿其中的一个做演示，看看服务器是否吃得消。看来一万个也太多，二十几个试了一下，莫得问题。方法就是酱紫的，至于可以一次性下载多少，各位自己去试吧。搞定！</p>\n</li>\n<li>\n<p><strong>兄弟们不用试了，我已经试过了，一次只能搞几百个</strong>，对于几十万行的列表来说，手动逐个提交也是要命的，因此我写了一个 Perl 脚本 (download_NCBI.pl) 来完成该任务，<u>不过只能在 Linux 下运行</u>，代码如下：</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-perl\" data-language=\"perl\"><code class=\"language-perl\"><span class=\"token comment\">#!/usr/bin/perl</span>\n<span class=\"token keyword\">use</span> strict<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> warnings<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> LWP<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>Simple<span class=\"token punctuation\">;</span>\n<span class=\"token comment\"># Author: Liu hualin</span>\n<span class=\"token comment\"># Date: Sep 28, 2021</span>\n\n<span class=\"token comment\"># Usage: perl download_NCBI.pl 列表文件 序列类型（参照https://www.ncbi.nlm.nih.gov/sites/batchentrez数据库填写，常用的包括nucleotide, protein）</span>\n\n<span class=\"token keyword\">my</span> <span class=\"token variable\">@ids</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">my</span> <span class=\"token variable\">$dbtype</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$ARGV</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\"># nucleotide, protein</span>\n\nsystem<span class=\"token punctuation\">(</span><span class=\"token string\">\"split -l 300 $ARGV[0] splited_\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">my</span> <span class=\"token variable\">@splited</span> <span class=\"token operator\">=</span> glob<span class=\"token punctuation\">(</span><span class=\"token string\">\"splited_*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">foreach</span>  <span class=\"token punctuation\">(</span><span class=\"token variable\">@splited</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token variable\">$_</span><span class=\"token operator\">=~</span><span class=\"token regex\">/splited_(.+)/</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">my</span> <span class=\"token variable\">$out</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"seqs.$1.fasta\"</span><span class=\"token punctuation\">;</span>\n\topen IN<span class=\"token punctuation\">,</span> <span class=\"token variable\">$_</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">die</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token filehandle symbol\">&lt;IN></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tchomp<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token variable\">$_</span><span class=\"token operator\">=~</span><span class=\"token regex\">s/[\\r\\n]+//g</span><span class=\"token punctuation\">;</span>\n\t\tpush <span class=\"token variable\">@ids</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$_</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tgetstore<span class=\"token punctuation\">(</span><span class=\"token string\">\"http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=$dbtype&amp;rettype=fasta&amp;retmode=text&amp;id=\"</span><span class=\"token operator\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">@ids</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"$out\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token variable\">@ids</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tclose IN<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nsystem<span class=\"token punctuation\">(</span><span class=\"token string\">\"cat seqs.* > All.sequences.fas\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsystem<span class=\"token punctuation\">(</span><span class=\"token string\">\"rm splited_* seqs.*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>运行方法也贼简单，将脚本和列表文件放在同一目录下，然后在 Linux 终端里输入如下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">perl download_NCBI.pl cazy_ids.txt protein<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>其中 cazy_ids.txt 为包含 assession number 的列表文件，protein 表示列表里的 ID 是蛋白。最后面的这个参数可以在<a href=\"https://www.ncbi.nlm.nih.gov/sites/batchentrez\"> https://www.ncbi.nlm.nih.gov/sites/batchentrez</a> 左上角的 Database 查询，<strong>但是要全部小写</strong>。</p>\n<p>运行一下，看看效果！</p>\n<p><font color=\"#FF0000\">2000 years later...</font></p>\n<p>2650471/300=8835 个文件，最终生成的序列文件名称为 “All.sequences.fas”，中间过程文件会被自动删除。千年以后拿结果，不管怎么说，总算解放了双手，让电脑慢慢去跑吧！</p>\n<div style=\"position: relative; width: 100%; height: 0; padding-bottom: 75%;\"><iframe src=\"//player.bilibili.com/player.html?aid=378319348&page=\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; height: 100%; left: 0; top: 0;\"></iframe></div>\n<h1 id=\"脚本获取\"><a class=\"markdownIt-Anchor\" href=\"#脚本获取\"></a> 脚本获取</h1>\n<p>关注公众号 “生信之巅”，聊天窗口回复 “e7e9” 获取下载链接。</p>\n<table align=\"center\"><tr>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" srcset=\"https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg\" alt=\"生信之巅微信公众号\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-right: 0px;margin-bottom: 5px;align: center;\"></td>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" srcset=\"https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg\" alt=\"生信之巅小程序码\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-left: 0px;margin-bottom: 5px;align: center\"></td>\n</tr></table>\n<p><font color=\"#FF0000\"><ruby><b>敬告</b>：使用文中脚本请引用本文网址，请尊重本人的劳动成果，谢谢！<rt><b>Notice</b>: When you use the scripts in this article, please cite the link of this webpage. Thank you!</rt></ruby></font></p>\n","more":"<p>有时候我们手里会得到一些 NCBI 的 assession number，且数量比较多，而我们真正需要的是序列，这时候手动挨个搜索和下载是不太现实的，除非是你闲得无事可做。其实有一个网页是可以批量下载序列的，即<a href=\"https://www.ncbi.nlm.nih.gov/sites/batchentrez\"> https://www.ncbi.nlm.nih.gov/sites/batchentrez</a> ，下面演示一下其用法。<strong>请就着文末视频食用。</strong></p>\n<ul>\n<li>\n<p>首先，<u>准备一份列表文件，其中包含需要下载序列的 IDs，每行一个 ID</u>。这里有一个从网上下载的 CaZY 数据库，本以为是序列文件，下载后才发现里面没有序列。这个文件包含三列，以制表符分隔各列，最后一列是 Assession number，因此前两列可以删掉。可以将文件内容复制到 Excel 中，删除前两列，将最后一列复制到一个新的文本文档中。也可以在支持正则表达式的文本编辑器中直接查找替换。<strong>刚刚的示例文件可以从<a href=\"http://www.cazy.org/IMG/cazy_data/cazy_data.zip\">这里</a>下载</strong>。正则表达式查找的公式为 “.+\\t (.+)”，其中 “.+” 代表的是任意多个字符，“\\t” 匹配的是制表符，+ 是贪婪的，一直遇到最后一个 “\\t” 才终止匹配。即 “.+\\t” 匹配的是前两列以及第二列后面的制表符，最后的 “(.+)” 匹配的是第三列。小括号的作用是捕获匹配的内容。替换的公式为 “$1”，表示第一个小括号内的内容，即第三列。</p>\n</li>\n<li>\n<p>接下来将得到的列表文件提交至网站上以下载序列，需要选择对应的数据库，这里选择 protein，点击 “Retrieve” 开始下载。由于序列较多，因此反应比较慢，需要耐心等待。估计是崩了，再试一遍，文件包含 2650471 个 ID，估计服务器吃不消，实在不行就拆分成几个文件，分批次下载。我这里用的是 EmEditor 软件，按照 10000 行每个文件对整个文件进行了拆分，得到了 266 个文件，现在拿其中的一个做演示，看看服务器是否吃得消。看来一万个也太多，二十几个试了一下，莫得问题。方法就是酱紫的，至于可以一次性下载多少，各位自己去试吧。搞定！</p>\n</li>\n<li>\n<p><strong>兄弟们不用试了，我已经试过了，一次只能搞几百个</strong>，对于几十万行的列表来说，手动逐个提交也是要命的，因此我写了一个 Perl 脚本 (download_NCBI.pl) 来完成该任务，<u>不过只能在 Linux 下运行</u>，代码如下：</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-perl\" data-language=\"perl\"><code class=\"language-perl\"><span class=\"token comment\">#!/usr/bin/perl</span>\n<span class=\"token keyword\">use</span> strict<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> warnings<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> LWP<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>Simple<span class=\"token punctuation\">;</span>\n<span class=\"token comment\"># Author: Liu hualin</span>\n<span class=\"token comment\"># Date: Sep 28, 2021</span>\n\n<span class=\"token comment\"># Usage: perl download_NCBI.pl 列表文件 序列类型（参照https://www.ncbi.nlm.nih.gov/sites/batchentrez数据库填写，常用的包括nucleotide, protein）</span>\n\n<span class=\"token keyword\">my</span> <span class=\"token variable\">@ids</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">my</span> <span class=\"token variable\">$dbtype</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$ARGV</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\"># nucleotide, protein</span>\n\nsystem<span class=\"token punctuation\">(</span><span class=\"token string\">\"split -l 300 $ARGV[0] splited_\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">my</span> <span class=\"token variable\">@splited</span> <span class=\"token operator\">=</span> glob<span class=\"token punctuation\">(</span><span class=\"token string\">\"splited_*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">foreach</span>  <span class=\"token punctuation\">(</span><span class=\"token variable\">@splited</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token variable\">$_</span><span class=\"token operator\">=~</span><span class=\"token regex\">/splited_(.+)/</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">my</span> <span class=\"token variable\">$out</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"seqs.$1.fasta\"</span><span class=\"token punctuation\">;</span>\n\topen IN<span class=\"token punctuation\">,</span> <span class=\"token variable\">$_</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">die</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token filehandle symbol\">&lt;IN></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tchomp<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token variable\">$_</span><span class=\"token operator\">=~</span><span class=\"token regex\">s/[\\r\\n]+//g</span><span class=\"token punctuation\">;</span>\n\t\tpush <span class=\"token variable\">@ids</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$_</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tgetstore<span class=\"token punctuation\">(</span><span class=\"token string\">\"http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=$dbtype&amp;rettype=fasta&amp;retmode=text&amp;id=\"</span><span class=\"token operator\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">@ids</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"$out\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token variable\">@ids</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tclose IN<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nsystem<span class=\"token punctuation\">(</span><span class=\"token string\">\"cat seqs.* > All.sequences.fas\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsystem<span class=\"token punctuation\">(</span><span class=\"token string\">\"rm splited_* seqs.*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>运行方法也贼简单，将脚本和列表文件放在同一目录下，然后在 Linux 终端里输入如下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">perl download_NCBI.pl cazy_ids.txt protein<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>其中 cazy_ids.txt 为包含 assession number 的列表文件，protein 表示列表里的 ID 是蛋白。最后面的这个参数可以在<a href=\"https://www.ncbi.nlm.nih.gov/sites/batchentrez\"> https://www.ncbi.nlm.nih.gov/sites/batchentrez</a> 左上角的 Database 查询，<strong>但是要全部小写</strong>。</p>\n<p>运行一下，看看效果！</p>\n<p><font color=\"#FF0000\">2000 years later...</font></p>\n<p>2650471/300=8835 个文件，最终生成的序列文件名称为 “All.sequences.fas”，中间过程文件会被自动删除。千年以后拿结果，不管怎么说，总算解放了双手，让电脑慢慢去跑吧！</p>\n<div style=\"position: relative; width: 100%; height: 0; padding-bottom: 75%;\"><iframe src=\"//player.bilibili.com/player.html?aid=378319348&page=\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; height: 100%; left: 0; top: 0;\"></iframe></div>\n<h1 id=\"脚本获取\"><a class=\"markdownIt-Anchor\" href=\"#脚本获取\"></a> 脚本获取</h1>\n<p>关注公众号 “生信之巅”，聊天窗口回复 “e7e9” 获取下载链接。</p>\n<table align=\"center\"><tr>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" alt=\"生信之巅微信公众号\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-right: 0px;margin-bottom: 5px;align: center;\"></td>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" alt=\"生信之巅小程序码\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-left: 0px;margin-bottom: 5px;align: center\"></td>\n</tr></table>\n<p><font color=\"#FF0000\"><ruby><b>敬告</b>：使用文中脚本请引用本文网址，请尊重本人的劳动成果，谢谢！<rt><b>Notice</b>: When you use the scripts in this article, please cite the link of this webpage. Thank you!</rt></ruby></font></p>\n","categories":[{"name":"生物信息","path":"api/categories/生物信息.json"}],"tags":[{"name":"CAZy","path":"api/tags/CAZy.json"},{"name":"NCBI","path":"api/tags/NCBI.json"},{"name":"下载","path":"api/tags/下载.json"}]}