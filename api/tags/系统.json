{"name":"系统","postlist":[{"title":"CentOS 7 升级 GCC 教程（以 GCC 9 为例）","slug":"CentOS-7-升级-GCC-教程（以-GCC-9-为例）","date":"2025-10-19T13:33:35.000Z","updated":"2025-10-19T13:40:18.210Z","comments":true,"path":"api/articles/CentOS-7-升级-GCC-教程（以-GCC-9-为例）.json","excerpt":null,"keywords":null,"cover":"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg","content":"<h2 id=\"一、教程背景\"><a href=\"#一、教程背景\" class=\"headerlink\" title=\"一、教程背景\"></a>一、教程背景</h2><p>CentOS 7 系统默认预装的 GCC 版本为 <strong>4.8.5</strong>（发布于 2015 年），而现代开发场景中，许多软件（如高版本 Python、TensorFlow、C++ 11+ 项目等）对 GCC 版本要求较高（需 5.4+ 及以上）。因此需升级 GCC，但直接覆盖系统默认 GCC 可能导致依赖冲突（如 <code>yum</code> 工具依赖旧版本）。</p>\n<p>本教程采用 <strong>SCL（Software Collections）仓库</strong> 方式升级，可在不覆盖系统默认 GCC 的前提下，安装并使用高版本 GCC（以 GCC 9 为例，稳定且兼容性强），安全且灵活。</p>\n<h2 id=\"二、升级前准备\"><a href=\"#二、升级前准备\" class=\"headerlink\" title=\"二、升级前准备\"></a>二、升级前准备</h2><p>确保系统已联网，且拥有 <code>root</code> 权限（或使用 <code>sudo</code> 权限执行命令）。</p>\n<h2 id=\"三、详细升级步骤\"><a href=\"#三、详细升级步骤\" class=\"headerlink\" title=\"三、详细升级步骤\"></a>三、详细升级步骤</h2><h3 id=\"1-备份原有-YUM-源（关键：防止配置出错）\"><a href=\"#1-备份原有-YUM-源（关键：防止配置出错）\" class=\"headerlink\" title=\"1. 备份原有 YUM 源（关键：防止配置出错）\"></a>1. 备份原有 YUM 源（关键：防止配置出错）</h3><p>CentOS 7 停止官方维护后，默认 YUM 源可能失效，且后续需添加新仓库配置。先备份原有源文件，避免误操作后无法恢复：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建备份目录</span></span><br><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> -p /etc/yum.repos.d/backup</span><br><span class=\"line\"><span class=\"comment\"># 将所有 .repo 源文件移动到备份目录</span></span><br><span class=\"line\">sudo <span class=\"built_in\">mv</span> /etc/yum.repos.d/*.repo /etc/yum.repos.d/backup/</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"2-添加-SCL-仓库配置文件（使用阿里云源）\"><a href=\"#2-添加-SCL-仓库配置文件（使用阿里云源）\" class=\"headerlink\" title=\"2. 添加 SCL 仓库配置文件（使用阿里云源）\"></a>2. 添加 SCL 仓库配置文件（使用阿里云源）</h3><p>SCL 仓库是升级 GCC 的核心，这里选择 <strong>阿里云 SCL 源</strong>（国内访问速度快，稳定性高），手动创建仓库配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 用 vi 编辑器创建并编辑 centos-sclo-rh.repo 文件</span></span><br><span class=\"line\">sudo vi /etc/yum.repos.d/centos-sclo-rh.repo</span><br></pre></td></tr></table></figure>\n\n<p>打开编辑器后，按 <code>i</code> 进入编辑模式，<strong>完整复制以下内容</strong>（不要遗漏或修改格式）：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[centos-sclo-rh]</span><br><span class=\"line\">name=CentOS-7 - SCLo rh</span><br><span class=\"line\">baseurl=https://mirrors.aliyun.com/centos/7/sclo/x86_64/rh/</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=https://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-SIG-SCLo</span><br><span class=\"line\">enabled=1</span><br></pre></td></tr></table></figure>\n\n<p>复制完成后，按 <code>Esc</code> 退出编辑模式，输入 <code>:wq</code> 并回车（保存并退出 vi 编辑器）。</p>\n<h3 id=\"3-清理-YUM-缓存并生成新缓存\"><a href=\"#3-清理-YUM-缓存并生成新缓存\" class=\"headerlink\" title=\"3. 清理 YUM 缓存并生成新缓存\"></a>3. 清理 YUM 缓存并生成新缓存</h3><p>新添加仓库后，需清理旧缓存、加载新仓库的包列表，确保后续安装能找到正确的软件包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 清理所有 YUM 缓存</span></span><br><span class=\"line\">sudo yum clean all &amp;&amp; </span><br><span class=\"line\"><span class=\"comment\"># 生成新的缓存（下载阿里云源的包列表）</span></span><br><span class=\"line\">sudo yum makecache</span><br></pre></td></tr></table></figure>\n\n<p>执行后耐心等待（时间取决于网络速度），若无报错则缓存生成成功。</p>\n<h3 id=\"4-（可选）安装-SCL-仓库基础包\"><a href=\"#4-（可选）安装-SCL-仓库基础包\" class=\"headerlink\" title=\"4. （可选）安装 SCL 仓库基础包\"></a>4. （可选）安装 SCL 仓库基础包</h3><p>多数情况下，步骤 2 添加的配置文件已足够，但若后续安装 GCC 时提示“仓库不存在”，可执行此步骤安装 SCL 仓库基础包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y centos-release-scl</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"5-安装高版本-GCC（GCC-9）\"><a href=\"#5-安装高版本-GCC（GCC-9）\" class=\"headerlink\" title=\"5. 安装高版本 GCC（GCC 9）\"></a>5. 安装高版本 GCC（GCC 9）</h3><p>通过 YUM 安装 <code>devtoolset-9</code>（对应 GCC 9 版本），并添加 <code>--nogpgcheck</code> 参数（跳过 GPG 密钥验证，因 CentOS 7 官方密钥源已失效，不影响包安全性）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils --nogpgcheck</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>devtoolset-9-gcc</code>：GCC 9 核心包</li>\n<li><code>devtoolset-9-gcc-c++</code>：C++ 编译组件（如需编译 C++ 项目必装）</li>\n<li><code>devtoolset-9-binutils</code>：二进制工具集（辅助编译）</li>\n</ul>\n<p>执行后等待安装完成（约 50MB 下载量），无报错则安装成功。</p>\n<h3 id=\"6-启用高版本-GCC\"><a href=\"#6-启用高版本-GCC\" class=\"headerlink\" title=\"6. 启用高版本 GCC\"></a>6. 启用高版本 GCC</h3><p>SCL 安装的 GCC 不会自动生效，需手动启用，支持 <strong>临时启用</strong> 和 <strong>永久启用</strong>，根据需求选择：</p>\n<h4 id=\"方式-1：临时启用（仅当前终端有效）\"><a href=\"#方式-1：临时启用（仅当前终端有效）\" class=\"headerlink\" title=\"方式 1：临时启用（仅当前终端有效）\"></a>方式 1：临时启用（仅当前终端有效）</h4><p>适用于“临时使用高版本 GCC”的场景，关闭终端后恢复默认 GCC 4.8.5：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scl <span class=\"built_in\">enable</span> devtoolset-9 bash</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"方式-2：永久启用（推荐）\"><a href=\"#方式-2：永久启用（推荐）\" class=\"headerlink\" title=\"方式 2：永久启用（推荐）\"></a>方式 2：永久启用（推荐）</h4><p>若需每次登录终端都自动使用 GCC 9，可将启用命令写入环境变量文件，分“当前用户”和“全局所有用户”两种场景：</p>\n<h5 id=\"场景-A：仅当前用户生效（推荐普通用户）\"><a href=\"#场景-A：仅当前用户生效（推荐普通用户）\" class=\"headerlink\" title=\"场景 A：仅当前用户生效（推荐普通用户）\"></a>场景 A：仅当前用户生效（推荐普通用户）</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将启用命令写入当前用户的 .bashrc 文件</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;source /opt/rh/devtoolset-9/enable&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class=\"line\"><span class=\"comment\"># 立即生效（无需重启终端）</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"场景-B：全局所有用户生效（需-root-权限）\"><a href=\"#场景-B：全局所有用户生效（需-root-权限）\" class=\"headerlink\" title=\"场景 B：全局所有用户生效（需 root 权限）\"></a>场景 B：全局所有用户生效（需 root 权限）</h5><p>适用于多用户服务器，所有用户登录后均使用 GCC 9：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 切换到 root 用户（若当前非 root）</span></span><br><span class=\"line\">su root</span><br><span class=\"line\"><span class=\"comment\"># 将启用命令写入全局环境变量文件 /etc/profile</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;source /opt/rh/devtoolset-9/enable&quot;</span> &gt;&gt; /etc/profile</span><br><span class=\"line\"><span class=\"comment\"># 立即生效</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"7-验证-GCC-升级结果\"><a href=\"#7-验证-GCC-升级结果\" class=\"headerlink\" title=\"7. 验证 GCC 升级结果\"></a>7. 验证 GCC 升级结果</h3><p>执行以下命令查看当前 GCC 版本，确认是否升级成功：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -v</span><br></pre></td></tr></table></figure>\n\n<p>若输出类似以下内容（版本号为 9.3.1 及以上），则说明升级成功：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Using built-in specs.</span><br><span class=\"line\">COLLECT_GCC=gcc</span><br><span class=\"line\">COLLECT_LTO_WRAPPER=/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/lto-wrapper</span><br><span class=\"line\">Target: x86_64-redhat-linux</span><br><span class=\"line\">Configured with: ../configure --enable-bootstrap --enable-languages=c,c++,fortran,lto --prefix=/opt/rh/devtoolset-9/root/usr --mandir=/opt/rh/devtoolset-9/root/usr/share/man --infodir=/opt/rh/devtoolset-9/root/usr/share/info --with-bugurl=http://bugzilla.redhat.com/bugzilla --enable-shared --enable-threads=posix --enable-checking=release --enable-multilib --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-gnu-unique-object --enable-linker-build-id --with-gcc-major-version-only --with-linker-hash-style=gnu --with-default-libstdcxx-abi=gcc4-compatible --enable-plugin --enable-initfini-array --with-isl=/builddir/build/BUILD/gcc-9.3.1-20200408/obj-x86_64-redhat-linux/isl-install --disable-libmpx --enable-gnu-indirect-function --with-tune=generic --with-arch_32=x86-64 --build=x86_64-redhat-linux</span><br><span class=\"line\">Thread model: posix</span><br><span class=\"line\">gcc version 9.3.1 20200408 (Red Hat 9.3.1-2.2.el7) (GCC)</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"四、常见问题与注意事项\"><a href=\"#四、常见问题与注意事项\" class=\"headerlink\" title=\"四、常见问题与注意事项\"></a>四、常见问题与注意事项</h2><ol>\n<li><p><strong>若需安装其他 GCC 版本</strong>：<br>本教程以 GCC 9 为例，若需安装 GCC 10，只需将命令中的 <code>devtoolset-9</code> 替换为 <code>devtoolset-10</code>（如 <code>devtoolset-10-gcc</code>），其他步骤一致。</p>\n</li>\n<li><p><strong>系统默认 GCC 未被覆盖</strong>：<br>SCL 安装的 GCC 位于 <code>/opt/rh/devtoolset-9/root/usr/bin/</code>，系统默认 GCC（4.8.5）仍在 <code>/usr/bin/gcc</code>，若需临时使用旧版本，可直接执行 <code>/usr/bin/gcc -v</code>。</p>\n</li>\n<li><p><strong>安装时提示“无可用软件包”</strong>：<br>重新执行步骤 3（清理并生成缓存），或检查步骤 2 的仓库配置文件是否正确（确保 <code>baseurl</code> 未写错）。</p>\n</li>\n</ol>\n<h2 id=\"五、总结\"><a href=\"#五、总结\" class=\"headerlink\" title=\"五、总结\"></a>五、总结</h2><p>通过本教程，可在 CentOS 7 上安全升级 GCC 至 9 版本（或更高），满足现代软件开发需求，且不影响系统原有依赖。若后续需编译软件（如 Python、C++ 项目），直接使用 <code>gcc</code> 或 <code>g++</code> 命令即可调用高版本工具。</p>\n<h2 id=\"加关注\"><a href=\"#加关注\" class=\"headerlink\" title=\"加关注\"></a>加关注</h2><p>关注公众号“生信之巅”。</p>\n<table align=\"center\"><tr>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅微信公众号\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-right: 0px;margin-bottom: 5px;align: center;\"></td>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅小程序码\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-left: 0px;margin-bottom: 5px;align: center\"></td>\n</tr></table>\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"Linux","path":"api/tags/Linux.json"},{"name":"系统","path":"api/tags/系统.json"}]},{"title":"WSL安装Docker避坑指北","slug":"WSL安装Docker避坑指北","date":"2022-03-10T02:43:42.000Z","updated":"2024-03-11T13:07:17.000Z","comments":true,"path":"api/articles/WSL安装Docker避坑指北.json","excerpt":null,"keywords":null,"cover":"https://fastly.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg","content":"<h1 id=\"升级WSL\"><a href=\"#升级WSL\" class=\"headerlink\" title=\"升级WSL\"></a>升级WSL</h1><ul>\n<li><p>查看已安装的WSL版本(Windows PowerShell中运行)</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wsl.exe -l -v</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>  显示如下：</p>\n  <figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  NAME                   STATE           VERSION</span><br><span class=\"line\">* Ubuntu-20.04           Running         1</span><br><span class=\"line\">  docker-desktop-data    Stopped         2</span><br></pre></td></tr></table></figure>\n<p>  看到安装的为WSL1，据说WSL1不支持Docker，所以换成WSL2，至于WSL1 和WSL2的异同可参考<a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/compare-versions\">比较 WSL 1 和 WSL 2</a>。</p>\n</li>\n<li><p>安装WSL2 (Windows PowerShell中运行)</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wsl.exe --set-version ubuntu-20.04 2</span><br></pre></td></tr></table></figure>\n<p>  显示如下：</p>\n  <figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">正在进行转换，这可能需要几分钟时间...</span><br><span class=\"line\">有关与 WSL 2 的主要区别的信息，请访问 https://aka.ms/wsl2</span><br><span class=\"line\">转换完成。</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"安装Docker\"><a href=\"#安装Docker\" class=\"headerlink\" title=\"安装Docker\"></a>安装Docker</h1><p>在WSL中运行如下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get remove docker docker-engine docker.io</span><br><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install apt-transport-https ca-certificates curl software-properties-common</span><br><span class=\"line\">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class=\"line\">sudo apt-key fingerprint 0EBFCD88</span><br><span class=\"line\">sudo add-apt-repository <span class=\"string\">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class=\"subst\">$(lsb_release -cs)</span> stable&quot;</span></span><br><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install docker-ce</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Root用户启动Docker\"><a href=\"#Root用户启动Docker\" class=\"headerlink\" title=\"Root用户启动Docker\"></a>Root用户启动Docker</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo su</span><br><span class=\"line\"><span class=\"built_in\">export</span> DOCKER_HOST=tcp://localhost:2375</span><br><span class=\"line\">service docker start</span><br></pre></td></tr></table></figure>\n<p>显示如下：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* Starting Docker: docker</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"测试-还是在root用户\"><a href=\"#测试-还是在root用户\" class=\"headerlink\" title=\"测试(还是在root用户)\"></a>测试(还是在root用户)</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker version</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"报错\"><a href=\"#报错\" class=\"headerlink\" title=\"报错\"></a>报错</h1><p>以下是报错信息：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Client: Docker Engine - Community</span><br><span class=\"line\"> Version:           20.10.12</span><br><span class=\"line\"> API version:       1.41</span><br><span class=\"line\"> Go version:        go1.16.12</span><br><span class=\"line\"> Git commit:        e91ed57</span><br><span class=\"line\"> Built:             Mon Dec 13 11:45:33 2021</span><br><span class=\"line\"> OS/Arch:           linux/amd64</span><br><span class=\"line\"> Context:           default</span><br><span class=\"line\"> Experimental:      true</span><br><span class=\"line\">Cannot connect to the Docker daemon at tcp://localhost:2375. Is the docker daemon running?</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"修复\"><a href=\"#修复\" class=\"headerlink\" title=\"修复\"></a>修复</h1><p><strong>回到普通用户运行</strong></p>\n<ul>\n<li><p>编辑环境变量</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi ~/.bashrc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在最下面添加一行：</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> DOCKER_HOST=<span class=\"string\">&#x27;unix:///var/run/docker.sock&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>再次测试</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker version</span><br></pre></td></tr></table></figure>\n<p>  显示如下表明成功：</p>\n  <figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Client: Docker Engine - Community</span><br><span class=\"line\"> Version:           20.10.12</span><br><span class=\"line\"> API version:       1.41</span><br><span class=\"line\"> Go version:        go1.16.12</span><br><span class=\"line\"> Git commit:        e91ed57</span><br><span class=\"line\"> Built:             Mon Dec 13 11:45:33 2021</span><br><span class=\"line\"> OS/Arch:           linux/amd64</span><br><span class=\"line\"> Context:           default</span><br><span class=\"line\"> Experimental:      true</span><br><span class=\"line\"></span><br><span class=\"line\">Server: Docker Engine - Community</span><br><span class=\"line\"> Engine:</span><br><span class=\"line\">  Version:          20.10.12</span><br><span class=\"line\">  API version:      1.41 (minimum version 1.12)</span><br><span class=\"line\">  Go version:       go1.16.12</span><br><span class=\"line\">  Git commit:       459d0df</span><br><span class=\"line\">  Built:            Mon Dec 13 11:43:42 2021</span><br><span class=\"line\">  OS/Arch:          linux/amd64</span><br><span class=\"line\">  Experimental:     false</span><br><span class=\"line\"> containerd:</span><br><span class=\"line\">  Version:          1.4.13</span><br><span class=\"line\">  GitCommit:        9cc61520f4cd876b86e77edfeb88fbcd536d1f9d</span><br><span class=\"line\"> runc:</span><br><span class=\"line\">  Version:          1.0.3</span><br><span class=\"line\">  GitCommit:        v1.0.3-0-gf46b6ba</span><br><span class=\"line\"> docker-init:</span><br><span class=\"line\">  Version:          0.19.0</span><br><span class=\"line\">  GitCommit:        de40ad0</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://blog.csdn.net/qq_44701736/article/details/119411485\">WSL安装docker</a></li>\n<li><a href=\"https://www.jianshu.com/p/7c0084fd9003\">Cannot connect to the Docker daemon at tcp:&#x2F;&#x2F;localhost:2375. Is the docker daemon running?</a></li>\n</ul>\n<h1 id=\"代码获取\"><a href=\"#代码获取\" class=\"headerlink\" title=\"代码获取\"></a>代码获取</h1><p>关注公众号“生信之巅”，聊天窗口回复“”获取下载链接。</p>\n<table align=\"center\"><tr>\n  <td align=\"center\"><img src=\"https://fastly.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://fastly.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅微信公众号\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-right: 0px;margin-bottom: 5px;align: center;\"></td>\n  <td align=\"center\"><img src=\"https://fastly.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" class=\"lazyload placeholder\" data-srcset=\"https://fastly.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅小程序码\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-left: 0px;margin-bottom: 5px;align: center\"></td>\n</tr></table>\n\n\n<p><font color=\"#FF0000\"><ruby><b>敬告</b>：使用文中脚本请引用本文网址，请尊重本人的劳动成果，谢谢！<rt><b>Notice</b>: When you use the scripts in this article, please cite the link of this webpage. Thank you!</rt></ruby></font></p>\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"Linux","path":"api/tags/Linux.json"},{"name":"系统","path":"api/tags/系统.json"},{"name":"虚拟机","path":"api/tags/虚拟机.json"}]},{"title":"windows 10 中文乱码解决方案","slug":"windows-10-中文乱码解决方案","date":"2019-03-01T13:53:01.000Z","updated":"2024-03-11T13:07:17.000Z","comments":true,"path":"api/articles/windows-10-中文乱码解决方案.json","excerpt":null,"keywords":null,"cover":"https://fastly.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/control_panel_1.png","content":"<p>安装的英文原版系统，导致多数中文乱码，即便是安装了中文语言包，如果设置错误，仍旧无法正确显示中文。</p>\n<span id=\"more\"></span>\n<p>进入正题，按如图所示一步步完成设置，重启系统便可解决问题。我的系统是18845.1001版本，其他版本应该不会差别太大。</p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/control_panel_1.png\" class=\"lazyload placeholder\" data-srcset=\"https://fastly.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/control_panel_1.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"通过开始菜单进入控制面板\"></p>\n<center>通过开始菜单进入控制面板</center>\n\n<p><img src=\"https://fastly.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/control_panel_2.png\" class=\"lazyload placeholder\" data-srcset=\"https://fastly.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/control_panel_2.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"日期、时间和区域格式设置\"></p>\n<center>日期、时间和区域格式设置</center>\n\n<p><img src=\"https://fastly.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/control_panel_3.png\" class=\"lazyload placeholder\" data-srcset=\"https://fastly.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/control_panel_3.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"下拉相关设置\"></p>\n<center>下拉相关设置</center>\n\n<p><img src=\"https://fastly.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/control_panel_4.png\" class=\"lazyload placeholder\" data-srcset=\"https://fastly.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/control_panel_4.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"选择区域\"></p>\n<center>选择区域</center>\n\n<p><img src=\"https://fastly.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/control_panel_5.png\" class=\"lazyload placeholder\" data-srcset=\"https://fastly.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/control_panel_5.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"管理-更改系统区域设置\"></p>\n<center>管理-更改系统区域设置</center>\n\n<p><img src=\"https://fastly.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/control_panel_6.png\" class=\"lazyload placeholder\" data-srcset=\"https://fastly.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/control_panel_6.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"设置为中文，不要选择Beta版\"></p>\n<center>设置为中文，不要选择Beta版</center>\n\n<p><img src=\"https://fastly.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/control_panel_7.png\" class=\"lazyload placeholder\" data-srcset=\"https://fastly.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/control_panel_7.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"复制设置\"></p>\n<center>复制设置</center>\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"系统","path":"api/tags/系统.json"}]},{"title":"获取下一版本的内部预览版windows系统","slug":"获取下一个版本的内部预览版windows系统","date":"2019-02-17T11:19:04.000Z","updated":"2024-03-11T13:07:17.000Z","comments":true,"path":"api/articles/获取下一个版本的内部预览版windows系统.json","excerpt":null,"keywords":null,"cover":"https://fastly.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/papers/skip_user.png","content":"<p>Windows内部预览版系统快速通道已经关闭，但是可以通过修改注册表以获取下一个版本的Windows。</p>\n<span id=\"more\"></span>\n\n<ol>\n<li><p>首先，您必须已经是Windows Insider才能利用这一技巧。 如果您是Windows Insider，点击“设置”→“更新和安全”→“Windows预览体验计划”，将“你希望接收哪类内容”一项设置为“跳到下一个Windows版本”。注意：调整完该选项时请保持窗口不动，即不要关闭也不要切换其他面板；</p>\n</li>\n<li><p>启动注册表编辑器（点击开始菜单左下角搜索框，输入“regedit”进入注册表编辑器）， 找到：</p>\n</li>\n</ol>\n<p>HKEY_LOCAL_MACHINE\\SOFTWARE \\Microsoft\\WindowsSelfHost\\UI\\Selection</p>\n<p>双击“UIContentType”并将其更改为“Skip”。 然后，您应该找到“UIRing”并将其更改为“WIF”。</p>\n<ol start=\"3\">\n<li>然后找到：</li>\n</ol>\n<p>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\WindowsSelfHost\\Applicability</p>\n<p>将“Ring”的值改为“WIF”，“Content Type”和ContentBackup的值更改为“Skip”。</p>\n<ol start=\"4\">\n<li><p>退回“Windows预览体验计划”面板，随便点击一个标签再切换回来，如果打开后依旧固定在“跳到下一个Windows版本”选项，即代表上车成功！<br><img src=\"https://fastly.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/papers/skip_user.png\" class=\"lazyload placeholder\" data-srcset=\"https://fastly.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/papers/skip_user.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"Skip用户\"></p>\n<center>Skip用户</center>\n\n</li>\n<li><p>点击“Windows更新”→“检查更新”，获取新版本系统<br><img src=\"https://fastly.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/papers/skip_user2.png\" class=\"lazyload placeholder\" data-srcset=\"https://fastly.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/papers/skip_user2.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"Skip用户的更新界面\"></p>\n<center>Skip用户的更新界面</center></li>\n</ol>\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"系统","path":"api/tags/系统.json"}]}]}