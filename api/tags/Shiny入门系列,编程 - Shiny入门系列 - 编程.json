{"name":"Shiny入门系列,编程 - Shiny入门系列 - 编程","postlist":[{"title":"Shiny从入门到入定——4-挖坑完毕之案例研究","slug":"Shiny从入门到入定——4-挖坑完毕之案例研究","date":"2024-01-24T11:17:55.000Z","updated":"2024-03-11T13:07:17.000Z","comments":true,"path":"api/articles/Shiny从入门到入定——4-挖坑完毕之案例研究.json","excerpt":null,"keywords":null,"cover":"https://d33wubrfki0l68.cloudfront.net/ca164e63cd77225daf58fc6351cf6453e04e0af6/76632/basic-case-study_files/figure-html/toilets-raw-1.png","content":"<h1 id=\"4-案例研究：ER损伤\"><a href=\"#4-案例研究：ER损伤\" class=\"headerlink\" title=\"4 案例研究：ER损伤\"></a>4 案例研究：ER损伤</h1><h2 id=\"4-1-简介\"><a href=\"#4-1-简介\" class=\"headerlink\" title=\"4.1 简介\"></a>4.1 简介</h2><p>在过去的三个章节中，我向您介绍了一系列新概念。为了帮助理解他们，我们现在将浏览一个更丰富的Shiny应用程序，该应用程序探索了一个有趣的数据集，并将您迄今为止看到的许多想法整合在一起。我们将从Shiny之外进行一些数据分析开始，然后将其转化为应用程序，从简单开始，然后逐步添加更多细节。</p>\n<p>在本章中，我们将使用vroom（用于快速读取文件）和tidyverse（用于一般数据分析）来补充Shiny。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>shiny<span class=\"punctuation\">)</span></span><br><span class=\"line\">library<span class=\"punctuation\">(</span>vroom<span class=\"punctuation\">)</span></span><br><span class=\"line\">library<span class=\"punctuation\">(</span>tidyverse<span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-2-数据\"><a href=\"#4-2-数据\" class=\"headerlink\" title=\"4.2 数据\"></a>4.2 数据</h2><p>我们将探索消费者产品安全委员会收集的美国国家电子伤害监测系统 (NEISS) 的数据。这是一项长期研究，记录了美国代表性医院中发生的所有事故。这是一个有趣的数据集，因为每个人都熟悉这个领域，每个观察都附有简短的叙述，解释事故是如何发生的。您可以在 <a href=\"https://github.com/hadley/neiss\">https://github.com/hadley/neiss</a> 了解有关此数据集的更多信息。</p>\n<p>在本章中，我将只关注2017年的数据。这使得数据足够小（约10 MB），易于存储在git中（以及本书的其余部分），这意味着我们不需要考虑快速导入数据的复杂策略（我们将在本书稍后回到这些策略）。您可以在<a href=\"https://github.com/hadley/mastering-shiny/blob/master/neiss/data.R\">https://github.com/hadley/mastering-shiny/blob/master/neiss/data.R</a>上看到我用于创建本章提取的代码。</p>\n<p>如果你想把数据传到自己的电脑上，运行这段代码：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dir.create<span class=\"punctuation\">(</span><span class=\"string\">&quot;neiss&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; Warning in dir.create(&quot;neiss&quot;): &#x27;neiss&#x27; already exists</span></span><br><span class=\"line\">download <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>name<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  url <span class=\"operator\">&lt;-</span> <span class=\"string\">&quot;https://github.com/hadley/mastering-shiny/raw/master/neiss/&quot;</span></span><br><span class=\"line\">  download.file<span class=\"punctuation\">(</span>paste0<span class=\"punctuation\">(</span>url<span class=\"punctuation\">,</span> name<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> paste0<span class=\"punctuation\">(</span><span class=\"string\">&quot;neiss/&quot;</span><span class=\"punctuation\">,</span> name<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> quiet <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">download<span class=\"punctuation\">(</span><span class=\"string\">&quot;injuries.tsv.gz&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">download<span class=\"punctuation\">(</span><span class=\"string\">&quot;population.tsv&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">download<span class=\"punctuation\">(</span><span class=\"string\">&quot;products.tsv&quot;</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>我们将使用的主要数据集是伤害数据集，其中包含约25万条观察记录：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">injuries <span class=\"operator\">&lt;-</span> vroom<span class=\"operator\">::</span>vroom<span class=\"punctuation\">(</span><span class=\"string\">&quot;neiss/injuries.tsv.gz&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">injuries</span><br><span class=\"line\"><span class=\"comment\">#&gt; # A tibble: 255,064 × 10</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   trmt_date    age sex   race  body_part   diag    locat…¹ prod_…² weight narra…³</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   &lt;date&gt;     &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;       &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;  </span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 1 2017-01-01    71 male  white Upper Trunk Contus… Other …    1807   77.7 71YOM …</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 2 2017-01-01    16 male  white Lower Arm   Burns,… Home        676   77.7 16YOM …</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 3 2017-01-01    58 male  white Upper Trunk Contus… Home        649   77.7 58 YOM…</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 4 2017-01-01    21 male  white Lower Trunk Strain… Home       4076   77.7 21 YOM…</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 5 2017-01-01    54 male  white Head        Inter … Other …    1807   77.7 54 YOM…</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 6 2017-01-01    21 male  white Hand        Fractu… Home       1884   77.7 21 YOM…</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; # … with 255,058 more rows, and abbreviated variable names ¹​location,</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; #   ²​prod_code, ³​narrative</span></span><br></pre></td></tr></table></figure>\n\n<p>每行代表一起单次事故，有10个变量：</p>\n<ul>\n<li><p><code>trmt_date</code>是该人被送往医院的日期（不是事故发生的日期）。</p>\n</li>\n<li><p><code>age</code>、<code>sex</code>和<code>race</code>给出了发生事故的人的人口统计信息。</p>\n</li>\n<li><p><code>body_part</code>是身体受伤部位的位置（如脚踝或耳朵）；<code>location</code>是事故发生的地方（如家庭或学校）。</p>\n</li>\n<li><p><code>diag</code>给出了伤害的基本诊断（如骨折或撕裂）。</p>\n</li>\n<li><p><code>prod_code</code>是与伤害相关的主要产品。</p>\n</li>\n<li><p><code>weight</code>是统计权重，给出了如果将此数据集按比例缩放到整个美国人口，遭受这种伤害的人数估计。</p>\n</li>\n<li><p><code>narrative</code>是关于事故如何发生的简短故事。</p>\n</li>\n</ul>\n<p>我们将将其与其他两个数据帧配对以获取更多上下文：<code>products</code>让我们可以从产品代码中查找产品名称，<code>population</code>让我们知道2017年美国每一种年龄和性别组合的总人口数。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">products <span class=\"operator\">&lt;-</span> vroom<span class=\"operator\">::</span>vroom<span class=\"punctuation\">(</span><span class=\"string\">&quot;neiss/products.tsv&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">products</span><br><span class=\"line\"><span class=\"comment\">#&gt; # A tibble: 38 × 2</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   prod_code title                            </span></span><br><span class=\"line\"><span class=\"comment\">#&gt;       &lt;dbl&gt; &lt;chr&gt;                            </span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 1       464 knives, not elsewhere classified </span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 2       474 tableware and accessories        </span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 3       604 desks, chests, bureaus or buffets</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 4       611 bathtubs or showers              </span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 5       649 toilets                          </span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 6       676 rugs or carpets, not specified   </span></span><br><span class=\"line\"><span class=\"comment\">#&gt; # … with 32 more rows</span></span><br><span class=\"line\"></span><br><span class=\"line\">population <span class=\"operator\">&lt;-</span> vroom<span class=\"operator\">::</span>vroom<span class=\"punctuation\">(</span><span class=\"string\">&quot;neiss/population.tsv&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">population</span><br><span class=\"line\"><span class=\"comment\">#&gt; # A tibble: 170 × 3</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;     age sex    population</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 1     0 female    1924145</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 2     0 male      2015150</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 3     1 female    1943534</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 4     1 male      2031718</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 5     2 female    1965150</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 6     2 male      2056625</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; # … with 164 more rows</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-3-探索\"><a href=\"#4-3-探索\" class=\"headerlink\" title=\"4.3 探索\"></a>4.3 探索</h2><p>在我们创建应用程序之前，让我们先来探索一下数据。我们将从一款具有有趣故事的产品开始：649，“厕所”。首先，我们将提取与此产品相关的伤害：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">selected <span class=\"operator\">&lt;-</span> injuries <span class=\"operator\">%&gt;%</span> filter<span class=\"punctuation\">(</span>prod_code <span class=\"operator\">==</span> <span class=\"number\">649</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">nrow<span class=\"punctuation\">(</span>selected<span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] 2993</span></span><br></pre></td></tr></table></figure>\n\n<p>接下来，我们将进行一些基本的汇总，查看与厕所相关的伤害的位置、身体部位和诊断。请注意，我用<code>weight</code>变量加权，这样计数可以解释为整个美国估计的总伤害数。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">selected <span class=\"operator\">%&gt;%</span> count<span class=\"punctuation\">(</span>location<span class=\"punctuation\">,</span> wt <span class=\"operator\">=</span> weight<span class=\"punctuation\">,</span> sort <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; # A tibble: 6 × 2</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   location                         n</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   &lt;chr&gt;                        &lt;dbl&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 1 Home                       99603. </span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 2 Other Public Property      18663. </span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 3 Unknown                    16267. </span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 4 School                       659. </span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 5 Street Or Highway             16.2</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 6 Sports Or Recreation Place    14.8</span></span><br><span class=\"line\"></span><br><span class=\"line\">selected <span class=\"operator\">%&gt;%</span> count<span class=\"punctuation\">(</span>body_part<span class=\"punctuation\">,</span> wt <span class=\"operator\">=</span> weight<span class=\"punctuation\">,</span> sort <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; # A tibble: 24 × 2</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   body_part        n</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   &lt;chr&gt;        &lt;dbl&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 1 Head        31370.</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 2 Lower Trunk 26855.</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 3 Face        13016.</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 4 Upper Trunk 12508.</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 5 Knee         6968.</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 6 N.S./Unk     6741.</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; # … with 18 more rows</span></span><br><span class=\"line\"></span><br><span class=\"line\">selected <span class=\"operator\">%&gt;%</span> count<span class=\"punctuation\">(</span>diag<span class=\"punctuation\">,</span> wt <span class=\"operator\">=</span> weight<span class=\"punctuation\">,</span> sort <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; # A tibble: 20 × 2</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   diag                       n</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   &lt;chr&gt;                  &lt;dbl&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 1 Other Or Not Stated   32897.</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 2 Contusion Or Abrasion 22493.</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 3 Inter Organ Injury    21525.</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 4 Fracture              21497.</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 5 Laceration            18734.</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 6 Strain, Sprain         7609.</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; # … with 14 more rows</span></span><br></pre></td></tr></table></figure>\n\n<p>正如你可能预期的那样，涉及厕所的伤害最常发生在家里。最常涉及的身体部位可能表明这些伤害是跌倒造成的（因为头部和脸部通常不涉及日常厕所使用），而且诊断似乎相当多样化。</p>\n<p>我们还可以探索年龄和性别之间的模式。这里我们有足够的数据，表格不是很有用，所以我做了一个图，图4.1，这使得图案更加明显。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">summary <span class=\"operator\">&lt;-</span> selected <span class=\"operator\">%&gt;%</span> </span><br><span class=\"line\">  count<span class=\"punctuation\">(</span>age<span class=\"punctuation\">,</span> sex<span class=\"punctuation\">,</span> wt <span class=\"operator\">=</span> weight<span class=\"punctuation\">)</span></span><br><span class=\"line\">summary</span><br><span class=\"line\"><span class=\"comment\">#&gt; # A tibble: 208 × 3</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;     age sex         n</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 1     0 female   4.76</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 2     0 male    14.3 </span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 3     1 female 253.  </span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 4     1 male   231.  </span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 5     2 female 438.  </span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 6     2 male   632.  </span></span><br><span class=\"line\"><span class=\"comment\">#&gt; # … with 202 more rows</span></span><br><span class=\"line\"></span><br><span class=\"line\">summary <span class=\"operator\">%&gt;%</span> </span><br><span class=\"line\">  ggplot<span class=\"punctuation\">(</span>aes<span class=\"punctuation\">(</span>age<span class=\"punctuation\">,</span> n<span class=\"punctuation\">,</span> colour <span class=\"operator\">=</span> sex<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"operator\">+</span> </span><br><span class=\"line\">  geom_line<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">+</span> </span><br><span class=\"line\">  labs<span class=\"punctuation\">(</span>y <span class=\"operator\">=</span> <span class=\"string\">&quot;Estimated number of injuries&quot;</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n<p>  <img src=\"https://d33wubrfki0l68.cloudfront.net/ca164e63cd77225daf58fc6351cf6453e04e0af6/76632/basic-case-study_files/figure-html/toilets-raw-1.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/ca164e63cd77225daf58fc6351cf6453e04e0af6/76632/basic-case-study_files/figure-html/toilets-raw-1.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图4.1 按年龄和性别分列的厕所造成的伤害估计数\"></p>\n<p>我们可以看到，小男孩在3岁时达到峰值，然后从中年开始有所增加（特别是对女性而言），在80岁以后逐渐下降。我认为峰值是因为男孩通常站着上厕所，而女性的增加是因为骨质疏松症（即，我怀疑男性和女性的受伤率相同，但更多的女性最终进入急诊室是因为她们骨折的风险更高）。</p>\n<p>解释这种模式的难点在于，我们知道老年人比年轻人少，因此受伤的人口更少。我们可以通过将受伤人数与总人口进行比较并计算伤害率来控制这一点。这里我使用的是每10,000人的比率。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">summary <span class=\"operator\">&lt;-</span> selected <span class=\"operator\">%&gt;%</span> </span><br><span class=\"line\">  count<span class=\"punctuation\">(</span>age<span class=\"punctuation\">,</span> sex<span class=\"punctuation\">,</span> wt <span class=\"operator\">=</span> weight<span class=\"punctuation\">)</span> <span class=\"operator\">%&gt;%</span> </span><br><span class=\"line\">  left_join<span class=\"punctuation\">(</span>population<span class=\"punctuation\">,</span> by <span class=\"operator\">=</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;age&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;sex&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"operator\">%&gt;%</span> </span><br><span class=\"line\">  mutate<span class=\"punctuation\">(</span>rate <span class=\"operator\">=</span> n <span class=\"operator\">/</span> population <span class=\"operator\">*</span> <span class=\"number\">1e4</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">summary</span><br><span class=\"line\"><span class=\"comment\">#&gt; # A tibble: 208 × 5</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;     age sex         n population   rate</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;      &lt;dbl&gt;  &lt;dbl&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 1     0 female   4.76    1924145 0.0247</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 2     0 male    14.3     2015150 0.0708</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 3     1 female 253.      1943534 1.30  </span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 4     1 male   231.      2031718 1.14  </span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 5     2 female 438.      1965150 2.23  </span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 6     2 male   632.      2056625 3.07  </span></span><br><span class=\"line\"><span class=\"comment\">#&gt; # … with 202 more rows</span></span><br></pre></td></tr></table></figure>\n\n<p>绘制比率图（图4.2），50岁以后的趋势明显不同：男女之间的差异要小得多，我们不再看到下降。这是因为女性往往比男性寿命更长，所以在老年时，更多的女性仍然活着并可能因厕所受伤。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">summary <span class=\"operator\">%&gt;%</span> </span><br><span class=\"line\">  ggplot<span class=\"punctuation\">(</span>aes<span class=\"punctuation\">(</span>age<span class=\"punctuation\">,</span> rate<span class=\"punctuation\">,</span> colour <span class=\"operator\">=</span> sex<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"operator\">+</span> </span><br><span class=\"line\">  geom_line<span class=\"punctuation\">(</span>na.rm <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span> <span class=\"operator\">+</span> </span><br><span class=\"line\">  labs<span class=\"punctuation\">(</span>y <span class=\"operator\">=</span> <span class=\"string\">&quot;Injuries per 10,000 people&quot;</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/35c1766902243f1fc9fa1aa92c6a57bd9eb31ccd/382fd/basic-case-study_files/figure-html/toilets-rate-1.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/35c1766902243f1fc9fa1aa92c6a57bd9eb31ccd/382fd/basic-case-study_files/figure-html/toilets-rate-1.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图4.2 按年龄和性别分列的每10,000人受伤估计率\"></p>\n<p>（注意，比率只到80岁，因为我找不到80岁以上年龄的人口数据。）</p>\n<p>最后，我们可以浏览一些叙述。通过浏览这些叙述是一种非正式的方法，可以检查我们的假设，并产生新的想法以进一步探索。这里我随机抽取了10个样本：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">selected <span class=\"operator\">%&gt;%</span> </span><br><span class=\"line\">  sample_n<span class=\"punctuation\">(</span><span class=\"number\">10</span><span class=\"punctuation\">)</span> <span class=\"operator\">%&gt;%</span> </span><br><span class=\"line\">  pull<span class=\"punctuation\">(</span>narrative<span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;  [1] &quot;79 YOM LOW BACK PAIN AFTER SLIPPING OFF TOILET AT HOME 1 WEEK AGO.DX DEGENERATIVE DISC DISEASE, BLUMBAR, MECHANICAL FALL, SEPSIS&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;  [2] &quot;88YOF PRESENTS AFTER FALLING OFF THE TOILET AT HOME AND HITTING CHEST WALL. DX: RIGHT CHEST WALL PAIN S/P FALL.*&quot;                </span></span><br><span class=\"line\"><span class=\"comment\">#&gt;  [3] &quot;73YOF WAS SITTING ON A PUBLIC TOILET AND PASSED OUT FELL OF FONTO HEADCLOSED HEAD INJURY ADMITTED FOR SYNCOPE&quot;                   </span></span><br><span class=\"line\"><span class=\"comment\">#&gt;  [4] &quot;97 YOM FELL HITTING HEAD ON TOILET SEAT.DX:  NECK PX, BACK PX, FREQUENT FALLS.&quot;                                                  </span></span><br><span class=\"line\"><span class=\"comment\">#&gt;  [5] &quot;32YOM FROM RENEWAL CENTER WAS SNORTING *** AND FELL OFF THE TOILET STRIKING HIS HEAD DX MINOR CHI&quot;                               </span></span><br><span class=\"line\"><span class=\"comment\">#&gt;  [6] &quot;71YOF LOST BALANCE SITTING ON TOILET AT HOME AND INJURIED SHOULDER.  DX:  LT SHOULDER INJURY.&quot;                                   </span></span><br><span class=\"line\"><span class=\"comment\">#&gt;  [7] &quot;99YOF FALL OFF TOILET AND C/O SHOULDER PAIN/ CONTUSION R SHOULDER&quot;                                                               </span></span><br><span class=\"line\"><span class=\"comment\">#&gt;  [8] &quot;26 YOM TRIPPED AND FELL STRIKING KAND ON TOILET SEAT.DX:  R HAND LAC 5 CM.&quot;                                                      </span></span><br><span class=\"line\"><span class=\"comment\">#&gt;  [9] &quot;86YOF TURNED HEAD &amp; BECAME DIZZY, FELL AGAINST TOILET INJURING SHOULDER/CT SHOULDER&quot;                                             </span></span><br><span class=\"line\"><span class=\"comment\">#&gt; [10] &quot;70 YOF - SYNCOPE - PT WAS SITTING ON TOILET AND FELL @ HOME.&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>对于一个产品进行了这种探索之后，如果我们能够轻松地对其他产品进行这种探索，而无需重新输入代码，那将是非常好的。所以让我们制作一个Shiny应用程序！</p>\n<h2 id=\"4-4-原型\"><a href=\"#4-4-原型\" class=\"headerlink\" title=\"4.4 原型\"></a>4.4 原型</h2><p>在构建一个复杂的应用程序时，我强烈建议您尽可能从简单开始，这样您可以在开始进行更复杂的操作之前确认基本机制可以运行。在这里，我将从一个输入（产品代码）、三个表和一个图形开始。</p>\n<p>在设计第一个原型时，挑战在于使其“尽可能简单”。在快速实现基本功能和为应用程序的未来做计划之间存在紧张关系。任何极端都可能很糟糕：如果你设计得太狭窄，你将在稍后花费大量时间重新设计你的应用程序；如果你设计得太严格，你将花费大量时间编写最终将被删除的代码。为了帮助找到平衡，我经常在代码之前用铅笔画一些草图来快速探索用户界面和反应图。</p>\n<p>在这里，我决定将一行用于输入（考虑到在应用程序完成之前我可能会添加更多输入），一行用于所有三个表格（给每个表格4列，占12列宽度的1&#x2F;3），然后一行用于图形：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">prod_codes &lt;- setNames(products$prod_code, products$title)</span><br><span class=\"line\"></span><br><span class=\"line\">ui &lt;- fluidPage(</span><br><span class=\"line\">  fluidRow(</span><br><span class=\"line\">    column(6,</span><br><span class=\"line\">      selectInput(&quot;code&quot;, &quot;Product&quot;, choices = prod_codes)</span><br><span class=\"line\">    )</span><br><span class=\"line\">  ),</span><br><span class=\"line\">  fluidRow(</span><br><span class=\"line\">    column(4, tableOutput(&quot;diag&quot;)),</span><br><span class=\"line\">    column(4, tableOutput(&quot;body_part&quot;)),</span><br><span class=\"line\">    column(4, tableOutput(&quot;location&quot;))</span><br><span class=\"line\">  ),</span><br><span class=\"line\">  fluidRow(</span><br><span class=\"line\">    column(12, plotOutput(&quot;age_sex&quot;))</span><br><span class=\"line\">  )</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>我们还没有谈论<code>fluidRow()</code>和<code>column()</code>，但你应该能够从上下文中猜测它们的作用，我们将在第6.2.3节回来讨论它们。另外请注意在<code>selectInput()</code> <code>choices</code>中使用<code>setNames()</code>：它在用户界面中显示产品名称并返回产品代码到server。</p>\n<p>server函数相对简单。我先将上一节中创建的<code>selected</code>和<code>summary</code>变量转换为反应式表达式。这是一个合理的通用模式：您在数据分析中创建变量以分解分析步骤，并避免多次重新计算，而Shiny应用程序中的反应式表达式起到相同的作用。</p>\n<p>通常，在开始Shiny应用程序之前，花一些时间清理你的分析代码是一个好主意，这样你就可以在添加反应性的额外复杂性之前用常规R代码来考虑这些问题。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &lt;- function(input, output, session) &#123;</span><br><span class=\"line\">  selected &lt;- reactive(injuries %&gt;% filter(prod_code == input$code))</span><br><span class=\"line\"></span><br><span class=\"line\">  output$diag &lt;- renderTable(</span><br><span class=\"line\">    selected() %&gt;% count(diag, wt = weight, sort = TRUE)</span><br><span class=\"line\">  )</span><br><span class=\"line\">  output$body_part &lt;- renderTable(</span><br><span class=\"line\">    selected() %&gt;% count(body_part, wt = weight, sort = TRUE)</span><br><span class=\"line\">  )</span><br><span class=\"line\">  output$location &lt;- renderTable(</span><br><span class=\"line\">    selected() %&gt;% count(location, wt = weight, sort = TRUE)</span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\">  summary &lt;- reactive(&#123;</span><br><span class=\"line\">    selected() %&gt;%</span><br><span class=\"line\">      count(age, sex, wt = weight) %&gt;%</span><br><span class=\"line\">      left_join(population, by = c(&quot;age&quot;, &quot;sex&quot;)) %&gt;%</span><br><span class=\"line\">      mutate(rate = n / population * 1e4)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  output$age_sex &lt;- renderPlot(&#123;</span><br><span class=\"line\">    summary() %&gt;%</span><br><span class=\"line\">      ggplot(aes(age, n, colour = sex)) +</span><br><span class=\"line\">      geom_line() +</span><br><span class=\"line\">      labs(y = &quot;Estimated number of injuries&quot;)</span><br><span class=\"line\">  &#125;, res = 96)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意，在这里创建summary反应式并不是严格必要的，因为它仅被一个反应式消费者使用。但是，将计算和绘图分开是很好的做法，因为这样可以使应用程序的流程更易于理解，并且将来更易于推广。</p>\n<p>最终应用程序的屏幕截图如图4.3所示。您可以在此处找到源代码：<a href=\"https://github.com/hadley/mastering-shiny/tree/master/neiss/prototype.R\">https://github.com/hadley/mastering-shiny/tree/master/neiss/prototype.R</a>，并尝试运行该应用程序的实时版本：<a href=\"https://hadley.shinyapps.io/ms-prototype/\">https://hadley.shinyapps.io/ms-prototype/</a>。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/0671024307798129536ceb17723b862ec709f14f/cd879/demos/basic-case-study/prototype.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/0671024307798129536ceb17723b862ec709f14f/cd879/demos/basic-case-study/prototype.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图4.3 NEISS探索应用程序的第一个原型\"></p>\n<h2 id=\"4-5-完善表格\"><a href=\"#4-5-完善表格\" class=\"headerlink\" title=\"4.5 完善表格\"></a>4.5 完善表格</h2><p>既然我们已经将基本组件放置并运行，我们可以逐步改进我们的应用程序。这个应用程序的第一个问题是，它在表格中显示了很多信息，我们可能只想知道重点。为了解决这个问题，我们需要首先找出如何截断表格。我选择通过组合forcats函数来实现：我将变量转换为因子，按级别的频率排序，然后将前五个级别之后的所有级别都放在一起。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">injuries <span class=\"operator\">%&gt;%</span></span><br><span class=\"line\">  mutate<span class=\"punctuation\">(</span>diag <span class=\"operator\">=</span> fct_lump<span class=\"punctuation\">(</span>fct_infreq<span class=\"punctuation\">(</span>diag<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> n <span class=\"operator\">=</span> <span class=\"number\">5</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"operator\">%&gt;%</span></span><br><span class=\"line\">  group_by<span class=\"punctuation\">(</span>diag<span class=\"punctuation\">)</span> <span class=\"operator\">%&gt;%</span></span><br><span class=\"line\">  summarise<span class=\"punctuation\">(</span>n <span class=\"operator\">=</span> <span class=\"built_in\">as.integer</span><span class=\"punctuation\">(</span><span class=\"built_in\">sum</span><span class=\"punctuation\">(</span>weight<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; # A tibble: 6 × 2</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   diag                        n</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   &lt;fct&gt;                   &lt;int&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 1 Other Or Not Stated   1806436</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 2 Fracture              1558961</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 3 Laceration            1432407</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 4 Strain, Sprain        1432556</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 5 Contusion Or Abrasion 1451987</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 6 Other                 1929147</span></span><br></pre></td></tr></table></figure>\n\n<p>因为我知道如何做到这一点，所以我编写了一个小函数来自动执行此操作，对任何变量。这里的细节并不是那么重要，但我们将在第12章中回到它们。您也可以通过复制和粘贴解决问题，因此如果代码看起来完全陌生，请不要担心。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">count_top <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>df<span class=\"punctuation\">,</span> var<span class=\"punctuation\">,</span> n <span class=\"operator\">=</span> <span class=\"number\">5</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  df <span class=\"operator\">%&gt;%</span></span><br><span class=\"line\">    mutate<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#123;</span> var <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span> <span class=\"operator\">:=</span> fct_lump<span class=\"punctuation\">(</span>fct_infreq<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#123;</span> var <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> n <span class=\"operator\">=</span> n<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"operator\">%&gt;%</span></span><br><span class=\"line\">    group_by<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#123;</span> var <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span> <span class=\"operator\">%&gt;%</span></span><br><span class=\"line\">    summarise<span class=\"punctuation\">(</span>n <span class=\"operator\">=</span> <span class=\"built_in\">as.integer</span><span class=\"punctuation\">(</span><span class=\"built_in\">sum</span><span class=\"punctuation\">(</span>weight<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>接下来采用server函数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output$diag &lt;- renderTable(count_top(selected(), diag), width = &quot;100%&quot;)</span><br><span class=\"line\">  output$body_part &lt;- renderTable(count_top(selected(), body_part), width = &quot;100%&quot;)</span><br><span class=\"line\">  output$location &lt;- renderTable(count_top(selected(), location), width = &quot;100%&quot;)</span><br></pre></td></tr></table></figure>\n\n<p>我做了另一个更改来改善应用程序的美观性：我强制所有表占据最大宽度（即填充它们出现的列）。这使得输出在美学上更加美观，因为它减少了偶然变化的数量。</p>\n<p>应用程序运行结果的屏幕截图如图4.4所示。您可以在<a href=\"https://github.com/hadley/mastering-shiny/tree/master/neiss/polish-tables.R\">https://github.com/hadley/mastering-shiny/tree/master/neiss/polish-tables.R</a>中找到源代码，并在<a href=\"https://hadley.shinyapps.io/ms-polish-tables\">https://hadley.shinyapps.io/ms-polish-tables</a>上试用该应用程序的实时版本。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/9ab24257bb441350c7e2d57bd09fe9452cae592e/779c3/demos/basic-case-study/polish-tables.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/9ab24257bb441350c7e2d57bd09fe9452cae592e/779c3/demos/basic-case-study/polish-tables.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图4.4 应用程序的第二次迭代通过仅显示总结表中最常见行来改进显示效果\"></p>\n<h2 id=\"4-6-发生率与计数\"><a href=\"#4-6-发生率与计数\" class=\"headerlink\" title=\"4.6 发生率与计数\"></a>4.6 发生率与计数</h2><p>目前为止，我们只显示了一个图表，但我们希望用户可以选择显示受伤人数或标准化发生率。首先，我在用户界面中添加了一个控件。在这里，我选择使用<code>selectInput()</code>，因为它使两种状态都变得明确，并且将来很容易添加新的状态：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fluidRow(</span><br><span class=\"line\">    column(8,</span><br><span class=\"line\">      selectInput(&quot;code&quot;, &quot;Product&quot;,</span><br><span class=\"line\">        choices = setNames(products$prod_code, products$title),</span><br><span class=\"line\">        width = &quot;100%&quot;</span><br><span class=\"line\">      )</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    column(2, selectInput(&quot;y&quot;, &quot;Y axis&quot;, c(&quot;rate&quot;, &quot;count&quot;)))</span><br><span class=\"line\">  ),</span><br></pre></td></tr></table></figure>\n\n<p>（我默认选择发生率，因为我认为这样更安全；您不需要了解人口分布就可以正确解释图表。）</p>\n<p>然后，我在生成图表时根据输入进行条件设置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output$age_sex &lt;- renderPlot(&#123;</span><br><span class=\"line\">    if (input$y == &quot;count&quot;) &#123;</span><br><span class=\"line\">      summary() %&gt;%</span><br><span class=\"line\">        ggplot(aes(age, n, colour = sex)) +</span><br><span class=\"line\">        geom_line() +</span><br><span class=\"line\">        labs(y = &quot;Estimated number of injuries&quot;)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      summary() %&gt;%</span><br><span class=\"line\">        ggplot(aes(age, rate, colour = sex)) +</span><br><span class=\"line\">        geom_line(na.rm = TRUE) +</span><br><span class=\"line\">        labs(y = &quot;Injuries per 10,000 people&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, res = 96)</span><br></pre></td></tr></table></figure>\n\n<p>结果应用程序的屏幕截图如图4.5所示。您可以在<a href=\"https://github.com/hadley/mastering-shiny/tree/master/neiss/rate-vs-count.R\">https://github.com/hadley/mastering-shiny/tree/master/neiss/rate-vs-count.R</a>中找到源代码，并在<a href=\"https://hadley.shinyapps.io/ms-rate-vs-count\">https://hadley.shinyapps.io/ms-rate-vs-count</a>上试用该应用程序的实时版本。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/57dcd9e1cf0724f9c4af5d20972e410a5203b5e6/d119e/demos/basic-case-study/rate-vs-count.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/57dcd9e1cf0724f9c4af5d20972e410a5203b5e6/d119e/demos/basic-case-study/rate-vs-count.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图4.5 在此迭代中，我们允许用户在显示y轴上的计数或人口标准化率之间进行切换。\"></p>\n<h2 id=\"4-7-叙述\"><a href=\"#4-7-叙述\" class=\"headerlink\" title=\"4.7 叙述\"></a>4.7 叙述</h2><p>最后，我想提供一种方式来访问这些叙述，因为它们很有趣，而且它们提供了一种非正式的方式，可以在查看图表时检查你提出的假设。在R代码中，我同时采样多个叙述，但在你可以交互探索的应用程序中没有理由这样做。</p>\n<p>解决方案分为两个部分。首先，我们在用户界面底部添加一行。我使用一个动作按钮来触发一个新的故事，并将叙述放在一个<code>textOutput()</code>中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fluidRow(</span><br><span class=\"line\">    column(2, actionButton(&quot;story&quot;, &quot;Tell me a story&quot;)),</span><br><span class=\"line\">    column(10, textOutput(&quot;narrative&quot;))</span><br><span class=\"line\">  )</span><br></pre></td></tr></table></figure>\n\n<p>然后，我使用<code>eventReactive()</code>创建一个反应，只有在按钮被点击或底层数据改变时才会更新。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">narrative_sample &lt;- eventReactive(</span><br><span class=\"line\">    list(input$story, selected()),</span><br><span class=\"line\">    selected() %&gt;% pull(narrative) %&gt;% sample(1)</span><br><span class=\"line\">  )</span><br><span class=\"line\">  output$narrative &lt;- renderText(narrative_sample())</span><br></pre></td></tr></table></figure>\n\n<p>结果应用程序的屏幕截图如图4.6所示。您可以在<a href=\"https://github.com/hadley/mastering-shiny/tree/master/neiss/narrative.R\">https://github.com/hadley/mastering-shiny/tree/master/neiss/narrative.R</a>中找到源代码，并在<a href=\"https://hadley.shinyapps.io/ms-narrative\">https://hadley.shinyapps.io/ms-narrative</a>上试用该应用程序的实时版本。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/d62551b4bee05d3bd17b852b30b2fd55066e58dc/0d9bf/demos/basic-case-study/narrative.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/d62551b4bee05d3bd17b852b30b2fd55066e58dc/0d9bf/demos/basic-case-study/narrative.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图4.6 最终迭代增加了从选定行中随机抽取叙述的功能\"></p>\n<h2 id=\"4-8-练习\"><a href=\"#4-8-练习\" class=\"headerlink\" title=\"4.8 练习\"></a>4.8 练习</h2><ul>\n<li><p>为每个应用程序绘制反应图。</p>\n</li>\n<li><p>在减少摘要表的代码中，如果将<code>fct_infreq()</code>和<code>fct_lump()</code>翻转，会发生什么？</p>\n</li>\n<li><p>添加一个输入控件，让用户决定在摘要表中显示的行数。</p>\n</li>\n<li><p>提供一种系统地使用前后按钮逐步浏览每个叙述的方法。</p>\n</li>\n</ul>\n<p><strong>高级</strong>：使叙述列表“循环”，以便从最后一个叙述前进到第一个叙述。</p>\n<h2 id=\"4-9-总结\"><a href=\"#4-9-总结\" class=\"headerlink\" title=\"4.9 总结\"></a>4.9 总结</h2><p>现在，您已经掌握了Shiny应用程序的基本知识，接下来的七章将为您提供一系列重要的技术。一旦您阅读了下一章关于工作流的章节，我建议您浏览其余章节以了解它们的涵盖内容，然后在需要应用程序技术时再回来阅读。</p>\n<h1 id=\"加关注\"><a href=\"#加关注\" class=\"headerlink\" title=\"加关注\"></a>加关注</h1><p>关注公众号“生信之巅”。</p>\n<table align=\"center\"><tr>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅微信公众号\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-right: 0px;margin-bottom: 5px;align: center;\"></td>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅小程序码\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-left: 0px;margin-bottom: 5px;align: center\"></td>\n</tr></table>\n\n\n<p><font color=\"#FF0000\"><ruby><b>敬告</b>：使用文中脚本请引用本文网址，请尊重本人的劳动成果，谢谢！<rt><b>Notice</b>: When you use the scripts in this article, please cite the link of this webpage. Thank you!</rt></ruby></font></p>\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"Shiny入门系列,编程 - Shiny入门系列 - 编程","path":"api/tags/Shiny入门系列,编程 - Shiny入门系列 - 编程.json"}]},{"title":"Shiny从入门到入定——5-工作流","slug":"Shiny从入门到入定——5-工作流","date":"2024-01-24T14:24:55.000Z","updated":"2024-03-11T13:07:17.000Z","comments":true,"path":"api/articles/Shiny从入门到入定——5-工作流.json","excerpt":null,"keywords":null,"cover":"https://d33wubrfki0l68.cloudfront.net/6f3bccc61698dce386b5650c4204d59ebcd66836/571c3/images/action-workflow/new-project.png","content":"<h1 id=\"第二部分概览\"><a href=\"#第二部分概览\" class=\"headerlink\" title=\"第二部分概览\"></a>第二部分概览</h1><p>以下章节为您提供了一篮子有用的技巧。我认为每个人都应该从第20.2.1章开始，因为它为您开发和调试应用程序提供了重要的工具，并在您遇到困难时为您提供帮助。</p>\n<p>之后，章节之间的联系不大，因而没有规定的学习顺序：我建议快速浏览以了解情况（这样如果将来出现相关问题，你可能会记住这些工具），否则只深入阅读你目前需要的内容。以下是主要主题的快速总结：</p>\n<ul>\n<li><p>第6章详细介绍了在页面上布局输入和输出组件的各种方法，以及如何使用主题定制它们的外观。</p>\n</li>\n<li><p>第7章向您展示了如何向绘图添加直接交互以及如何显示以其他方式生成的图像。</p>\n</li>\n<li><p>第8章介绍了一系列技术（包括内联错误、通知、进度条和对话框），用于在应用程序运行时向用户提供反馈。</p>\n</li>\n<li><p>第9章讨论了如何将文件传输到您的应用程序以及如何从应用程序传输文件。</p>\n</li>\n<li><p>第10章向您展示了如何在应用程序运行时动态修改其用户界面。</p>\n</li>\n<li><p>第11章展示了如何以一种用户可以标记的方式记录应用程序状态。</p>\n</li>\n<li><p>第12章向您展示了如何在使用tidyverse包时允许用户选择变量。</p>\n</li>\n</ul>\n<h1 id=\"5-工作流\"><a href=\"#5-工作流\" class=\"headerlink\" title=\"5. 工作流\"></a>5. 工作流</h1><p>如果你打算编写大量的Shiny应用程序，那么在你的基本工作流上投入一些时间是值得的。改进工作流是投入时间的好地方，因为它往往会在长期内带来巨大的回报。这不仅会增加你花在编写R代码上的时间比例，而且因为你能更快地看到结果，所以编写Shiny应用程序的过程会更加愉快，你的技能也会更快地提高。</p>\n<p>本章的目标是帮助你改进三个重要的Shiny工作流：</p>\n<ul>\n<li><p>创建应用程序、做出更改和实验结果的基本开发周期。</p>\n</li>\n<li><p>调试，找出代码中出现的错误并集思广益寻找解决方案的工作流。</p>\n</li>\n<li><p>编写reprexes，说明一个问题的自我包含的代码块。Reprex是一种强大的调试技术，如果你想从别人那里得到帮助，它们是必不可少的。</p>\n</li>\n</ul>\n<h2 id=\"5-1-开发工作流\"><a href=\"#5-1-开发工作流\" class=\"headerlink\" title=\"5.1 开发工作流\"></a>5.1 开发工作流</h2><p>优化你的开发工作流的目的是减少做出更改和看到结果之间的时间。你越快进行迭代，就越快进行实验，你就越快成为一个更好的Shiny开发人员。这里有两个主要的工作流需要优化：首次创建应用程序，以及加快调整代码和尝试输出结果的迭代周期。</p>\n<h3 id=\"5-1-1-创建应用程序\"><a href=\"#5-1-1-创建应用程序\" class=\"headerlink\" title=\"5.1.1 创建应用程序\"></a>5.1.1 创建应用程序</h3><p>每个应用程序都将以相同的六行R代码开始：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library(shiny)</span><br><span class=\"line\">ui &lt;- fluidPage(</span><br><span class=\"line\">)</span><br><span class=\"line\">server &lt;- function(input, output, session) &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">shinyApp(ui, server)</span><br></pre></td></tr></table></figure>\n\n<p>你可能很快就会厌倦输入这些代码，所以RStudio提供了一些快捷键：</p>\n<ul>\n<li><p>如果你已经打开了你的未来<code>app.R</code>，输入<code>shinyapp</code>然后按<code>Shift + Tab</code>插入Shiny应用程序片段。<sup>15</sup></p>\n</li>\n<li><p>如果你想开始一个新项目<sup>16</sup>，请转到文件菜单，选择“New Project”，然后选择“Shiny Web Application”，如图5.1所示。</p>\n</li>\n</ul>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/6f3bccc61698dce386b5650c4204d59ebcd66836/571c3/images/action-workflow/new-project.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/6f3bccc61698dce386b5650c4204d59ebcd66836/571c3/images/action-workflow/new-project.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图5.1 在RStudio中创建一个新的Shiny应用程序，选择“Shiny Web Application”作为项目类型\"></p>\n<p>你可能认为学习这些快捷键不值得，因为你一天只创建一两个应用程序，但创建简单的应用程序是检查你在开始一个更大的项目之前是否掌握了基本概念的好方法，并且它们是调试的强大工具。</p>\n<h3 id=\"5-1-2-查看更改\"><a href=\"#5-1-2-查看更改\" class=\"headerlink\" title=\"5.1.2 查看更改\"></a>5.1.2 查看更改</h3><p>你最多一天会创建几个应用程序，但你会运行应用程序数百次，因此掌握开发工作流尤为重要。减少迭代时间的第一个方法是避免单击“Run App”按钮，而是学习键盘快捷键<code>Cmd / Ctrl + Shift + Enter</code>。这使你获得了以下开发工作流：</p>\n<ul>\n<li>写一些代码。</li>\n<li>使用Cmd &#x2F; Ctrl + Shift + Enter启动应用程序。</li>\n<li>与应用程序交互式实验。</li>\n<li>关闭应用程序。</li>\n<li>写一些代码。</li>\n</ul>\n<p>另一种进一步提高迭代速度的方法是打开自动重新加载，并在后台作业中运行应用程序，如<a href=\"https://github.com/sol-eng/background-jobs/tree/master/shiny-job\">https://github.com/sol-eng/background-jobs/tree/master/shiny-job</a>所述。使用此工作流，一旦保存文件，您的应用程序将重新启动：无需关闭和重新启动。这导致了更快速的工作流程：</p>\n<ul>\n<li>编写代码并按Cmd &#x2F; Ctrl + S保存文件。</li>\n<li>交互式实验。</li>\n<li>编写代码并按Cmd &#x2F; Ctrl + S保存文件。</li>\n</ul>\n<p>这种技术的最大缺点是调试起来要困难得多，因为应用程序在单独的进程中运行。</p>\n<p>随着应用程序变得越来越庞大，你可能会发现“交互式实验”步骤变得相当繁琐。你很难记住重新检查你可能受更改影响的每个组件。稍后，在第21章中，你将学习自动化测试的工具，这允许你将你正在运行的交互式实验转化为自动化的代码。这使您可以更快地运行测试（因为它们是自动化的），并且意味着您不会忘记运行重要的测试。开发测试需要一些初始投资，但对于大型应用程序来说，投资会得到丰厚的回报。</p>\n<h3 id=\"5-1-3-控制视图\"><a href=\"#5-1-3-控制视图\" class=\"headerlink\" title=\"5.1.3 控制视图\"></a>5.1.3 控制视图</h3><p>默认情况下，当您运行应用程序时，它将在弹出窗口中显示。您可以从“Run App”下拉菜单中选择另外两个选项，如图1.1所示：</p>\n<ul>\n<li><p>在查看器窗格中运行：打开应用程序的查看器窗格（通常位于IDE的右侧）。这对于小型应用程序很有用，因为您可以同时查看您的应用程序代码。</p>\n</li>\n<li><p>在外部运行：在您常用的网页浏览器中打开应用程序。这对于较大的应用程序以及当您想查看应用程序在大多数用户将体验的上下文中看起来如何时非常有用。</p>\n</li>\n</ul>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/2b4ca2b946e0302c87d2c16c096a55e2ef1ec64f/5f450/images/action-workflow/run-app.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/2b4ca2b946e0302c87d2c16c096a55e2ef1ec64f/5f450/images/action-workflow/run-app.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图1.1 运行应用程序按钮允许您选择如何显示正在运行的应用程序。\"></p>\n<h2 id=\"5-2-调试\"><a href=\"#5-2-调试\" class=\"headerlink\" title=\"5.2 调试\"></a>5.2 调试</h2><p>当你开始编写应用程序时，几乎可以肯定会出现问题。大多数错误的起因是您的Shiny心理模型与Shiny实际执行的操作不匹配。随着您阅读本书，您的心理模型将得到改善，以便您犯更少的错误，当您犯错误时，更容易发现问题。但是，在您能够可靠地首次编写有效代码之前，需要多年的经验，这意味着您需要开发一个可靠的工作流程来识别和修复错误。在这里，我们将重点关注Shiny应用程序特有的挑战；如果您是R中调试的新手，请从Jenny Bryan的rstudio::conf(2020)主题演讲“<a href=\"https://resources.rstudio.com/rstudio-conf-2020/object-of-type-closure-is-not-subsettable-jenny-bryan\">Object of type ‘closure’ is not subsettable</a>”开始。</p>\n<p>下面我们将讨论三种主要问题：</p>\n<ul>\n<li><p>出现意外的错误。这是最简单的情况，因为您会收到一个跟踪回溯，它允许您找出错误发生的具体位置。一旦确定了问题，您需要系统地测试您的假设，直到找到期望与现实之间的差异。交互式调试器是此过程的强大助手。</p>\n</li>\n<li><p>没有错误，但某些值不正确。在这里，您需要使用交互式调试器以及您的调查技能来追踪问题的根源。</p>\n</li>\n<li><p>所有值都正确，但它们没有按预期更新。这是最具有挑战性的问题，因为它是Shiny特有的，因此您无法利用现有的R调试技能。</p>\n</li>\n</ul>\n<p>当出现这种情况时，会令人感到沮丧，但您可以将其转化为练习调试技能的机会。</p>\n<p>我们将回到另一种重要的技术，制作可重复的最小示例，下一部分中。如果你卡住，需要从别人那里得到帮助，创建一个最小示例是至关重要的。但创建最小示例也是调试自己代码时极其重要的技能。通常，你有很多工作正常的代码，和一小部分引起问题的代码。如果你可以通过删除有效代码来缩小有问题的代码，你将能够更快地迭代解决方案。这是我每天使用的技术。</p>\n<h3 id=\"5-2-1-阅读tracebacks\"><a href=\"#5-2-1-阅读tracebacks\" class=\"headerlink\" title=\"5.2.1 阅读tracebacks\"></a>5.2.1 阅读tracebacks</h3><p>在R中，每个错误都伴随着一个traceback，或调用堆栈，它会跟踪导致错误的调用序列。例如，考虑以下简单的调用序列：<code>f()</code>调用<code>g()</code>调用<code>h()</code>调用乘法运算符：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>x<span class=\"punctuation\">)</span> g<span class=\"punctuation\">(</span>x<span class=\"punctuation\">)</span></span><br><span class=\"line\">g <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>x<span class=\"punctuation\">)</span> h<span class=\"punctuation\">(</span>x<span class=\"punctuation\">)</span></span><br><span class=\"line\">h <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>x<span class=\"punctuation\">)</span> x <span class=\"operator\">*</span> <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<p>如果以上程序报如下错误：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f<span class=\"punctuation\">(</span><span class=\"string\">&quot;a&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; Error in x * 2: non-numeric argument to binary operator</span></span><br></pre></td></tr></table></figure>\n\n<p>你可以调用traceback()找到导致问题的调用序列：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">traceback<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 3: h(x)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 2: g(x)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 1: f(&quot;a&quot;)</span></span><br></pre></td></tr></table></figure>\n\n<p>我认为通过颠倒traceback可以最容易地理解它：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1: f(&quot;a&quot;)</span><br><span class=\"line\">2: g(x)</span><br><span class=\"line\">3: h(x)</span><br></pre></td></tr></table></figure>\n\n<p>现在可以告诉你导致错误的调用序列——f()调用g()调用h()（出现错误）。</p>\n<h3 id=\"5-2-2-Shiny中的traceback\"><a href=\"#5-2-2-Shiny中的traceback\" class=\"headerlink\" title=\"5.2.2 Shiny中的traceback()\"></a>5.2.2 Shiny中的traceback()</h3><p>遗憾的是，在Shiny中不能使用traceback()，因为在应用程序运行时不能运行代码。相反，Shiny将自动为您打印traceback。例如，考虑使用上面定义的那个f()函数编写的这个简单应用程序：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library(shiny)</span><br><span class=\"line\"></span><br><span class=\"line\">f &lt;- function(x) g(x)</span><br><span class=\"line\">g &lt;- function(x) h(x)</span><br><span class=\"line\">h &lt;- function(x) x * 2</span><br><span class=\"line\"></span><br><span class=\"line\">ui &lt;- fluidPage(</span><br><span class=\"line\">  selectInput(&quot;n&quot;, &quot;N&quot;, 1:10),</span><br><span class=\"line\">  plotOutput(&quot;plot&quot;)</span><br><span class=\"line\">)</span><br><span class=\"line\">server &lt;- function(input, output, session) &#123;</span><br><span class=\"line\">  output$plot &lt;- renderPlot(&#123;</span><br><span class=\"line\">    n &lt;- f(input$n)</span><br><span class=\"line\">    plot(head(cars, n))</span><br><span class=\"line\">  &#125;, res = 96)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">shinyApp(ui, server)</span><br></pre></td></tr></table></figure>\n\n<p>如果您运行此应用程序，您将在应用程序中看到错误消息，并在控制台中看到traceback：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error in *: non-numeric argument to binary operator</span><br><span class=\"line\">  169: g [app.R<span class=\"params\">#4</span>]</span><br><span class=\"line\">  168: f [app.R<span class=\"params\">#3</span>]</span><br><span class=\"line\">  167: renderPlot [app.R<span class=\"params\">#1</span>3]</span><br><span class=\"line\">  165: func</span><br><span class=\"line\">  125: drawPlot</span><br><span class=\"line\">  111: &lt;reactive:plotObj&gt;</span><br><span class=\"line\">   95: drawReactive</span><br><span class=\"line\">   82: renderFunc</span><br><span class=\"line\">   81: output<span class=\"built_in\">$</span>plot</span><br><span class=\"line\">    1: runApp</span><br></pre></td></tr></table></figure>\n\n<p>为了理解发生了什么，我们再次颠倒过来以便按照它们出现的顺序看到调用序列：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error in *: non-numeric argument to binary operator</span><br><span class=\"line\">   1: runApp</span><br><span class=\"line\">  81: output<span class=\"built_in\">$</span>plot</span><br><span class=\"line\">  82: renderFunc</span><br><span class=\"line\">  95: drawReactive</span><br><span class=\"line\"> 111: &lt;reactive:plotObj&gt;</span><br><span class=\"line\"> 125: drawPlot</span><br><span class=\"line\"> 165: func</span><br><span class=\"line\"> 167: renderPlot [app.R<span class=\"params\">#1</span>3]</span><br><span class=\"line\"> 168: f [app.R<span class=\"params\">#3</span>]</span><br><span class=\"line\"> 169: g [app.R<span class=\"params\">#4</span>]</span><br></pre></td></tr></table></figure>\n\n<p>调用堆栈有三个基本部分：</p>\n<ul>\n<li><p>最初几个调用启动应用程序。在这种情况下，你只看到runApp()，但根据你启动应用程序的方式，你可能会看到更复杂的东西。例如，如果你调用source()来运行应用程序，你可能会看到这个：</p>\n  <figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1: source</span><br><span class=\"line\">3: print.shiny.appobj</span><br><span class=\"line\">5: runApp</span><br></pre></td></tr></table></figure>\n\n<p>  一般来说，你可以忽略第一行runApp()之前的任何内容；这只是启动应用程序的设置代码。</p>\n</li>\n<li><p>接下来，你会看到一些负责调用反应式表达式的Shiny内部代码：</p>\n  <figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 81: output<span class=\"built_in\">$</span>plot</span><br><span class=\"line\"> 82: renderFunc</span><br><span class=\"line\"> 95: drawReactive</span><br><span class=\"line\">111: &lt;reactive:plotObj&gt;</span><br><span class=\"line\">125: drawPlot</span><br><span class=\"line\">165: func</span><br></pre></td></tr></table></figure>\n\n<p>  在这里，注意到output$plot非常重要-这会告诉你的哪个反应体(plot)引起了错误。接下来的几个函数是内部的，你可以忽略它们。</p>\n</li>\n<li><p>最后，在底部，你会看到你编写的代码：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">167: renderPlot [app.R<span class=\"params\">#1</span>3]</span><br><span class=\"line\">168: f [app.R<span class=\"params\">#3</span>]</span><br><span class=\"line\">169: g [app.R<span class=\"params\">#4</span>]</span><br></pre></td></tr></table></figure>\n\n<p>这是在renderPlot()中调用的代码。这里需要特别注意，因为文件路径和行号；这告诉你这是你的代码。</p>\n</li>\n</ul>\n<p>如果您在应用程序中遇到错误，但没有看到traceback，请确保您使用<code>Cmd/Ctrl + Shift + Enter</code>（如果在RStudio中没有，请调用<code>runApp()</code>）运行应用程序，并且您已经保存了运行它的文件。其他运行应用程序的方式并不总是捕获生成traceback所需的信息。</p>\n<h3 id=\"5-2-3-交互式调试器\"><a href=\"#5-2-3-交互式调试器\" class=\"headerlink\" title=\"5.2.3 交互式调试器\"></a>5.2.3 交互式调试器</h3><p>一旦您已经找到了错误的来源并想弄清楚是什么导致了错误，您可以使用最强大的工具是交互式调试器。调试器暂停执行，并为您提供一个交互式R控制台，您可以在其中运行任何代码以找出问题所在。有两种方法可以启动调试器：</p>\n<ul>\n<li><p>在您的源代码中添加一个对<code>browser()</code>的调用。这是标准R启动交互式调试器的方法，并且无论您如何运行Shiny都会有效。</p>\n<p>browser()的另一个优点是，由于它是R代码，您可以通过将其与if语句结合使用来使其具有条件性。这允许您仅对有问题的输入启动调试器。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>value <span class=\"operator\">==</span> <span class=\"string\">&quot;a&quot;</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"built_in\">browser</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># Or maybe</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"punctuation\">(</span>my_reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">&lt;</span> <span class=\"number\">0</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"built_in\">browser</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过单击行号左侧来添加RStudio断点。您可以单击红色圆圈来移除断点。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/4b822ac61e876f90880b9b93313df56f4528dbcf/33702/images/action-workflow/breakpoint.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/4b822ac61e876f90880b9b93313df56f4528dbcf/33702/images/action-workflow/breakpoint.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\"></p>\n<p>断点的优点是它们不是代码，因此您永远不必担心意外地将它们提交到版本控制系统。</p>\n</li>\n</ul>\n<p>如果您正在使用RStudio，当您处于调试器时，控制台顶部会出现图5.2中的工具栏。工具栏是一种方便您记住现在可用的调试命令的方法。它们也可以在RStudio之外使用；您只需记住激活它们的单个字母命令。三个最有用的命令是：</p>\n<ul>\n<li><p>Next（按n）：执行函数的下一步。请注意，如果您有一个名为n的变量，您需要使用print(n)来显示其值。</p>\n</li>\n<li><p>Continue（按c）：退出交互式调试并继续函数的常规执行。如果您已经修复了不良状态并且想要检查函数是否正确进行，这是非常有用的。</p>\n</li>\n<li><p>Stop（按Q）：停止调试，终止函数并返回到全局工作区。一旦您已经找出问题所在，并且您已经准备好修复它并重新加载代码，就可以使用此功能。</p>\n</li>\n</ul>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/08e163d4340339f15a7f124f52269a5797180adc/11f05/images/action-workflow/debug-toolbar.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/08e163d4340339f15a7f124f52269a5797180adc/11f05/images/action-workflow/debug-toolbar.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图 5.2 RStudio中的调试工具栏\"></p>\n<p>除了使用这些工具逐行调试代码外，您还将编写并运行一些交互式代码来追踪出了什么问题。调试是一个系统地将您的期望与现实进行比较的过程，直到找到不匹配的地方。如果您是R中的新手，可能需要阅读“Advanced R”的调试章节以学习一些一般的技术。</p>\n<h3 id=\"5-2-4-案例研究\"><a href=\"#5-2-4-案例研究\" class=\"headerlink\" title=\"5.2.4 案例研究\"></a>5.2.4 案例研究</h3><p>一旦你排除了不可能，剩下的，无论多么不可思议，一定是真相——夏洛克·福尔摩斯</p>\n<p>为了演示基本的调试方法，我将向你展示我在编写第10.1.2节时遇到的一个小问题。我将首先向你展示基本的上下文，然后你会看到一个我没有使用交互式调试工具解决的问题，一个需要交互式调试的问题，并发现一个最后的惊喜。</p>\n<p>最初的目标很简单：我有一个销售数据集，我想按地区对其进行筛选。数据看起来是这样的：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sales <span class=\"operator\">&lt;-</span> readr<span class=\"operator\">::</span>read_csv<span class=\"punctuation\">(</span><span class=\"string\">&quot;sales-dashboard/sales_data_sample.csv&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">sales <span class=\"operator\">&lt;-</span> sales<span class=\"punctuation\">[</span><span class=\"built_in\">c</span><span class=\"punctuation\">(</span></span><br><span class=\"line\">  <span class=\"string\">&quot;TERRITORY&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;ORDERDATE&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;ORDERNUMBER&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;PRODUCTCODE&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"string\">&quot;QUANTITYORDERED&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;PRICEEACH&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">sales</span><br><span class=\"line\"><span class=\"comment\">#&gt; # A tibble: 2,823 × 6</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   TERRITORY ORDERDATE      ORDERNUMBER PRODUCTCODE QUANTITYORDERED PRICEEACH</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   &lt;chr&gt;     &lt;chr&gt;                &lt;dbl&gt; &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 1 &lt;NA&gt;      2/24/2003 0:00       10107 S10_1678                 30      95.7</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 2 EMEA      5/7/2003 0:00        10121 S10_1678                 34      81.4</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 3 EMEA      7/1/2003 0:00        10134 S10_1678                 41      94.7</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 4 &lt;NA&gt;      8/25/2003 0:00       10145 S10_1678                 45      83.3</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; # … with 2,819 more rows</span></span><br></pre></td></tr></table></figure>\n\n<p>领土信息如下：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unique<span class=\"punctuation\">(</span>sales<span class=\"operator\">$</span>TERRITORY<span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] NA      &quot;EMEA&quot;  &quot;APAC&quot;  &quot;Japan&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>当我刚开始研究这个问题时，我认为它很简单，我可以直接编写应用程序，而不需要做任何其他研究：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui &lt;- fluidPage(</span><br><span class=\"line\">  selectInput(&quot;territory&quot;, &quot;territory&quot;, choices = unique(sales$TERRITORY)),</span><br><span class=\"line\">  tableOutput(&quot;selected&quot;)</span><br><span class=\"line\">)</span><br><span class=\"line\">server &lt;- function(input, output, session) &#123;</span><br><span class=\"line\">  selected &lt;- reactive(sales[sales$TERRITORY == input$territory, ])</span><br><span class=\"line\">  output$selected &lt;- renderTable(head(selected(), 10))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我想，这是一个八行应用程序，怎么可能会出什么问题？好吧，当我打开应用程序时，无论我选择哪个区域，我都看到了很多缺失的值。最有可能导致问题的代码是选择要显示的数据的 reactive：<code>sales[sales$TERRITORY == input$territory, ]</code>。所以我停止了应用程序，并迅速验证：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sales<span class=\"punctuation\">[</span>sales<span class=\"operator\">$</span>TERRITORY <span class=\"operator\">==</span> <span class=\"string\">&quot;EMEA&quot;</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; # A tibble: 2,481 × 6</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   TERRITORY ORDERDATE     ORDERNUMBER PRODUCTCODE QUANTITYORDERED PRICEEACH</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   &lt;chr&gt;     &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 1 &lt;NA&gt;      &lt;NA&gt;                   NA &lt;NA&gt;                     NA      NA  </span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 2 EMEA      5/7/2003 0:00       10121 S10_1678                 34      81.4</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 3 EMEA      7/1/2003 0:00       10134 S10_1678                 41      94.7</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 4 &lt;NA&gt;      &lt;NA&gt;                   NA &lt;NA&gt;                     NA      NA  </span></span><br><span class=\"line\"><span class=\"comment\">#&gt; # … with 2,477 more rows</span></span><br></pre></td></tr></table></figure>\n\n<p>哎呀！我忘了 <code>TERRITORY</code> 包含一堆缺失值，这意味着 <code>sales$TERRITORY == &quot;EMEA&quot;</code> 将包含一堆缺失值：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">head<span class=\"punctuation\">(</span>sales<span class=\"operator\">$</span>TERRITORY <span class=\"operator\">==</span> <span class=\"string\">&quot;EMEA&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">25</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;  [1]    NA  TRUE  TRUE    NA    NA    NA  TRUE  TRUE    NA  TRUE FALSE    NA</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; [13]    NA    NA  TRUE    NA  TRUE  TRUE    NA    NA  TRUE FALSE  TRUE    NA</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; [25]  TRUE</span></span><br></pre></td></tr></table></figure>\n\n<p>当我通过<code>[</code>使用这些缺失值对<code>sales</code>数据框进行取子集时，这些缺失值就变成了缺失行。输入中的任何缺失值都会保留在输出中。有很多方法可以解决这个问题，但我决定使用 <code>subset()</code>，因为它可以自动删除缺失值并减少我需要键入 <code>sales</code> 的次数。然后我再次检查了它是否真的有效：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">subset<span class=\"punctuation\">(</span>sales<span class=\"punctuation\">,</span> TERRITORY <span class=\"operator\">==</span> <span class=\"string\">&quot;EMEA&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; # A tibble: 1,407 × 6</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   TERRITORY ORDERDATE       ORDERNUMBER PRODUCTCODE QUANTITYORDERED PRICEEACH</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   &lt;chr&gt;     &lt;chr&gt;                 &lt;dbl&gt; &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 1 EMEA      5/7/2003 0:00         10121 S10_1678                 34      81.4</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 2 EMEA      7/1/2003 0:00         10134 S10_1678                 41      94.7</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 3 EMEA      11/11/2003 0:00       10180 S10_1678                 29      86.1</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 4 EMEA      11/18/2003 0:00       10188 S10_1678                 48     100  </span></span><br><span class=\"line\"><span class=\"comment\">#&gt; # … with 1,403 more rows</span></span><br></pre></td></tr></table></figure>\n\n<p>这解决了我遇到的大部分问题，但当我在领土下拉菜单中选择 NA 时，仍然没有出现任何行。因此，我再次检查了控制台：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">subset<span class=\"punctuation\">(</span>sales<span class=\"punctuation\">,</span> TERRITORY <span class=\"operator\">==</span> <span class=\"literal\">NA</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; # A tibble: 0 × 6</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; # … with 6 variables: TERRITORY &lt;chr&gt;, ORDERDATE &lt;chr&gt;, ORDERNUMBER &lt;dbl&gt;,</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; #   PRODUCTCODE &lt;chr&gt;, QUANTITYORDERED &lt;dbl&gt;, PRICEEACH &lt;dbl&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后我意识到，当然这行不通，因为缺失值具有传染性：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">head<span class=\"punctuation\">(</span>sales<span class=\"operator\">$</span>TERRITORY <span class=\"operator\">==</span> <span class=\"literal\">NA</span><span class=\"punctuation\">,</span> <span class=\"number\">25</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;  [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA</span></span><br></pre></td></tr></table></figure>\n\n<p>此处有另一种方法可以解决该问题：将<code>==</code>替换为<code>%in%</code>：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">head<span class=\"punctuation\">(</span>sales<span class=\"operator\">$</span>TERRITORY <span class=\"operator\">%in%</span> <span class=\"literal\">NA</span><span class=\"punctuation\">,</span> <span class=\"number\">25</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;  [1]  TRUE FALSE FALSE  TRUE  TRUE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; [13]  TRUE  TRUE FALSE  TRUE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE  TRUE</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; [25] FALSE</span></span><br><span class=\"line\">subset<span class=\"punctuation\">(</span>sales<span class=\"punctuation\">,</span> TERRITORY <span class=\"operator\">%in%</span> <span class=\"literal\">NA</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; # A tibble: 1,074 × 6</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   TERRITORY ORDERDATE       ORDERNUMBER PRODUCTCODE QUANTITYORDERED PRICEEACH</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   &lt;chr&gt;     &lt;chr&gt;                 &lt;dbl&gt; &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 1 &lt;NA&gt;      2/24/2003 0:00        10107 S10_1678                 30      95.7</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 2 &lt;NA&gt;      8/25/2003 0:00        10145 S10_1678                 45      83.3</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 3 &lt;NA&gt;      10/10/2003 0:00       10159 S10_1678                 49     100  </span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 4 &lt;NA&gt;      10/28/2003 0:00       10168 S10_1678                 36      96.7</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; # … with 1,070 more rows</span></span><br></pre></td></tr></table></figure>\n\n<p>于是我更新了应用程序并再次尝试。但它仍然没有起作用！当我在下拉菜单中选择“NA”时，我没有看到任何行。</p>\n<p>此时，我想我已经在控制台上做了所有可以做的事情，我需要进行实验，找出Shiny内部代码没有按我预期的方式工作的原因。我猜最可能的问题来源是在<code>selected</code>反应式中，所以我添加了一个 <a href=\"https://rdrr.io/r/base/browser.html\">browser()</a> 语句。（这使它成为了一个两行的反应式，所以我需要用 <code>&#123;&#125;</code> 将其包裹起来。）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &lt;- function(input, output, session) &#123;</span><br><span class=\"line\">  selected &lt;- reactive(&#123;</span><br><span class=\"line\">    browser()</span><br><span class=\"line\">    subset(sales, TERRITORY %in% input$territory)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  output$selected &lt;- renderTable(head(selected(), 10))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在，当我的应用程序运行时，我立即被投入了一个交互式控制台。我的第一步是验证我是否处于有问题的情况，所以我运行了 <code>subset(sales, TERRITORY %in% input$territory)</code>。它返回了一个空数据框。如果我没有看到问题，我会键入 <code>c</code> 让应用程序继续运行，然后进行一些交互以进入失败状态。</p>\n<p>然后我检查 <code>subset()</code>的输入是否符合我的预期。我首先仔细检查 <code>sales</code> 数据集。我并没有真正预期它会损坏，因为应用程序中没有任何东西可以触及到它，但仔细检查你所做的每一个假设是最安全的。<code>sales</code> 看起来还不错，所以问题一定在于 <code>TERRITORY %in% input$territory</code>。由于 <code>TERRITORY</code> 是 <code>sales</code> 的一部分，我从检查 <code>input$territory</code> 开始：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input<span class=\"operator\">$</span>territory</span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] &quot;NA&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>我盯着这个看了一会儿，因为它看起来也还可以。然后我突然想到！我原以为它是<code>NA</code>，但实际上它是<code>“NA”</code>！现在我可以在Shiny应用程序之外重新创建这个问题：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">subset<span class=\"punctuation\">(</span>sales<span class=\"punctuation\">,</span> TERRITORY <span class=\"operator\">%in%</span> <span class=\"string\">&quot;NA&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; # A tibble: 0 × 6</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; # … with 6 variables: TERRITORY &lt;chr&gt;, ORDERDATE &lt;chr&gt;, ORDERNUMBER &lt;dbl&gt;,</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; #   PRODUCTCODE &lt;chr&gt;, QUANTITYORDERED &lt;dbl&gt;, PRICEEACH &lt;dbl&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后我想到了一个简单的解决方法，将其应用到服务器上，然后重新运行应用程序：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &lt;- function(input, output, session) &#123;</span><br><span class=\"line\">  selected &lt;- reactive(&#123;</span><br><span class=\"line\">    if (input$territory == &quot;NA&quot;) &#123;</span><br><span class=\"line\">      subset(sales, is.na(TERRITORY))</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      subset(sales, TERRITORY == input$territory)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  output$selected &lt;- renderTable(head(selected(), 10))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>好极了！问题解决了！但这对我来说感到非常惊讶-Shiny默默地将<code>NA</code>转换为<code>“NA”</code>，因此我也提交了一个错误报告：<a href=\"https://github.com/rstudio/shiny/issues/2884\">https://github.com/rstudio/shiny/issues/2884</a>。</p>\n<p>几周后，我再次看了这个例子，并开始思考不同的地区。我们有欧洲、中东和非洲（EMEA）以及亚洲太平洋地区（APAC）。北美在哪里？然后我突然想到：源数据可能使用了缩写NA，而R将其读作缺失值。因此，真正的修复应该在数据加载期间完成：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sales <span class=\"operator\">&lt;-</span> readr<span class=\"operator\">::</span>read_csv<span class=\"punctuation\">(</span><span class=\"string\">&quot;sales-dashboard/sales_data_sample.csv&quot;</span><span class=\"punctuation\">,</span> na <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">unique<span class=\"punctuation\">(</span>sales<span class=\"operator\">$</span>TERRITORY<span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] &quot;NA&quot;    &quot;EMEA&quot;  &quot;APAC&quot;  &quot;Japan&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>这让生活变得简单多了！</p>\n<p>在调试时，这是一种常见的模式：在完全理解问题的根源之前，你通常需要剥掉洋葱的多个层。</p>\n<h3 id=\"5-2-5-调试反应性\"><a href=\"#5-2-5-调试反应性\" class=\"headerlink\" title=\"5.2.5 调试反应性\"></a>5.2.5 调试反应性</h3><p>最难调试的问题是当你的反应器以意想不到的顺序启动时。在本书的这一部分，我们推荐相对较少的工具来帮助你调试这个问题。在下一节中，你将学习如何创建一个最小的reprex，这对这类问题至关重要，在本书的后面，你将学习更多关于基础理论的知识，以及关于像反应日志这样的工具的知识， <a href=\"https://github.com/rstudio/reactlog\">https://github.com/rstudio/reactlog</a>。但是现在，我们将重点介绍一种在这里很有用的经典技术：“打印”调试。</p>\n<p>打印调试的基本思想是，每当需要了解代码的一部分何时被求值时，就调用 <code>print()</code>，并显示重要变量的值。我们称之为“打印”调试（因为在大多数语言中，你会使用 print 函数），但在 R 中，使用 <code>message()</code> 更合理：</p>\n<ul>\n<li><code>print()</code>旨在显示数据向量，因此它在字符串周围加上引号，并以<code>[1]</code>开头。</li>\n<li><code>message()</code>将其结果发送到“标准错误”，而不是“标准输出”。这些是描述输出流的技术术语，您通常不会注意到它们，因为它们在交互式运行时以相同的方式显示。但是，如果您的应用程序托管在其他地方，则发送到“标准错误”的输出将被记录在日志中。</li>\n</ul>\n<p>我还建议将 <code>message()</code> 与 <code>glue::glue()</code>结合使用，这使得在消息中交替文本和值变得容易。如果你以前没有见过 <a href=\"http://glue.tidyverse.org/\">glue</a>，它的基本思想是，任何包含在 <code>&#123;&#125;</code> 中的内容都将被计算并插入到输出中：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>glue<span class=\"punctuation\">)</span></span><br><span class=\"line\">name <span class=\"operator\">&lt;-</span> <span class=\"string\">&quot;Hadley&quot;</span></span><br><span class=\"line\">message<span class=\"punctuation\">(</span>glue<span class=\"punctuation\">(</span><span class=\"string\">&quot;Hello &#123;name&#125;&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; Hello Hadley</span></span><br></pre></td></tr></table></figure>\n\n<p>在函数中使用 <a href=\"https://rdrr.io/r/utils/str.html\">str()</a> 可以打印出任何对象的详细结构，这对于检查我们期望的对象类型是否正确非常有用。</p>\n<p>下面是一个简单的应用程序，演示了一些基本的理念。注意，在 <code>reactive()</code> 函数内部，我使用了 <code>message()</code> 函数。我必须先进行计算，然后发送消息，最后返回之前计算的值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui &lt;- fluidPage(</span><br><span class=\"line\">  sliderInput(&quot;x&quot;, &quot;x&quot;, value = 1, min = 0, max = 10),</span><br><span class=\"line\">  sliderInput(&quot;y&quot;, &quot;y&quot;, value = 2, min = 0, max = 10),</span><br><span class=\"line\">  sliderInput(&quot;z&quot;, &quot;z&quot;, value = 3, min = 0, max = 10),</span><br><span class=\"line\">  textOutput(&quot;total&quot;)</span><br><span class=\"line\">)</span><br><span class=\"line\">server &lt;- function(input, output, session) &#123;</span><br><span class=\"line\">  observeEvent(input$x, &#123;</span><br><span class=\"line\">    message(glue(&quot;Updating y from &#123;input$y&#125; to &#123;input$x * 2&#125;&quot;))</span><br><span class=\"line\">    updateSliderInput(session, &quot;y&quot;, value = input$x * 2)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  </span><br><span class=\"line\">  total &lt;- reactive(&#123;</span><br><span class=\"line\">    total &lt;- input$x + input$y + input$z</span><br><span class=\"line\">    message(glue(&quot;New total is &#123;total&#125;&quot;))</span><br><span class=\"line\">    total</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  </span><br><span class=\"line\">  output$total &lt;- renderText(&#123;</span><br><span class=\"line\">    total()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当我启动应用程序时，控制台显示：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Updating y from 2 to 2</span><br><span class=\"line\">New total is 6</span><br></pre></td></tr></table></figure>\n\n<p>当将x的值滑动到3时看到的结果：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Updating y from 2 to 6</span><br><span class=\"line\">New total is 8</span><br><span class=\"line\">New total is 12</span><br></pre></td></tr></table></figure>\n\n<p>如果你发现结果有点令人惊讶，不要担心。你将在第8章和第3.3.3章中了解更多有关情况。</p>\n<h2 id=\"5-3-获取帮助\"><a href=\"#5-3-获取帮助\" class=\"headerlink\" title=\"5.3 获取帮助\"></a>5.3 获取帮助</h2><p>如果你尝试了这些技巧之后仍然感到困惑，那么现在可能是时候向他人寻求帮助了。<a href=\"https://community.rstudio.com/c/shiny\">Shiny社区网站</a>是一个寻求帮助的好地方。这个网站由许多Shiny用户以及Shiny包的开发者共同维护。如果你想通过帮助他人来提高你的Shiny技能，这也是一个不错的地方。</p>\n<p>为了尽快获得最有益的帮助，你需要创建一个reprex，也就是可重复的示例。Reprex的目标是提供最小可能的R代码片段，以说明问题，并可以轻松地在另一台计算机上运行。创建reprex是一种常识（也是为了你自己的利益）：如果你想让别人帮助你，你应该尽可能地简化问题！</p>\n<p>创建reprex是一种礼貌，因为它将问题的基本要素捕捉到一种形式中，任何人都可以运行它，这样任何试图帮助你的人都可以快速地看到问题的确切性质，并可以容易地尝试可能的解决方案。</p>\n<h3 id=\"5-3-1-Reprex基本要素\"><a href=\"#5-3-1-Reprex基本要素\" class=\"headerlink\" title=\"5.3.1 Reprex基本要素\"></a>5.3.1 Reprex基本要素</h3><p>一个reprex只是一段R代码，当你将其复制并粘贴到另一台计算机上的R会话中时，它能够正常工作。以下是一个简单的Shiny app reprex：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library(shiny)</span><br><span class=\"line\">ui &lt;- fluidPage(</span><br><span class=\"line\">  selectInput(&quot;n&quot;, &quot;N&quot;, 1:10),</span><br><span class=\"line\">  plotOutput(&quot;plot&quot;)</span><br><span class=\"line\">)</span><br><span class=\"line\">server &lt;- function(input, output, session) &#123;</span><br><span class=\"line\">  output$plot &lt;- renderPlot(&#123;</span><br><span class=\"line\">    n &lt;- input$n * 2</span><br><span class=\"line\">    plot(head(cars, n))</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">shinyApp(ui, server)</span><br></pre></td></tr></table></figure>\n\n<p>这段代码不针对运行它的计算机做任何假设（除了安装Shiny之外！），因此任何人都可以运行此代码并看到问题：应用程序抛出一个错误，说“non-numeric argument to binary operator”。</p>\n<p>清楚地说明问题是获得帮助的第一步，因为任何人都可以通过复制和粘贴代码来重现问题，他们可以很容易地探索您的代码并测试可能的解决方案。（在这种情况下，您需要<code>as.numeric(input$n)</code>，因为<code>selectInput()</code>在<code>input$n</code>中创建了一个字符串。）</p>\n<h3 id=\"5-3-2-创建reprex\"><a href=\"#5-3-2-创建reprex\" class=\"headerlink\" title=\"5.3.2 创建reprex\"></a>5.3.2 创建reprex</h3><p>创建reprex的第一步是创建一个独立的文件，其中包含运行代码所需的一切。您应该通过在一个新的R会话中运行代码来检查它是否工作。确保您没有遗漏任何使应用程序工作正常的包。</p>\n<p>通常，让应用程序在别人的计算机上运行最困难的部分是消除只存储在您计算机上的数据的使用。以下是三种有用的模式：</p>\n<ul>\n<li><p>你经常使用的数据与问题没有直接关系，你可以使用内置的数据集，如mtcars或iris。</p>\n</li>\n<li><p>其他时候，你可能能够编写一段R代码来创建一个说明问题的数据集：</p>\n</li>\n</ul>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mydata <span class=\"operator\">&lt;-</span> data.frame<span class=\"punctuation\">(</span>x <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"operator\">:</span><span class=\"number\">5</span><span class=\"punctuation\">,</span> y <span class=\"operator\">=</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;a&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;b&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;c&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;d&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;e&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>如果这两种方法都失败了，你可以用<a href=\"https://rdrr.io/r/base/dput.html\">dput()</a>将你的数据变成代码。例如，<code>dput(mydata)</code>会生成重新创建<code>mydata</code>的代码：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dput<span class=\"punctuation\">(</span>mydata<span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; structure(list(x = 1:5, y = c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;)), class = &quot;data.frame&quot;, row.names = c(NA, </span></span><br><span class=\"line\"><span class=\"comment\">#&gt; -5L))</span></span><br></pre></td></tr></table></figure>\n\n<p>一旦你有了这段代码，你可以把它放在你的reprex中来生成mydata：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mydata <span class=\"operator\">&lt;-</span> structure<span class=\"punctuation\">(</span><span class=\"built_in\">list</span><span class=\"punctuation\">(</span>x <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"operator\">:</span><span class=\"number\">5</span><span class=\"punctuation\">,</span> y <span class=\"operator\">=</span> structure<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"operator\">:</span><span class=\"number\">5</span><span class=\"punctuation\">,</span> .Label <span class=\"operator\">=</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;a&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;b&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\"><span class=\"string\">&quot;c&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;d&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;e&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> <span class=\"built_in\">class</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;factor&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> <span class=\"built_in\">class</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;data.frame&quot;</span><span class=\"punctuation\">,</span> row.names <span class=\"operator\">=</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"literal\">NA</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\"><span class=\"operator\">-</span><span class=\"number\">5L</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>经常在你的原始数据上运行<code>dput()</code>会产生大量的代码，所以需要找到一个说明问题的子集数据。你提供的数据集越小，其他人就越容易帮助你解决问题。</p>\n<p>如果从磁盘中读取数据似乎是问题的不可简化的部分，最后的策略是提供一个完整的项目，包含一个<code>app.R</code>和所需的数据文件。最好的方式是作为RStudio项目托管在GitHub上，但如果没有，你可以仔细地制作一个可以在本地运行的zip文件。确保你使用相对路径（即<code>read.csv(&quot;my-data.csv&quot;)</code>而不是<code>read.csv(&quot;c:\\\\my-user-name\\\\files\\\\my-data.csv&quot;)</code>），这样你的代码在另一台计算机上运行时仍然有效。</p>\n<p>你还应该考虑读者，花些时间格式化你的代码，以便于阅读。如果你采用<a href=\"http://style.tidyverse.org/\">tidyverse风格指南</a>，你可以使用<a href=\"http://styler.r-lib.org/\">styler</a>包自动重新格式化你的代码；这很快就能让你的代码更容易阅读。</p>\n<h3 id=\"5-3-3-创建最小reprex\"><a href=\"#5-3-3-创建最小reprex\" class=\"headerlink\" title=\"5.3.3 创建最小reprex\"></a>5.3.3 创建最小reprex</h3><p>创建可重复的示例是很好的第一步，因为它允许其他人精确地重现你的问题。然而，通常有问题的代码通常会被埋在正常工作的代码中，所以你可以修剪掉没问题的代码来帮助那些想帮忙的人更容易上手。</p>\n<p>创建尽可能小的reprex对于Shiny应用程序尤其重要，因为它们通常很复杂。如果你能提取出你正在挣扎的应用程序的精确部分，而不是强迫潜在的助手理解你的整个应用程序，你将获得更快、更高质量帮助。作为一个额外的好处，这个过程往往会引导你发现问题的所在，所以你不必等待别人的帮助！</p>\n<p>将大量代码简化为基本问题是一种技能，你可能一开始并不擅长。没关系！即使代码复杂度的小小降低也会对帮助你的人有所帮助，随着时间的推移，你的reprex收缩技能将会提高。</p>\n<p>如果你不知道你的代码哪部分触发了问题，一个好的方法是逐步从你的应用程序中删除代码段，直到问题消失。如果删除一段特定的代码使问题停止，很可能该代码与问题有关。或者，有时从一个空的应用程序开始，并逐步构建直到你再次找到问题，这可能更简单。</p>\n<p>一旦你已经简化了你的应用程序来演示问题，值得进行最后的检查：</p>\n<ul>\n<li><p><code>UI</code>中的每个输入和输出是否都与问题相关？</p>\n</li>\n<li><p>你的应用程序是否有复杂的布局，你可以简化它来帮助关注眼前的问题吗？你删除了所有使你的应用程序看起来不错但与问题无关的UI自定义吗？</p>\n</li>\n<li><p><code>server()</code>中可以删除的reactives有哪些？</p>\n</li>\n<li><p>如果你已经尝试了多种方法来解决这个问题，你删除了所有没有奏效的尝试的痕迹吗？</p>\n</li>\n<li><p>您加载的每个包对于说明问题都是必要的吗？您可以通过用伪代码替换函数来消除包吗？</p>\n</li>\n</ul>\n<p>这可能需要大量的工作，但是回报是巨大的：在制作reprex的过程中，您经常会发现问题的解决方案，即使没有，您也会更容易地获得帮助。</p>\n<h3 id=\"5-3-4案例研究\"><a href=\"#5-3-4案例研究\" class=\"headerlink\" title=\"5.3.4案例研究\"></a>5.3.4案例研究</h3><p>为了说明制作顶级reprex的过程，我将使用<a href=\"https://community.rstudio.com/u/sanovogo\">Scott Novogoratz</a>在<a href=\"https://community.rstudio.com/t/37982\">RStudio社区</a>上发布的一个例子。初始代码非常接近reprex，但因为忘记加载一对包而无法完全重现。作为起点，我：</p>\n<ul>\n<li>添加了缺失的<code>library(lubridate)</code>和<code>library(xts)</code>。</li>\n<li>将<code>ui</code>和<code>server</code>拆分为单独的对象。</li>\n<li>使用<code>styler::style_selection()</code>重新格式化代码。</li>\n</ul>\n<p>这样得到了以下reprex：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library(xts)</span><br><span class=\"line\">library(lubridate)</span><br><span class=\"line\">library(shiny)</span><br><span class=\"line\"></span><br><span class=\"line\">ui &lt;- fluidPage(</span><br><span class=\"line\">  uiOutput(&quot;interaction_slider&quot;),</span><br><span class=\"line\">  verbatimTextOutput(&quot;breaks&quot;)</span><br><span class=\"line\">)</span><br><span class=\"line\">server &lt;- function(input, output, session) &#123;</span><br><span class=\"line\">  df &lt;- data.frame(</span><br><span class=\"line\">    dateTime = c(</span><br><span class=\"line\">      &quot;2019-08-20 16:00:00&quot;,</span><br><span class=\"line\">      &quot;2019-08-20 16:00:01&quot;,</span><br><span class=\"line\">      &quot;2019-08-20 16:00:02&quot;,</span><br><span class=\"line\">      &quot;2019-08-20 16:00:03&quot;,</span><br><span class=\"line\">      &quot;2019-08-20 16:00:04&quot;,</span><br><span class=\"line\">      &quot;2019-08-20 16:00:05&quot;</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    var1 = c(9, 8, 11, 14, 16, 1),</span><br><span class=\"line\">    var2 = c(3, 4, 15, 12, 11, 19),</span><br><span class=\"line\">    var3 = c(2, 11, 9, 7, 14, 1)</span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\">  timeSeries &lt;- as.xts(df[, 2:4], </span><br><span class=\"line\">    order.by = strptime(df[, 1], format = &quot;%Y-%m-%d %H:%M:%S&quot;)</span><br><span class=\"line\">  )</span><br><span class=\"line\">  print(paste(min(time(timeSeries)), is.POSIXt(min(time(timeSeries))), sep = &quot; &quot;))</span><br><span class=\"line\">  print(paste(max(time(timeSeries)), is.POSIXt(max(time(timeSeries))), sep = &quot; &quot;))</span><br><span class=\"line\"></span><br><span class=\"line\">  output$interaction_slider &lt;- renderUI(&#123;</span><br><span class=\"line\">    sliderInput(</span><br><span class=\"line\">      &quot;slider&quot;,</span><br><span class=\"line\">      &quot;Select Range:&quot;,</span><br><span class=\"line\">      min = min(time(timeSeries)),</span><br><span class=\"line\">      max = max(time(timeSeries)),</span><br><span class=\"line\">      value = c(min, max)</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  brks &lt;- reactive(&#123;</span><br><span class=\"line\">    req(input$slider)</span><br><span class=\"line\">    seq(input$slider[1], input$slider[2], length.out = 10)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  output$breaks &lt;- brks</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">shinyApp(ui, server)</span><br></pre></td></tr></table></figure>\n\n<p>如果你运行这个 reprex，你会在最初的帖子中看到同样的问题：一个错误声明“Type mismatch for min, max, and value. Each must be Date, POSIXt, or number”。这是一个可靠的 reprex：我可以在我的电脑上轻松运行它，它立即说明了问题。然而，它有点长，所以不清楚是什么导致了问题。</p>\n<p>为了使这个代码更简单，我们可以仔细检查每一行代码，看看它是否重要。 在做这个的时候，我发现：</p>\n<ul>\n<li><p>删除以 <code>print()</code> 开头的两行代码并没有影响错误。这两行代码使用了 <a href=\"https://lubridate.tidyverse.org/reference/posix_utils.html\">lubridate::is.POSIXt()</a>，这是lubridate的唯一用途，所以一旦我删除了它们，我就不再需要加载lubridate。</p>\n</li>\n<li><p><code>df</code>是一个数据框，被转换为xts数据框，称为<code>timeSeries</code>。但是使用<code>timeSeries</code>的唯一方法是使用<code>time(timeSeries)</code>，它返回一个日期时间。所以我创建了一个新的变量<code>datetime</code>，其中包含一些虚拟日期时间数据。这仍然产生了相同的错误，所以我删除了<code>timeSeries</code>和<code>df</code>，因为这是唯一使用xts的地方，我还删除了<code>library(xts)</code>。</p>\n</li>\n</ul>\n<p>这些更改共同产生了一个新的 <code>server()</code>，如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">datetime &lt;- Sys.time() + (86400 * 0:10)</span><br><span class=\"line\"></span><br><span class=\"line\">server &lt;- function(input, output, session) &#123;</span><br><span class=\"line\">  output$interaction_slider &lt;- renderUI(&#123;</span><br><span class=\"line\">    sliderInput(</span><br><span class=\"line\">      &quot;slider&quot;,</span><br><span class=\"line\">      &quot;Select Range:&quot;,</span><br><span class=\"line\">      min   = min(datetime),</span><br><span class=\"line\">      max   = max(datetime),</span><br><span class=\"line\">      value = c(min, max)</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  </span><br><span class=\"line\">  brks &lt;- reactive(&#123;</span><br><span class=\"line\">    req(input$slider)</span><br><span class=\"line\">    seq(input$slider[1], input$slider[2], length.out = 10)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  </span><br><span class=\"line\">  output$breaks &lt;- brks</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来，我注意到这个例子使用了相对复杂的 Shiny 技术，其中 UI 在server函数中生成。但这里的 <a href=\"https://rdrr.io/pkg/shiny/man/renderUI.html\">renderUI()</a> 没有使用任何反应式输入，因此如果将其从server函数中移出并放入 UI 中，它应该以相同的方式工作。</p>\n<p>这产生了特别好的结果，因为现在错误发生得更早，甚至在我们启动应用程序之前：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui &lt;- fluidPage(</span><br><span class=\"line\">  sliderInput(&quot;slider&quot;,</span><br><span class=\"line\">    &quot;Select Range:&quot;,</span><br><span class=\"line\">    min   = min(datetime),</span><br><span class=\"line\">    max   = max(datetime),</span><br><span class=\"line\">    value = c(min, max)</span><br><span class=\"line\">  ),</span><br><span class=\"line\">  verbatimTextOutput(&quot;breaks&quot;)</span><br><span class=\"line\">)</span><br><span class=\"line\">#&gt; Error: Type mismatch for `min`, `max`, and `value`.</span><br><span class=\"line\">#&gt; i All values must have same type: either numeric, Date, or POSIXt.</span><br></pre></td></tr></table></figure>\n\n<p>现在我们可以从错误消息中得到提示，并查看我们为 <code>min</code>、<code>max</code>和 <code>value</code> 提供的每个输入，以找出问题所在：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">min</span><span class=\"punctuation\">(</span>datetime<span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] &quot;2022-08-23 23:09:34 UTC&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">max</span><span class=\"punctuation\">(</span>datetime<span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] &quot;2022-09-02 23:09:34 UTC&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"built_in\">min</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; [[1]]</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; function (..., na.rm = FALSE)  .Primitive(&quot;min&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; </span></span><br><span class=\"line\"><span class=\"comment\">#&gt; [[2]]</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; function (..., na.rm = FALSE)  .Primitive(&quot;max&quot;)</span></span><br></pre></td></tr></table></figure>\n\n<p>现在问题很明显：我们没有指定 <code>min</code> 和 <code>max</code> 变量，所以我们意外地将 <code>min()</code> 和 <code>max()</code> 函数传递给了 <code>sliderInput()</code>。解决这个问题的一种方法是使用 <code>range()</code> 代替：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui &lt;- fluidPage(</span><br><span class=\"line\">  sliderInput(&quot;slider&quot;,</span><br><span class=\"line\">    &quot;Select Range:&quot;,</span><br><span class=\"line\">    min   = min(datetime),</span><br><span class=\"line\">    max   = max(datetime),</span><br><span class=\"line\">    value = range(datetime)</span><br><span class=\"line\">  ),</span><br><span class=\"line\">  verbatimTextOutput(&quot;breaks&quot;)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>这是创建reprex的典型结果：一旦将问题简化为其关键组成部分，解决方案就会变得显而易见。创建好的reprex是一种非常强大的调试技术。</p>\n<p>为了简化这个过程，我不得不做大量的实验，并阅读一些我不熟悉的函数。如果这是你的代码，通常会容易得多，因为你已经理解了代码的意图。不过，你通常需要做一些实验，以找出问题到底来自哪里。这可能会令人沮丧，而且感觉很耗时，但它有很多好处：</p>\n<ul>\n<li><p>它使您能够创建问题的描述，任何知道Shiny的人都可以访问该描述，而不是任何知道Shiny和您正在使用的特定领域的人。</p>\n</li>\n<li><p>你将建立一个更好的关于你的代码如何工作的心理模型，这意味着你将来不太可能犯同样或类似的错误。</p>\n</li>\n<li><p>随着时间的推移，你会越来越快地创建reprex，这将成为你在调试时常用的技术之一。</p>\n</li>\n<li><p>即使你没有创建一个完美的 reprex，你也可以做任何工作来改进你的 reprex，这样别人要做的工作就会减少。如果你想从软件包开发人员那里得到帮助，这一点尤其重要，因为他们通常对时间有很多要求。</p>\n</li>\n</ul>\n<p>当我在 RStudio 社区上尝试帮助别人使用他们的应用程序时，创建 reprex 总是我做的第一件事。这不是我用来打发不想帮助的人的简单工作练习：这正是我开始的地方！</p>\n<h2 id=\"5-4-总结\"><a href=\"#5-4-总结\" class=\"headerlink\" title=\"5.4 总结\"></a>5.4 总结</h2><p>本章为您提供了开发应用程序、调试问题和获取帮助的一些有用工作流。这些工作流程可能看起来有点抽象，容易被忽略，因为它们并没有具体地改善单个应用程序。但我认为工作流是我的“秘密”力量之一：我之所以能够取得如此大的成就，原因之一是我花时间分析和改进我的工作流程。我强烈建议您也这样做！</p>\n<p>下一章是关于布局和主题的有用技术精选，您可以随意跳到当前应用程序所需章节。</p>\n<h1 id=\"加关注\"><a href=\"#加关注\" class=\"headerlink\" title=\"加关注\"></a>加关注</h1><p>关注公众号“生信之巅”。</p>\n<table align=\"center\"><tr>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅微信公众号\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-right: 0px;margin-bottom: 5px;align: center;\"></td>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅小程序码\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-left: 0px;margin-bottom: 5px;align: center\"></td>\n</tr></table>\n\n\n<p><font color=\"#FF0000\"><ruby><b>敬告</b>：使用文中脚本请引用本文网址，请尊重本人的劳动成果，谢谢！<rt><b>Notice</b>: When you use the scripts in this article, please cite the link of this webpage. Thank you!</rt></ruby></font></p>\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"Shiny入门系列,编程 - Shiny入门系列 - 编程","path":"api/tags/Shiny入门系列,编程 - Shiny入门系列 - 编程.json"}]}]}