{"name":"Shiny入门系列","postlist":[{"title":"Shiny从入门到入定——0欢迎入坑","slug":"Shiny从入门到入定——0欢迎入坑","date":"2023-11-09T10:25:21.000Z","updated":"2024-03-11T13:07:17.000Z","comments":true,"path":"api/articles/Shiny从入门到入定——0欢迎入坑.json","excerpt":null,"keywords":null,"cover":"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg","content":"<h1 id=\"欢迎语\"><a href=\"#欢迎语\" class=\"headerlink\" title=\"欢迎语\"></a>欢迎语</h1><p>Shiny是使用R代码创建Web应用程序的框架。它主要是为数据科学家设计的，为此，您可以在不了解HTML，CSS或JavaScript的情况下创建相当复杂的Shiny应用程序。另一方面，Shiny并不限制您只能创建琐碎的或预制的程序：其用户界面组件可以轻松地定制或扩展，其服务器使用反应性编程让您创建任何类型的后端逻辑。Shiny容易上手，当你深入了解它如何工作的时候，你就会更加意识到它是由强大的软件工程原理支撑的通用构建块。</p>\n<p>如今，Shiny的应用领域和行业几乎与R本身一样多。学术界将其作为统计概念的教学工具，激发本科生对编写代码的热情，展示新颖统计方法或模型的引人注目的媒介。大型制药公司将其用于加快药物开发过程中科学家和分析师之间的协作。硅谷科技公司将其用于建立整合高级分析的实时指标仪表板。 本书旨在让您从对Shiny一无所知成为能够编写大型复杂应用程序的专业开发人员，这些应用程序易于维护且性能卓越。您将深入了解Shiny背后的反应式编程模型，以及构建有用的技术工具箱，以解决常见的应用程序挑战。</p>\n<h1 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h1><h2 id=\"Shiny是什么？\"><a href=\"#Shiny是什么？\" class=\"headerlink\" title=\"Shiny是什么？\"></a>Shiny是什么？</h2><p>如果你之前从未使用过Shiny，欢迎你！Shiny是一个R包，可以让你轻松地创建丰富的交互式Web应用程序。Shiny允许你将R中的工作通过Web浏览器进行展示，以便任何人都可以使用。Shiny让你轻松创建精美的Web应用程序，让你看起来很酷。</p>\n<p>在过去，对于大多数R用户来说创建Web应用程序很困难，因为：</p>\n<ul>\n<li><p>你需要深入了解HTML、CSS和JavaScript等Web技术。</p>\n</li>\n<li><p>要制作复杂的交互式应用程序，需要仔细分析交互流，以确保当输入变化时，只有相关的输出被更新。</p>\n</li>\n</ul>\n<p>Shiny通过以下方式使R程序员创建Web应用程序变得更容易：</p>\n<ul>\n<li><p>提供一组精心策划的用户界面（UI）函数，用于生成常见任务的HTML、CSS和JavaScript。这意味着，在你想超越Shiny为你提供的基本功能之前，你不需要了解HTML&#x2F;CSS&#x2F;JavaScript的细节。</p>\n</li>\n<li><p>引入一种称为反应式编程的新编程风格，这种风格可以自动跟踪代码的依赖关系。这意味着每当输入发生变化时，Shiny可以自动找出如何进行最小的工作量来更新所有相关的输出。</p>\n</li>\n</ul>\n<p>人们使用Shiny来：</p>\n<ul>\n<li><p>创建跟踪重要高级性能指标的仪表板，同时促进对需要更多调查的指标进行深入挖掘。</p>\n</li>\n<li><p>用交互式应用程序取代数百页的PDF文件，使用户能够跳转到他们关心的确切结果片段。</p>\n</li>\n<li><p>使用信息丰富的可视化和交互式敏感性分析，向非技术受众传达复杂模型。</p>\n</li>\n<li><p>为常见工作流程提供自助式数据分析，用Shiny应用程序取代电子邮件请求，允许人们上传自己的数据并执行标准分析。你可以将复杂的R分析提供给没有编程技能的用户。</p>\n</li>\n<li><p>为教授统计学和数据科学概念创建交互式演示，允许学习者调整输入并观察分析中这些更改的下游影响。</p>\n</li>\n</ul>\n<p>简而言之，Shiny使您能够将您的某些R超级能力传递给任何会使用网络的人。</p>\n<h2 id=\"谁应该阅读本书？\"><a href=\"#谁应该阅读本书？\" class=\"headerlink\" title=\"谁应该阅读本书？\"></a>谁应该阅读本书？</h2><p>本书主要面向以下两个受众群体：</p>\n<ul>\n<li><p>对Shiny感兴趣的R用户，以将他们的分析转化为交互式Web应用程序。要想从本书中获得最大收益，您应该能够熟练使用R进行数据分析，并且至少编写过几个函数。</p>\n</li>\n<li><p>现有的Shiny用户，他们希望提高对Shiny理论知识的了解，以更快更容易地编写更高质量的应用程序。如果您发现自己的应用程序变得越来越庞大并且开始出现管理复杂性的问题，那么您将特别需要本书的帮助。</p>\n</li>\n</ul>\n<h2 id=\"您将学到什么？\"><a href=\"#您将学到什么？\" class=\"headerlink\" title=\"您将学到什么？\"></a>您将学到什么？</h2><p>本书分为四个部分：</p>\n<ul>\n<li><p>在“入门”部分中，您将学习Shiny的基础知识，以便尽快上手。您将了解应用程序结构的基础知识、有用的UI组件和反应式编程的基础。</p>\n</li>\n<li><p>“Shiny实战”部分建立在基础知识之上，帮助您解决常见问题，包括向用户提供反馈、上传和下载数据、使用代码生成UI、减少代码重复和使用Shiny来编程tidyverse。</p>\n</li>\n<li><p>在“掌握反应性”部分中，您将深入了解反应式编程的理论和实践，这是Shiny的基础编程范式。如果您是现有的Shiny用户，那么您将从本章中获得最大的价值，因为它将为您提供坚实理论基础，使您能够创建专门针对您问题的新工具。</p>\n</li>\n<li><p>最后，“最佳实践”部分中，我们将对使您的Shiny应用程序在生产环境中运行良好的实用技术进行调查。您将学习如何将复杂的应用程序分解为函数和模块、如何使用包来组织您的代码、如何测试您的代码以确保它是正确的，以及如何衡量和改进性能。</p>\n</li>\n</ul>\n<h2 id=\"您不会学到什么？\"><a href=\"#您不会学到什么？\" class=\"headerlink\" title=\"您不会学到什么？\"></a>您不会学到什么？</h2><p>本书的重点是制作有效的Shiny应用程序并理解反应性的底层理论。我将尽最大努力展示数据科学、R编程和软件工程的最佳实践，但您需要其他参考资料来掌握这些重要的技能。如果您喜欢本书中的写作风格，您可能会喜欢我的其他关于这些主题的书籍：R for Data Science、Advanced R和R Packages。</p>\n<p>还有一些特定于Shiny的重要主题，本书没有涵盖：</p>\n<ul>\n<li><p>本书只涵盖了内置的用户界面工具包。这并不能提供最吸引人的设计，但很容易学习并能让您走很长一段路。如果您有额外的需求（或者只是对默认值感到厌倦），还有许多其他包可以提供替代的前端。</p>\n</li>\n<li><p>Shiny应用程序的部署。将Shiny“投入生产”超出了本书的范围，因为这因公司而异，并且很多与R无关（大部分挑战往往是文化或组织性的，而不是技术性的）。如果您是Shiny的新手，我建议您从Joe Cheng的2019 rstudio::conf主题演讲开始：<a href=\"https://rstudio.com/resources/rstudioconf-2019/shiny-in-production-principles-practices-and-tools/\">https://rstudio.com/resources/rstudioconf-2019/shiny-in-production-principles-practices-and-tools/</a>。这将为您提供大致情况，讨论将Shiny投入生产需要什么以及如何克服您可能面临的一些挑战。完成此操作后，请参阅<a href=\"https://rstudio.com/products/connect/\">RStudio Connect网站</a>以了解RStudio为您公司内部部署应用程序的产品以及<a href=\"https://shiny.rstudio.com/articles/#deployment\">Shiny 官网</a>了解其他常见的部署场景。</p>\n</li>\n</ul>\n<h2 id=\"先决条件\"><a href=\"#先决条件\" class=\"headerlink\" title=\"先决条件\"></a>先决条件</h2><p>在继续之前，请确保您具备本书所需的所有软件：</p>\n<p>R：如果您还没有安装R，那么您可能读错了书；本书假定您对R有一定的了解。如果您想学习如何使用R，我建议阅读我的《<a href=\"https://r4ds.had.co.nz/\">R for Data Science</a>》一书，该书旨在让您轻松上手R。</p>\n<p>RStudio：RStudio是一个免费且开源的R集成开发环境（IDE）。虽然您可以使用任何R环境（包括R GUI和<a href=\"http://ess.r-project.org/\">ESS</a>）来编写和使用Shiny应用程序，但RStudio具有一些专门用于编写、调试和部署Shiny应用程序的不错功能。我们建议您尝试一下，但这不是成功使用Shiny或本书所必需的。您可以从<a href=\"https://www.rstudio.com/products/rstudio/download\">https://www.rstudio.com/products/rstudio/download</a>下载RStudio Desktop。</p>\n<p>R软件包：本书使用了很多R软件包。您可以通过运行以下代码一次性安装它们：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">install.packages<span class=\"punctuation\">(</span><span class=\"built_in\">c</span><span class=\"punctuation\">(</span></span><br><span class=\"line\">  <span class=\"string\">&quot;gapminder&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;ggforce&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;gh&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;globals&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;openintro&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;profvis&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"string\">&quot;RSQLite&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;shiny&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;shinycssloaders&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;shinyFeedback&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"string\">&quot;shinythemes&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;testthat&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;thematic&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;tidyverse&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;vroom&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"string\">&quot;waiter&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;xml2&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;zeallot&quot;</span> </span><br><span class=\"line\"><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"加关注\"><a href=\"#加关注\" class=\"headerlink\" title=\"加关注\"></a>加关注</h1><p>关注公众号“生信之巅”。</p>\n<table align=\"center\"><tr>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅微信公众号\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-right: 0px;margin-bottom: 5px;align: center;\"></td>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅小程序码\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-left: 0px;margin-bottom: 5px;align: center\"></td>\n</tr></table>\n\n\n<p><font color=\"#FF0000\"><ruby><b>敬告</b>：使用文中脚本请引用本文网址，请尊重本人的劳动成果，谢谢！<rt><b>Notice</b>: When you use the scripts in this article, please cite the link of this webpage. Thank you!</rt></ruby></font></p>\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"编程","path":"api/tags/编程.json"},{"name":"Shiny入门系列","path":"api/tags/Shiny入门系列.json"}]},{"title":"Shiny从入门到入定——12-Tidy evaluation","slug":"Shiny从入门到入定——12-Tidy-evaluation","date":"2024-04-27T12:58:06.000Z","updated":"2024-04-27T13:00:03.085Z","comments":true,"path":"api/articles/Shiny从入门到入定——12-Tidy-evaluation.json","excerpt":null,"keywords":null,"cover":"https://d33wubrfki0l68.cloudfront.net/2c131334332cadef7ec2b3e3bdf32689f3f1ebc6/f6143/demos/action-tidy/messed-up.png","content":"<h1 id=\"整洁评估\"><a href=\"#整洁评估\" class=\"headerlink\" title=\"整洁评估\"></a>整洁评估</h1><p>如果你在使用Shiny与tidyverse，那么你几乎肯定会遇到整洁评估编程的挑战。整洁评估在tidyverse中被广泛使用，使交互式数据探索更加流畅，但它也有代价：很难间接引用变量，因此编程起来也更加困难。</p>\n<p>在本章中，你将学习如何在Shiny应用程序中包装ggplot2和dplyr函数。（如果你不使用tidyverse，那么可以跳过这一章😄。）将ggplot2和dplyr函数包装在函数和包中的技术略有不同，并且在其他资源如<a href=\"http://ggplot2.tidyverse.org/dev/articles/ggplot2-in-packages.html\">“在包中使用ggplot2”</a>或<a href=\"http://dplyr.tidyverse.org/articles/programming.html\">“使用dplyr编程”</a>中有所涵盖。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>shiny<span class=\"punctuation\">)</span></span><br><span class=\"line\">library<span class=\"punctuation\">(</span>dplyr<span class=\"punctuation\">,</span> warn.conflicts <span class=\"operator\">=</span> <span class=\"literal\">FALSE</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">library<span class=\"punctuation\">(</span>ggplot2<span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"12-1-动机\"><a href=\"#12-1-动机\" class=\"headerlink\" title=\"12.1 动机\"></a>12.1 动机</h2><p>假设我想创建一个应用程序，允许你过滤一个数值变量，以选择大于某个阈值的行。你可能会写出类似这样的代码：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num_vars <span class=\"operator\">&lt;-</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;carat&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;depth&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;table&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;price&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;x&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;y&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;z&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;var&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Variable&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> num_vars<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;min&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Minimum&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;output&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  data <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span>diamonds <span class=\"operator\">%&gt;%</span> filter<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>var <span class=\"operator\">&gt;</span> input<span class=\"operator\">$</span><span class=\"built_in\">min</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>output <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span>head<span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/2c131334332cadef7ec2b3e3bdf32689f3f1ebc6/f6143/demos/action-tidy/messed-up.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/2c131334332cadef7ec2b3e3bdf32689f3f1ebc6/f6143/demos/action-tidy/messed-up.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图12.1 一个应用程序试图选择用户选定变量中大于阈值的行\"></p>\n<p>从<code>图12.1</code>中你可以看到，该应用程序可以无错误地运行，但它并没有返回正确的结果——所有的行中，钻石的净重（<code>carat</code>）值都小于1。本章的目标是帮助你理解为什么这不起作用，以及为什么dplyr认为你请求的是<code>filter(diamonds, &quot;carat&quot; &gt; 1)</code>。</p>\n<p>这是一个<code>间接引用</code>的问题：通常在使用tidyverse函数时，你会直接在函数调用中输入变量的名称。但现在你想要间接引用它：变量（<code>carat</code>）存储在另一个变量（<code>input$var</code>）中。</p>\n<p>这句话可能对你来说很直观，但有点令人困惑，因为我在这里用“变量”来指代两种略有不同的事物。如果我们引入两个新术语来消除这两种用法之间的歧义，那么理解正在发生的事情会更容易：</p>\n<ul>\n<li><p>环境变量（<strong>env-variable</strong>）是一个“编程”变量，你用<code>&lt;-</code>来创建。<code>input$var</code>是一个环境变量。</p>\n</li>\n<li><p>数据变量（<strong>data-variable</strong>）是存储在数据框中的“统计”变量。<code>carat</code>是一个数据变量。</p>\n</li>\n</ul>\n<p>有了这些新术语，我们可以更清楚地阐述间接引用的问题：我们有一个数据变量（<code>carat</code>）存储在一个环境变量（<code>input$var</code>）中，我们需要一种方法来告诉dplyr这一点。根据你所使用的函数是“数据掩蔽”函数还是“整洁选择”函数，实现这一点的方法略有不同。</p>\n<h2 id=\"12-2-数据掩蔽\"><a href=\"#12-2-数据掩蔽\" class=\"headerlink\" title=\"12.2 数据掩蔽\"></a>12.2 数据掩蔽</h2><p>数据掩蔽函数允许你在“当前”数据框中使用变量，而无需任何额外的语法。它在许多dplyr函数（如<a href=\"https://dplyr.tidyverse.org/reference/arrange.html\">arrange()</a>、<a href=\"https://dplyr.tidyverse.org/reference/filter.html\">filter()</a>、<a href=\"https://dplyr.tidyverse.org/reference/group_by.html\">group_by()</a>、<a href=\"https://dplyr.tidyverse.org/reference/mutate.html\">mutate()</a>和<a href=\"https://dplyr.tidyverse.org/reference/summarise.html\">summarise()</a>）以及ggplot2的<a href=\"https://ggplot2.tidyverse.org/reference/aes.html\">aes()</a>中使用。数据掩蔽很有用，因为它允许你使用数据变量，而无需任何额外的语法。</p>\n<h3 id=\"12-2-1-开始\"><a href=\"#12-2-1-开始\" class=\"headerlink\" title=\"12.2.1 开始\"></a>12.2.1 开始</h3><p>让我们从调用<code>filter()</code>函数开始，它使用了一个数据变量（<code>carat</code>）和一个环境变量（<code>min</code>）：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">min</span> <span class=\"operator\">&lt;-</span> 1</span><br><span class=\"line\">diamonds <span class=\"operator\">%&gt;%</span> filter<span class=\"punctuation\">(</span>carat <span class=\"operator\">&gt;</span> <span class=\"built_in\">min</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; # A tibble: 17,502 × 10</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   carat cut       color clarity depth table price     x     y     z</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 1  1.17 Very Good J     I1       60.2    61  2774  6.83  6.9   4.13</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 2  1.01 Premium   F     I1       61.8    60  2781  6.39  6.36  3.94</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 3  1.01 Fair      E     I1       64.5    58  2788  6.29  6.21  4.03</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 4  1.01 Premium   H     SI2      62.7    59  2788  6.31  6.22  3.93</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 5  1.05 Very Good J     SI2      63.2    56  2789  6.49  6.45  4.09</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 6  1.05 Fair      J     SI2      65.8    59  2789  6.41  6.27  4.18</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; # … with 17,496 more rows</span></span><br></pre></td></tr></table></figure>\n\n<p>与基础R的等效代码进行比较：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">diamonds<span class=\"punctuation\">[</span>diamonds<span class=\"operator\">$</span>carat <span class=\"operator\">&gt;</span> <span class=\"built_in\">min</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n<p>在大多数（但不是全部）基础R函数中，你需要使用<code>$</code>来引用数据变量。这意味着你经常需要多次重复数据框的名称，但这确实清楚地表明了什么是数据变量，什么是环境变量。这也使得间接引用变得直接明了，因为你可以将数据变量的名称存储在一个环境变量中，然后从<code>$</code>切换到<code>[[</code>：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var <span class=\"operator\">&lt;-</span> <span class=\"string\">&quot;carat&quot;</span></span><br><span class=\"line\">diamonds<span class=\"punctuation\">[</span>diamonds<span class=\"punctuation\">[[</span>var<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span> <span class=\"operator\">&gt;</span> <span class=\"built_in\">min</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n\n<p>我们如何使用整洁评估来达到相同的效果呢？我们需要一种方法将<code>$</code>重新加入进来。幸运的是，在数据掩蔽函数中，如果你想明确表示你是在谈论数据变量还是环境变量，你可以使用<code>.data</code>或<code>.env</code>：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">diamonds <span class=\"operator\">%&gt;%</span> filter<span class=\"punctuation\">(</span>.data<span class=\"operator\">$</span>carat <span class=\"operator\">&gt;</span> .env<span class=\"operator\">$</span><span class=\"built_in\">min</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n<p>现在我们可以从$切换到[[：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">diamonds <span class=\"operator\">%&gt;%</span> filter<span class=\"punctuation\">(</span>.data<span class=\"punctuation\">[[</span>var<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span> <span class=\"operator\">&gt;</span> .env<span class=\"operator\">$</span><span class=\"built_in\">min</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n<p>让我们通过更新本章开始时使用的服务器函数来检查它是否有效：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num_vars <span class=\"operator\">&lt;-</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;carat&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;depth&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;table&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;price&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;x&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;y&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;z&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;var&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Variable&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> num_vars<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;min&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Minimum&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;output&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  data <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span>diamonds <span class=\"operator\">%&gt;%</span> filter<span class=\"punctuation\">(</span>.data<span class=\"punctuation\">[[</span>input<span class=\"operator\">$</span>var<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span> <span class=\"operator\">&gt;</span> .env<span class=\"operator\">$</span>input<span class=\"operator\">$</span><span class=\"built_in\">min</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>output <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span>head<span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/878d4b65fc1671d180c91732193924ce2f3b3ea8/ca76b/demos/action-tidy/tidied-up.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/878d4b65fc1671d180c91732193924ce2f3b3ea8/ca76b/demos/action-tidy/tidied-up.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图12.2 我们的应用现在运行良好，因为我们明确了.data和.env以及[[与$的区别。请访问https://hadley.shinyapps.io/ms-tidied-up查看实时效果\"></p>\n<p><code>图12.2</code>显示我们已经成功了——我们只看到克拉值大于1的钻石。现在你已经了解了基础知识，我们将开发几个更现实但仍然简单的Shiny应用。</p>\n<h3 id=\"12-2-2-示例：ggplot2\"><a href=\"#12-2-2-示例：ggplot2\" class=\"headerlink\" title=\"12.2.2 示例：ggplot2\"></a>12.2.2 示例：ggplot2</h3><p>让我们将这个想法应用于动态绘图，允许用户通过选择要在<code>x</code>轴和<code>y</code>轴上显示的变量来创建散点图。结果如<code>图12.3</code>所示。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;x&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;X variable&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> <span class=\"built_in\">names</span><span class=\"punctuation\">(</span>iris<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;y&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Y variable&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> <span class=\"built_in\">names</span><span class=\"punctuation\">(</span>iris<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  plotOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;plot&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>plot <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    ggplot<span class=\"punctuation\">(</span>iris<span class=\"punctuation\">,</span> aes<span class=\"punctuation\">(</span>.data<span class=\"punctuation\">[[</span>input<span class=\"operator\">$</span>x<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> .data<span class=\"punctuation\">[[</span>input<span class=\"operator\">$</span>y<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"operator\">+</span></span><br><span class=\"line\">      geom_point<span class=\"punctuation\">(</span>position <span class=\"operator\">=</span> ggforce<span class=\"operator\">::</span>position_auto<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> res <span class=\"operator\">=</span> <span class=\"number\">96</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<tr>\n<td><img src=\"https://d33wubrfki0l68.cloudfront.net/9defdeb8a9d4c779898f02f540feb95283b62c65/23a54/demos/action-tidy/ggplot2-scatter.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/9defdeb8a9d4c779898f02f540feb95283b62c65/23a54/demos/action-tidy/ggplot2-scatter.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\"></td>\n<td><img src=\"https://d33wubrfki0l68.cloudfront.net/74cf9f3e211b5f2430a03a5c960da0ab63a1e29e/41abe/demos/action-tidy/ggplot2-swarm.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/74cf9f3e211b5f2430a03a5c960da0ab63a1e29e/41abe/demos/action-tidy/ggplot2-swarm.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\"></td>\n</tr>\n<tr>\n<td colspan=\"2\">图12.3 一个简单的应用程序，允许您选择要在x轴和y轴上绘制的变量。请访问<a href=\"https://hadley.shinyapps.io/ms-ggplot2\">https://hadley.shinyapps.io/ms-ggplot2</a>查看实时效果</td>\n</tr>\n</table>\n\n<p>这里我使用了<a href=\"https://ggforce.data-imaginist.com/reference/position_auto.html\">ggforce::position_auto()</a>，这样无论x和y变量是连续的还是离散的，<a href=\"https://ggplot2.tidyverse.org/reference/geom_point.html\">geom_point()</a>都能很好地工作。或者，我们也可以让用户选择geom。下面的应用程序使用<a href=\"https://rdrr.io/r/base/switch.html\">switch()</a>语句生成一个反应性的geom，稍后会将其添加到图中。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;x&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;X variable&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> <span class=\"built_in\">names</span><span class=\"punctuation\">(</span>iris<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;y&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Y variable&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> <span class=\"built_in\">names</span><span class=\"punctuation\">(</span>iris<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;geom&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;geom&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;point&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;smooth&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;jitter&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  plotOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;plot&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  plot_geom <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"built_in\">switch</span><span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>geom<span class=\"punctuation\">,</span></span><br><span class=\"line\">      point <span class=\"operator\">=</span> geom_point<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      smooth <span class=\"operator\">=</span> geom_smooth<span class=\"punctuation\">(</span>se <span class=\"operator\">=</span> <span class=\"literal\">FALSE</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      jitter <span class=\"operator\">=</span> geom_jitter<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>plot <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    ggplot<span class=\"punctuation\">(</span>iris<span class=\"punctuation\">,</span> aes<span class=\"punctuation\">(</span>.data<span class=\"punctuation\">[[</span>input<span class=\"operator\">$</span>x<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> .data<span class=\"punctuation\">[[</span>input<span class=\"operator\">$</span>y<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"operator\">+</span></span><br><span class=\"line\">      plot_geom<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> res <span class=\"operator\">=</span> <span class=\"number\">96</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>这是使用用户选择的变量进行编程时面临的挑战之一：你的代码必须变得更加复杂，以处理用户可能生成的所有情况。</p>\n<h3 id=\"12-2-3-示例：dplyr\"><a href=\"#12-2-3-示例：dplyr\" class=\"headerlink\" title=\"12.2.3 示例：dplyr\"></a>12.2.3 示例：dplyr</h3><p>同样的技术也适用于dplyr。下面的应用程序扩展了前面简单的示例，允许您选择一个变量进行过滤，选择一个最小值进行选择，以及选择一个变量进行排序。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;var&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Select variable&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> <span class=\"built_in\">names</span><span class=\"punctuation\">(</span>mtcars<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;min&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Minimum value&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">100</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;sort&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Sort by&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> <span class=\"built_in\">names</span><span class=\"punctuation\">(</span>mtcars<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;data&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>var<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    rng <span class=\"operator\">&lt;-</span> <span class=\"built_in\">range</span><span class=\"punctuation\">(</span>mtcars<span class=\"punctuation\">[[</span>input<span class=\"operator\">$</span>var<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    updateSliderInput<span class=\"punctuation\">(</span></span><br><span class=\"line\">      session<span class=\"punctuation\">,</span> <span class=\"string\">&quot;min&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">      value <span class=\"operator\">=</span> rng<span class=\"punctuation\">[[</span><span class=\"number\">1</span><span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">      <span class=\"built_in\">min</span> <span class=\"operator\">=</span> rng<span class=\"punctuation\">[[</span><span class=\"number\">1</span><span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">      <span class=\"built_in\">max</span> <span class=\"operator\">=</span> rng<span class=\"punctuation\">[[</span><span class=\"number\">2</span><span class=\"punctuation\">]</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>data <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    mtcars <span class=\"operator\">%&gt;%</span> </span><br><span class=\"line\">      filter<span class=\"punctuation\">(</span>.data<span class=\"punctuation\">[[</span>input<span class=\"operator\">$</span>var<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span> <span class=\"operator\">&gt;</span> input<span class=\"operator\">$</span><span class=\"built_in\">min</span><span class=\"punctuation\">)</span> <span class=\"operator\">%&gt;%</span> </span><br><span class=\"line\">      arrange<span class=\"punctuation\">(</span>.data<span class=\"punctuation\">[[</span>input<span class=\"operator\">$</span>sort<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/4b67467c8ad6e40cb3fffad24222564bf4858788/ae5b1/demos/action-tidy/dplyr.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/4b67467c8ad6e40cb3fffad24222564bf4858788/ae5b1/demos/action-tidy/dplyr.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图12.4 一个简单的应用程序，允许您选择一个变量作为阈值，并选择如何对结果进行排序。请访问https://hadley.shinyapps.io/ms-dplyr/查看实时效果\"></p>\n<p>大多数其他问题都可以通过结合<code>.data</code>和您的现有编程技能来解决。例如，如果您想要条件性地以升序或降序进行排序，应该怎么做呢？</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;var&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Sort by&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> <span class=\"built_in\">names</span><span class=\"punctuation\">(</span>mtcars<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  checkboxInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;desc&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Descending order?&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;data&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  sorted <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>desc<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      arrange<span class=\"punctuation\">(</span>mtcars<span class=\"punctuation\">,</span> desc<span class=\"punctuation\">(</span>.data<span class=\"punctuation\">[[</span>input<span class=\"operator\">$</span>var<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span> <span class=\"keyword\">else</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      arrange<span class=\"punctuation\">(</span>mtcars<span class=\"punctuation\">,</span> .data<span class=\"punctuation\">[[</span>input<span class=\"operator\">$</span>var<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>data <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span>sorted<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>随着你提供更多控制选项，你会发现代码变得越来越复杂，同时创建一个既全面又友好的用户界面也变得越来越难。这就是为什么我一直专注于数据分析的代码工具：创建好的用户界面真的非常难！</p>\n<h3 id=\"12-2-4-用户提供的数据\"><a href=\"#12-2-4-用户提供的数据\" class=\"headerlink\" title=\"12.2.4 用户提供的数据\"></a>12.2.4 用户提供的数据</h3><p>在继续讨论整洁选择之前，我们还需要讨论最后一个话题：用户提供的数据。以<code>图12.5</code>中显示的这个应用程序为例：它允许用户上传一个tsv文件，然后选择一个变量并根据该变量进行筛选。它适用于绝大多数你可能会尝试的输入。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  fileInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;data&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;dataset&quot;</span><span class=\"punctuation\">,</span> accept <span class=\"operator\">=</span> <span class=\"string\">&quot;.tsv&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;var&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;var&quot;</span><span class=\"punctuation\">,</span> character<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;min&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;min&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> step <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;output&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  data <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    req<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>data<span class=\"punctuation\">)</span></span><br><span class=\"line\">    vroom<span class=\"operator\">::</span>vroom<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>data<span class=\"operator\">$</span>datapath<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    updateSelectInput<span class=\"punctuation\">(</span>session<span class=\"punctuation\">,</span> <span class=\"string\">&quot;var&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> <span class=\"built_in\">names</span><span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>var<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    val <span class=\"operator\">&lt;-</span> data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">[[</span>input<span class=\"operator\">$</span>var<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">    updateNumericInput<span class=\"punctuation\">(</span>session<span class=\"punctuation\">,</span> <span class=\"string\">&quot;min&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"built_in\">min</span><span class=\"punctuation\">(</span>val<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>output <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    req<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>var<span class=\"punctuation\">)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">%&gt;%</span> </span><br><span class=\"line\">      filter<span class=\"punctuation\">(</span>.data<span class=\"punctuation\">[[</span>input<span class=\"operator\">$</span>var<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span> <span class=\"operator\">&gt;</span> input<span class=\"operator\">$</span><span class=\"built_in\">min</span><span class=\"punctuation\">)</span> <span class=\"operator\">%&gt;%</span> </span><br><span class=\"line\">      arrange<span class=\"punctuation\">(</span>.data<span class=\"punctuation\">[[</span>input<span class=\"operator\">$</span>var<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">)</span> <span class=\"operator\">%&gt;%</span> </span><br><span class=\"line\">      head<span class=\"punctuation\">(</span><span class=\"number\">10</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/a2b57fbb1d8a118a0410942708a051e92355b7a6/a504d/demos/action-tidy/user-supplied.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/a2b57fbb1d8a118a0410942708a051e92355b7a6/a504d/demos/action-tidy/user-supplied.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图12.5 一个过滤用户提供的数据的应用程序，具有令人惊讶的故障模式。请访问https://hadley.shinyapps.io/ms-user-supplied/查看实时效果\"></p>\n<p>这里使用<a href=\"https://dplyr.tidyverse.org/reference/filter.html\">filter()</a>有一个微妙的问题。让我们把对<code>filter()</code>的调用提取出来，这样我们就可以在应用程序之外直接操作它：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df <span class=\"operator\">&lt;-</span> data.frame<span class=\"punctuation\">(</span>x <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span> y <span class=\"operator\">=</span> <span class=\"number\">2</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">input <span class=\"operator\">&lt;-</span> <span class=\"built_in\">list</span><span class=\"punctuation\">(</span>var <span class=\"operator\">=</span> <span class=\"string\">&quot;x&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">df <span class=\"operator\">%&gt;%</span> filter<span class=\"punctuation\">(</span>.data<span class=\"punctuation\">[[</span>input<span class=\"operator\">$</span>var<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span> <span class=\"operator\">&gt;</span> input<span class=\"operator\">$</span><span class=\"built_in\">min</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   x y</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 1 1 2</span></span><br></pre></td></tr></table></figure>\n\n<p>如果你试验这段代码，你会发现它对于绝大多数数据框都能很好地工作。然而，有一个微妙的问题：如果数据框中包含一个名为<code>input</code>的变量，会发生什么？</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df <span class=\"operator\">&lt;-</span> data.frame<span class=\"punctuation\">(</span>x <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span> y <span class=\"operator\">=</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span> input <span class=\"operator\">=</span> <span class=\"number\">3</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">df <span class=\"operator\">%&gt;%</span> filter<span class=\"punctuation\">(</span>.data<span class=\"punctuation\">[[</span>input<span class=\"operator\">$</span>var<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span> <span class=\"operator\">&gt;</span> input<span class=\"operator\">$</span><span class=\"built_in\">min</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; Error in `filter()`:</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; ! Problem while computing `..1 = .data[[&quot;x&quot;]] &gt; input$min`.</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; Caused by error in `input$min`:</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; ! $ operator is invalid for atomic vectors</span></span><br></pre></td></tr></table></figure>\n\n<p>我们收到一条错误信息，因为<code>filter()</code>正在尝试计算<code>df$input$min</code>：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df<span class=\"operator\">$</span>input<span class=\"operator\">$</span><span class=\"built_in\">min</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; Error in df$input$min: $ operator is invalid for atomic vectors</span></span><br></pre></td></tr></table></figure>\n\n<p>这个问题是由于数据变量和环境变量的歧义造成的，并且在两者都可用时，数据掩蔽更倾向于使用数据变量。我们可以通过使用<code>.env</code>来告诉<code>filter()</code>只在环境变量中查找<code>min</code>来解决这个问题：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df <span class=\"operator\">%&gt;%</span> filter<span class=\"punctuation\">(</span>.data<span class=\"punctuation\">[[</span>input<span class=\"operator\">$</span>var<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span> <span class=\"operator\">&gt;</span> .env<span class=\"operator\">$</span>input<span class=\"operator\">$</span><span class=\"built_in\">min</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   x y input</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 1 1 2     3</span></span><br></pre></td></tr></table></figure>\n\n<p>请注意，这个问题只有在处理用户提供的数据时才需要考虑；在处理自己的数据时，你可以确保数据变量的名称不会与环境变量的名称冲突（如果不小心冲突了，你会立刻发现）。</p>\n<h3 id=\"12-2-5-为什么不使用基础R？\"><a href=\"#12-2-5-为什么不使用基础R？\" class=\"headerlink\" title=\"12.2.5 为什么不使用基础R？\"></a>12.2.5 为什么不使用基础R？</h3><p>到这时，你可能会想，如果没有<code>filter()</code>函数，使用等效的基础R代码会不会更好？</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df<span class=\"punctuation\">[</span>df<span class=\"punctuation\">[[</span>input<span class=\"operator\">$</span>var<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span> <span class=\"operator\">&gt;</span> input<span class=\"operator\">$</span><span class=\"built_in\">min</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   x y input</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 1 1 2     3</span></span><br></pre></td></tr></table></figure>\n\n<p>这是一个完全合理的立场，只要你意识到<code>filter()</code>为你做的工作，以便你能生成等效的基础R代码。在这种情况下：</p>\n<ul>\n<li><p>如果df只包含一列，你需要使用<code>drop = FALSE</code>（否则你会得到一个向量而不是数据框）。</p>\n</li>\n<li><p>你需要使用<a href=\"https://rdrr.io/r/base/which.html\">which()</a>或类似函数来删除任何缺失值。</p>\n</li>\n<li><p>你不能进行分组过滤（例如，<code>df %&gt;% group_by(g) %&gt;% filter(n() == 1)</code>）。</p>\n</li>\n</ul>\n<p>一般来说，如果你只是使用dplyr来处理非常简单的案例，你可能会发现使用不使用数据掩蔽的基础R函数更容易。然而，在我看来，tidyverse的一个优势在于它仔细考虑了边缘情况，以便函数能更一致地工作。我不想夸大这一点，但同时，很容易忘记特定基础R函数的怪癖，并编写出95%以上时间都能工作，但在另外5%的时间里会以不寻常的方式失败的代码。</p>\n<h2 id=\"12-3-整洁选择-Tidy-selection\"><a href=\"#12-3-整洁选择-Tidy-selection\" class=\"headerlink\" title=\"12.3 整洁选择 Tidy-selection\"></a>12.3 整洁选择 Tidy-selection</h2><p>除了数据掩蔽之外，整洁评估还有一个重要的部分：整洁选择。整洁选择提供了一种简洁的方式来通过位置、名称或类型选择列。它在<a href=\"https://dplyr.tidyverse.org/reference/select.html\">dplyr::select()</a>和<a href=\"https://dplyr.tidyverse.org/reference/across.html\">dplyr::across()</a>以及tidyr中的许多函数（如<a href=\"https://tidyr.tidyverse.org/reference/pivot_longer.html\">pivot_longer()</a>、<a href=\"https://tidyr.tidyverse.org/reference/pivot_wider.html\">pivot_wider()</a>、<a href=\"https://tidyr.tidyverse.org/reference/separate.html\">separate()</a>、<a href=\"https://tidyr.tidyverse.org/reference/extract.html\">extract()</a>和<a href=\"https://tidyr.tidyverse.org/reference/unite.html\">unite()</a>）中使用。</p>\n<h3 id=\"12-3-1-间接引用\"><a href=\"#12-3-1-间接引用\" class=\"headerlink\" title=\"12.3.1 间接引用\"></a>12.3.1 间接引用</h3><p>要间接引用变量，可以使用<a href=\"https://tidyselect.r-lib.org/reference/all_of.html\">any_of()</a>或<a href=\"https://tidyselect.r-lib.org/reference/all_of.html\">all_of()</a>：两者都期望一个包含数据变量名称的字符向量作为环境变量。唯一的区别是，如果你提供了一个在输入中不存在的变量名，<code>all_of()</code>会引发错误，而<code>any_of()</code>则会静默地忽略它。</p>\n<p>例如，以下应用程序允许用户使用多选输入选择任意数量的变量，同时使用<code>all_of()</code>：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;vars&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Variables&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">names</span><span class=\"punctuation\">(</span>mtcars<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> multiple <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;data&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>data <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    req<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>vars<span class=\"punctuation\">)</span></span><br><span class=\"line\">    mtcars <span class=\"operator\">%&gt;%</span> select<span class=\"punctuation\">(</span>all_of<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>vars<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12-3-2-整洁选择与数据掩蔽\"><a href=\"#12-3-2-整洁选择与数据掩蔽\" class=\"headerlink\" title=\"12.3.2 整洁选择与数据掩蔽\"></a>12.3.2 整洁选择与数据掩蔽</h3><p>当使用采用整洁选择的函数时，处理多个变量变得轻而易举：您只需将包含变量名的字符向量传递给<code>any_of()</code>或<code>all_of()</code>。如果我们也能在数据掩蔽函数中使用这种方法，那该有多好？这正是dplyr 1.0.0版本中添加的<a href=\"https://dplyr.tidyverse.org/reference/across.html\">across()</a>函数的设计理念。它允许您在数据掩蔽函数中使用整洁选择。</p>\n<p><code>across()</code>函数通常使用一个或两个参数。第一个参数用于选择变量，在<a href=\"https://dplyr.tidyverse.org/reference/group_by.html\">group_by()</a>或<a href=\"https://dplyr.tidyverse.org/reference/distinct.html\">distinct()</a>等函数中非常有用。例如，以下应用程序允许您选择任意数量的变量并计算它们的唯一值数量。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;vars&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Variables&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">names</span><span class=\"punctuation\">(</span>mtcars<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> multiple <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;count&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>count <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    req<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>vars<span class=\"punctuation\">)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    mtcars <span class=\"operator\">%&gt;%</span> </span><br><span class=\"line\">      group_by<span class=\"punctuation\">(</span>across<span class=\"punctuation\">(</span>all_of<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>vars<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"operator\">%&gt;%</span> </span><br><span class=\"line\">      summarise<span class=\"punctuation\">(</span>n <span class=\"operator\">=</span> n<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> .groups <span class=\"operator\">=</span> <span class=\"string\">&quot;drop&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/20b7acd57783cbc15cf0d64d8964bba1e093ba06/1c155/demos/action-tidy/across.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/20b7acd57783cbc15cf0d64d8964bba1e093ba06/1c155/demos/action-tidy/across.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图12.6 此应用程序允许您选择任意数量的变量，并计算它们的唯一组合数量。请访问https://hadley.shinyapps.io/ms-across实时查看\"></p>\n<p>第二个参数是一个函数（或函数列表），应用于每个选定的列。这使得它非常适合<a href=\"https://dplyr.tidyverse.org/reference/mutate.html\">mutate()</a>和<a href=\"https://dplyr.tidyverse.org/reference/summarise.html\">summarise()</a>等函数，因为您通常想要以某种方式转换每个变量。例如，以下代码允许用户选择任意数量的分组变量，以及任意数量的变量，以计算它们的平均值进行汇总。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;vars_g&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Group by&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">names</span><span class=\"punctuation\">(</span>mtcars<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> multiple <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;vars_s&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Summarise&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">names</span><span class=\"punctuation\">(</span>mtcars<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> multiple <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;data&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>data <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    mtcars <span class=\"operator\">%&gt;%</span> </span><br><span class=\"line\">      group_by<span class=\"punctuation\">(</span>across<span class=\"punctuation\">(</span>all_of<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>vars_g<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"operator\">%&gt;%</span> </span><br><span class=\"line\">      summarise<span class=\"punctuation\">(</span>across<span class=\"punctuation\">(</span>all_of<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>vars_s<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> mean<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> n <span class=\"operator\">=</span> n<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"12-4-parse-eval\"><a href=\"#12-4-parse-eval\" class=\"headerlink\" title=\"12.4 parse() + eval()\"></a>12.4 parse() + eval()</h2><p>在我们继续之前，有必要对<a href=\"https://rdrr.io/r/base/paste.html\">paste()</a> + <a href=\"https://rdrr.io/r/base/parse.html\">parse()</a> + <a href=\"https://rdrr.io/r/base/eval.html\">eval()</a>组合进行简短的评论。如果你完全不了解这个组合，可以跳过这一节，但如果你已经使用过它，我想给你一个小小的警告。</p>\n<p>这是一个诱人的方法，因为它只需要学习很少的新概念。但它也有一些主要的缺点：由于你正在将字符串拼接在一起，很容易意外地创建出无效的代码，或者可能被滥用以执行你不希望的操作的代码。如果这只是你自己使用的Shiny应用程序，这可能不是非常重要，但这并不是一个值得养成的好习惯——否则，很容易在你广泛分享的应用程序中意外地创建一个安全漏洞。我们将在第<code>22章</code>中再次提及这个观点。</p>\n<p>（如果你发现这是解决问题的唯一方法，不必感到沮丧。但当你有了更多的思考空间时，我建议花些时间弄清楚如何在不进行字符串操作的情况下实现。这将有助于你成为一名更好的R程序员。）</p>\n<h2 id=\"12-5-总结\"><a href=\"#12-5-总结\" class=\"headerlink\" title=\"12.5 总结\"></a>12.5 总结</h2><p>在本章中，你学习了如何创建Shiny应用程序，让用户选择将哪些变量输入到如<a href=\"https://dplyr.tidyverse.org/reference/filter.html\">dplyr::filter()</a>和<a href=\"https://ggplot2.tidyverse.org/reference/aes.html\">ggplot2::aes()</a>这样的tidyverse函数中。这需要你理解一个你之前可能从未考虑过的关键区别：数据变量和环境变量的不同。这可能需要一些练习才能变得自然，但一旦你掌握了这些概念，你就能够解锁tidyverse的数据分析功能，并将其暴露给非R用户。</p>\n<p>这是本书<code>“Shiny实战”</code>部分的最后一章。既然你已经拥有了制作一系列有用应用程序所需的工具，我将重点提高你对Shiny底层理论的理解。</p>\n<h1 id=\"加关注\"><a href=\"#加关注\" class=\"headerlink\" title=\"加关注\"></a>加关注</h1><table align=\"center\"><tr>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅微信公众号\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-right: 0px;margin-bottom: 5px;align: center;\"></td>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅小程序码\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-left: 0px;margin-bottom: 5px;align: center\"></td>\n</tr></table>\n\n\n<p><font color=\"#FF0000\"><ruby><b>敬告</b>：使用文中脚本请引用本文网址，请尊重本人的劳动成果，谢谢！<rt><b>Notice</b>: When you use the scripts in this article, please cite the link of this webpage. Thank you!</rt></ruby></font></p>\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"编程","path":"api/tags/编程.json"},{"name":"Shiny入门系列","path":"api/tags/Shiny入门系列.json"}]},{"title":"Shiny从入门到入定——1.在小小的花园里面挖呀挖呀挖","slug":"Shiny从入门到入定——1-在小小的花园里面挖呀挖呀挖","date":"2023-11-10T13:16:23.000Z","updated":"2024-03-11T13:07:17.000Z","comments":true,"path":"api/articles/Shiny从入门到入定——1-在小小的花园里面挖呀挖呀挖.json","excerpt":null,"keywords":null,"cover":"https://d33wubrfki0l68.cloudfront.net/fbf45a58e2a82900449f9eb35deba4e670f54624/530cb/images/basic-app/run-app.png","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>本部分为学习Shiny的第一阶段——挖坑。</p>\n<p>在接下来的四章中，目标是让读者尽快学会编写Shiny应用程序。</p>\n<ul>\n<li><p>在第一章中，作者将从小处着手，但内容完整，向读者展示应用程序的所有主要部分以及它们如何组合在一起。</p>\n</li>\n<li><p>在第二章和第三章中，读者将开始详细了解Shiny应用程序的两个主要部分：前端（用户在浏览器中看到的内容）和后端（使应用程序起作用的代码）。</p>\n</li>\n<li><p>第四章将通过案例研究来完成，以帮助巩固读者迄今为止所学的概念。</p>\n</li>\n</ul>\n<h1 id=\"第一个Shiny-app\"><a href=\"#第一个Shiny-app\" class=\"headerlink\" title=\"第一个Shiny app\"></a>第一个Shiny app</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>在本章中，我们将创建一个简单的Shiny应用程序。首先，我将向您展示Shiny应用程序所需的最低样板，然后您将学习如何启动和停止它。接下来，您将学习每个Shiny应用程序的两个关键组件：UI（用户界面的缩写），它定义了应用程序的外观，以及服务器功能，它定义了应用程序的工作方式。Shiny使用响应式编程在输入更改时自动更新输出，因此我们将通过学习Shiny应用程序的第三个重要组件：响应式表达式来结束本章。</p>\n<p>如果你还没有安装Shiny，现在用以下命令安装它</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">install.packages<span class=\"punctuation\">(</span><span class=\"string\">&quot;shiny&quot;</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>如果您已经安装了Shiny，请使用<code>packageVersion(&quot;shiny&quot;)</code>检查您是否安装了1.5.0或更高版本。然后在当前的R会话中加载：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>shiny<span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建应用程序目录和文件\"><a href=\"#创建应用程序目录和文件\" class=\"headerlink\" title=\"创建应用程序目录和文件\"></a>创建应用程序目录和文件</h2><p>创建Shiny应用程序有多种方法，最简单的是为您的应用程序创建一个新目录，并在其中放置一个名为<code>app.R</code>的单个文件。这个app.R文件将用于告诉Shiny应用程序应该如何展示界面以及应该如何运行。</p>\n<p>通过创建新目录并添加如下所示的app.R文件来尝试一下：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>shiny<span class=\"punctuation\">)</span></span><br><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  <span class=\"string\">&quot;Hello, world!&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">shinyApp<span class=\"punctuation\">(</span>ui<span class=\"punctuation\">,</span> server<span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>以上是完整的、基础的Shiny应用程序！仔细观察上面的代码，app.R做了四件事：</p>\n<ul>\n<li><p>它调用<code>library(shiny)</code>来加载shiny包。</p>\n</li>\n<li><p>它定义了用户界面，即人类与之交互的HTML网页。在这种情况下，它是一个包含<code>“Hello，world！”</code>的页面。</p>\n</li>\n<li><p>它通过定义<code>server</code>函数来指定应用程序的行为。目前为空，因此我们的应用程序不做任何事情，但我们稍后会回过头来重新审视这一点。</p>\n</li>\n<li><p>它使用<code>shinyApp(ui，server)</code>来构建并启动一个从用户界面和服务器构建的Shiny应用程序。</p>\n</li>\n</ul>\n<p><strong>RStudio提示</strong>：在RStudio中有两种方便的方法可以创建新的应用程序：</p>\n<ul>\n<li><p>通过点击<code>File | New Project</code>，然后选择<code>New Directory</code>和<code>Shiny Web Application</code>，可以一次性创建一个新的目录和<code>app.R</code>文件，其中包含基本的应用程序。</p>\n</li>\n<li><p>如果您已经创建了<code>app.R</code>文件，可以通过键入<code>“shinyapp”</code>并按<code>Shift+Tab</code>快速添加应用程序样板。</p>\n</li>\n</ul>\n<h2 id=\"运行和停止\"><a href=\"#运行和停止\" class=\"headerlink\" title=\"运行和停止\"></a>运行和停止</h2><p>您可以通过几种方式运行此应用程序：</p>\n<ul>\n<li><p>单击文档工具栏中的<code>Run App</code>（图1.1）按钮。</p>\n</li>\n<li><p>使用键盘快捷键：<code>Cmd / Ctrl + Shift + Enter</code>。</p>\n</li>\n<li><p>如果您没有使用RStudio，则可以使用<code>(source())</code><sup>1</sup> 整个文档，或使用包含app.R的目录的路径调用<code>shiny::runApp()</code>。</p>\n</li>\n</ul>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/fbf45a58e2a82900449f9eb35deba4e670f54624/530cb/images/basic-app/run-app.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/fbf45a58e2a82900449f9eb35deba4e670f54624/530cb/images/basic-app/run-app.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图1.1 Run App 按钮可以在源码窗格的右上角找到。\"></p>\n<p>从这些选项中选择一个，并确认您看到的与图1.2中的相同的应用程序。恭喜！您已经制作了您的第一个Shiny应用程序。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/e9e6b44c85c169aedd2c4e630022e7958aa57696/06ba0/images/basic-app/hello-world.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/e9e6b44c85c169aedd2c4e630022e7958aa57696/06ba0/images/basic-app/hello-world.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图1.2 当你运行上面的代码时，你会看到最简单的shiny应用程序\"></p>\n<p>在你关闭应用程序之前，回到RStudio并查看R控制台。你会注意到它说类似于：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#&gt; Listening on http://127.0.0.1:3827</span><br></pre></td></tr></table></figure>\n\n<p>这告诉你应用程序的URL：127.0.0.1是一个标准地址，表示“这台计算机”，而3827是一个随机分配的端口号。你可以将该URL输入到任何兼容的web浏览器中以打开应用程序的另一个副本。</p>\n<p>另外请注意，R正在运行：R提示符不可见，控制台工具栏显示一个停止符号图标。当Shiny应用程序正在运行时，它会“阻止”R控制台。这意味着在Shiny应用程序停止之前，您无法在R控制台运行新的命令。</p>\n<p>您可以使用以下选项之一停止应用程序并返回对控制台的访问权限：</p>\n<ul>\n<li><p>点击R控制台工具栏上的停止符号图标。</p>\n</li>\n<li><p>单击控制台，然后按Esc（或按<code>Ctrl + C</code>如果您没有使用RStudio）。</p>\n</li>\n<li><p>关闭Shiny应用程序窗口。</p>\n</li>\n</ul>\n<p>Shiny应用程序开发的基本工作流程是编写一些代码，启动应用程序，与应用程序交互，编写更多代码，然后重复。如果你使用的是RStudio，你甚至不需要停止和重新启动应用程序来查看你的更改 - 你可以按下工具箱中的<code>Reload app</code>按钮或使用<code>Cmd/Ctrl + Shift + Enter</code>键盘快捷键。我将在第5章中介绍其他工作流程模式。</p>\n<h2 id=\"添加用户界面控件\"><a href=\"#添加用户界面控件\" class=\"headerlink\" title=\"添加用户界面控件\"></a>添加用户界面控件</h2><p>接下来，我们将向用户界面添加一些输入和输出，使其不再如此简约。我们将创建一个非常简单的应用程序，向您展示datasets包中包含的所有内置数据框。</p>\n<p>用以下代码替换您的ui：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;dataset&quot;</span><span class=\"punctuation\">,</span> label <span class=\"operator\">=</span> <span class=\"string\">&quot;Dataset&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> ls<span class=\"punctuation\">(</span><span class=\"string\">&quot;package:datasets&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  verbatimTextOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;summary&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;table&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>这个例子使用了四个新函数：</p>\n<ul>\n<li><p><code>fluidPage()</code>是一个布局函数，用于设置页面的基本视觉结构。您将在第6.2节中了解更多关于它们的信息。</p>\n</li>\n<li><p><code>selectInput()</code>是一种输入控件，使用户可以通过提供值与应用程序进行交互。在这种情况下，它是一个带有标签“Dataset”的下拉菜单，允许您从R自带的内置数据集中选择一个。您将在第2.2节中了解更多关于输入的信息。</p>\n</li>\n<li><p><code>verbatimTextOutput()</code>和<code>tableOutput()</code>是输出控件，它们告诉Shiny将渲染的输出放在哪里（我们稍后再了解）。<code>verbatimTextOutput()</code>显示代码，<code>tableOutput()</code>显示表格。您将在第2.3节中了解更多关于输出的信息。</p>\n</li>\n</ul>\n<p>布局函数、输入和输出有不同的用途，但它们在本质上都是相同的：它们都是生成HTML的巧妙方式，如果您在Shiny应用程序之外调用其中任何一个，您将在控制台上看到HTML输出。不要害怕深入研究这些不同的布局和控件是如何工作的。</p>\n<p>现在运行应用程序。您将看到图1.3，一个包含下拉框的页面。我们只看到了输入，而没有看到两个输出，因为我们还没有告诉Shiny输入和输出之间的关系。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/17eadbf2ccdea8d4648b05d486dfb465f562df69/d077d/demos/basic-app/ui.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/17eadbf2ccdea8d4648b05d486dfb465f562df69/d077d/demos/basic-app/ui.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图1.3 具有用户界面的datasets应用程序\"></p>\n<h2 id=\"添加行为\"><a href=\"#添加行为\" class=\"headerlink\" title=\"添加行为\"></a>添加行为</h2><p>接下来，我们将通过在<code>server</code>函数中定义它们来为输出提供生命。</p>\n<p>Shiny使用响应式编程使应用程序具有交互性。您将在第3章中了解更多关于响应式编程的信息，但现在只需知道，它涉及到告诉Shiny如何执行计算，而不是命令Shiny实际去做。这就像给某人食谱与命令他们给您做三明治之间的区别。</p>\n<p>我们将为样本应用程序中的摘要和表格输出提供“食谱”，以告诉Shiny如何填充这些输出。用以下代码替换您的空server函数：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>summary <span class=\"operator\">&lt;-</span> renderPrint<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    dataset <span class=\"operator\">&lt;-</span> get<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dataset<span class=\"punctuation\">,</span> <span class=\"string\">&quot;package:datasets&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    summary<span class=\"punctuation\">(</span>dataset<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>table <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    dataset <span class=\"operator\">&lt;-</span> get<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dataset<span class=\"punctuation\">,</span> <span class=\"string\">&quot;package:datasets&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    dataset</span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>赋值运算符（&lt;-）的左侧，<code>output$ID</code>，表示您正在为具有该ID的Shiny输出提供食谱。赋值运算符的右侧使用特定的render函数来包装您提供的代码。每个<code>render&#123;Type&#125;</code>函数旨在生成特定类型的输出（例如文本、表格和图形），并且通常与<code>&#123;type&#125;Output</code>函数配对。例如，在此应用程序中，<code>renderPrint()</code>与<code>verbatimTextOutput()</code>配对以显示具有固定宽度（逐字）文本的统计摘要，而<code>renderTable()</code>与<code>tableOutput()</code>配对以在表格中显示输入数据。</p>\n<p>再次运行应用程序并尝试使用，观察更改输入时输出会发生什么变化。图1.4显示了打开应用程序时应该看到的内容。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/bb766cc235f190fd2c28d8f011edb7f9cbe526a7/5d540/demos/basic-app/server.png\" alt=\"图1.4 \n现在我们已经提供了一个将输出和输入连接起来的服务器函数，我们已经有了一个功能完整的应用程序\"></p>\n<p>请注意，每当您更改输入数据集时，摘要和表格都会自动更新。这种依赖性是通过在输出函数中引用<code>input$dataset</code>而隐式创建的。<code>input$dataset</code>被填充为UI组件中id为dataset的当前值，并且当该值发生变化时，将导致输出自动更新。这就是反应性的本质：输出在输入发生更改时自动（重新计算）。</p>\n<h2 id=\"使用反应式表达式减少重复\"><a href=\"#使用反应式表达式减少重复\" class=\"headerlink\" title=\"使用反应式表达式减少重复\"></a>使用反应式表达式减少重复</h2><p>即使在这个简单的例子中，我们也有一些重复的代码：下面的这行代码在两个输出中都存在。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataset <span class=\"operator\">&lt;-</span> get<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dataset<span class=\"punctuation\">,</span> <span class=\"string\">&quot;package:datasets&quot;</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>在任何一种编程中，重复的代码都是不良的实践；它可能在计算上是浪费的，更重要的是，它增加了维护或调试代码的难度。在这里不是那么重要，但我想在一个非常简单的上下文中说明这个基本概念。</p>\n<p>在传统的R脚本中，我们使用两种技术来处理重复的代码：要么捕获变量的值，要么用函数捕获计算。不幸的是，这两种方法在这里都不适用，原因将在第13.2节中介绍，我们需要一个新的机制：<code>反应式表达式</code>。</p>\n<p>您可以通过将代码块包装在<code>reactive(&#123;...&#125;)</code>中并将其分配给变量来创建反应式表达式，并且可以通过像调用函数一样来使用反应式表达式。然而，尽管看起来像是在调用函数，但反应式表达式有一个重要的区别：它只在其第一次被调用时运行，然后将其结果缓存直到需要更新。</p>\n<p>我们可以更新我们的server()函数来使用反应式表达式，如下所示。这个应用程序的行为完全相同，但运行更有效率，因为它只需要检索数据集一次，而不是两次。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"comment\"># Create a reactive expression</span></span><br><span class=\"line\">  dataset <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    get<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dataset<span class=\"punctuation\">,</span> <span class=\"string\">&quot;package:datasets&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  output<span class=\"operator\">$</span>summary <span class=\"operator\">&lt;-</span> renderPrint<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"comment\"># Use a reactive expression by calling it like a function</span></span><br><span class=\"line\">    summary<span class=\"punctuation\">(</span>dataset<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>table <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    dataset<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们会多次回到响应式编程，但即使只有对输入、输出和反应式表达式的粗略了解，也可以构建非常有用的Shiny应用程序！</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在本章中，您创建了一个简单的应用程序-这不是很有趣或很有用，但是您已经看到了使用现有的R知识构建Web应用程序的容易程度。在接下来的两章中，您将学习更多关于用户界面和响应式编程的知识，这是Shiny的两个基本构建块。现在是获取Shiny速查表的绝佳时机。这是一个很好的资源，可以帮助您记住Shiny应用程序的主要组件。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/349cbcca50af85a9214e552296f33f14be37f768/52241/images/basic-app/cheatsheet.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/349cbcca50af85a9214e552296f33f14be37f768/52241/images/basic-app/cheatsheet.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图1.5 Shiny速查表，可从[https://www.rstudio.com/resources/cheatsheets/]获取\"></p>\n<h2 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h2><p><strong>1.8.1</strong> 创建一个应用程序，通过姓名向用户打招呼。您可能不知道需要使用哪些函数来完成此操作，因此我已经在下方包含了一些代码行。请考虑需要使用哪些行，然后将它们复制并粘贴到Shiny应用程序的适当位置。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;mortgage&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">output<span class=\"operator\">$</span>greeting <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  paste0<span class=\"punctuation\">(</span><span class=\"string\">&quot;Hello &quot;</span><span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>name<span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;age&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;How old are you?&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"literal\">NA</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">textInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;name&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;What&#x27;s your name?&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;greeting&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">output<span class=\"operator\">$</span>histogram <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  hist<span class=\"punctuation\">(</span>rnorm<span class=\"punctuation\">(</span><span class=\"number\">1000</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> res <span class=\"operator\">=</span> <span class=\"number\">96</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>1.8.2</strong> 假设你的朋友想设计一个应用程序，允许用户设置一个介于1和50之间的数字（x），并显示这个数字乘以5的结果。以下是他&#x2F;她的第一次尝试：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>shiny<span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;x&quot;</span><span class=\"punctuation\">,</span> label <span class=\"operator\">=</span> <span class=\"string\">&quot;If x is&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">50</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">30</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"string\">&quot;then x times 5 is&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;product&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>product <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span> </span><br><span class=\"line\">    x <span class=\"operator\">*</span> <span class=\"number\">5</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">shinyApp<span class=\"punctuation\">(</span>ui<span class=\"punctuation\">,</span> server<span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>其不幸报错如下，请尝试修复错误：</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/cc947455e46b88242e9c3460d3c2291f9f9393c2/093b0/demos/basic-app/ex-x-times-5.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/cc947455e46b88242e9c3460d3c2291f9f9393c2/093b0/demos/basic-app/ex-x-times-5.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"error\"></p>\n<p><strong>1.8.3</strong> 将前一个练习中的应用程序扩展为允许用户设置乘数y的值，以便应用程序产生x * y的值。最终结果应如下所示：</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/6a4de45b5dd90ca5c9e9ba6bf90d4be54d5ac8db/dc9e2/demos/basic-app/ex-x-times-y.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/6a4de45b5dd90ca5c9e9ba6bf90d4be54d5ac8db/dc9e2/demos/basic-app/ex-x-times-y.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"xy\"></p>\n<p><strong>1.8.4</strong> 以下面的应用程序为例，它为上一练习中描述的最后一个应用程序添加了一些附加功能。有什么新功能？如何使用响应式表达式减少应用程序中的重复代码量。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>shiny<span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;x&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;If x is&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">50</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">30</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;y&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;and y is&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">50</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">5</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"string\">&quot;then, (x * y) is&quot;</span><span class=\"punctuation\">,</span> textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;product&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"string\">&quot;and, (x * y) + 5 is&quot;</span><span class=\"punctuation\">,</span> textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;product_plus5&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"string\">&quot;and (x * y) + 10 is&quot;</span><span class=\"punctuation\">,</span> textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;product_plus10&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>product <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span> </span><br><span class=\"line\">    product <span class=\"operator\">&lt;-</span> input<span class=\"operator\">$</span>x <span class=\"operator\">*</span> input<span class=\"operator\">$</span>y</span><br><span class=\"line\">    product</span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>product_plus5 <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span> </span><br><span class=\"line\">    product <span class=\"operator\">&lt;-</span> input<span class=\"operator\">$</span>x <span class=\"operator\">*</span> input<span class=\"operator\">$</span>y</span><br><span class=\"line\">    product <span class=\"operator\">+</span> <span class=\"number\">5</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>product_plus10 <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span> </span><br><span class=\"line\">    product <span class=\"operator\">&lt;-</span> input<span class=\"operator\">$</span>x <span class=\"operator\">*</span> input<span class=\"operator\">$</span>y</span><br><span class=\"line\">    product <span class=\"operator\">+</span> <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">shinyApp<span class=\"punctuation\">(</span>ui<span class=\"punctuation\">,</span> server<span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>1.8.5</strong> 以下应用程序与您在本章前面看到的应用程序非常相似：您从包中选择一个数据集（这次我们使用ggplot2包），应用程序会打印出数据的摘要和图表。它还遵循良好的实践，并利用响应式表达式来避免代码冗余。但是，下面提供的代码存在三个错误。您可以找到并修复它们吗？</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>shiny<span class=\"punctuation\">)</span></span><br><span class=\"line\">library<span class=\"punctuation\">(</span>ggplot2<span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">datasets <span class=\"operator\">&lt;-</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;economics&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;faithfuld&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;seals&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;dataset&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Dataset&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> datasets<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  verbatimTextOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;summary&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;plot&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  dataset <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    get<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dataset<span class=\"punctuation\">,</span> <span class=\"string\">&quot;package:ggplot2&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>summmry <span class=\"operator\">&lt;-</span> renderPrint<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    summary<span class=\"punctuation\">(</span>dataset<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>plot <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    plot<span class=\"punctuation\">(</span>dataset<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> res <span class=\"operator\">=</span> <span class=\"number\">96</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">shinyApp<span class=\"punctuation\">(</span>ui<span class=\"punctuation\">,</span> server<span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"练习题答案获取\"><a href=\"#练习题答案获取\" class=\"headerlink\" title=\"练习题答案获取\"></a>练习题答案获取</h1><p>关注公众号“生信之巅”，聊天窗口回复“b376”获取习题答案。</p>\n<table align=\"center\"><tr>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅微信公众号\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-right: 0px;margin-bottom: 5px;align: center;\"></td>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅小程序码\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-left: 0px;margin-bottom: 5px;align: center\"></td>\n</tr></table>\n\n\n<p><font color=\"#FF0000\"><ruby><b>敬告</b>：使用文中脚本请引用本文网址，请尊重本人的劳动成果，谢谢！<rt><b>Notice</b>: When you use the scripts in this article, please cite the link of this webpage. Thank you!</rt></ruby></font></p>\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"编程","path":"api/tags/编程.json"},{"name":"Shiny入门系列","path":"api/tags/Shiny入门系列.json"}]},{"title":"Shiny从入门到入定——11-书签","slug":"Shiny从入门到入定——11-书签","date":"2024-04-27T09:53:52.000Z","updated":"2024-04-27T09:55:47.969Z","comments":true,"path":"api/articles/Shiny从入门到入定——11-书签.json","excerpt":null,"keywords":null,"cover":"https://d33wubrfki0l68.cloudfront.net/6ad93d80475f1ebc6d632c1293f210174da9b9d6/f576b/demos/action-bookmark/pendulum.png","content":"<h1 id=\"11-书签\"><a href=\"#11-书签\" class=\"headerlink\" title=\"11 书签\"></a>11 书签</h1><p>与大多数网站相比，Shiny应用程序有一个主要的缺点：您无法为应用程序添加书签以便将来返回同一位置，也无法通过电子邮件中的链接与他人分享您的工作。这是因为，默认情况下，Shiny不会在URL中公开应用程序的当前状态。然而，幸运的是，通过一些额外的工作，您可以更改此行为，本章将向您展示如何操作。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>shiny<span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"11-1-基本思路\"><a href=\"#11-1-基本思路\" class=\"headerlink\" title=\"11.1 基本思路\"></a>11.1 基本思路</h2><p>让我们用一个简单的应用程序来演示如何使其具有书签功能。这个应用程序绘制了利萨茹曲线，这些曲线复制了摆锤的运动。这个应用程序可以生成各种有趣的图案，您可能想要与他人分享。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  sidebarLayout<span class=\"punctuation\">(</span></span><br><span class=\"line\">    sidebarPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;omega&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;omega&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"operator\">-</span><span class=\"number\">2</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span> step <span class=\"operator\">=</span> <span class=\"number\">0.01</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;delta&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;delta&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span> step <span class=\"operator\">=</span> <span class=\"number\">0.01</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;damping&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;damping&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0.9</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span> step <span class=\"operator\">=</span> <span class=\"number\">0.001</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;length&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;length&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">100</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    mainPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      plotOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;fig&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  t <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span>seq<span class=\"punctuation\">(</span><span class=\"number\">0</span><span class=\"punctuation\">,</span> input<span class=\"operator\">$</span><span class=\"built_in\">length</span><span class=\"punctuation\">,</span> length.out <span class=\"operator\">=</span> input<span class=\"operator\">$</span><span class=\"built_in\">length</span> <span class=\"operator\">*</span> <span class=\"number\">100</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  x <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"built_in\">sin</span><span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>omega <span class=\"operator\">*</span> t<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">+</span> input<span class=\"operator\">$</span>delta<span class=\"punctuation\">)</span> <span class=\"operator\">*</span> input<span class=\"operator\">$</span>damping <span class=\"operator\">^</span> t<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  y <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"built_in\">sin</span><span class=\"punctuation\">(</span>t<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"operator\">*</span> input<span class=\"operator\">$</span>damping <span class=\"operator\">^</span> t<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>fig <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    plot<span class=\"punctuation\">(</span>x<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> y<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> axes <span class=\"operator\">=</span> <span class=\"literal\">FALSE</span><span class=\"punctuation\">,</span> xlab <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span> ylab <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span> type <span class=\"operator\">=</span> <span class=\"string\">&quot;l&quot;</span><span class=\"punctuation\">,</span> lwd <span class=\"operator\">=</span> <span class=\"number\">2</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> res <span class=\"operator\">=</span> <span class=\"number\">96</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/6ad93d80475f1ebc6d632c1293f210174da9b9d6/f576b/demos/action-bookmark/pendulum.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/6ad93d80475f1ebc6d632c1293f210174da9b9d6/f576b/demos/action-bookmark/pendulum.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图11.1 这个应用程序允许您使用摆锤模型生成有趣的图案。如果能和朋友分享一个链接，岂不是很酷？\"></p>\n<p>为了使这个应用程序具有书签功能，我们需要做三件事情：</p>\n<ol>\n<li><p>在用户界面中添加一个<a href=\"https://rdrr.io/pkg/shiny/man/bookmarkButton.html\">bookmarkButton()</a>。这将生成一个按钮，用户点击后生成可书签的URL。</p>\n</li>\n<li><p>将ui变为一个函数。您需要这样做是因为书签化的应用程序必须重新播放书签化的值：实际上，Shiny会修改每个输入控件的默认<code>value</code>。这意味着不再有一个单一的静态用户界面，而是可能有多个依赖于URL中参数的用户界面，因此它必须是一个函数。</p>\n</li>\n<li><p>在<a href=\"https://rdrr.io/pkg/shiny/man/shinyApp.html\">shinyApp()</a>调用中添加<code>enableBookmarking = &quot;url&quot;</code>。</p>\n</li>\n</ol>\n<p>进行这些更改后，我们得到：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>request<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">    sidebarLayout<span class=\"punctuation\">(</span></span><br><span class=\"line\">      sidebarPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">        sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;omega&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;omega&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"operator\">-</span><span class=\"number\">2</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span> step <span class=\"operator\">=</span> <span class=\"number\">0.01</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;delta&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;delta&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span> step <span class=\"operator\">=</span> <span class=\"number\">0.01</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;damping&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;damping&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0.9</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span> step <span class=\"operator\">=</span> <span class=\"number\">0.001</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;length&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;length&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">100</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        bookmarkButton<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">      <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      mainPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">        plotOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;fig&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">      <span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shinyApp<span class=\"punctuation\">(</span>ui<span class=\"punctuation\">,</span> server<span class=\"punctuation\">,</span> enableBookmarking <span class=\"operator\">=</span> <span class=\"string\">&quot;url&quot;</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>您可以在<a href=\"https://hadley.shinyapps.io/ms-bookmark-url\">https://hadley.shinyapps.io/ms-bookmark-url</a>尝试一下。如果您在应用程序中操作并书签了一些有趣的状态，您会发现生成的URL看起来像这样：</p>\n<ul>\n<li><p><a href=\"https://hadley.shinyapps.io/ms-bookmark-url/?_inputs_&damping=1&delta=1&length=100&omega=1\">https://hadley.shinyapps.io/ms-bookmark-url/?_inputs_&amp;damping=1&amp;delta=1&amp;length=100&amp;omega=1</a></p>\n</li>\n<li><p><a href=\"https://hadley.shinyapps.io/ms-bookmark-url/?_inputs_&damping=0.966&delta=1.25&length=100&omega=-0.54\">https://hadley.shinyapps.io/ms-bookmark-url/?_inputs_&amp;damping=0.966&amp;delta=1.25&amp;length=100&amp;omega=-0.54</a></p>\n</li>\n<li><p><a href=\"https://hadley.shinyapps.io/ms-bookmark-url/?_inputs_&damping=0.997&delta=1.37&length=500&omega=-0.9\">https://hadley.shinyapps.io/ms-bookmark-url/?_inputs_&amp;damping=0.997&amp;delta=1.37&amp;length=500&amp;omega=-0.9</a></p>\n</li>\n</ul>\n<p>为了理解发生了什么，让我们以第一个URL为例，将其分解成几个部分：</p>\n<ul>\n<li><p><code>http://</code> 是与应用程序通信时使用的“协议”。这始终是<code>http</code>或<code>https</code>。</p>\n</li>\n<li><p><code>hadley.shinyapps.io/ms-bookmark-url</code> 是应用程序的位置。</p>\n</li>\n</ul>\n<p>问号<code>?</code>之后的所有内容都是“参数”。每个参数之间用<code>&amp;</code>分隔，如果将其分解，您可以看到应用程序中每个输入的值：</p>\n<ul>\n<li><p>damping&#x3D;1</p>\n</li>\n<li><p>delta&#x3D;1</p>\n</li>\n<li><p>length&#x3D;100</p>\n</li>\n<li><p>omega&#x3D;1</p>\n</li>\n</ul>\n<p>因此，“生成书签”意味着在URL的参数中记录输入的当前值。如果您在本地进行操作，URL看起来会略有不同：</p>\n<ul>\n<li><p><a href=\"http://127.0.0.1:4087/?_inputs_&damping=1&delta=1&length=100&omega=1\">http://127.0.0.1:4087/?_inputs_&amp;damping=1&amp;delta=1&amp;length=100&amp;omega=1</a></p>\n</li>\n<li><p><a href=\"http://127.0.0.1:4087/?_inputs_&damping=0.966&delta=1.25&length=100&omega=-0.54\">http://127.0.0.1:4087/?_inputs_&amp;damping=0.966&amp;delta=1.25&amp;length=100&amp;omega=-0.54</a></p>\n</li>\n<li><p><a href=\"http://127.0.0.1:4087/?_inputs_&damping=0.997&delta=1.37&length=500&omega=-0.9\">http://127.0.0.1:4087/?_inputs_&amp;damping=0.997&amp;delta=1.37&amp;length=500&amp;omega=-0.9</a></p>\n</li>\n</ul>\n<p>除了将<code>hadley.shinyapps.io/ms-bookmark-url</code>替换为类似<code>127.0.0.1:4087</code>的内容外，大多数部分都是相同的。<code>127.0.0.1</code>是一个特殊地址，始终指向您自己的计算机，而<code>4087</code>是一个随机分配的端口。通常，不同的应用程序会获得不同的路径或IP地址，但如果您在自己的计算机上托管多个应用程序，则无法做到这一点。</p>\n<h3 id=\"11-1-1-更新URL\"><a href=\"#11-1-1-更新URL\" class=\"headerlink\" title=\"11.1.1 更新URL\"></a>11.1.1 更新URL</h3><p>除了提供一个明确的按钮外，另一种选择是自动更新浏览器中的URL。这允许用户在其浏览器中使用用户书签命令，或者从地址栏复制和粘贴URL。</p>\n<p>自动更新URL需要在服务器函数中编写一些模板代码：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Automatically bookmark every time an input changes</span></span><br><span class=\"line\">observe<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  reactiveValuesToList<span class=\"punctuation\">(</span>input<span class=\"punctuation\">)</span></span><br><span class=\"line\">  session<span class=\"operator\">$</span>doBookmark<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\"># Update the query string</span></span><br><span class=\"line\">onBookmarked<span class=\"punctuation\">(</span>updateQueryString<span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>这给我们提供了一个更新后的服务器函数，如下所示：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  t <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span>seq<span class=\"punctuation\">(</span><span class=\"number\">0</span><span class=\"punctuation\">,</span> input<span class=\"operator\">$</span><span class=\"built_in\">length</span><span class=\"punctuation\">,</span> <span class=\"built_in\">length</span> <span class=\"operator\">=</span> input<span class=\"operator\">$</span><span class=\"built_in\">length</span> <span class=\"operator\">*</span> <span class=\"number\">100</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  x <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"built_in\">sin</span><span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>omega <span class=\"operator\">*</span> t<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">+</span> input<span class=\"operator\">$</span>delta<span class=\"punctuation\">)</span> <span class=\"operator\">*</span> input<span class=\"operator\">$</span>damping <span class=\"operator\">^</span> t<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  y <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"built_in\">sin</span><span class=\"punctuation\">(</span>t<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"operator\">*</span> input<span class=\"operator\">$</span>damping <span class=\"operator\">^</span> t<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  output<span class=\"operator\">$</span>fig <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    plot<span class=\"punctuation\">(</span>x<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> y<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> axes <span class=\"operator\">=</span> <span class=\"literal\">FALSE</span><span class=\"punctuation\">,</span> xlab <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span> ylab <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span> type <span class=\"operator\">=</span> <span class=\"string\">&quot;l&quot;</span><span class=\"punctuation\">,</span> lwd <span class=\"operator\">=</span> <span class=\"number\">2</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> res <span class=\"operator\">=</span> <span class=\"number\">96</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  observe<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    reactiveValuesToList<span class=\"punctuation\">(</span>input<span class=\"punctuation\">)</span></span><br><span class=\"line\">    session<span class=\"operator\">$</span>doBookmark<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  onBookmarked<span class=\"punctuation\">(</span>updateQueryString<span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shinyApp<span class=\"punctuation\">(</span>ui<span class=\"punctuation\">,</span> server<span class=\"punctuation\">,</span> enableBookmarking <span class=\"operator\">=</span> <span class=\"string\">&quot;url&quot;</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>这会产生<a href=\"https://hadley.shinyapps.io/ms-bookmark-auto\">https://hadley.shinyapps.io/ms-bookmark-auto</a>——由于URL现在会自动更新，您可以从用户界面中删除书签按钮。</p>\n<h3 id=\"11-1-2-存储更丰富的状态\"><a href=\"#11-1-2-存储更丰富的状态\" class=\"headerlink\" title=\"11.1.2 存储更丰富的状态\"></a>11.1.2 存储更丰富的状态</h3><p>到目前为止，我们使用了<code>enableBookmarking = &quot;url&quot;</code>，它直接在URL中存储状态。这是一个很好的起点，因为它非常简单，可以在您可能部署Shiny应用的任何地方工作。然而，可以想象，如果您有大量的输入，URL会变得非常长，而且显然无法捕获上传的文件。</p>\n<p>对于这些情况，您可能想要使用<code>enableBookmarking = &quot;server&quot;</code>，它将状态保存到服务器上的<code>.rds</code>文件。这总是生成一个简短的、不透明的URL，但需要在服务器上额外存储。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shinyApp<span class=\"punctuation\">(</span>ui<span class=\"punctuation\">,</span> server<span class=\"punctuation\">,</span> enableBookmarking <span class=\"operator\">=</span> <span class=\"string\">&quot;server&quot;</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>目前，shinyapps.io尚不支持服务器端书签，因此您需要在本地尝试。如果您这样做，您会看到书签按钮生成类似以下的URL：</p>\n<ul>\n<li><p><a href=\"http://127.0.0.1:4087/?_state_id_=0d645f1b28f05c97\">http://127.0.0.1:4087/?_state_id_=0d645f1b28f05c97</a></p>\n</li>\n<li><p><a href=\"http://127.0.0.1:4087/?_state_id_=87b56383d8a1062c\">http://127.0.0.1:4087/?_state_id_=87b56383d8a1062c</a></p>\n</li>\n<li><p><a href=\"http://127.0.0.1:4087/?_state_id_=c8b0291ba622b69c\">http://127.0.0.1:4087/?_state_id_=c8b0291ba622b69c</a></p>\n</li>\n</ul>\n<p>这些URL与您工作目录中匹配的目录配对：</p>\n<ul>\n<li><p>shiny_bookmarks&#x2F;0d645f1b28f05c97</p>\n</li>\n<li><p>shiny_bookmarks&#x2F;87b56383d8a1062c</p>\n</li>\n<li><p>shiny_bookmarks&#x2F;c8b0291ba622b69c</p>\n</li>\n</ul>\n<p>服务器端书签的主要缺点是它需要在服务器上保存文件，而且不清楚这些文件需要保留多长时间。如果您正在书签化复杂的状态并且从未删除这些文件，那么随着时间的推移，您的应用将占用越来越多的磁盘空间。如果您删除文件，一些旧书签将停止工作。</p>\n<h2 id=\"11-2-书签挑战\"><a href=\"#11-2-书签挑战\" class=\"headerlink\" title=\"11.2 书签挑战\"></a>11.2 书签挑战</h2><p>自动书签功能依赖于响应式图表。它使用保存的值初始化输入，然后重新播放所有的响应式表达式和输出，只要您的应用的响应式图表简单明了，就会产生与您看到的相同的应用。本节简要介绍了一些需要特别注意的情况：</p>\n<ul>\n<li><p>如果您的应用使用了随机数，即使所有输入都相同，结果也可能不同。如果确保每次生成相同的数字非常重要，您需要思考如何使随机过程可重复。最简单的方法是使用<a href=\"https://rdrr.io/pkg/shiny/man/repeatable.html\">repeatable()</a>函数；有关更多详细信息，请参阅相关文档。</p>\n</li>\n<li><p>如果您有选项卡，并希望书签和恢复活动选项卡，请确保在调用<a href=\"https://rdrr.io/pkg/shiny/man/tabsetPanel.html\">tabsetPanel()</a>时提供一个id。</p>\n</li>\n<li><p>如果有不应被书签记录的输入，例如它们包含不应共享的个人信息，请在服务器函数的某个位置调用<a href=\"https://rdrr.io/pkg/shiny/man/setBookmarkExclude.html\">setBookmarkExclude()</a>。例如，<code>setBookmarkExclude(c(&quot;secret1&quot;, &quot;secret2&quot;))</code>将确保<code>secret1</code>和<code>secret2</code>输入不会被书签记录。</p>\n</li>\n<li><p>如果您在自己的<a href=\"https://rdrr.io/pkg/shiny/man/reactiveValues.html\">reactiveValues()</a>对象中手动管理响应式状态（我们将在第<code>16</code>章中讨论），则需要使用<a href=\"https://rdrr.io/pkg/shiny/man/onBookmark.html\">onBookmark()</a>和<a href=\"https://rdrr.io/pkg/shiny/man/onBookmark.html\">onRestore()</a>回调来手动保存和加载额外的状态。有关更多详细信息，请参阅<a href=\"https://shiny.rstudio.com/articles/advanced-bookmarking.html\">高级书签</a>。</p>\n</li>\n</ul>\n<h2 id=\"11-3-练习\"><a href=\"#11-3-练习\" class=\"headerlink\" title=\"11.3 练习\"></a>11.3 练习</h2><ol>\n<li><p>为<a href=\"https://ambient.data-imaginist.com/reference/noise_simplex.html\">ambient::noise_simplex()</a>的结果生成可视化应用。您的应用应允许用户控制频率、分形、间隙和增益，并且应支持书签功能。如何确保从书签重新加载时图像看起来完全相同？（考虑seed参数的含义）。</p>\n</li>\n<li><p>创建一个简单的应用，允许您上传CSV文件，并为其添加书签。上传几个文件，然后查看<code>shiny_bookmarks</code>。这些文件是如何与书签对应的？（提示：您可以使用<a href=\"https://rdrr.io/r/base/readRDS.html\">readRDS()</a>来查看Shiny生成的缓存文件的内容）。</p>\n</li>\n</ol>\n<h2 id=\"11-4-总结\"><a href=\"#11-4-总结\" class=\"headerlink\" title=\"11.4 总结\"></a>11.4 总结</h2><p>本章介绍了如何为您的应用程序启用书签功能。书签功能对您的用户来说是一个很好的特性，因为它允许他们轻松地将自己的工作与他人分享。接下来，我们将讨论如何在Shiny应用程序中使用整洁评估。整洁评估是许多tidyverse函数的一个特性，如果您希望允许用户在（例如）dplyr管道或ggplot2图形中更改变量，那么您需要了解这个特性。</p>\n<h1 id=\"加关注\"><a href=\"#加关注\" class=\"headerlink\" title=\"加关注\"></a>加关注</h1><table align=\"center\"><tr>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅微信公众号\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-right: 0px;margin-bottom: 5px;align: center;\"></td>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅小程序码\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-left: 0px;margin-bottom: 5px;align: center\"></td>\n</tr></table>\n\n\n<p><font color=\"#FF0000\"><ruby><b>敬告</b>：使用文中脚本请引用本文网址，请尊重本人的劳动成果，谢谢！<rt><b>Notice</b>: When you use the scripts in this article, please cite the link of this webpage. Thank you!</rt></ruby></font></p>\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"编程","path":"api/tags/编程.json"},{"name":"Shiny入门系列","path":"api/tags/Shiny入门系列.json"}]},{"title":"Shiny从入门到入定——10-动态UI","slug":"Shiny从入门到入定——10-动态UI","date":"2024-04-27T09:05:46.000Z","updated":"2024-04-27T09:19:58.639Z","comments":true,"path":"api/articles/Shiny从入门到入定——10-动态UI.json","excerpt":null,"keywords":null,"cover":"https://d33wubrfki0l68.cloudfront.net/45d9b7c2dabd64a4597e370d2b84c0dc01cf8a2f/2dc99/demos/action-dynamic/update-basics-onload.png","content":"<h1 id=\"10-动态UI\"><a href=\"#10-动态UI\" class=\"headerlink\" title=\"10 动态UI\"></a>10 动态UI</h1><p>到目前为止，我们已经看到了UI和server函数之间的清晰分离：用户界面在应用程序启动时静态定义，因此它无法对应用程序中发生的任何事情做出响应。在本章中，您将学习如何创建动态用户界面，通过server函数中运行的代码来更改UI。</p>\n<p>创建动态用户界面有三个关键技术：</p>\n<ul>\n<li>使用<code>update</code>系列的函数来修改输入控件的参数。</li>\n<li>使用<a href=\"https://rdrr.io/pkg/shiny/man/tabsetPanel.html\">tabsetPanel()</a>来有条件地显示和隐藏用户界面的部分。</li>\n<li>使用<a href=\"https://rdrr.io/pkg/shiny/man/htmlOutput.html\">uiOutput()</a>和<a href=\"https://rdrr.io/pkg/shiny/man/renderUI.html\">renderUI()</a>通过代码生成用户界面的选定部分。</li>\n</ul>\n<p>这三个工具为您提供了相当强大的功能，通过修改输入和输出来响应用户。我将演示一些您可以应用它们的更有用的方式，但最终您的创造力是唯一的限制。同时，这些工具可能会使您的应用程序变得更难理解，因此请谨慎使用，并始终努力使用解决您问题的最简单技术。</p>\n<p>接下来是R代码库的加载部分：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>shiny<span class=\"punctuation\">)</span></span><br><span class=\"line\">library<span class=\"punctuation\">(</span>dplyr<span class=\"punctuation\">,</span> warn.conflicts <span class=\"operator\">=</span> <span class=\"literal\">FALSE</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"10-1-更新输入\"><a href=\"#10-1-更新输入\" class=\"headerlink\" title=\"10.1 更新输入\"></a>10.1 更新输入</h2><p>我们将从一个简单的技术开始，该技术允许您在创建后修改输入：<code>update</code>系列的函数。每个输入控件，例如<code>textInput()</code>，都配有一个更新函数，例如<code>updateTextInput()</code>，允许您在创建后修改该控件。</p>\n<p>请考虑以下代码示例，结果如<code>图10.1</code>所示。该应用程序有两个输入控件，它们控制另一个输入控件（滑块）的范围（最小值和最大值）。关键的想法是使用<a href=\"https://rdrr.io/pkg/shiny/man/observeEvent.html\">observeEvent()</a>来触发<a href=\"https://rdrr.io/pkg/shiny/man/updateSliderInput.html\">updateSliderInput()</a>，每当最小或最大输入发生变化时。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;min&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Minimum&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">0</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;max&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Maximum&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">3</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">3</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span><span class=\"built_in\">min</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    updateSliderInput<span class=\"punctuation\">(</span>inputId <span class=\"operator\">=</span> <span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> input<span class=\"operator\">$</span><span class=\"built_in\">min</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span>  </span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span><span class=\"built_in\">max</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    updateSliderInput<span class=\"punctuation\">(</span>inputId <span class=\"operator\">=</span> <span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> input<span class=\"operator\">$</span><span class=\"built_in\">max</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>observeEvent()</code>监视<code>min</code>和<code>max</code>输入的变化，并在它们变化时调用<code>updateSliderInput()</code>来更新滑块的最小和最大值。<code>renderText()</code>用于在<code>textOutput()</code>控件中显示当前范围。</p>\n<table>\n<tr>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/45d9b7c2dabd64a4597e370d2b84c0dc01cf8a2f/2dc99/demos/action-dynamic/update-basics-onload.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/45d9b7c2dabd64a4597e370d2b84c0dc01cf8a2f/2dc99/demos/action-dynamic/update-basics-onload.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/e5a1387f21bee28260731f6fb84991e188af5ec2/8cfbf/demos/action-dynamic/update-basics-max-increase.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/e5a1387f21bee28260731f6fb84991e188af5ec2/8cfbf/demos/action-dynamic/update-basics-max-increase.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/fcca996a780ec2cbaf306e764a577649e6fdca4b/5ecfc/demos/action-dynamic/update-basics-min-decrease.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/fcca996a780ec2cbaf306e764a577649e6fdca4b/5ecfc/demos/action-dynamic/update-basics-min-decrease.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n</tr>\n<tr>\n<td colspan=\"3\">图10.1 应用程序加载时的界面（左），增加最大值后的界面（中），然后减少最小值后的界面（右）。请访问 <a href=\"https://hadley.shinyapps.io/ms-update-basics\">https://hadley.shinyapps.io/ms-update-basics</a> 查看实时效果\n</td>\n</tr>\n</table>\n\n<p>更新函数与其他Shiny函数有些不同：它们都接受输入的名称（作为字符串）作为<code>inputId</code>参数。其余的参数对应于输入构造函数中可以在创建后修改的参数。</p>\n<p>为了帮助您掌握更新函数的使用，我将展示几个简单的示例，然后我们将深入探讨使用分层选择框的复杂案例研究，最后讨论循环引用的问题。</p>\n<h3 id=\"10-1-1-简单应用\"><a href=\"#10-1-1-简单应用\" class=\"headerlink\" title=\"10.1.1 简单应用\"></a>10.1.1 简单应用</h3><p>更新函数最简单的用法是为用户提供一些小的便利。例如，您可能希望轻松地将参数重置为其初始值。以下代码片段展示了如何结合使用<a href=\"https://rdrr.io/pkg/shiny/man/actionButton.html\">actionButton()</a>、<a href=\"https://rdrr.io/pkg/shiny/man/observeEvent.html\">observeEvent()</a>和<a href=\"https://rdrr.io/pkg/shiny/man/updateSliderInput.html\">updateSliderInput()</a>，结果如<code>图10.2</code>所示。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;x1&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;x1&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"operator\">-</span><span class=\"number\">10</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">10</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;x2&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;x2&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"operator\">-</span><span class=\"number\">10</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">10</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;x3&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;x3&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"operator\">-</span><span class=\"number\">10</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">10</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;reset&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Reset&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>reset<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    updateSliderInput<span class=\"punctuation\">(</span>inputId <span class=\"operator\">=</span> <span class=\"string\">&quot;x1&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    updateSliderInput<span class=\"punctuation\">(</span>inputId <span class=\"operator\">=</span> <span class=\"string\">&quot;x2&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    updateSliderInput<span class=\"punctuation\">(</span>inputId <span class=\"operator\">=</span> <span class=\"string\">&quot;x3&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<tr>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/b319bdb38cce5a357ba4131d17fec8b3a8bd34fd/cc473/demos/action-dynamic/update-reset-onload.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/b319bdb38cce5a357ba4131d17fec8b3a8bd34fd/cc473/demos/action-dynamic/update-reset-onload.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/b5061a18295fbec4f08dd399e32ce252d2ad6eb9/230d4/demos/action-dynamic/update-reset-set.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/b5061a18295fbec4f08dd399e32ce252d2ad6eb9/230d4/demos/action-dynamic/update-reset-set.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/b319bdb38cce5a357ba4131d17fec8b3a8bd34fd/8c5f7/demos/action-dynamic/update-reset-reset.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/b319bdb38cce5a357ba4131d17fec8b3a8bd34fd/8c5f7/demos/action-dynamic/update-reset-reset.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n</tr>\n<tr><td colspan=\"3\">图10.2 应用加载时（左图），拖动一些滑块后（中图），然后点击重置（右图）。在线查看地址：<a href=\"https://hadley.shinyapps.io/ms-update-reset\">https://hadley.shinyapps.io/ms-update-reset</a></td></tr>\n</table>\n\n<p>一个类似的应用是调整动作按钮的文本，以便你确切知道它将执行什么操作。图<code>10.3</code>展示了下面代码的结果。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Simulations&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">10</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;simulate&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Simulate&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>n<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    label <span class=\"operator\">&lt;-</span> paste0<span class=\"punctuation\">(</span><span class=\"string\">&quot;Simulate &quot;</span><span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>n<span class=\"punctuation\">,</span> <span class=\"string\">&quot; times&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    updateActionButton<span class=\"punctuation\">(</span>inputId <span class=\"operator\">=</span> <span class=\"string\">&quot;simulate&quot;</span><span class=\"punctuation\">,</span> label <span class=\"operator\">=</span> label<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<tr>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/f6604343f39fe08be631b06ddac37b2c00d73ea5/f636b/demos/action-dynamic/update-button-onload.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/f6604343f39fe08be631b06ddac37b2c00d73ea5/f636b/demos/action-dynamic/update-button-onload.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/d65b9991e6b08e57700bf2cc8f5fafafe59ebc4e/03e2a/demos/action-dynamic/update-button-set1.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/d65b9991e6b08e57700bf2cc8f5fafafe59ebc4e/03e2a/demos/action-dynamic/update-button-set1.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/a2a75084db3d975c48dc56ef70eebd2906eae356/a924e/demos/action-dynamic/update-button-set100.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/a2a75084db3d975c48dc56ef70eebd2906eae356/a924e/demos/action-dynamic/update-button-set100.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n</tr>\n<tr><td colspan=\"3\">图 10.3 应用加载时（左），将模拟次数设置为 1（中），再将模拟次数设置为 100（右）。在线查看地址：<a href=\"https://hadley.shinyapps.io/ms-update-button\">https://hadley.shinyapps.io/ms-update-button</a></td></tr>\n</table>\n\n<p>有很多方法可以用这种方式使用更新函数；在开发复杂应用时，要注意找出向用户提供更多信息的方法。一个特别重要的应用是通过逐步筛选来简化从一长串可能选项中进行选择的过程。这通常是“分层选择框”的问题。</p>\n<h3 id=\"10-1-2-分层选择框\"><a href=\"#10-1-2-分层选择框\" class=\"headerlink\" title=\"10.1.2 分层选择框\"></a>10.1.2 分层选择框</h3><p>更新函数的一个更复杂但特别有用的应用是允许在多个类别之间进行交互式深入探索。我将用一个来自 <a href=\"https://www.kaggle.com/kyanyoga/sample-sales-data\">https://www.kaggle.com/kyanyoga/sample-sales-data</a> 的销售仪表板的虚拟数据来说明它们的使用方法。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sales <span class=\"operator\">&lt;-</span> vroom<span class=\"operator\">::</span>vroom<span class=\"punctuation\">(</span><span class=\"string\">&quot;sales-dashboard/sales_data_sample.csv&quot;</span><span class=\"punctuation\">,</span> col_types <span class=\"operator\">=</span> <span class=\"built_in\">list</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> na <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">sales <span class=\"operator\">%&gt;%</span> </span><br><span class=\"line\">  select<span class=\"punctuation\">(</span>TERRITORY<span class=\"punctuation\">,</span> CUSTOMERNAME<span class=\"punctuation\">,</span> ORDERNUMBER<span class=\"punctuation\">,</span> everything<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"operator\">%&gt;%</span></span><br><span class=\"line\">  arrange<span class=\"punctuation\">(</span>ORDERNUMBER<span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; # A tibble: 2,823 × 25</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;    TERRITORY CUSTOM…¹ ORDER…² QUANT…³ PRICE…⁴ ORDER…⁵ SALES ORDER…⁶ STATUS QTR_ID</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;    &lt;chr&gt;     &lt;chr&gt;      &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;dbl&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;  1 NA        Online …   10100      30   100         3 5151  1/6/20… Shipp…      1</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;  2 NA        Online …   10100      50    67.8       2 3390  1/6/20… Shipp…      1</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;  3 NA        Online …   10100      22    86.5       4 1903. 1/6/20… Shipp…      1</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;  4 NA        Online …   10100      49    34.5       1 1689. 1/6/20… Shipp…      1</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;  5 EMEA      Blauer …   10101      25   100         4 3782  1/9/20… Shipp…      1</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;  6 EMEA      Blauer …   10101      26   100         1 3773. 1/9/20… Shipp…      1</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;  7 EMEA      Blauer …   10101      45    31.2       3 1404  1/9/20… Shipp…      1</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;  8 EMEA      Blauer …   10101      46    53.8       2 2473. 1/9/20… Shipp…      1</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;  9 NA        Vitachr…   10102      39   100         2 4808. 1/10/2… Shipp…      1</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; 10 NA        Vitachr…   10102      41    50.1       1 2056. 1/10/2… Shipp…      1</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; # … with 2,813 more rows, 15 more variables: MONTH_ID &lt;dbl&gt;, YEAR_ID &lt;dbl&gt;,</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; #   PRODUCTLINE &lt;chr&gt;, MSRP &lt;dbl&gt;, PRODUCTCODE &lt;chr&gt;, PHONE &lt;chr&gt;,</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; #   ADDRESSLINE1 &lt;chr&gt;, ADDRESSLINE2 &lt;chr&gt;, CITY &lt;chr&gt;, STATE &lt;chr&gt;,</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; #   POSTALCODE &lt;chr&gt;, COUNTRY &lt;chr&gt;, CONTACTLASTNAME &lt;chr&gt;,</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; #   CONTACTFIRSTNAME &lt;chr&gt;, DEALSIZE &lt;chr&gt;, and abbreviated variable names</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; #   ¹​CUSTOMERNAME, ²​ORDERNUMBER, ³​QUANTITYORDERED, ⁴​PRICEEACH, ⁵​ORDERLINENUMBER,</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; #   ⁶​ORDERDATE</span></span><br></pre></td></tr></table></figure>\n\n<p>在这个演示中，我将重点关注数据中的自然层次结构：</p>\n<ul>\n<li><p>每个区域包含客户。</p>\n</li>\n<li><p>每个客户有多个订单。</p>\n</li>\n<li><p>每个订单包含行。</p>\n</li>\n</ul>\n<p>我想创建一个用户界面，你可以：</p>\n<ul>\n<li><p>选择一个区域来查看所有客户。</p>\n</li>\n<li><p>选择一个客户来查看所有订单。</p>\n</li>\n<li><p>选择一个订单来查看底层行。</p>\n</li>\n</ul>\n<p>用户界面的核心是简单的：我将创建三个选择框和一个输出表格。<code>customername</code>和<code>ordernumber</code>选择框的选项将动态生成，因此我将设置<code>choices = NULL</code>。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;territory&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Territory&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> unique<span class=\"punctuation\">(</span>sales<span class=\"operator\">$</span>TERRITORY<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;customername&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Customer&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> <span class=\"literal\">NULL</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;ordernumber&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Order number&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> <span class=\"literal\">NULL</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;data&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>在服务器函数中，我自上而下地工作：</p>\n<ol>\n<li><p>我创建了一个响应式对象 <code>territory()</code>，它包含与所选区域匹配的 <code>sales</code> 中的行。</p>\n</li>\n<li><p>每当 <code>territory()</code> 发生变化时，我都会更新 <code>input$customername</code> 选择框中的选项列表。</p>\n</li>\n<li><p>我创建了另一个响应式对象 <code>customer()</code>，它包含与所选客户匹配的 <code>territory()</code> 中的行。</p>\n</li>\n<li><p>每当 <code>customer()</code> 发生变化时，我都会更新 <code>input$ordernumber</code> 选择框中的选项列表。</p>\n</li>\n<li><p>我在 <code>output$data</code> 中显示所选订单。</p>\n</li>\n</ol>\n<p>你可以看到下面的组织结构：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  territory <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    filter<span class=\"punctuation\">(</span>sales<span class=\"punctuation\">,</span> TERRITORY <span class=\"operator\">==</span> input<span class=\"operator\">$</span>territory<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>territory<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    choices <span class=\"operator\">&lt;-</span> unique<span class=\"punctuation\">(</span>territory<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"operator\">$</span>CUSTOMERNAME<span class=\"punctuation\">)</span></span><br><span class=\"line\">    updateSelectInput<span class=\"punctuation\">(</span>inputId <span class=\"operator\">=</span> <span class=\"string\">&quot;customername&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> choices<span class=\"punctuation\">)</span> </span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  customer <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    req<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>customername<span class=\"punctuation\">)</span></span><br><span class=\"line\">    filter<span class=\"punctuation\">(</span>territory<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> CUSTOMERNAME <span class=\"operator\">==</span> input<span class=\"operator\">$</span>customername<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>customer<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    choices <span class=\"operator\">&lt;-</span> unique<span class=\"punctuation\">(</span>customer<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"operator\">$</span>ORDERNUMBER<span class=\"punctuation\">)</span></span><br><span class=\"line\">    updateSelectInput<span class=\"punctuation\">(</span>inputId <span class=\"operator\">=</span> <span class=\"string\">&quot;ordernumber&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> choices<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>data <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    req<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>ordernumber<span class=\"punctuation\">)</span></span><br><span class=\"line\">    customer<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">%&gt;%</span> </span><br><span class=\"line\">      filter<span class=\"punctuation\">(</span>ORDERNUMBER <span class=\"operator\">==</span> input<span class=\"operator\">$</span>ordernumber<span class=\"punctuation\">)</span> <span class=\"operator\">%&gt;%</span> </span><br><span class=\"line\">      select<span class=\"punctuation\">(</span>QUANTITYORDERED<span class=\"punctuation\">,</span> PRICEEACH<span class=\"punctuation\">,</span> PRODUCTCODE<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<tr>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/fe6c81ed4946e87b044fc7cc91b3bb05e4954043/7d64e/demos/action-dynamic/update-nested-territory.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/fe6c81ed4946e87b044fc7cc91b3bb05e4954043/7d64e/demos/action-dynamic/update-nested-territory.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/d3a0d284501015f737373cc8e6f14b27a49de373/0e06a/demos/action-dynamic/update-nested-customername.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/d3a0d284501015f737373cc8e6f14b27a49de373/0e06a/demos/action-dynamic/update-nested-customername.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/b0ae629ca1909719117abfce2d890db7bf379412/37026/demos/action-dynamic/update-nested-orders.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/b0ae629ca1909719117abfce2d890db7bf379412/37026/demos/action-dynamic/update-nested-orders.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n</tr>\n<tr><td colspan=\"3\">图 10.4 我选择“EMEA”（左），然后选择“Lyon Souveniers”（中），然后（右）查看订单。在线查看地址：<a href=\"https://hadley.shinyapps.io/ms-update-nested\">https://hadley.shinyapps.io/ms-update-nested</a></td></tr>\n</table>\n\n<p>你可以在 <a href=\"https://hadley.shinyapps.io/ms-update-nested\">https://hadley.shinyapps.io/ms-update-nested</a> 尝试这个简单的示例，或者在 <a href=\"https://github.com/hadley/mastering-shiny/tree/master/sales-dashboard\">https://github.com/hadley/mastering-shiny/tree/master/sales-dashboard</a> 查看一个更加完善的应用示例。</p>\n<h3 id=\"10-1-3-冻结响应式输入\"><a href=\"#10-1-3-冻结响应式输入\" class=\"headerlink\" title=\"10.1.3 冻结响应式输入\"></a>10.1.3 冻结响应式输入</h3><p>有时，这种分层选择会短暂地创建一个无效的输入集，导致出现不想要的输出闪烁。例如，考虑这个简单的应用，你首先选择一个数据集，然后选择要汇总的变量：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;dataset&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Choose a dataset&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;pressure&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;cars&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;column&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Choose column&quot;</span><span class=\"punctuation\">,</span> character<span class=\"punctuation\">(</span><span class=\"number\">0</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  verbatimTextOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;summary&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  dataset <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span>get<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dataset<span class=\"punctuation\">,</span> <span class=\"string\">&quot;package:datasets&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dataset<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    updateSelectInput<span class=\"punctuation\">(</span>inputId <span class=\"operator\">=</span> <span class=\"string\">&quot;column&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> <span class=\"built_in\">names</span><span class=\"punctuation\">(</span>dataset<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>summary <span class=\"operator\">&lt;-</span> renderPrint<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    summary<span class=\"punctuation\">(</span>dataset<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">[[</span>input<span class=\"operator\">$</span>column<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果你在 <a href=\"https://hadley.shinyapps.io/ms-freeze\">https://hadley.shinyapps.io/ms-freeze</a> 上尝试这个实时应用，你会注意到当你切换数据集时，摘要输出会短暂地闪烁。这是因为 <a href=\"https://rdrr.io/pkg/shiny/man/updateSelectInput.html\">updateSelectInput()</a> 只有在所有输出和观察者都运行之后才会生效，因此会暂时出现一个状态，即你拥有数据集 B 和来自数据集 A 的变量，因此输出会包含 <code>summary(NULL)</code>。</p>\n<p>你可以通过“freezing”输入值来解决这个问题，使用 <a href=\"https://rdrr.io/pkg/shiny/man/freezeReactiveValue.html\">freezeReactiveValue()</a>。这确保了任何使用输入的响应式对象或输出都不会更新，直到下一次完整的失效周期。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  dataset <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span>get<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dataset<span class=\"punctuation\">,</span> <span class=\"string\">&quot;package:datasets&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dataset<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    freezeReactiveValue<span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> <span class=\"string\">&quot;column&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    updateSelectInput<span class=\"punctuation\">(</span>inputId <span class=\"operator\">=</span> <span class=\"string\">&quot;column&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> <span class=\"built_in\">names</span><span class=\"punctuation\">(</span>dataset<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>summary <span class=\"operator\">&lt;-</span> renderPrint<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    summary<span class=\"punctuation\">(</span>dataset<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">[[</span>input<span class=\"operator\">$</span>column<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>请注意，你不需要“thaw”输入值；当 Shiny 检测到会话和服务器再次同步时，这会自动发生。</p>\n<p>你可能会好奇什么时候应该使用 <a href=\"https://rdrr.io/pkg/shiny/man/freezeReactiveValue.html\">freezeReactiveValue()</a>：实际上，当你动态更改输入值时，使用它总是一个好习惯。实际的修改需要一些时间才能流向浏览器，然后再返回给 Shiny，而在此期间，任何对该值的读取都可能是浪费的，在最坏的情况下可能导致错误。使用 <code>freezeReactiveValue()</code> 告诉所有下游计算，输入值是陈旧的，它们应该保存它们的努力，直到它变得有用。</p>\n<h3 id=\"10-1-4-循环引用\"><a href=\"#10-1-4-循环引用\" class=\"headerlink\" title=\"10.1.4 循环引用\"></a>10.1.4 循环引用</h3><p>如果你想使用 update 函数来改变输入的当前<code>value</code>，那么我们需要讨论一个重要的问题。从 Shiny 的角度来看，使用 update 函数来修改值与用户通过点击或输入来修改值没有区别。这意味着 update 函数可以像人类一样触发响应式更新。这意味着你现在已经超出了纯响应式编程的范围，你需要开始担心循环引用和无限循环的问题。</p>\n<p>例如，看看下面这个简单的应用。它包含一个输入控件和一个观察者，后者将其值加一并更新。每次运行 <a href=\"https://rdrr.io/pkg/shiny/man/updateNumericInput.html\">updateNumericInput()</a> 时，它都会更改 <code>input$n</code>，导致 <code>updateNumericInput()</code> 再次运行，因此应用陷入无限循环，持续增加 <code>input$n</code> 的值。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">0</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>n<span class=\"punctuation\">,</span></span><br><span class=\"line\">    updateNumericInput<span class=\"punctuation\">(</span>inputId <span class=\"operator\">=</span> <span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> input<span class=\"operator\">$</span>n <span class=\"operator\">+</span> <span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>虽然你不太可能在自己的应用中创建这种显而易见的问题，但如果你在更新相互依赖的多个控件时，可能会遇到类似的问题，如下一个例子所示。</p>\n<h3 id=\"10-1-5-相互关联的输入\"><a href=\"#10-1-5-相互关联的输入\" class=\"headerlink\" title=\"10.1.5 相互关联的输入\"></a>10.1.5 相互关联的输入</h3><p>在应用中出现循环引用很容易发生在有多个“事实来源”时。例如，假设你想创建一个温度转换应用，用户既可以输入摄氏温度也可以输入华氏温度：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;temp_c&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Celsius&quot;</span><span class=\"punctuation\">,</span> <span class=\"literal\">NA</span><span class=\"punctuation\">,</span> step <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;temp_f&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Fahrenheit&quot;</span><span class=\"punctuation\">,</span> <span class=\"literal\">NA</span><span class=\"punctuation\">,</span> step <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>temp_f<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"built_in\">c</span> <span class=\"operator\">&lt;-</span> <span class=\"built_in\">round</span><span class=\"punctuation\">(</span><span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>temp_f <span class=\"operator\">-</span> <span class=\"number\">32</span><span class=\"punctuation\">)</span> <span class=\"operator\">*</span> <span class=\"number\">5</span> <span class=\"operator\">/</span> <span class=\"number\">9</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    updateNumericInput<span class=\"punctuation\">(</span>inputId <span class=\"operator\">=</span> <span class=\"string\">&quot;temp_c&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"built_in\">c</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>temp_c<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    f <span class=\"operator\">&lt;-</span> <span class=\"built_in\">round</span><span class=\"punctuation\">(</span><span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>temp_c <span class=\"operator\">*</span> <span class=\"number\">9</span> <span class=\"operator\">/</span> <span class=\"number\">5</span><span class=\"punctuation\">)</span> <span class=\"operator\">+</span> <span class=\"number\">32</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    updateNumericInput<span class=\"punctuation\">(</span>inputId <span class=\"operator\">=</span> <span class=\"string\">&quot;temp_f&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> f<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果你尝试这个应用，<a href=\"https://hadley.shinyapps.io/ms-temperature\">https://hadley.shinyapps.io/ms-temperature</a>，你会发现它大部分时候可以正常工作，但你可能也会注意到它有时会触发多次更改。例如：</p>\n<ul>\n<li><p>将温度设为120华氏度，然后点击向下的箭头。</p>\n</li>\n<li><p>华氏度变为119，摄氏度更新为48。</p>\n</li>\n<li><p>48摄氏度转换为118华氏度，因此华氏度再次变为118。</p>\n</li>\n<li><p>幸运的是，118华氏度仍然是48摄氏度，所以更新在那里停止了。</p>\n</li>\n</ul>\n<p>这个问题没有解决办法，因为你在应用中有一个概念（温度），但有两个表达式（摄氏度和华氏度）。在这里我们很幸运，因为循环迅速收敛到一个同时满足两个约束的值。一般来说，除非你愿意非常仔细地分析你创建的底层动态系统的收敛性质，否则最好避免这种情况。</p>\n<h3 id=\"10-1-6-练习\"><a href=\"#10-1-6-练习\" class=\"headerlink\" title=\"10.1.6 练习\"></a>10.1.6 练习</h3><ol>\n<li><p>请在下面的用户界面中添加一个服务器函数，以更新<code>input$date</code>，这样你只能选择<code>input$year</code>中的日期。</p>\n <figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;year&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;year&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">2020</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  dateInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;date&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;date&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>请在下面的用户界面中添加一个服务器函数，根据<code>input$state</code>更新<code>input$county</code>的选择。作为一个额外的挑战，请也将路易斯安那州的标签从“County”改为“Parish”，阿拉斯加州的标签改为“Borough”。</p>\n <figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>openintro<span class=\"punctuation\">,</span> warn.conflicts <span class=\"operator\">=</span> <span class=\"literal\">FALSE</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; Loading required package: airports</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; Loading required package: cherryblossom</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; Loading required package: usdata</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; Registered S3 methods overwritten by &#x27;readr&#x27;:</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   method                    from </span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   as.data.frame.spec_tbl_df vroom</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   as_tibble.spec_tbl_df     vroom</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   format.col_spec           vroom</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   print.col_spec            vroom</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   print.collector           vroom</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   print.date_names          vroom</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   print.locale              vroom</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   str.col_spec              vroom</span></span><br><span class=\"line\">states <span class=\"operator\">&lt;-</span> unique<span class=\"punctuation\">(</span>county<span class=\"operator\">$</span>state<span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;state&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;State&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> states<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;county&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;County&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> <span class=\"literal\">NULL</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用服务器函数完善下面的用户界面，根据<code>input$continent</code>更新<code>input$country</code>的选择。使用<code>output$data</code>显示所有匹配的行。</p>\n <figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>gapminder<span class=\"punctuation\">)</span></span><br><span class=\"line\">continents <span class=\"operator\">&lt;-</span> unique<span class=\"punctuation\">(</span>gapminder<span class=\"operator\">$</span>continent<span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;continent&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Continent&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> continents<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;country&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Country&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> <span class=\"literal\">NULL</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;data&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>扩展之前的应用，以便您还可以选择选择所有大洲，从而查看所有国家。您需要将<code>“(All)”</code>添加到选择列表中，然后在过滤时特殊处理它。</p>\n</li>\n<li><p>在<a href=\"https://community.rstudio.com/t/29307\">https://community.rstudio.com/t/29307</a>?上描述的问题的核心是什么？</p>\n</li>\n</ol>\n<h2 id=\"10-2-动态可见性\"><a href=\"#10-2-动态可见性\" class=\"headerlink\" title=\"10.2 动态可见性\"></a>10.2 动态可见性</h2><p>复杂性的下一步是有选择地显示和隐藏用户界面中的部分。如果您了解一些JavaScript和CSS，那么可以使用更复杂的方法，但有一种有用的技术不需要任何额外的知识：使用选项卡集（如在6.3.1节中介绍的）隐藏可选的用户界面。这是一种巧妙的技巧，允许您根据需要显示和隐藏用户界面，而无需从头开始重新生成它（您将在下一节中学到）。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  sidebarLayout<span class=\"punctuation\">(</span></span><br><span class=\"line\">    sidebarPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;controller&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Show&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> paste0<span class=\"punctuation\">(</span><span class=\"string\">&quot;panel&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">1</span><span class=\"operator\">:</span><span class=\"number\">3</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    mainPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      tabsetPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">        id <span class=\"operator\">=</span> <span class=\"string\">&quot;switcher&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        type <span class=\"operator\">=</span> <span class=\"string\">&quot;hidden&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        tabPanelBody<span class=\"punctuation\">(</span><span class=\"string\">&quot;panel1&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Panel 1 content&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        tabPanelBody<span class=\"punctuation\">(</span><span class=\"string\">&quot;panel2&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Panel 2 content&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        tabPanelBody<span class=\"punctuation\">(</span><span class=\"string\">&quot;panel3&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Panel 3 content&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">      <span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>controller<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    updateTabsetPanel<span class=\"punctuation\">(</span>inputId <span class=\"operator\">=</span> <span class=\"string\">&quot;switcher&quot;</span><span class=\"punctuation\">,</span> selected <span class=\"operator\">=</span> input<span class=\"operator\">$</span>controller<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<tr>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/177d392d2358ae933be3c5ae9a78b2f076d8cce0/f34ae/demos/action-dynamic/dynamic-panels.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/177d392d2358ae933be3c5ae9a78b2f076d8cce0/f34ae/demos/action-dynamic/dynamic-panels.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/a4ab38457f2b2194dfd2a5e1792f1d38fff0b6dc/90b0c/demos/action-dynamic/dynamic-panels-panel2.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/a4ab38457f2b2194dfd2a5e1792f1d38fff0b6dc/90b0c/demos/action-dynamic/dynamic-panels-panel2.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/7dc90302d452a421cc68547265384f212c58db8f/0dc9c/demos/action-dynamic/dynamic-panels-panel3.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/7dc90302d452a421cc68547265384f212c58db8f/0dc9c/demos/action-dynamic/dynamic-panels-panel3.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n</tr>\n<tr><td colspan=\"3\">图10.5 选择panel1（左），然后选择panel2（中），最后选择panel3（右）。查看实时效果请访问 <a href=\"https://hadley.shinyapps.io/ms-dynamic-panels\">https://hadley.shinyapps.io/ms-dynamic-panels</a></td></tr>\n</table>\n\n<p>这里主要有两个想法：</p>\n<ul>\n<li><p>使用带有隐藏选项卡的选项卡集面板。</p>\n</li>\n<li><p>使用<a href=\"https://rdrr.io/pkg/shiny/man/updateTabsetPanel.html\">updateTabsetPanel()</a>从服务器切换选项卡。</p>\n</li>\n</ul>\n<p>这是一个简单的想法，但结合一点创意，它将赋予你相当大的能力。接下来的两节将举例说明如何在实践中使用它的两个小例子。</p>\n<h3 id=\"10-2-1-条件用户界面\"><a href=\"#10-2-1-条件用户界面\" class=\"headerlink\" title=\"10.2.1 条件用户界面\"></a>10.2.1 条件用户界面</h3><p>想象一下，你想要一个应用，允许用户模拟正态分布、均匀分布和指数分布。每种分布都有不同的参数，因此我们需要某种方法来显示不同分布的不同控件。在这里，我将为每个分布的唯一用户界面放在它自己的<a href=\"https://rdrr.io/pkg/shiny/man/tabPanel.html\">tabPanel()</a>中，然后将三个选项卡组织成一个<a href=\"https://rdrr.io/pkg/shiny/man/tabsetPanel.html\">tabsetPanel()</a>。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parameter_tabs <span class=\"operator\">&lt;-</span> tabsetPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">  id <span class=\"operator\">=</span> <span class=\"string\">&quot;params&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  type <span class=\"operator\">=</span> <span class=\"string\">&quot;hidden&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tabPanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;normal&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;mean&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;mean&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;sd&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;standard deviation&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tabPanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;uniform&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">    numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;min&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;min&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;max&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;max&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tabPanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;exponential&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;rate&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;rate&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>然后，我将把这部分嵌入到一个更完整的用户界面中，允许用户选择样本数量，并显示结果的直方图：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  sidebarLayout<span class=\"punctuation\">(</span></span><br><span class=\"line\">    sidebarPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;dist&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Distribution&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">        choices <span class=\"operator\">=</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;normal&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;uniform&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;exponential&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">      <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Number of samples&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">100</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      parameter_tabs<span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    mainPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      plotOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;hist&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>请注意，我已经仔细地将<code>input$dist</code>中的<code>choices</code>与选项卡面板的名称相匹配。这使得编写下面的<a href=\"https://rdrr.io/pkg/shiny/man/observeEvent.html\">observeEvent()</a>代码变得很容易，该代码会在分布变化时自动切换控件。该应用的其他部分使用了你已经熟悉的技术。最终结果如图10.6所示。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dist<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    updateTabsetPanel<span class=\"punctuation\">(</span>inputId <span class=\"operator\">=</span> <span class=\"string\">&quot;params&quot;</span><span class=\"punctuation\">,</span> selected <span class=\"operator\">=</span> input<span class=\"operator\">$</span>dist<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span> </span><br><span class=\"line\">  </span><br><span class=\"line\">  sample <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"built_in\">switch</span><span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dist<span class=\"punctuation\">,</span></span><br><span class=\"line\">      normal <span class=\"operator\">=</span> rnorm<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>n<span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>mean<span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>sd<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      uniform <span class=\"operator\">=</span> runif<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>n<span class=\"punctuation\">,</span> input<span class=\"operator\">$</span><span class=\"built_in\">min</span><span class=\"punctuation\">,</span> input<span class=\"operator\">$</span><span class=\"built_in\">max</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      exponential <span class=\"operator\">=</span> rexp<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>n<span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>rate<span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>hist <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span>hist<span class=\"punctuation\">(</span>sample<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> res <span class=\"operator\">=</span> <span class=\"number\">96</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<tr>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/cce8beeaa545088bdba647ce61f6cb67f1eee04e/48a70/demos/action-dynamic/dynamic-conditional-normal.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/cce8beeaa545088bdba647ce61f6cb67f1eee04e/48a70/demos/action-dynamic/dynamic-conditional-normal.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/d4e7bf3c6b1d72e2733aeaf06741ab542607e288/882f0/demos/action-dynamic/dynamic-conditional-uniform.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/d4e7bf3c6b1d72e2733aeaf06741ab542607e288/882f0/demos/action-dynamic/dynamic-conditional-uniform.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/a5699032e1e6b89fcd6d2c87bcf2d8b616b82e8c/c0cb8/demos/action-dynamic/dynamic-conditional-exponential.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/a5699032e1e6b89fcd6d2c87bcf2d8b616b82e8c/c0cb8/demos/action-dynamic/dynamic-conditional-exponential.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n</tr>\n<tr><td colspan=\"3\">图10.6 正态分布（左）、均匀分布（中）和指数分布（右）的结果。查看实时效果请访问 <a href=\"https://hadley.shinyapps.io/ms-dynamic-conditional\">https://hadley.shinyapps.io/ms-dynamic-conditional</a></td></tr>\n</table>\n\n<p>请注意，（例如）<code>input$mean</code>的值是否对用户可见是独立的。底层的HTML控件仍然存在；只是你看不到它。</p>\n<h3 id=\"10-2-2-向导界面\"><a href=\"#10-2-2-向导界面\" class=\"headerlink\" title=\"10.2.2 向导界面\"></a>10.2.2 向导界面</h3><p>你还可以使用这个想法来创建一个“wizard”，这是一种界面类型，通过将其分散到多个页面上，更容易收集大量信息。在这里，我们在每个“page”中嵌入动作按钮，使其易于向前和向后移动。结果如图10.7所示。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  tabsetPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">    id <span class=\"operator\">=</span> <span class=\"string\">&quot;wizard&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    type <span class=\"operator\">=</span> <span class=\"string\">&quot;hidden&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    tabPanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;page_1&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">      <span class=\"string\">&quot;Welcome!&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;page_12&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;next&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    tabPanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;page_2&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">      <span class=\"string\">&quot;Only one page to go&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;page_21&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;prev&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;page_23&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;next&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    tabPanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;page_3&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">      <span class=\"string\">&quot;You&#x27;re done!&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;page_32&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;prev&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  switch_page <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>i<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    updateTabsetPanel<span class=\"punctuation\">(</span>inputId <span class=\"operator\">=</span> <span class=\"string\">&quot;wizard&quot;</span><span class=\"punctuation\">,</span> selected <span class=\"operator\">=</span> paste0<span class=\"punctuation\">(</span><span class=\"string\">&quot;page_&quot;</span><span class=\"punctuation\">,</span> i<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>page_12<span class=\"punctuation\">,</span> switch_page<span class=\"punctuation\">(</span><span class=\"number\">2</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>page_21<span class=\"punctuation\">,</span> switch_page<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>page_23<span class=\"punctuation\">,</span> switch_page<span class=\"punctuation\">(</span><span class=\"number\">3</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>page_32<span class=\"punctuation\">,</span> switch_page<span class=\"punctuation\">(</span><span class=\"number\">2</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<tr>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/701f300df256124c9aa4cb5d9a6cb6245c7f70ce/e783b/demos/action-dynamic/wizard-1.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/701f300df256124c9aa4cb5d9a6cb6245c7f70ce/e783b/demos/action-dynamic/wizard-1.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/8b0644dfec78873a45545620af591b31323fa11c/c61f6/demos/action-dynamic/wizard-2.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/8b0644dfec78873a45545620af591b31323fa11c/c61f6/demos/action-dynamic/wizard-2.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/9089ca7b0a519d51ae51c4991b26234561a41e67/18197/demos/action-dynamic/wizard-3.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/9089ca7b0a519d51ae51c4991b26234561a41e67/18197/demos/action-dynamic/wizard-3.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n</tr>\n<tr><td colspan=\"3\">图10.7 向导界面将复杂的用户界面分割成多个页面。在这里，我们通过一个非常简单的示例来演示这个想法，点击“下一步”以进入下一页。查看实时效果请访问 <a href=\"https://hadley.shinyapps.io/ms-wizard\">https://hadley.shinyapps.io/ms-wizard</a></td></tr>\n</table>\n\n\n<p>请注意，使用<code>switch_page()</code>函数可以减少服务器代码中的重复量。我们将在第18章再次回到这个想法，然后在第<code>19.4.2</code>节中创建一个模块来自动化向导界面。</p>\n<h3 id=\"10-2-3-练习\"><a href=\"#10-2-3-练习\" class=\"headerlink\" title=\"10.2.3 练习\"></a>10.2.3 练习</h3><ol>\n<li><p>使用隐藏的选项卡集，仅当用户选中“advanced”复选框时才显示额外的控件。</p>\n</li>\n<li><p>创建一个应用，该应用绘制<code>ggplot(diamonds, aes(carat))</code>，但允许用户选择使用的geom：<a href=\"https://ggplot2.tidyverse.org/reference/geom_histogram.html\">geom_histogram()</a>、<a href=\"https://ggplot2.tidyverse.org/reference/geom_histogram.html\">geom_freqpoly()</a>或<a href=\"https://ggplot2.tidyverse.org/reference/geom_density.html\">geom_density()</a>。使用隐藏的选项卡集，允许用户根据geom选择不同的参数：<code>geom_histogram()</code>和<code>geom_freqpoly()</code>具有binwidth参数；<code>geom_density()</code>具有bw参数。</p>\n</li>\n<li><p>修改你在前一个练习中创建的应用，允许用户选择是否显示每个geom（即，而不是始终使用一个geom，他们可以选择0、1、2或3个）。确保你可以独立控制直方图和频率多边形的binwidth。</p>\n</li>\n</ol>\n<h2 id=\"10-3-使用代码创建用户界面\"><a href=\"#10-3-使用代码创建用户界面\" class=\"headerlink\" title=\"10.3 使用代码创建用户界面\"></a>10.3 使用代码创建用户界面</h2><p>有时，上面描述的技术无法提供您所需的动态性水平：更新函数只允许您更改现有的输入，而选项卡集仅在您具有固定且已知的可能组合集时才有效。有时，您需要根据其他输入创建不同类型的输入（或输出）或不同数量的输入（或输出）。这种最终技术使您能够这样做。</p>\n<p>值得注意的是，您一直使用代码创建用户界面，但到目前为止，您总是在应用启动之前这样做。这种技术使您能够在应用运行时创建和修改用户界面。这个解决方案有两个部分：</p>\n<ul>\n<li><p><a href=\"https://rdrr.io/pkg/shiny/man/htmlOutput.html\">uiOutput()</a> 在用户界面 (ui) 中插入一个占位符。这留下了一个“洞”，您的服务器代码稍后可以填充它。</p>\n</li>\n<li><p><a href=\"https://rdrr.io/pkg/shiny/man/renderUI.html\">renderUI()</a> 在 <code>server()</code> 中被调用，用于将占位符填充为动态生成的用户界面。</p>\n</li>\n</ul>\n<p>我们将通过一个简单的示例来了解这是如何工作的，然后深入探讨一些实际的应用。</p>\n<h3 id=\"10-3-1-入门\"><a href=\"#10-3-1-入门\" class=\"headerlink\" title=\"10.3.1 入门\"></a>10.3.1 入门</h3><p>让我们从一个简单的应用开始，该应用动态地创建输入控件，其类型和标签由另外两个输入控件控制。最终的应用如图<code>10.8</code>所示。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  textInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;label&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;label&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;type&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;type&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;slider&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;numeric&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  uiOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;numeric&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>numeric <span class=\"operator\">&lt;-</span> renderUI<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>type <span class=\"operator\">==</span> <span class=\"string\">&quot;slider&quot;</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;dynamic&quot;</span><span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>label<span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">10</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span> <span class=\"keyword\">else</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;dynamic&quot;</span><span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>label<span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">10</span><span class=\"punctuation\">)</span> </span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<tr>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/c7a0fbee966861954422cd6a1d7fd4a39185ec9c/28819/demos/action-dynamic/render-simple-onload.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/c7a0fbee966861954422cd6a1d7fd4a39185ec9c/28819/demos/action-dynamic/render-simple-onload.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/35b772f26ba5a178d1f693ce7de4b12c17a454f3/9cb14/demos/action-dynamic/render-simple-numeric.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/35b772f26ba5a178d1f693ce7de4b12c17a454f3/9cb14/demos/action-dynamic/render-simple-numeric.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/d8a85a47b59618a13f336b7d9d0d7c705d2ef05e/9c957/demos/action-dynamic/render-simple-label.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/d8a85a47b59618a13f336b7d9d0d7c705d2ef05e/9c957/demos/action-dynamic/render-simple-label.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n</tr>\n<tr><td colspan=\"3\">图10.8 应用加载时（左），然后将类型更改为数值（中），再将标签更改为“我的标签”。查看实时效果请访问 <a href=\"https://hadley.shinyapps.io/ms-render-simple\">https://hadley.shinyapps.io/ms-render-simple</a></td></tr>\n</table>\n\n<p>如果你自己运行这段代码，你会发现应用在加载后需要一段时间才能显示。这是因为它是响应式的：应用必须先加载，触发一个响应事件，然后调用服务器函数，生成要插入页面的HTML。这是<a href=\"https://rdrr.io/pkg/shiny/man/renderUI.html\">renderUI()</a>的一个缺点；过多地依赖它可能会导致用户界面出现延迟。为了获得良好的性能，请尽量使用本章前面描述的技术，保持用户界面的固定部分。</p>\n<p>这种方法还有一个问题：当你更改控件时，会丢失当前选定的值。在使用代码创建用户界面时，保留现有状态是一大挑战。这就是为什么如果适用，选择性显示和隐藏用户界面是更好的方法——因为你没有销毁和重新创建控件，所以不需要做任何事情来保留值。然而，在许多情况下，我们可以通过将新输入的值设置为现有控件的当前值来解决这个问题：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>numeric <span class=\"operator\">&lt;-</span> renderUI<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    value <span class=\"operator\">&lt;-</span> isolate<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dynamic<span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>type <span class=\"operator\">==</span> <span class=\"string\">&quot;slider&quot;</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;dynamic&quot;</span><span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>label<span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> value<span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">10</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span> <span class=\"keyword\">else</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;dynamic&quot;</span><span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>label<span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> value<span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">10</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>使用 <a href=\"https://rdrr.io/pkg/shiny/man/isolate.html\">isolate()</a> 非常重要。我们将在 <code>15.4.1</code> 节中详细讨论它的作用，但在这里，它确保我们不会创建一个响应式依赖，导致每次 <code>input$dynamic</code> 发生变化时（每当用户修改值时都会发生）都重新运行此代码。我们只希望在 <code>input$type</code> 或 <code>input$label</code> 发生变化时更改它。</p>\n<h3 id=\"10-3-2-多个控件\"><a href=\"#10-3-2-多个控件\" class=\"headerlink\" title=\"10.3.2 多个控件\"></a>10.3.2 多个控件</h3><p>当你需要生成任意数量或类型的控件时，动态用户界面（UI）最有用。这意味着你将使用代码生成用户界面，我建议使用函数式编程来完成此类任务。在这里，我将使用 <a href=\"https://purrr.tidyverse.org/reference/map.html\">purrr::map()</a> 和 <a href=\"https://purrr.tidyverse.org/reference/reduce.html\">purrr::reduce()</a>，但你也可以使用基础的 <a href=\"https://rdrr.io/r/base/lapply.html\">lapply()</a> 和 <a href=\"https://rdrr.io/r/base/funprog.html\">Reduce()</a> 函数来实现同样的效果。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>purrr<span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>如果你不熟悉函数式编程中的 <a href=\"https://purrr.tidyverse.org/reference/map.html\">map()</a> 和 <code>reduce()</code>，你可能希望在继续之前先阅读有关<a href=\"https://adv-r.hadley.nz/functionals.html\">Functional programming</a>的内容。我们也将在第 <code>18</code> 章中再次讨论这个想法。这些想法相当复杂，所以如果你在第一次阅读时没有理解，请不要担心。</p>\n<p>为了具体说明，想象一下你想要用户能够提供自己的颜色调色板。他们首先会指定他们想要的颜色的数量，然后为每个颜色提供一个值。用户界面相当简单：我们有一个 <a href=\"https://rdrr.io/pkg/shiny/man/numericInput.html\">numericInput()</a> 来控制输入的数量，一个 <a href=\"https://rdrr.io/pkg/shiny/man/htmlOutput.html\">uiOutput()</a> 用于放置生成的文本框，以及一个 <a href=\"https://rdrr.io/pkg/shiny/man/textOutput.html\">textOutput()</a> 来证明我们已经正确地将所有内容连接在一起。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Number of colours&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">5</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  uiOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;col&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;palette&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>服务器函数很短，但包含了一些重要的想法：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  col_names <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span>paste0<span class=\"punctuation\">(</span><span class=\"string\">&quot;col&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">seq_len</span><span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>n<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>col <span class=\"operator\">&lt;-</span> renderUI<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    map<span class=\"punctuation\">(</span>col_names<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> <span class=\"operator\">~</span> textInput<span class=\"punctuation\">(</span>.x<span class=\"punctuation\">,</span> <span class=\"literal\">NULL</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>palette <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    map_chr<span class=\"punctuation\">(</span>col_names<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> <span class=\"operator\">~</span> input<span class=\"punctuation\">[[</span>.x<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span> <span class=\"operator\">%||%</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>我使用了一个响应式对象 <code>col_names()</code> 来存储即将生成的每个颜色输入的名称。</p>\n</li>\n<li><p>然后，我使用 <code>map()</code> 创建一个 <code>textInput()</code> 列表，每个列表项对应 <code>col_names()</code> 中的一个名称。<code>renderUI()</code> 随后将这个 HTML 组件列表添加到用户界面。</p>\n</li>\n<li><p>我需要使用一个新技巧来访问输入值。到目前为止，我们总是使用 <code>$</code> 来访问输入的组件，例如 <code>input$col1</code>。但在这里，我们的输入名称存储在一个字符向量中，比如 <code>var &lt;- &quot;col1&quot;</code>。在这种情况下，<code>$</code> 不再适用，因此我们需要切换到 <code>[[</code>，即 <code>input[[var]]</code>。</p>\n</li>\n<li><p>我使用 <a href=\"https://purrr.tidyverse.org/reference/map.html\">map_chr()</a> 将所有值收集到一个字符向量中，并在 <code>output$palette</code> 中显示。不幸的是，在浏览器渲染新输入之前，有一个短暂的时间段，其值会是 <code>NULL</code>。这会导致 <code>map_chr()</code> 报错，我们使用方便的 <code>%||%</code> 函数来解决这个问题：当左侧为 <code>NULL</code> 时，它返回右侧的值。</p>\n</li>\n</ul>\n<p>你可以在图 <code>10.9</code> 中看到结果。</p>\n<table>\n<tr>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/5301c856f06d8eba2b98b4a7c4d3fedb574d7f11/76c4e/demos/action-dynamic/render-palette-onload.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/5301c856f06d8eba2b98b4a7c4d3fedb574d7f11/76c4e/demos/action-dynamic/render-palette-onload.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/6a2df96ad06c05e809774c0db7d7e3611ec9eb53/d31b7/demos/action-dynamic/render-palette-change-n.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/6a2df96ad06c05e809774c0db7d7e3611ec9eb53/d31b7/demos/action-dynamic/render-palette-change-n.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/cad6373c73a55bf6e79fc166e72dadf394b528e1/b0691/demos/action-dynamic/render-palette-set-cols.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/cad6373c73a55bf6e79fc166e72dadf394b528e1/b0691/demos/action-dynamic/render-palette-set-cols.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n</tr>\n<tr><td colspan=\"3\">图10.9 应用程序加载时（左），将n设置为3后（中），然后输入一些颜色（右）。请在<a href=\"https://hadley.shinyapps.io/ms-render-palette\">https://hadley.shinyapps.io/ms-render-palette</a>查看实时效果</td></tr>\n</table>\n\n<p>如果你运行这个应用程序，你会发现一个非常恼人的行为：每当你改变颜色的数量时，所有输入的数据都会消失。我们可以使用与之前相同的技术来解决这个问题：将<code>value</code>设置为（孤立的）当前值。我还会稍微调整外观，使其看起来更漂亮一些，包括在图中显示所选颜色。示例截图如图<code>10.10</code>所示。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  sidebarLayout<span class=\"punctuation\">(</span></span><br><span class=\"line\">    sidebarPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Number of colours&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">5</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      uiOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;col&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    mainPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      plotOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;plot&quot;</span><span class=\"punctuation\">)</span>  </span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  col_names <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span>paste0<span class=\"punctuation\">(</span><span class=\"string\">&quot;col&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">seq_len</span><span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>n<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>col <span class=\"operator\">&lt;-</span> renderUI<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    map<span class=\"punctuation\">(</span>col_names<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> <span class=\"operator\">~</span> textInput<span class=\"punctuation\">(</span>.x<span class=\"punctuation\">,</span> <span class=\"literal\">NULL</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> isolate<span class=\"punctuation\">(</span>input<span class=\"punctuation\">[[</span>.x<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>plot <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    cols <span class=\"operator\">&lt;-</span> map_chr<span class=\"punctuation\">(</span>col_names<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> <span class=\"operator\">~</span> input<span class=\"punctuation\">[[</span>.x<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span> <span class=\"operator\">%||%</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"comment\"># convert empty inputs to transparent</span></span><br><span class=\"line\">    cols<span class=\"punctuation\">[</span>cols <span class=\"operator\">==</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">]</span> <span class=\"operator\">&lt;-</span> <span class=\"literal\">NA</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    barplot<span class=\"punctuation\">(</span></span><br><span class=\"line\">      <span class=\"built_in\">rep</span><span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">,</span> <span class=\"built_in\">length</span><span class=\"punctuation\">(</span>cols<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">      col <span class=\"operator\">=</span> cols<span class=\"punctuation\">,</span></span><br><span class=\"line\">      space <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">      axes <span class=\"operator\">=</span> <span class=\"literal\">FALSE</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> res <span class=\"operator\">=</span> <span class=\"number\">96</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<tr>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/cc1d6ffde1b8ac88f72e2b897ed187f55cecedf1/89026/demos/action-dynamic/render-palette-full-rainbow.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/cc1d6ffde1b8ac88f72e2b897ed187f55cecedf1/89026/demos/action-dynamic/render-palette-full-rainbow.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n<td>\n<img src=\"https://d33wubrfki0l68.cloudfront.net/b1560598089d41fb8a7c71323c44efd7595ce615/b8927/demos/action-dynamic/render-palette-full-change-n.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/b1560598089d41fb8a7c71323c44efd7595ce615/b8927/demos/action-dynamic/render-palette-full-change-n.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\">\n</td>\n</tr>\n<tr><td colspan=\"2\">图10.10 填写彩虹的颜色（左），然后将颜色数量减少到3（右）；请注意，现有颜色被保留。实时效果请访问<a href=\"https://hadley.shinyapps.io/ms-render-palette-full\">https://hadley.shinyapps.io/ms-render-palette-full</a>查看实时效果</td></tr>\n</table>\n\n<h3 id=\"10-3-3-动态过滤\"><a href=\"#10-3-3-动态过滤\" class=\"headerlink\" title=\"10.3.3 动态过滤\"></a>10.3.3 动态过滤</h3><p>为了结束本章，我将创建一个应用程序，允许你动态过滤任何数据框。每个数值变量都会得到一个范围滑块，每个因子变量都会得到一个多选控件，所以（例如）如果一个数据框有三个数值变量和两个因子，应用程序将有三个滑块和两个选择框。</p>\n<p>我将从一个为单个变量创建用户界面的函数开始。对于数值输入，它将返回一个范围滑块；对于因子输入，它将返回一个多选控件；对于其他所有类型，它将返回NULL（无）。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make_ui <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>x<span class=\"punctuation\">,</span> var<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> <span class=\"punctuation\">(</span><span class=\"built_in\">is.numeric</span><span class=\"punctuation\">(</span>x<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    rng <span class=\"operator\">&lt;-</span> <span class=\"built_in\">range</span><span class=\"punctuation\">(</span>x<span class=\"punctuation\">,</span> na.rm <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    sliderInput<span class=\"punctuation\">(</span>var<span class=\"punctuation\">,</span> var<span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> rng<span class=\"punctuation\">[</span><span class=\"number\">1</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> rng<span class=\"punctuation\">[</span><span class=\"number\">2</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> rng<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span> <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> <span class=\"punctuation\">(</span>is.factor<span class=\"punctuation\">(</span>x<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    levs <span class=\"operator\">&lt;-</span> levels<span class=\"punctuation\">(</span>x<span class=\"punctuation\">)</span></span><br><span class=\"line\">    selectInput<span class=\"punctuation\">(</span>var<span class=\"punctuation\">,</span> var<span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> levs<span class=\"punctuation\">,</span> selected <span class=\"operator\">=</span> levs<span class=\"punctuation\">,</span> multiple <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span> <span class=\"keyword\">else</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"comment\"># Not supported</span></span><br><span class=\"line\">    <span class=\"literal\">NULL</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>接着，我将编写此函数的服务器端等效项：它接收输入控件的变量和值，并返回一个逻辑向量，说明是否包含每个观测值。使用逻辑向量可以轻松组合来自多个列的结果。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filter_var <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>x<span class=\"punctuation\">,</span> val<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> <span class=\"punctuation\">(</span><span class=\"built_in\">is.numeric</span><span class=\"punctuation\">(</span>x<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"operator\">!</span><span class=\"built_in\">is.na</span><span class=\"punctuation\">(</span>x<span class=\"punctuation\">)</span> <span class=\"operator\">&amp;</span> x <span class=\"operator\">&gt;=</span> val<span class=\"punctuation\">[</span><span class=\"number\">1</span><span class=\"punctuation\">]</span> <span class=\"operator\">&amp;</span> x <span class=\"operator\">&lt;=</span> val<span class=\"punctuation\">[</span><span class=\"number\">2</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span> <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> <span class=\"punctuation\">(</span>is.factor<span class=\"punctuation\">(</span>x<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    x <span class=\"operator\">%in%</span> val</span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span> <span class=\"keyword\">else</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"comment\"># No control, so don&#x27;t filter</span></span><br><span class=\"line\">    <span class=\"literal\">TRUE</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后，我可以手动使用这些函数为 <code>iris</code> 数据集生成一个简单的过滤用户界面：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  sidebarLayout<span class=\"punctuation\">(</span></span><br><span class=\"line\">    sidebarPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      make_ui<span class=\"punctuation\">(</span>iris<span class=\"operator\">$</span>Sepal.Length<span class=\"punctuation\">,</span> <span class=\"string\">&quot;Sepal.Length&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      make_ui<span class=\"punctuation\">(</span>iris<span class=\"operator\">$</span>Sepal.Width<span class=\"punctuation\">,</span> <span class=\"string\">&quot;Sepal.Width&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      make_ui<span class=\"punctuation\">(</span>iris<span class=\"operator\">$</span>Species<span class=\"punctuation\">,</span> <span class=\"string\">&quot;Species&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    mainPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;data&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  selected <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    filter_var<span class=\"punctuation\">(</span>iris<span class=\"operator\">$</span>Sepal.Length<span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>Sepal.Length<span class=\"punctuation\">)</span> <span class=\"operator\">&amp;</span></span><br><span class=\"line\">      filter_var<span class=\"punctuation\">(</span>iris<span class=\"operator\">$</span>Sepal.Width<span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>Sepal.Width<span class=\"punctuation\">)</span> <span class=\"operator\">&amp;</span></span><br><span class=\"line\">      filter_var<span class=\"punctuation\">(</span>iris<span class=\"operator\">$</span>Species<span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>Species<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>data <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span>head<span class=\"punctuation\">(</span>iris<span class=\"punctuation\">[</span>selected<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"number\">12</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/c346538e80dd7b34a8142bdb05a537b44d581663/edd79/demos/action-dynamic/render-filter-1.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/c346538e80dd7b34a8142bdb05a537b44d581663/edd79/demos/action-dynamic/render-filter-1.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图10.11 iris数据集的简单过滤界面\"></p>\n<p>你可能注意到了，我已经厌倦了复制粘贴，所以这个应用程序只适用于三列。通过使用一些函数式编程，我可以让它适用于所有列：</p>\n<ul>\n<li><p>在<code>ui</code>中，使用<a href=\"https://purrr.tidyverse.org/reference/map.html\">map()</a>为每个变量生成一个控件。</p>\n</li>\n<li><p>在<code>server()</code>，我使用<code>map()</code>为每个变量生成选择向量。然后，我使用<code>reduce()</code>将每个变量的逻辑向量组合成一个单一的逻辑向量，通过<code>&amp;</code>将每个向量连接在一起。</p>\n</li>\n</ul>\n<p>再次强调，如果你不完全理解这里发生了什么，请不要太过担心。主要的收获是，一旦你掌握了函数式编程，你就可以编写非常简洁的代码，从而生成复杂且动态的应用程序。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  sidebarLayout<span class=\"punctuation\">(</span></span><br><span class=\"line\">    sidebarPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      map<span class=\"punctuation\">(</span><span class=\"built_in\">names</span><span class=\"punctuation\">(</span>iris<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> <span class=\"operator\">~</span> make_ui<span class=\"punctuation\">(</span>iris<span class=\"punctuation\">[[</span>.x<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> .x<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    mainPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;data&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  selected <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    each_var <span class=\"operator\">&lt;-</span> map<span class=\"punctuation\">(</span><span class=\"built_in\">names</span><span class=\"punctuation\">(</span>iris<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> <span class=\"operator\">~</span> filter_var<span class=\"punctuation\">(</span>iris<span class=\"punctuation\">[[</span>.x<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> input<span class=\"punctuation\">[[</span>.x<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    reduce<span class=\"punctuation\">(</span>each_var<span class=\"punctuation\">,</span> <span class=\"operator\">~</span> .x <span class=\"operator\">&amp;</span> .y<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>data <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span>head<span class=\"punctuation\">(</span>iris<span class=\"punctuation\">[</span>selected<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"number\">12</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/b5f7aa079010dea111f8cb50ff9ce875cef92b4a/4b175/demos/action-dynamic/render-filter-2.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/b5f7aa079010dea111f8cb50ff9ce875cef92b4a/4b175/demos/action-dynamic/render-filter-2.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图10.12 使用函数式编程为iris数据集构建过滤应用程序\"></p>\n<p>从此处开始，对其进行简单泛化，使其可以与任何数据框配合使用。在此，我将使用datasets包中的数据框进行说明，但你可以很容易地想象如何将其扩展到用户上传的数据。结果如图<code>10.13</code>所示。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dfs <span class=\"operator\">&lt;-</span> keep<span class=\"punctuation\">(</span>ls<span class=\"punctuation\">(</span><span class=\"string\">&quot;package:datasets&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> <span class=\"operator\">~</span> is.data.frame<span class=\"punctuation\">(</span>get<span class=\"punctuation\">(</span>.x<span class=\"punctuation\">,</span> <span class=\"string\">&quot;package:datasets&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  sidebarLayout<span class=\"punctuation\">(</span></span><br><span class=\"line\">    sidebarPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;dataset&quot;</span><span class=\"punctuation\">,</span> label <span class=\"operator\">=</span> <span class=\"string\">&quot;Dataset&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> dfs<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      uiOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;filter&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    mainPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;data&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  data <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    get<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dataset<span class=\"punctuation\">,</span> <span class=\"string\">&quot;package:datasets&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  vars <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"built_in\">names</span><span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>filter <span class=\"operator\">&lt;-</span> renderUI<span class=\"punctuation\">(</span></span><br><span class=\"line\">    map<span class=\"punctuation\">(</span>vars<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> <span class=\"operator\">~</span> make_ui<span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">[[</span>.x<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> .x<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  selected <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    each_var <span class=\"operator\">&lt;-</span> map<span class=\"punctuation\">(</span>vars<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> <span class=\"operator\">~</span> filter_var<span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">[[</span>.x<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> input<span class=\"punctuation\">[[</span>.x<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    reduce<span class=\"punctuation\">(</span>each_var<span class=\"punctuation\">,</span> `&amp;`<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>data <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span>head<span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">[</span>selected<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"number\">12</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/539c4bcb59b7d52133c346ec6ca4a217e122e4df/9214d/demos/action-dynamic/filtering-final.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/539c4bcb59b7d52133c346ec6ca4a217e122e4df/9214d/demos/action-dynamic/filtering-final.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图10.13 根据所选数据集的字段自动生成的动态用户界面。请访问https://hadley.shinyapps.io/ms-filtering-final查看实时效果\"></p>\n<h3 id=\"10-3-4-对话框\"><a href=\"#10-3-4-对话框\" class=\"headerlink\" title=\"10.3.4 对话框\"></a>10.3.4 对话框</h3><p>在结束本章之前，我想提一下一个相关的技术：对话框。在<code>8.4.1</code>节中，你已经看到了对话框，其内容是固定的文本字符串。但由于<a href=\"https://rdrr.io/pkg/shiny/man/modalDialog.html\">modalDialog()</a>是在服务器函数中调用的，因此你可以像<a href=\"https://rdrr.io/pkg/shiny/man/renderUI.html\">renderUI()</a>一样动态地生成内容。如果你想在继续常规应用程序流程之前强制用户做出某些决定，这是一个很有用的技术。</p>\n<h3 id=\"10-3-5-练习\"><a href=\"#10-3-5-练习\" class=\"headerlink\" title=\"10.3.5 练习\"></a>10.3.5 练习</h3><ol>\n<li><p>根据本节中的初始示例，创建一个非常简单的应用程序：</p>\n <figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;type&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;type&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;slider&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;numeric&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  uiOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;numeric&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>numeric <span class=\"operator\">&lt;-</span> renderUI<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>type <span class=\"operator\">==</span> <span class=\"string\">&quot;slider&quot;</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">100</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span> <span class=\"keyword\">else</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">100</span><span class=\"punctuation\">)</span>  </span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p> 你如何使用动态可见性来实现它？如果你实现了动态可见性，当你更改控件时，如何保持值的同步？</p>\n</li>\n<li><p>解释这个应用程序是如何工作的。为什么当你第二次点击“输入密码”按钮时，密码会消失？</p>\n <figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Enter password&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;text&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>go<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    showModal<span class=\"punctuation\">(</span>modalDialog<span class=\"punctuation\">(</span></span><br><span class=\"line\">      passwordInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;password&quot;</span><span class=\"punctuation\">,</span> <span class=\"literal\">NULL</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      title <span class=\"operator\">=</span> <span class=\"string\">&quot;Please enter your password&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  output<span class=\"operator\">$</span>text <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"punctuation\">(</span><span class=\"operator\">!</span>isTruthy<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>password<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"string\">&quot;No password&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span> <span class=\"keyword\">else</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"string\">&quot;Password entered&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在·10.3.1·节的应用程序中，如果你从<code>value &lt;- isolate(input$dynamic)</code>中去掉<a href=\"https://rdrr.io/pkg/shiny/man/isolate.html\">isolate()</a>会发生什么？</p>\n</li>\n<li><p>为<code>make_ui()</code>和<code>filter_var()</code>添加对日期和日期时间列的支持。</p>\n</li>\n<li><p>（高级）如果你了解S3面向对象编程（<a href=\"http://adv-r.hadley.nz/S3.html\">S3 OOP</a>）系统，请考虑如何使用通用函数替换<code>make_ui()</code>和<code>filter_var()</code>中的if块。</p>\n</li>\n</ol>\n<h2 id=\"10-4-总结\"><a href=\"#10-4-总结\" class=\"headerlink\" title=\"10.4 总结\"></a>10.4 总结</h2><p>在阅读本章之前，你只能在服务器函数运行之前静态地创建用户界面。现在你已经学会了如何根据用户操作修改用户界面并完全重新创建它。动态用户界面将极大地增加你的应用程序的复杂性，所以如果你发现自己很难调试正在发生的事情，不要感到惊讶。始终记住使用最简单的技术来解决你的问题，并回到<code>5.2</code>节中的调试建议。</p>\n<p>下一章将转向讨论书签功能，使应用程序能够与他人共享当前状态。</p>\n<h1 id=\"加关注\"><a href=\"#加关注\" class=\"headerlink\" title=\"加关注\"></a>加关注</h1><p>关注公众号“生信之巅”。</p>\n<table align=\"center\"><tr>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅微信公众号\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-right: 0px;margin-bottom: 5px;align: center;\"></td>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅小程序码\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-left: 0px;margin-bottom: 5px;align: center\"></td>\n</tr></table>\n\n\n<p><font color=\"#FF0000\"><ruby><b>敬告</b>：使用文中脚本请引用本文网址，请尊重本人的劳动成果，谢谢！<rt><b>Notice</b>: When you use the scripts in this article, please cite the link of this webpage. Thank you!</rt></ruby></font></p>\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"编程","path":"api/tags/编程.json"},{"name":"Shiny入门系列","path":"api/tags/Shiny入门系列.json"}]},{"title":"Shiny从入门到入定——13-Why reactivity?","slug":"Shiny从入门到入定——13-Why-reactivity","date":"2024-04-27T13:37:04.000Z","updated":"2024-04-27T13:38:58.624Z","comments":true,"path":"api/articles/Shiny从入门到入定——13-Why-reactivity.json","excerpt":null,"keywords":null,"cover":"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg","content":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>现在你已经掌握了一系列有用的技巧，这些技巧赋予了你创建各种有用应用程序的能力。接下来，我们将把注意力转向Shiny魔力背后的反应性理论：</p>\n<ul>\n<li><p>在第<code>13</code>章中，你将了解为什么需要反应性编程模型，以及关于R之外的反应性编程历史的一些知识。</p>\n</li>\n<li><p>在第<code>14</code>章中，你将学习反应图的全部细节，它将决定反应组件何时更新。</p>\n</li>\n<li><p>在第<code>15</code>章中，你将了解底层的构建块，尤其是观察者和定时失效。</p>\n</li>\n<li><p>在第<code>16</code>章中，你将学习如何使用<a href=\"https://rdrr.io/pkg/shiny/man/reactiveVal.html\">reactiveVal()</a>和<a href=\"https://rdrr.io/pkg/shiny/man/observe.html\">observe()</a>来突破反应图的限制。</p>\n</li>\n</ul>\n<p>当然，对于日常开发Shiny应用程序，你并不需要理解所有这些细节。但是，提高你的理解将有助于你从一开始就编写正确的应用程序，当某些行为不符合预期时，你可以更快地缩小问题的范围。</p>\n<h1 id=\"13-为什么需要反应性？\"><a href=\"#13-为什么需要反应性？\" class=\"headerlink\" title=\"13 为什么需要反应性？\"></a>13 为什么需要反应性？</h1><h2 id=\"13-1-引言\"><a href=\"#13-1-引言\" class=\"headerlink\" title=\"13.1 引言\"></a>13.1 引言</h2><p>Shiny给人的初步印象通常是“神奇”。当你刚开始使用时，这种神奇感非常棒，因为它能让你迅速构建出简单的应用程序。但是，软件中的神奇通常会导致幻灭：如果没有一个稳固的思维模型，当你尝试超出其演示和示例的边界时，要预测软件将如何表现就极其困难。而当事情不按你预期的方式发展时，调试几乎是不可能的。</p>\n<p>幸运的是，Shiny的“神奇”是有益的。正如汤姆·戴尔（Tom Dale）谈到他的Ember.js JavaScript框架时所说：“我们做了很多神奇的事情，但这是有益的神奇，这意味着它可以分解为合理的原始元素。”这是Shiny团队希望Shiny所具备的品质，尤其是在反应性编程方面。当你剥去反应性编程的层层外衣时，你不会发现一堆启发式方法、特殊情况和黑客攻击；相反，你会发现一个巧妙但最终相当直接的机制。一旦你形成了对反应性的准确思维模型，你就会明白Shiny并没有耍花招：神奇来自于以一致的方式组合简单概念。</p>\n<p>在本章中，我们将尝试在没有反应性编程的情况下进行开发，以此说明反应性编程的必要性，然后简要介绍与Shiny相关的反应性编程的历史。</p>\n<h2 id=\"13-2-为什么我们需要反应性编程？\"><a href=\"#13-2-为什么我们需要反应性编程？\" class=\"headerlink\" title=\"13.2 为什么我们需要反应性编程？\"></a>13.2 为什么我们需要反应性编程？</h2><p>反应性编程是一种编程风格，它关注随时间变化的值，以及依赖于这些值的计算和操作。反应性对于Shiny应用程序至关重要，因为它们具有交互性：用户改变输入控件（拖动滑块、在文本框中输入内容、勾选复选框等），这会触发服务器上的逻辑运行（读取CSV文件、筛选数据、拟合模型等），最终导致输出更新（图表重绘、表格更新等）。这与大多数R代码有很大的不同，后者通常处理相对静态的数据。</p>\n<p>为了让Shiny应用程序发挥最大效用，我们需要确保反应式表达式和输出仅在它们的输入发生变化时更新。我们希望输出与输入保持同步，同时确保不会进行比必要更多的工作。为了了解反应性为何如此有用，我们将尝试解决一个不使用反应性的简单问题。</p>\n<h3 id=\"13-2-1-为什么不能使用变量？\"><a href=\"#13-2-1-为什么不能使用变量？\" class=\"headerlink\" title=\"13.2.1 为什么不能使用变量？\"></a>13.2.1 为什么不能使用变量？</h3><p>从某种意义上说，你已经知道如何处理“随时间变化的值”：它们被称为“变量”。在R中，变量代表值，它们可以随时间变化，但它们并不是为帮助你处理变化而设计的。以下是一个简单的将温度从摄氏度转换为华氏度的例子：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp_c <span class=\"operator\">&lt;-</span> 10</span><br><span class=\"line\">temp_f <span class=\"operator\">&lt;-</span> <span class=\"punctuation\">(</span>temp_c <span class=\"operator\">*</span> <span class=\"number\">9</span> <span class=\"operator\">/</span> <span class=\"number\">5</span><span class=\"punctuation\">)</span> <span class=\"operator\">+</span> <span class=\"number\">32</span></span><br><span class=\"line\">temp_f</span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] 50</span></span><br></pre></td></tr></table></figure>\n\n<p>到目前为止还不错：<code>temp_c</code>变量有值10，<code>temp_f</code>变量有值50，我们可以改变<code>temp_c</code>的值：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp_c <span class=\"operator\">&lt;-</span> 30</span><br></pre></td></tr></table></figure>\n\n<p>但是改变<code>temp_c</code>的值并不会影响<code>temp_f</code>的值：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp_f</span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] 50</span></span><br></pre></td></tr></table></figure>\n\n<p>变量可以随时间变化，但它们不会自动变化。</p>\n<h3 id=\"13-2-2-使用函数怎么样？\"><a href=\"#13-2-2-使用函数怎么样？\" class=\"headerlink\" title=\"13.2.2 使用函数怎么样？\"></a>13.2.2 使用函数怎么样？</h3><p>你也可以通过函数来解决这个问题：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp_c <span class=\"operator\">&lt;-</span> 10</span><br><span class=\"line\">temp_f <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  message<span class=\"punctuation\">(</span><span class=\"string\">&quot;Converting&quot;</span><span class=\"punctuation\">)</span> </span><br><span class=\"line\">  <span class=\"punctuation\">(</span>temp_c <span class=\"operator\">*</span> <span class=\"number\">9</span> <span class=\"operator\">/</span> <span class=\"number\">5</span><span class=\"punctuation\">)</span> <span class=\"operator\">+</span> <span class=\"number\">32</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">temp_f<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; Converting</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] 50</span></span><br></pre></td></tr></table></figure>\n\n<p>（这是一个有点奇怪的函数，因为它没有参数，而是从其封闭环境40中访问<code>temp_c</code>，但它是一个完全有效的R代码。）</p>\n<p>这解决了反应性试图解决的第一个问题：每当你访问<code>temp_f()</code>时，你都会得到最新的计算结果：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp_c <span class=\"operator\">&lt;-</span> <span class=\"operator\">-</span><span class=\"number\">3</span></span><br><span class=\"line\">temp_f<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> </span><br><span class=\"line\"><span class=\"comment\">#&gt; Converting</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] 26.6</span></span><br></pre></td></tr></table></figure>\n\n<p>然而，它并没有减少计算量。每次你调用<code>temp_f()</code>时，它都会重新计算，即使<code>temp_c</code>没有改变：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp_f<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> </span><br><span class=\"line\"><span class=\"comment\">#&gt; Converting</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] 26.6</span></span><br></pre></td></tr></table></figure>\n\n<p>在这个简单的例子中，计算成本不高，所以重复计算没什么大不了的，但这仍然是多余的：如果输入没有改变，我们为什么要重新计算输出呢？</p>\n<h3 id=\"13-2-3-事件驱动编程\"><a href=\"#13-2-3-事件驱动编程\" class=\"headerlink\" title=\"13.2.3 事件驱动编程\"></a>13.2.3 事件驱动编程</h3><p>由于变量和函数都不适用，我们需要创建一些新的东西。在过去的几十年里，我们可能会直接跳到事件驱动编程。事件驱动编程是一个吸引人的简单范式：你注册回调函数，这些函数会在事件发生时执行。</p>\n<p>我们可以使用R6实现一个非常简单的事件驱动工具包，如下例所示。在这里，我们定义了一个<code>DynamicValue</code>，它有三个重要的方法：<a href=\"https://rdrr.io/r/base/get.html\">get()</a>和<code>set()</code>用于访问和更改基础值，<code>onUpdate()</code>用于注册在值被修改时要运行的代码。如果你不熟悉R6，不用担心细节，而是关注下面的例子。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DynamicValue <span class=\"operator\">&lt;-</span> R6<span class=\"operator\">::</span>R6Class<span class=\"punctuation\">(</span><span class=\"string\">&quot;DynamicValue&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">list</span><span class=\"punctuation\">(</span></span><br><span class=\"line\">  value <span class=\"operator\">=</span> <span class=\"literal\">NULL</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  on_update <span class=\"operator\">=</span> <span class=\"literal\">NULL</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">  get <span class=\"operator\">=</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> self<span class=\"operator\">$</span>value<span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">  set <span class=\"operator\">=</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>value<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    self<span class=\"operator\">$</span>value <span class=\"operator\">&lt;-</span> value</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"punctuation\">(</span><span class=\"operator\">!</span><span class=\"built_in\">is.null</span><span class=\"punctuation\">(</span>self<span class=\"operator\">$</span>on_update<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> </span><br><span class=\"line\">      self<span class=\"operator\">$</span>on_update<span class=\"punctuation\">(</span>value<span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"built_in\">invisible</span><span class=\"punctuation\">(</span>self<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  onUpdate <span class=\"operator\">=</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>on_update<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    self<span class=\"operator\">$</span>on_update <span class=\"operator\">&lt;-</span> on_update</span><br><span class=\"line\">    <span class=\"built_in\">invisible</span><span class=\"punctuation\">(</span>self<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>因此，如果Shiny在五年前就被发明出来，它可能看起来会更像这样，其中<code>temp_c</code>使用<code>&lt;&lt;-</code>来在需要时更新<code>temp_f</code>。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp_c <span class=\"operator\">&lt;-</span> DynamicValue<span class=\"operator\">$</span>new<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">temp_c<span class=\"operator\">$</span>onUpdate<span class=\"punctuation\">(</span><span class=\"keyword\">function</span><span class=\"punctuation\">(</span>value<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  message<span class=\"punctuation\">(</span><span class=\"string\">&quot;Converting&quot;</span><span class=\"punctuation\">)</span> </span><br><span class=\"line\">  temp_f <span class=\"operator\">&lt;&lt;-</span> <span class=\"punctuation\">(</span>value <span class=\"operator\">*</span> <span class=\"number\">9</span> <span class=\"operator\">/</span> <span class=\"number\">5</span><span class=\"punctuation\">)</span> <span class=\"operator\">+</span> <span class=\"number\">32</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">temp_c<span class=\"operator\">$</span>set<span class=\"punctuation\">(</span><span class=\"number\">10</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; Converting</span></span><br><span class=\"line\">temp_f</span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] 50</span></span><br><span class=\"line\"></span><br><span class=\"line\">temp_c<span class=\"operator\">$</span>set<span class=\"punctuation\">(</span><span class=\"operator\">-</span><span class=\"number\">3</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; Converting</span></span><br><span class=\"line\">temp_f</span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] 26.6</span></span><br></pre></td></tr></table></figure>\n\n<p>事件驱动编程解决了不必要的计算问题，但它又产生了一个新问题：你必须仔细跟踪哪些输入会影响哪些计算。不久之后，你就会在正确性（即在任何内容发生更改时都更新所有内容）和性能（即尝试仅更新必要的部分，并希望你没有遗漏任何边缘情况）之间权衡取舍，因为同时做到这两点非常困难。</p>\n<h3 id=\"13-2-4-反应性编程\"><a href=\"#13-2-4-反应性编程\" class=\"headerlink\" title=\"13.2.4 反应性编程\"></a>13.2.4 反应性编程</h3><p>反应性编程通过将上述解决方案的特性结合起来，优雅地解决了这两个问题。现在，我们可以向您展示一些真正的Shiny代码，它使用了一个特殊的Shiny模式，即<code>reactiveConsole(TRUE)</code>，这使得我们可以直接在控制台中实验反应性。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>shiny<span class=\"punctuation\">)</span></span><br><span class=\"line\">reactiveConsole<span class=\"punctuation\">(</span><span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>与事件驱动编程一样，我们需要某种方式来指示我们有一个特殊类型的变量。在Shiny中，我们使用<a href=\"https://rdrr.io/pkg/shiny/man/reactiveVal.html\">reactiveVal()</a>创建一个反<strong>reactive value</strong>。反应式值有特殊的语法来获取其值（像调用无参数函数一样调用它）和设置其值（像调用单参数函数一样调用它来设置其值）。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp_c <span class=\"operator\">&lt;-</span> reactiveVal<span class=\"punctuation\">(</span><span class=\"number\">10</span><span class=\"punctuation\">)</span> <span class=\"comment\"># create</span></span><br><span class=\"line\">temp_c<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span>                  <span class=\"comment\"># get</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] 10</span></span><br><span class=\"line\">temp_c<span class=\"punctuation\">(</span><span class=\"number\">20</span><span class=\"punctuation\">)</span>                <span class=\"comment\"># set</span></span><br><span class=\"line\">temp_c<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span>                  <span class=\"comment\"># get</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] 20</span></span><br></pre></td></tr></table></figure>\n\n<p>现在我们可以创建一个依赖于这个值的反应式表达式：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp_f <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  message<span class=\"punctuation\">(</span><span class=\"string\">&quot;Converting&quot;</span><span class=\"punctuation\">)</span> </span><br><span class=\"line\">  <span class=\"punctuation\">(</span>temp_c<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">*</span> <span class=\"number\">9</span> <span class=\"operator\">/</span> <span class=\"number\">5</span><span class=\"punctuation\">)</span> <span class=\"operator\">+</span> <span class=\"number\">32</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">temp_f<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; Converting</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] 68</span></span><br></pre></td></tr></table></figure>\n\n<p>在创建应用程序时，你已经了解到反应式表达式会自动跟踪其所有依赖项。因此，如果之后<code>temp_c</code>发生变化，<code>temp_f</code>会自动更新：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp_c<span class=\"punctuation\">(</span><span class=\"operator\">-</span><span class=\"number\">3</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">temp_c<span class=\"punctuation\">(</span><span class=\"operator\">-</span><span class=\"number\">10</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">temp_f<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; Converting</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] 14</span></span><br></pre></td></tr></table></figure>\n\n<p>但如果<code>temp_c()</code>没有变化，那么<code>temp_f()</code>就不需要重新计算，可以直接从缓存中获取：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp_f<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] 14</span></span><br></pre></td></tr></table></figure>\n\n<p>反应式表达式有两个重要特性：</p>\n<ul>\n<li><p>它是<strong>惰性</strong>的：在被调用之前，它不会进行任何工作。</p>\n</li>\n<li><p>它是<strong>缓存</strong>的：在第二次及后续调用时，它不会进行任何工作，因为它缓存了之前的结果。</p>\n</li>\n</ul>\n<p>我们将在第<code>14</code>章中再次讨论这些重要特性。</p>\n<h2 id=\"13-3-反应式编程简史\"><a href=\"#13-3-反应式编程简史\" class=\"headerlink\" title=\"13.3 反应式编程简史\"></a>13.3 反应式编程简史</h2><p>如果你想了解更多其他语言的反应式编程知识，那么了解其发展历史可能会有所帮助。你可以在<a href=\"https://en.wikipedia.org/wiki/VisiCalc\">VisiCalc</a>（第一个电子表格软件）中看到反应式编程的萌芽，它起源于40多年前：</p>\n<p>  我想象了一个神奇的黑板，当你擦去一个数字并写入新的东西时，其他所有的数字都会自动改变，就像用数字进行的文字处理一样。</p>\n<p>  ——<a href=\"https://youtu.be/YDvbDiJZpy0\">Dan Bricklin</a></p>\n<p>电子表格与反应式编程密切相关：你使用公式声明单元格之间的关系，当一个单元格发生变化时，其所有依赖项都会自动更新。因此，你可能已经在不知不觉中进行了大量反应式编程！</p>\n<p>虽然反应性的概念已经存在很长时间了，但直到20世纪90年代末，学术界才开始对其进行认真研究。反应式编程的研究始于FRAN（<strong>f</strong>unctional <strong>r</strong>eactive <strong>a</strong>nimation，功能性反应式动画），这是一种将随时间变化和用户输入融入功能编程语言中的新颖系统。这催生了一系列丰富的文献，但对编程实践的影响却很小。</p>\n<p>直到2010年代，反应式编程才通过JavaScript UI框架的快节奏世界进入主流编程领域。像<a href=\"https://knockoutjs.com/\">Knockout</a>、<a href=\"https://emberjs.com/\">Ember</a>和<a href=\"https://www.meteor.com/\">Meteor</a>（Joe Cheng’s personal inspiration for Shiny）这样的开创性框架表明，反应式编程可以极大地简化UI编程。短短几年内，反应式编程通过<a href=\"https://reactjs.org/\">React</a>、<a href=\"https://vuejs.org/\">Vue.js</a>和<a href=\"https://angularjs.org/\">Angular</a>等广受欢迎的框架主导了网络编程，这些框架要么本质上具有反应性，要么设计为与反应式后端协同工作。</p>\n<p>值得一提的是，“反应式编程”是一个相当泛泛的术语。虽然所有反应式编程的库、框架和语言大体上都是关注编写响应值变化的程序，但是它们在术语、设计和实现方面却存在巨大的差异。在本书中，每当提到“反应式编程”时，我们特指在Shiny中实现的反应式编程。因此，如果你阅读了关于反应式编程的资料，而这些资料并不是专门针对Shiny的，那么这些概念甚至术语都不太可能与编写Shiny应用相关。对于那些对其他反应式编程框架有一定经验的读者来说，Shiny的方法与<a href=\"https://www.meteor.com/\">Meteor</a>和<a href=\"https://mobx.js.org/\">MobX</a>类似，与<a href=\"http://reactivex.io/\">ReactiveX</a>系列或任何将自己标记为功能反应式编程的内容有很大不同。</p>\n<h2 id=\"13-4-小结\"><a href=\"#13-4-小结\" class=\"headerlink\" title=\"13.4 小结\"></a>13.4 小结</h2><p>现在你已经理解了为什么需要反应式编程，并且对它的发展历史有了一些了解，接下来的一章将讨论其底层理论的更多细节。最重要的是，你将巩固对反应图的理解，反应图将反应值、反应表达式和观察者连接起来，并精确控制何时运行。</p>\n<h1 id=\"加关注\"><a href=\"#加关注\" class=\"headerlink\" title=\"加关注\"></a>加关注</h1><p>关注公众号“生信之巅”，聊天窗口回复“85d7”获取下载链接。</p>\n<table align=\"center\"><tr>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅微信公众号\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-right: 0px;margin-bottom: 5px;align: center;\"></td>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅小程序码\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-left: 0px;margin-bottom: 5px;align: center\"></td>\n</tr></table>\n\n\n<p><font color=\"#FF0000\"><ruby><b>敬告</b>：使用文中脚本请引用本文网址，请尊重本人的劳动成果，谢谢！<rt><b>Notice</b>: When you use the scripts in this article, please cite the link of this webpage. Thank you!</rt></ruby></font></p>\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"编程","path":"api/tags/编程.json"},{"name":"Shiny入门系列","path":"api/tags/Shiny入门系列.json"}]},{"title":"Shiny从入门到入定——15-Reactive building blocks","slug":"Shiny从入门到入定——15-Reactive-building-blocks","date":"2024-09-26T14:00:23.000Z","updated":"2024-09-26T14:29:29.863Z","comments":true,"path":"api/articles/Shiny从入门到入定——15-Reactive-building-blocks.json","excerpt":null,"keywords":null,"cover":"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg","content":"<h1 id=\"15-反应式构建块\"><a href=\"#15-反应式构建块\" class=\"headerlink\" title=\"15 反应式构建块\"></a>15 反应式构建块</h1><p>既然你已经理解了反应式图背后的理论，并且有了一些实践经验，那么现在是时候更详细地讨论反应式如何融入R编程语言中了。反应式编程有三个基本构建块：<code>反应式值</code>、<code>反应式表达式</code>和<code>观察者</code>。你已经看到了反应式值和表达式的大部分重要部分，所以本章将花更多时间讨论观察者和输出（你将了解到输出是一种特殊的观察者）。你还将学习控制反应式图的另外两个工具：<code>隔离</code>和<code>定时无效化</code>。</p>\n<p>本章将再次使用反应式控制台，这样我们就可以直接在控制台中试验反应式，而无需每次都启动一个Shiny应用程序。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>shiny<span class=\"punctuation\">)</span></span><br><span class=\"line\">reactiveConsole<span class=\"punctuation\">(</span><span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"15-1-反应式值\"><a href=\"#15-1-反应式值\" class=\"headerlink\" title=\"15.1 反应式值\"></a>15.1 反应式值</h2><p>反应式值有两种类型：</p>\n<ul>\n<li><p>使用<a href=\"https://rdrr.io/pkg/shiny/man/reactiveVal.html\">reactiveVal()</a>创建的单个反应式值。</p>\n</li>\n<li><p>使用<a href=\"https://rdrr.io/pkg/shiny/man/reactiveValues.html\">reactiveValues()</a>创建的反应式值列表。</p>\n</li>\n</ul>\n<p>它们在获取和设置值时的接口略有不同：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x <span class=\"operator\">&lt;-</span> reactiveVal<span class=\"punctuation\">(</span><span class=\"number\">10</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">x<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span>       <span class=\"comment\"># get</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] 10</span></span><br><span class=\"line\">x<span class=\"punctuation\">(</span><span class=\"number\">20</span><span class=\"punctuation\">)</span>     <span class=\"comment\"># set</span></span><br><span class=\"line\">x<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span>       <span class=\"comment\"># get</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] 20</span></span><br><span class=\"line\"></span><br><span class=\"line\">r <span class=\"operator\">&lt;-</span> reactiveValues<span class=\"punctuation\">(</span>x <span class=\"operator\">=</span> <span class=\"number\">10</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">r<span class=\"operator\">$</span>x       <span class=\"comment\"># get</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] 10</span></span><br><span class=\"line\">r<span class=\"operator\">$</span>x <span class=\"operator\">&lt;-</span> 20 <span class=\"comment\"># set</span></span><br><span class=\"line\">r<span class=\"operator\">$</span>x       <span class=\"comment\"># get</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] 20</span></span><br></pre></td></tr></table></figure>\n\n<p>不幸的是，这两个类似的对象有着截然不同的接口，但没有办法将它们标准化。然而，尽管它们看起来不同，但行为是相同的，所以你可以根据自己的语法偏好来选择使用哪一个。在本书中，我使用<code>reactiveValues()</code>，因为它的语法一目了然，但在我的代码中，我倾向于使用<code>reactiveVal()</code>，因为它的语法清楚地表明正在发生一些不寻常的事情。</p>\n<p>重要的是要注意，这两种类型的反应式值都具有所谓的引用语义。大多数R对象在修改时具有复制语义，这意味着如果你将相同的值赋给两个名称，一旦你修改了其中一个，连接就会断开：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a1 <span class=\"operator\">&lt;-</span> a2 <span class=\"operator\">&lt;-</span> 10</span><br><span class=\"line\">a2 <span class=\"operator\">&lt;-</span> 20</span><br><span class=\"line\">a1 <span class=\"comment\"># 未改变</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] 10</span></span><br></pre></td></tr></table></figure>\n\n<p>但反应式值则不是这样——它们总是保持对相同值的引用，因此修改任何副本都会修改所有值：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b1 <span class=\"operator\">&lt;-</span> b2 <span class=\"operator\">&lt;-</span> reactiveValues<span class=\"punctuation\">(</span>x <span class=\"operator\">=</span> <span class=\"number\">10</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">b1<span class=\"operator\">$</span>x <span class=\"operator\">&lt;-</span> 20</span><br><span class=\"line\">b2<span class=\"operator\">$</span>x</span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] 20</span></span><br></pre></td></tr></table></figure>\n\n<p>我们将在第16章中讨论为什么你可能需要创建自己的反应式值。否则，你将遇到的大多数反应式值都将来自<code>server</code>函数的输入参数。这些与你自己创建的<code>reactiveValues()</code>略有不同，因为它们是只读的：你不能修改这些值，因为Shiny会根据浏览器中的用户操作自动更新它们。</p>\n<h3 id=\"15-1-1-练习\"><a href=\"#15-1-1-练习\" class=\"headerlink\" title=\"15.1.1 练习\"></a>15.1.1 练习</h3><ul>\n<li><p>这两个反应式值列表之间有什么区别？比较获取和设置单个反应式值的语法。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">l1 <span class=\"operator\">&lt;-</span> reactiveValues<span class=\"punctuation\">(</span>a <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span> b <span class=\"operator\">=</span> <span class=\"number\">2</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">l2 <span class=\"operator\">&lt;-</span> <span class=\"built_in\">list</span><span class=\"punctuation\">(</span>a <span class=\"operator\">=</span> reactiveVal<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> b <span class=\"operator\">=</span> reactiveVal<span class=\"punctuation\">(</span><span class=\"number\">2</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设计并执行一个小实验，以验证<code>reactiveVal()</code>也具有引用语义。</p>\n</li>\n</ul>\n<h2 id=\"15-2-反应式表达式\"><a href=\"#15-2-反应式表达式\" class=\"headerlink\" title=\"15.2 反应式表达式\"></a>15.2 反应式表达式</h2><p>回忆一下，反应式有两个重要特性：它是<code>惰性</code>的并且具有<code>缓存</code>。这意味着它只有在真正需要时才会工作，如果连续调用两次，它会返回之前的值。</p>\n<p>我们还没有涵盖两个重要的细节：反应式表达式如何处理错误，以及为什么<code>on.exit()</code>在它们内部有效。</p>\n<h3 id=\"15-2-1-错误\"><a href=\"#15-2-1-错误\" class=\"headerlink\" title=\"15.2.1 错误\"></a>15.2.1 错误</h3><p>反应式表达式以与缓存值完全相同的方式缓存错误。例如，考虑这个反应式：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span>stop<span class=\"punctuation\">(</span><span class=\"string\">&quot;Error occured at &quot;</span><span class=\"punctuation\">,</span> Sys.time<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> call. <span class=\"operator\">=</span> <span class=\"literal\">FALSE</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">r<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; Error: Error occured at 2022-08-23 23:10:12</span></span><br></pre></td></tr></table></figure>\n\n<p>如果我们等待一两秒钟，我们可以看到我们得到了与之前相同的错误：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">2</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">r<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; Error: Error occured at 2022-08-23 23:10:12</span></span><br></pre></td></tr></table></figure>\n\n<p>在反应式图中，错误的处理方式与值相同：错误通过反应式图传播的方式与常规值完全相同。唯一的区别是当错误遇到输出或观察者时会发生什么：</p>\n<ul>\n<li>输出中的错误将在应用程序中显示。</li>\n<li>观察者中的错误将导致当前会话终止。如果你不希望发生这种情况，你需要将代码包装在<code>try()</code>或<code>tryCatch()</code>中。</li>\n</ul>\n<p>这个相同的系统还支持<code>req()</code>（第8.1.2节），它发出一种特殊类型的错误。这种特殊错误会导致观察者和输出停止它们正在做的事情，但不会导致失败。默认情况下，它会使输出重置为其初始空白状态，但如果你使用<code>req(..., cancelOutput = TRUE)</code>，它们将保留其当前显示。</p>\n<h3 id=\"15-2-2-on-exit\"><a href=\"#15-2-2-on-exit\" class=\"headerlink\" title=\"15.2.2 on.exit()\"></a>15.2.2 on.exit()</h3><p>你可以将<code>reactive(x())</code>视为<code>function() x()</code>的快捷方式，它自动添加了惰性和缓存。这主要在你想要了解Shiny是如何实现的时候很重要，但这也意味着你可以使用那些只能在函数内部工作的函数。其中最有用的是<code>on.exit()</code>，它允许你在反应式表达式完成时运行代码，无论反应式是否成功返回错误或失败。这就是<code>on.exit()</code>在第8.2.2节中工作的原因。</p>\n<h3 id=\"15-2-3-练习\"><a href=\"#15-2-3-练习\" class=\"headerlink\" title=\"15.2.3 练习\"></a>15.2.3 练习</h3><ul>\n<li><p>使用<code>reactlog</code>包来观察以下应用程序中错误通过反应式传播的情况，确认它遵循与值传播相同的规则。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  checkboxInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;error&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;error?&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;result&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  a <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>error<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      stop<span class=\"punctuation\">(</span><span class=\"string\">&quot;Error!&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span> <span class=\"keyword\">else</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  b <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span>a<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">+</span> <span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"built_in\">c</span> <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span>b<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">+</span> <span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>result <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改上述应用程序，使用<code>req()</code>代替<code>stop()</code>。验证事件是否仍然以相同的方式传播。当你使用<code>cancelOutput</code>参数时会发生什么？</p>\n</li>\n</ul>\n<h2 id=\"15-3-观察者和输出\"><a href=\"#15-3-观察者和输出\" class=\"headerlink\" title=\"15.3 观察者和输出\"></a>15.3 观察者和输出</h2><p>观察者和输出是反应式图中的终端节点。它们在两个重要方面与反应式表达式不同：</p>\n<ul>\n<li><p>它们是急切的且健忘的——它们尽可能快地运行，并且不记得之前的操作。这种急切性是“传染性的”，因为如果它们使用了一个反应式表达式，那么该反应式表达式也将被评估。</p>\n</li>\n<li><p>观察者返回的值被忽略，因为它们被设计为与称为副作用的函数一起工作，如<code>cat()</code>或<code>write.csv()</code>。</p>\n</li>\n</ul>\n<p>观察者和输出由同一个底层工具提供支持：<code>observe()</code>。这设置了一个代码块，每次它使用的反应式值或表达式更新时，该代码块就会运行。请注意，当你创建观察者时，它会立即运行——它必须这样做才能确定其反应式依赖项。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">y <span class=\"operator\">&lt;-</span> reactiveVal<span class=\"punctuation\">(</span><span class=\"number\">10</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">observe<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  message<span class=\"punctuation\">(</span><span class=\"string\">&quot;`y` is &quot;</span><span class=\"punctuation\">,</span> y<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; `y` is 10</span></span><br><span class=\"line\"></span><br><span class=\"line\">y<span class=\"punctuation\">(</span><span class=\"number\">5</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; `y` is 5</span></span><br><span class=\"line\">y<span class=\"punctuation\">(</span><span class=\"number\">4</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; `y` is 4</span></span><br></pre></td></tr></table></figure>\n\n<p>在这本书中，我很少使用<a href=\"https://rdrr.io/pkg/shiny/man/observe.html\">observe()</a>，因为它是为用户友好的<a href=\"https://rdrr.io/pkg/shiny/man/observeEvent.html\">observeEvent()</a>提供动力的底层工具。通常，你应该坚持使用<code>observeEvent()</code>，除非它无法实现你想要的功能。在本书中，我只会向你展示一个必须使用<code>observe()</code>的案例，即第16.3.3节。</p>\n<p><code>observe()</code>也为响应式输出提供动力。响应式输出是一种特殊的观察者，它们具有两个重要属性：</p>\n<ul>\n<li><p>当你将它们赋值给输出时，它们就会被定义，即<code>output$text &lt;- ...</code>会创建观察者。</p>\n</li>\n<li><p>它们具有一些有限的检测能力，可以检测到自己是否不可见（即它们位于非活动标签页中），因此不必重新计算。</p>\n</li>\n</ul>\n<p>重要的是要注意，<code>observe()</code>和响应式输出并不“执行”某些操作，而是“创建”某些东西（然后根据需要采取行动）。这种思维方式有助于你理解这个例子中的情况：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x <span class=\"operator\">&lt;-</span> reactiveVal<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">y <span class=\"operator\">&lt;-</span> observe<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  x<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  observe<span class=\"punctuation\">(</span>print<span class=\"punctuation\">(</span>x<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] 1</span></span><br><span class=\"line\">x<span class=\"punctuation\">(</span><span class=\"number\">2</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] 2</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] 2</span></span><br><span class=\"line\">x<span class=\"punctuation\">(</span><span class=\"number\">3</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] 3</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] 3</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] 3</span></span><br></pre></td></tr></table></figure>\n\n<p>每当<code>x</code>发生变化时，观察者就会被触发。观察者本身会调用<code>observe()</code>来设置另一个观察者。因此，每次<code>x</code>发生变化时，都会获得另一个观察者，从而导致其值再次被打印。</p>\n<p>作为一般规则，你应该只在服务器函数的顶层创建观察者或输出。如果你发现自己试图嵌套它们或在输出内部创建观察者，那么你应该坐下来，画出你想要创建的响应式图表的草图——几乎可以肯定存在更好的方法。在更复杂的应用程序中，这个错误可能更难直接发现，但你可以始终使用<code>reactlog</code>：只需查找观察者（或输出）中意外的变化，然后追踪到是什么导致了这些变化。</p>\n<h2 id=\"15-4-代码隔离\"><a href=\"#15-4-代码隔离\" class=\"headerlink\" title=\"15.4 代码隔离\"></a>15.4 代码隔离</h2><p>为了结束本章，我将讨论两个重要的工具，用于精确控制响应式图表的失效方式和时间。在本节中，我将讨论<a href=\"https://rdrr.io/pkg/shiny/man/isolate.html\">isolate()</a>，这是<code>observeEvent()</code>和<a href=\"https://rdrr.io/pkg/shiny/man/observeEvent.html\">eventReactive()</a>的底层工具，它允许你在不需要时避免创建响应式依赖。在下一节中，你将学习<a href=\"https://rdrr.io/pkg/shiny/man/invalidateLater.html\">invalidateLater()</a>，它允许你按计划生成响应式失效。</p>\n<h3 id=\"15-4-1-isolate\"><a href=\"#15-4-1-isolate\" class=\"headerlink\" title=\"15.4.1 isolate()\"></a>15.4.1 isolate()</h3><p>观察者通常与响应式值结合使用，以便跟踪状态随时间的变化。例如，考虑以下代码，它跟踪<code>x</code>发生变化的次数：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r <span class=\"operator\">&lt;-</span> reactiveValues<span class=\"punctuation\">(</span>count <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> x <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">observe<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  r<span class=\"operator\">$</span>x</span><br><span class=\"line\">  r<span class=\"operator\">$</span>count <span class=\"operator\">&lt;-</span> r<span class=\"operator\">$</span>count <span class=\"operator\">+</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>如果你运行这段代码，你会立即陷入无限循环，因为观察者会对<code>x</code>和<code>count</code>产生响应式依赖；由于观察者修改了<code>count</code>，它会立即重新运行。</p>\n<p>幸运的是，Shiny提供了<code>isolate()</code>来解决这个问题。此函数允许你访问响应式值或表达式的当前值，而不会产生对它的依赖：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r <span class=\"operator\">&lt;-</span> reactiveValues<span class=\"punctuation\">(</span>count <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> x <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"built_in\">class</span><span class=\"punctuation\">(</span>r<span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] &quot;rv_flush_on_write&quot; &quot;reactivevalues&quot;</span></span><br><span class=\"line\">observe<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  r<span class=\"operator\">$</span>x</span><br><span class=\"line\">  r<span class=\"operator\">$</span>count <span class=\"operator\">&lt;-</span> isolate<span class=\"punctuation\">(</span>r<span class=\"operator\">$</span>count<span class=\"punctuation\">)</span> <span class=\"operator\">+</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">r<span class=\"operator\">$</span>x <span class=\"operator\">&lt;-</span> 1</span><br><span class=\"line\">r<span class=\"operator\">$</span>x <span class=\"operator\">&lt;-</span> 2</span><br><span class=\"line\">r<span class=\"operator\">$</span>count</span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] 2</span></span><br><span class=\"line\"></span><br><span class=\"line\">r<span class=\"operator\">$</span>x <span class=\"operator\">&lt;-</span> 3</span><br><span class=\"line\">r<span class=\"operator\">$</span>count</span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] 3</span></span><br></pre></td></tr></table></figure>\n\n<p>和<code>observe()</code>一样，很多时候你不需要直接使用<code>isolate()</code>，因为有两个有用的函数封装了最常见的用法：<code>observeEvent()</code>和<code>eventReactive()</code>。</p>\n<h3 id=\"15-4-2-observeEvent-和-eventReactive\"><a href=\"#15-4-2-observeEvent-和-eventReactive\" class=\"headerlink\" title=\"15.4.2 observeEvent() 和 eventReactive()\"></a>15.4.2 observeEvent() 和 eventReactive()</h3><p>当你看到上面的代码时，你可能会想起第3.6节，并好奇为什么我没有使用<code>observeEvent()</code>：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">observeEvent<span class=\"punctuation\">(</span>r<span class=\"operator\">$</span>x<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span> </span><br><span class=\"line\">  r<span class=\"operator\">$</span>count <span class=\"operator\">&lt;-</span> r<span class=\"operator\">$</span>count <span class=\"operator\">+</span> <span class=\"number\">1</span> </span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>实际上，我本可以使用它，因为<code>observeEvent(x, y)</code>等价于<code>observe(&#123;x; isolate(y)&#125;)</code>。它优雅地将你想要监听的内容与你想要执行的操作分离开来。而<code>eventReactive()</code>则为响应式值执行类似的任务：<code>eventReactive(x, y)</code>等价于<code>reactive(&#123;x; isolate(y)&#125;)</code>。</p>\n<p><code>observeEvent()</code>和<code>eventReactive()</code>都有额外的参数，允许你控制它们的操作细节：</p>\n<ul>\n<li>默认情况下，这两个函数都会忽略产生NULL的任何事件（或在操作按钮的特殊情况下为0）。使用<code>ignoreNULL = FALSE</code>来处理NULL值。</li>\n<li>默认情况下，当你创建这两个函数时，它们都会运行一次。使用<code>ignoreInit = TRUE</code>来跳过这次运行。</li>\n<li>仅对于<code>observeEvent()</code>，你可以使用<code>once = TRUE</code>来使处理程序仅运行一次。</li>\n</ul>\n<p>这些参数很少需要，但知道它们的存在是很有用的，这样你就可以在需要时从文档中查找详细信息。</p>\n<h3 id=\"15-4-3-练习\"><a href=\"#15-4-3-练习\" class=\"headerlink\" title=\"15.4.3 练习\"></a>15.4.3 练习</h3><p>使用服务器函数完成下面的应用程序，该函数仅在按钮被按下时更新<code>out</code>的值为<code>x</code>的值。</p>\n<p>（注意：由于这是一个练习，我不会直接给出完整的代码，但你可以按照以下思路编写：</p>\n<ol>\n<li>在UI中定义一个动作按钮和一个用于显示结果的文本输出。</li>\n<li>在服务器函数中，使用<code>observeEvent()</code>监听按钮点击事件。</li>\n<li>在<code>observeEvent()</code>的回调函数中，更新文本输出的值。）</li>\n</ol>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;x&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;x&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">50</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">100</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;capture&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;capture&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;out&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"15-5-定时失效\"><a href=\"#15-5-定时失效\" class=\"headerlink\" title=\"15.5 定时失效\"></a>15.5 定时失效</h2><p><code>isolate()</code> 减少了响应式图被失效的时间。而本节的主题 <code>invalidateLater()</code> 则做相反的事情：它允许你在数据没有变化时使响应式图失效。在 3.5.1 节中，你通过 <a href=\"https://rdrr.io/pkg/shiny/man/reactiveTimer.html\">reactiveTimer()</a> 看到了它的一个例子，但现在是时候讨论它背后的底层工具了：<code>invalidateLater()</code>。</p>\n<p><code>invalidateLater(ms)</code> 会导致任何响应式消费者在将来的某个时间点（<code>ms</code> 毫秒后）失效。这对于创建动画和连接到 Shiny 响应式框架之外可能随时间变化的数据源非常有用。例如，以下响应式表达式将每半秒自动生成 10 个新的随机正态分布数：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  invalidateLater<span class=\"punctuation\">(</span><span class=\"number\">500</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  rnorm<span class=\"punctuation\">(</span><span class=\"number\">10</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>而这个观察者将使用一个随机数增加累积和：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sum</span> <span class=\"operator\">&lt;-</span> reactiveVal<span class=\"punctuation\">(</span><span class=\"number\">0</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">observe<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  invalidateLater<span class=\"punctuation\">(</span><span class=\"number\">300</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"built_in\">sum</span><span class=\"punctuation\">(</span>isolate<span class=\"punctuation\">(</span><span class=\"built_in\">sum</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"operator\">+</span> runif<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>在后续部分中，你将学习如何使用 <code>invalidateLater()</code> 从磁盘读取变化的数据，如何避免 <code>invalidateLater()</code> 陷入无限循环，以及关于失效确切发生时间的偶尔重要的细节。</p>\n<h3 id=\"15-5-1-轮询\"><a href=\"#15-5-1-轮询\" class=\"headerlink\" title=\"15.5.1 轮询\"></a>15.5.1 轮询</h3><p><code>invalidateLater()</code> 的一个有用应用是将 Shiny 连接到 R 外部变化的数据。例如，你可以使用以下响应式表达式每秒重新读取一次 CSV 文件：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"built_in\">on.exit</span><span class=\"punctuation\">(</span>invalidateLater<span class=\"punctuation\">(</span><span class=\"number\">1000</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  read.csv<span class=\"punctuation\">(</span><span class=\"string\">&quot;data.csv&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>这会将变化的数据连接到 Shiny 的响应式图中，但它有一个严重的缺点：当你使响应式失效时，你也会使所有下游消费者失效，因此即使数据相同，所有下游工作也必须重做。</p>\n<p>为了避免这个问题，Shiny 提供了 <a href=\"https://rdrr.io/pkg/shiny/man/reactivePoll.html\">reactivePoll()</a>，它接受两个函数：一个执行相对便宜的检查以查看数据是否已更改，另一个更昂贵的函数实际执行计算。我们可以使用 <code>reactivePoll()</code> 重写前面的响应式，如下所示。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  data <span class=\"operator\">&lt;-</span> reactivePoll<span class=\"punctuation\">(</span><span class=\"number\">1000</span><span class=\"punctuation\">,</span> session<span class=\"punctuation\">,</span> </span><br><span class=\"line\">    <span class=\"keyword\">function</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> file.mtime<span class=\"punctuation\">(</span><span class=\"string\">&quot;data.csv&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> read.csv<span class=\"punctuation\">(</span><span class=\"string\">&quot;data.csv&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里我们使用了 <a href=\"https://rdrr.io/r/base/file.info.html\">file.mtime()</a>，它返回文件最后一次修改的时间，作为是否需要重新加载文件的廉价检查。</p>\n<p>当文件变化时读取文件是一个常见任务，因此 Shiny 提供了一个更具体的辅助函数，它只需要文件名和读取函数：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  data <span class=\"operator\">&lt;-</span> reactiveFileReader<span class=\"punctuation\">(</span><span class=\"number\">1000</span><span class=\"punctuation\">,</span> session<span class=\"punctuation\">,</span> <span class=\"string\">&quot;data.csv&quot;</span><span class=\"punctuation\">,</span> read.csv<span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果你需要从其他来源（例如数据库）读取变化的数据，你需要自己编写 <code>reactivePoll()</code> 代码。</p>\n<h3 id=\"15-5-2-长时间运行的响应式\"><a href=\"#15-5-2-长时间运行的响应式\" class=\"headerlink\" title=\"15.5.2 长时间运行的响应式\"></a>15.5.2 长时间运行的响应式</h3><p>如果你正在执行长时间的计算，你需要考虑一个重要问题：何时执行 <code>invalidateLater()</code>？例如，考虑以下响应式：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  invalidateLater<span class=\"punctuation\">(</span><span class=\"number\">500</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>假设Shiny在0时刻开始反应式运行，它将在500毫秒时请求失效。反应式运行需要1000毫秒，所以现在时间到了1000毫秒，它立即失效并需要重新计算，这又会触发另一次失效：我们陷入了一个无限循环。</p>\n<p>另一方面，如果你在末尾运行<code>invalidateLater()</code>，它将在完成后500毫秒失效，所以反应式将每1500毫秒重新运行一次。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"built_in\">on.exit</span><span class=\"punctuation\">(</span>invalidateLater<span class=\"punctuation\">(</span><span class=\"number\">500</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> add <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n<p>这是选择<code>invalidateLater()</code>而不是我们之前使用的更简单的<code>reactiveTimer()</code>的主要原因：它让你对失效发生的确切时间有更大的控制权。</p>\n<h3 id=\"15-5-3-定时器准确性\"><a href=\"#15-5-3-定时器准确性\" class=\"headerlink\" title=\"15.5.3 定时器准确性\"></a>15.5.3 定时器准确性</h3><p><code>invalidateLater()</code>中指定的毫秒数是一个礼貌的请求，而不是一个强制要求。当你请求失效发生时，R可能正在做其他事情，所以你的请求必须等待。这实际上意味着这个数值是一个最小值，失效可能会比你预期的时间更长。在大多数情况下，这并不重要，因为小的差异不太可能影响用户对应用程序的感知。然而，在许多小错误会累积的情况下，你应该计算实际经过的时间并使用它来调整你的计算。</p>\n<p>例如，以下代码根据速度和经过的时间计算距离。而不是假设<code>invalidateLater(100)</code>总是精确延迟100毫秒，我计算经过的时间并在计算位置时使用它。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">velocity <span class=\"operator\">&lt;-</span> 3</span><br><span class=\"line\">r <span class=\"operator\">&lt;-</span> reactiveValues<span class=\"punctuation\">(</span>distance <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">last <span class=\"operator\">&lt;-</span> <span class=\"built_in\">proc.time</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">[[</span><span class=\"number\">3</span><span class=\"punctuation\">]</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">observe<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  cur <span class=\"operator\">&lt;-</span> <span class=\"built_in\">proc.time</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">[[</span><span class=\"number\">3</span><span class=\"punctuation\">]</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">  time <span class=\"operator\">&lt;-</span> last <span class=\"operator\">-</span> cur</span><br><span class=\"line\">  last <span class=\"operator\">&lt;&lt;-</span> cur</span><br><span class=\"line\">  </span><br><span class=\"line\">  r<span class=\"operator\">$</span>distance <span class=\"operator\">&lt;-</span> isolate<span class=\"punctuation\">(</span>r<span class=\"operator\">$</span>distance<span class=\"punctuation\">)</span> <span class=\"operator\">+</span> velocity <span class=\"operator\">*</span> time</span><br><span class=\"line\">  invalidateLater<span class=\"punctuation\">(</span><span class=\"number\">100</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>如果你不是在仔细做动画，那么请随意忽略<code>invalidateLater()</code>中固有的变化。只需记住，它是一个礼貌的请求，而不是一个要求。</p>\n<h3 id=\"15-5-4-练习\"><a href=\"#15-5-4-练习\" class=\"headerlink\" title=\"15.5.4 练习\"></a>15.5.4 练习</h3><p>为什么这个反应式表达式永远不会被执行？你的解释应该涉及反应式图和失效机制。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  x <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    invalidateLater<span class=\"punctuation\">(</span><span class=\"number\">500</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    rnorm<span class=\"punctuation\">(</span><span class=\"number\">10</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span>  </span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果你熟悉SQL，请使用<code>reactivePoll()</code>来仅当新行被添加时才重新读取一个虚构的“Results”表。你可以假设Results表有一个时间戳字段，该字段包含记录被添加的日期和时间。</p>\n<h3 id=\"15-6-总结\"><a href=\"#15-6-总结\" class=\"headerlink\" title=\"15.6 总结\"></a>15.6 总结</h3><p>在本章中，你深入了解了使Shiny工作的基石：反应式值、反应式表达式、观察者和定时评估。现在，我们将注意力转向反应式值和观察者的特定组合，这种组合使我们能够摆脱反应式图的一些约束（无论好坏）。</p>\n<h1 id=\"加关注\"><a href=\"#加关注\" class=\"headerlink\" title=\"加关注\"></a>加关注</h1><p>关注公众号“生信之巅”。</p>\n<table align=\"center\"><tr>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅微信公众号\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-right: 0px;margin-bottom: 5px;align: center;\"></td>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅小程序码\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-left: 0px;margin-bottom: 5px;align: center\"></td>\n</tr></table>\n\n\n<p><font color=\"#FF0000\"><ruby><b>敬告</b>：使用文中脚本请引用本文网址，请尊重本人的劳动成果，谢谢！<rt><b>Notice</b>: When you use the scripts in this article, please cite the link of this webpage. Thank you!</rt></ruby></font></p>\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"编程","path":"api/tags/编程.json"},{"name":"Shiny入门系列","path":"api/tags/Shiny入门系列.json"}]},{"title":"Shiny从入门到入定——14-The reactive graph","slug":"Shiny从入门到入定——14-The-reactive-graph","date":"2024-09-26T13:56:01.000Z","updated":"2024-09-26T14:29:29.863Z","comments":true,"path":"api/articles/Shiny从入门到入定——14-The-reactive-graph.json","excerpt":null,"keywords":null,"cover":"https://d33wubrfki0l68.cloudfront.net/9f65da9e6e5066eb409030bd85c465aa0c787e0c/7fce6/diagrams/reactivity-tracking/08.png","content":"<h1 id=\"反应图\"><a href=\"#反应图\" class=\"headerlink\" title=\"反应图\"></a>反应图</h1><h2 id=\"14-1-引言\"><a href=\"#14-1-引言\" class=\"headerlink\" title=\"14.1 引言\"></a>14.1 引言</h2><p>为了理解反应式计算，首先需要理解反应图。在本章中，我们将深入探讨反应图的细节，尤其关注事情发生的精确顺序。特别是，你将了解无效化的重要性，这是一个确保Shiny进行最少工作的关键过程。你还将了解<code>reactlog</code>包，它可以自动为实际应用程序绘制反应图。</p>\n<p>如果你有一段时间没有查看<a href=\"https://www.liaochenlanruo.fun/post/41c3.html\">第3章</a>了，我强烈建议你在继续之前重新熟悉一下。它为我们将在这里更详细探讨的概念奠定了基础。</p>\n<h2 id=\"14-2-反应式执行的逐步介绍\"><a href=\"#14-2-反应式执行的逐步介绍\" class=\"headerlink\" title=\"14.2 反应式执行的逐步介绍\"></a>14.2 反应式执行的逐步介绍</h2><p>为了解释反应式执行的过程，我们将使用图14.1中显示的图形。它包含三个反应式输入、三个反应式表达式和三个输出。请记住，反应式输入和表达式统称为<code>反应式生产者</code>；反应式表达式和输出是<code>反应式消费者</code>。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/9f65da9e6e5066eb409030bd85c465aa0c787e0c/7fce6/diagrams/reactivity-tracking/08.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/9f65da9e6e5066eb409030bd85c465aa0c787e0c/7fce6/diagrams/reactivity-tracking/08.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图14.1 包含三个输入、三个反应式表达式和三个输出的虚构应用程序的完整反应图\"></p>\n<p>组件之间的连接是有方向的，箭头表示反应的方向。这个方向可能会让你感到惊讶，因为很容易想到一个消费者依赖于一个或多个生产者。然而，很快你就会看到，反应流更准确地被建模为相反的方向。</p>\n<p>底层应用程序并不重要，但如果你需要一些具体的东西来帮助你理解，你可以假设它源自这个不太有用的应用程序。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;a&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;a&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">10</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;b&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;b&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;c&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;c&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  plotOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;x&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;y&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;z&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  rng <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>a <span class=\"operator\">*</span> <span class=\"number\">2</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  smp <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span>sample<span class=\"punctuation\">(</span>rng<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>b<span class=\"punctuation\">,</span> replace <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  bc <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>b <span class=\"operator\">*</span> input<span class=\"operator\">$</span><span class=\"built_in\">c</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>x <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span>hist<span class=\"punctuation\">(</span>smp<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>y <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span><span class=\"built_in\">max</span><span class=\"punctuation\">(</span>smp<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>z <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span>bc<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"14-3-会话开始\"><a href=\"#14-3-会话开始\" class=\"headerlink\" title=\"14.3 会话开始\"></a>14.3 会话开始</h2><p>图14.2展示了应用程序启动后且服务器函数首次执行完毕时的反应图。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/df8d3e4488102866bed17e0ac822adb0228c298e/621da/diagrams/reactivity-tracking/01.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/df8d3e4488102866bed17e0ac822adb0228c298e/621da/diagrams/reactivity-tracking/01.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图14.2 应用程序加载后的初始状态。对象之间没有连接，所有反应式表达式都被标记为无效（灰色）。有六个反应式消费者和六个反应式生产者\"></p>\n<p>该图中有三个重要信息：</p>\n<ul>\n<li>元素之间没有连接，因为Shiny没有反应式之间关系的先验知识。</li>\n<li>所有反应式表达式和输出都处于起始状态，即无效（灰色），意味着它们尚未运行。</li>\n<li>反应式输入已就绪（绿色），表明它们的值可用于计算。</li>\n</ul>\n<h3 id=\"14-3-1-执行开始\"><a href=\"#14-3-1-执行开始\" class=\"headerlink\" title=\"14.3.1 执行开始\"></a>14.3.1 执行开始</h3><p>现在我们开始执行阶段，如图14.3所示。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/2c6395ada69f84b77a5bf1b273994aa077958640/b1089/diagrams/reactivity-tracking/02.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/2c6395ada69f84b77a5bf1b273994aa077958640/b1089/diagrams/reactivity-tracking/02.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图14.3 Shiny开始执行任意的观察者/输出，标记为橙色\"></p>\n<p>在这个阶段，Shiny选择一个无效的输出并开始执行（橙色）。你可能会好奇Shiny是如何决定执行哪个无效输出的。简而言之，你应该假设它是随机的：你的观察者和输出不应该关心它们执行的顺序，因为它们被设计为独立运行。</p>\n<h3 id=\"14-3-2-读取反应式表达式\"><a href=\"#14-3-2-读取反应式表达式\" class=\"headerlink\" title=\"14.3.2 读取反应式表达式\"></a>14.3.2 读取反应式表达式</h3><p>执行输出可能需要从反应式中获取值，如图14.4所示。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/e31822819269ca1d29979b1776625198cbc6f434/246f1/diagrams/reactivity-tracking/03.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/e31822819269ca1d29979b1776625198cbc6f434/246f1/diagrams/reactivity-tracking/03.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图14.4 输出需要反应式表达式的值，因此它开始执行该表达式\"></p>\n<p>读取反应式会以两种方式改变图形：</p>\n<ul>\n<li>反应式表达式也需要开始计算其值（变为橙色）。请注意，输出仍在计算中：它正在等待反应式表达式返回其值，以便自己的执行可以继续进行，就像在R中进行常规函数调用一样。</li>\n<li>Shiny在输出和反应式表达式之间建立关系（即我们绘制一个箭头）。箭头的方向很重要：表达式记录它被输出使用；输出不记录它使用表达式。这是一个微妙的区别，但当你学习无效化时会更加清楚其重要性。</li>\n</ul>\n<h3 id=\"14-3-3-读取输入\"><a href=\"#14-3-3-读取输入\" class=\"headerlink\" title=\"14.3.3 读取输入\"></a>14.3.3 读取输入</h3><p>这个特定的反应式表达式碰巧读取了一个反应式输入。同样，建立了依赖&#x2F;被依赖的关系，所以在图14.5中我们添加了另一个箭头。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/1d51f64be17e3f140ee874bb2ad0a2990fc613b6/06ad6/diagrams/reactivity-tracking/04.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/1d51f64be17e3f140ee874bb2ad0a2990fc613b6/06ad6/diagrams/reactivity-tracking/04.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图14.5 反应式表达式也从反应式值中读取，因此我们添加了另一个箭头\"></p>\n<p>与反应式表达式和输出不同，反应式输入没有要执行的内容，因此可以立即返回。</p>\n<h3 id=\"14-3-4-反应式表达式完成\"><a href=\"#14-3-4-反应式表达式完成\" class=\"headerlink\" title=\"14.3.4 反应式表达式完成\"></a>14.3.4 反应式表达式完成</h3><p>在我们的示例中，反应式表达式读取了另一个反应式表达式，而后者又读取了另一个输入。我们将跳过对这些步骤的逐一描述，因为它们是我们已经描述过的内容的重复，并直接跳转到图14.6。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/1f35d954406c03d863cff5dc78775d5cab72f9f6/c0fa9/diagrams/reactivity-tracking/05.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/1f35d954406c03d863cff5dc78775d5cab72f9f6/c0fa9/diagrams/reactivity-tracking/05.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图14.6 反应式表达式已完成计算，因此变为绿色\"></p>\n<p>现在，反应式表达式已完成执行并变为绿色，表示它已就绪。它缓存了结果，因此除非其输入发生变化，否则不需要重新计算。</p>\n<h3 id=\"14-3-5-输出完成\"><a href=\"#14-3-5-输出完成\" class=\"headerlink\" title=\"14.3.5 输出完成\"></a>14.3.5 输出完成</h3><p>现在，反应式表达式已返回其值，输出可以完成执行，并变为绿色，如图14.7所示。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/0cd132c9390e1368118f5b80724ba1e8f8ae54c1/c0265/diagrams/reactivity-tracking/06.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/0cd132c9390e1368118f5b80724ba1e8f8ae54c1/c0265/diagrams/reactivity-tracking/06.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图14.7 输出已完成执行并变为绿色\"></p>\n<h3 id=\"14-3-6-执行下一个输出\"><a href=\"#14-3-6-执行下一个输出\" class=\"headerlink\" title=\"14.3.6 执行下一个输出\"></a>14.3.6 执行下一个输出</h3><p>现在第一个输出已完成，Shiny 会选择另一个来执行。这个输出会变成橙色（如图14.8所示），并开始从响应式生产者读取值。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/59a70dfa5486abed0124ebe23148bf25f0965237/b17bf/diagrams/reactivity-tracking/07.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/59a70dfa5486abed0124ebe23148bf25f0965237/b17bf/diagrams/reactivity-tracking/07.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图14.8 下一个输出开始计算，变为橙色\"></p>\n<p>已完成的响应式对象可以立即返回它们的值；无效的响应式对象将启动它们自己的执行图。这个循环将重复进行，直到每个无效的输出进入完成（绿色）状态。</p>\n<h3 id=\"14-3-7-执行完成，输出刷新\"><a href=\"#14-3-7-执行完成，输出刷新\" class=\"headerlink\" title=\"14.3.7 执行完成，输出刷新\"></a>14.3.7 执行完成，输出刷新</h3><p>现在所有的输出都已完成执行并处于空闲状态（如图14.9所示）。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/9f65da9e6e5066eb409030bd85c465aa0c787e0c/7fce6/diagrams/reactivity-tracking/08.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/9f65da9e6e5066eb409030bd85c465aa0c787e0c/7fce6/diagrams/reactivity-tracking/08.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图14.9 所有输出和响应式表达式都已完成并变为绿色\"></p>\n<p>这一轮响应式执行已完成，除非系统受到某种外部作用（例如，Shiny 应用程序的用户在用户界面中移动滑块），否则不会进行更多工作。从响应式的角度来看，这个会话现在处于静止状态。</p>\n<p>让我们先暂停一下，思考一下我们所做的事情。我们读取了一些输入，计算了一些值，并生成了一些输出。但更重要的是，我们还发现了响应式对象之间的关系。当一个响应式输入发生变化时，我们知道需要更新哪些响应式对象。</p>\n<h2 id=\"14-4-输入发生变化\"><a href=\"#14-4-输入发生变化\" class=\"headerlink\" title=\"14.4 输入发生变化\"></a>14.4 输入发生变化</h2><p>上一步结束时，我们的Shiny会话处于完全空闲状态。现在假设应用程序的用户更改了滑块的值。这会导致浏览器向服务器函数发送一条消息，指示Shiny更新相应的响应式输入。这将启动一个无效化阶段，该阶段包含三个部分：<code>无效化输入</code>、<code>通知依赖项</code>，然后<code>移除现有的连接</code>。</p>\n<h3 id=\"14-4-1-无效化输入\"><a href=\"#14-4-1-无效化输入\" class=\"headerlink\" title=\"14.4.1 无效化输入\"></a>14.4.1 无效化输入</h3><p>无效化阶段从已更改的输入&#x2F;值开始，我们将其填充为灰色，这是我们通常用于无效化的颜色（如图14.10所示）。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/df849130469d68302afd959a483194fe5715330d/72fad/diagrams/reactivity-tracking/09.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/df849130469d68302afd959a483194fe5715330d/72fad/diagrams/reactivity-tracking/09.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图14.10 用户与应用程序交互，使一个输入无效\"></p>\n<h3 id=\"14-4-2-通知依赖项\"><a href=\"#14-4-2-通知依赖项\" class=\"headerlink\" title=\"14.4.2 通知依赖项\"></a>14.4.2 通知依赖项</h3><p>现在，我们按照之前绘制的箭头方向，将每个节点着色为灰色，并将我们跟随的箭头着色为浅灰色。这产生了图14.11。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/265498cff697785cf8458453b4c316b2cb739002/4df87/diagrams/reactivity-tracking/10.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/265498cff697785cf8458453b4c316b2cb739002/4df87/diagrams/reactivity-tracking/10.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图14.11 无效化从输入开始，按照从左到右的每个箭头流动。在无效化过程中，Shiny 跟随的箭头被着色为较浅的灰色\"></p>\n<h3 id=\"14-4-3-移除关系\"><a href=\"#14-4-3-移除关系\" class=\"headerlink\" title=\"14.4.3 移除关系\"></a>14.4.3 移除关系</h3><p>接下来，每个无效的响应式表达式和输出都会“擦除”所有进入和离开它的箭头，从而得到图14.12，并完成无效化阶段。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/2cc1585580182ea1a8c6b7feaa570763c7114f2a/82889/diagrams/reactivity-tracking/11.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/2cc1585580182ea1a8c6b7feaa570763c7114f2a/82889/diagrams/reactivity-tracking/11.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图14.12：无效的节点会忘记它们之前的所有关系，以便重新发现它们\"></p>\n<p>从一个节点发出的箭头是一次性通知，它们将在下一次值发生变化时触发。现在它们已经触发了，完成了它们的使命，我们可以将它们擦除。</p>\n<p>为什么我们要擦除进入无效节点的箭头，即使它们来自的节点并未无效化，这一点可能不太明显。虽然这些箭头代表尚未触发的通知，但无效的节点不再关心它们：响应式消费者只关心通知以使自己无效化，而这已经发生了。</p>\n<p>我们如此重视这些关系，但现在却把它们抛弃了，这似乎有点反常！但这是Shiny响应式编程模型的关键部分：<font color=#FF0000>虽然这些特定的箭头很重要，但它们现在已经过时了</font>。确保我们的图保持准确性的唯一方法是，在它们变得陈旧时擦除箭头，并让Shiny在重新执行时重新发现这些节点周围的关系。我们将在第14.5节中再次讨论这个重要话题。</p>\n<h3 id=\"14-4-4-重新执行\"><a href=\"#14-4-4-重新执行\" class=\"headerlink\" title=\"14.4.4 重新执行\"></a>14.4.4 重新执行</h3><p>现在，我们处于与执行第二个输出时非常相似的情况，此时既有有效也有无效的反应式。是时候做我们之前做过的事情了：执行无效的输出，每次执行一个，从图14.13开始。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/4dadc6829acfaf4b05bbb2564904b30446287d8c/76119/diagrams/reactivity-tracking/12.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/4dadc6829acfaf4b05bbb2564904b30446287d8c/76119/diagrams/reactivity-tracking/12.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图14.13 现在，重新执行的过程与执行过程相同，但因为我们不是从零开始，所以要做的工作就少了很多\"></p>\n<p>同样，我不会展示具体细节，但最终结果将是一个所有节点都被标记为绿色的静止反应式图。这个过程的巧妙之处在于，Shiny只做了最小量的工作——我们只做了更新那些实际受输入变化影响的输出所需的工作。</p>\n<h3 id=\"14-4-5-练习\"><a href=\"#14-4-5-练习\" class=\"headerlink\" title=\"14.4.5 练习\"></a>14.4.5 练习</h3><ol>\n<li>为以下服务器函数绘制反应式图，并解释为什么反应式没有运行。</li>\n</ol>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"built_in\">sum</span> <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>x <span class=\"operator\">+</span> input<span class=\"operator\">$</span>y <span class=\"operator\">+</span> input<span class=\"operator\">$</span>z<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"built_in\">prod</span> <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>x <span class=\"operator\">*</span> input<span class=\"operator\">$</span>y <span class=\"operator\">*</span> input<span class=\"operator\">$</span>z<span class=\"punctuation\">)</span></span><br><span class=\"line\">  division <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"built_in\">prod</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">/</span> <span class=\"built_in\">sum</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>以下反应式图通过使用Sys.sleep()模拟长时间运行的计算：</li>\n</ol>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x1 <span class=\"operator\">&lt;-</span> reactiveVal<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">x2 <span class=\"operator\">&lt;-</span> reactiveVal<span class=\"punctuation\">(</span><span class=\"number\">2</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">x3 <span class=\"operator\">&lt;-</span> reactiveVal<span class=\"punctuation\">(</span><span class=\"number\">3</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">y1 <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  x1<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">y2 <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  x2<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">y3 <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  x2<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">+</span> x3<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">+</span> y2<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">+</span> y2<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">observe<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  print<span class=\"punctuation\">(</span>y1<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  print<span class=\"punctuation\">(</span>y2<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  print<span class=\"punctuation\">(</span>y3<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>如果<code>x1</code>改变，图重新计算需要多长时间？<code>x2</code>或<code>x3</code>呢？</p>\n<ol start=\"3\">\n<li>如果你尝试创建一个带有循环的反应式图，会发生什么？</li>\n</ol>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x <span class=\"operator\">&lt;-</span> reactiveVal<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">y <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span>x <span class=\"operator\">+</span> y<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">y<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"14-5-动态性\"><a href=\"#14-5-动态性\" class=\"headerlink\" title=\"14.5 动态性\"></a>14.5 动态性</h2><p>在第14.4.3节中，你了解到Shiny“忘记”了它在记录时花费大量精力建立的反应式组件之间的连接。这使得Shiny的反应式具有动态性，因为它可以在你的应用程序运行时发生变化。这种动态性非常重要，我想用一个简单的例子来强调它：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;choice&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;A or B?&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;a&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;b&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;a&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;a&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">0</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;b&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;b&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">10</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;out&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>out <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>choice <span class=\"operator\">==</span> <span class=\"string\">&quot;a&quot;</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      input<span class=\"operator\">$</span>a</span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span> <span class=\"keyword\">else</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      input<span class=\"operator\">$</span>b</span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span> </span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>你可能会期望反应式图看起来如图14.14所示。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/3aa4c110444589f5a2be4ea81ad573315d9cf899/eb8e6/diagrams/reactivity-tracking/dynamic.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/3aa4c110444589f5a2be4ea81ad573315d9cf899/eb8e6/diagrams/reactivity-tracking/dynamic.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图14.14 如果Shiny静态地分析反应式，那么反应式图总是会将`choice`、`a`和`b`连接到`out`\"></p>\n<p>但是，由于Shiny在输出被标记为无效后会动态地重建图，因此它实际上看起来会像图14.15中的任何一个图，这取决于<code>input$choice</code>的值。这确保了当输入被标记为无效时，Shiny会做最少量的工作。在这种情况下，如果<code>input$choice</code>被设置为“b”，那么<code>input$a</code>的值不会影响<code>output$out</code>，因此没有必要重新计算它。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/e06cc554ebc90037aed6cbaaf28cc970d31c594a/63c0d/diagrams/reactivity-tracking/dynamic2.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/e06cc554ebc90037aed6cbaaf28cc970d31c594a/63c0d/diagrams/reactivity-tracking/dynamic2.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图14.15 但是，Shiny的反应式图是动态的，所以图要么将`out`连接到`choice`和`a`（左图），要么连接到`choice`和`b`（右图）\"></p>\n<p>值得注意的是（正如Yindeng Jiang在他们的博客中所做的那样），一个微小的更改将导致输出始终依赖于<code>a</code>和<code>b</code>：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output<span class=\"operator\">$</span>out <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  a <span class=\"operator\">&lt;-</span> input<span class=\"operator\">$</span>a</span><br><span class=\"line\">  b <span class=\"operator\">&lt;-</span> input<span class=\"operator\">$</span>b</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> <span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>choice <span class=\"operator\">==</span> <span class=\"string\">&quot;a&quot;</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    a</span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span> <span class=\"keyword\">else</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    b</span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span> </span><br></pre></td></tr></table></figure>\n\n<p>这对正常的R代码输出没有影响，但在这里却有所不同，因为反应式依赖是在你从输入中读取值时建立的，而不是在你使用该值时建立的。</p>\n<h2 id=\"14-6-reactlog包\"><a href=\"#14-6-reactlog包\" class=\"headerlink\" title=\"14.6 reactlog包\"></a>14.6 reactlog包</h2><p>手动绘制反应式图是一种强大的技术，可以帮助你理解简单的应用程序，并构建出反应式编程的准确心理模型。但对于拥有许多动态部分的实际应用程序来说，这样做很痛苦。如果我们能使用Shiny对其了解的内容自动绘制图形，那岂不是太好了？这就是<code>reactlog</code>包的工作，它生成所谓的反应日志（reactlog），展示了反应式图如何随时间演变。</p>\n<p>要查看反应日志，你首先需要安装reactlog包，使用<code>reactlog::reactlog_enable()</code>启用它，然后启动你的应用程序。你有两个选项：</p>\n<ul>\n<li><p>在应用程序运行时，按Cmd + F3（在Windows上是Ctrl + F3），以显示到目前为止生成的反应日志。</p>\n</li>\n<li><p>在应用程序关闭后，运行<code>shiny::reactlogShow()</code>以查看整个会话的日志。</p>\n</li>\n</ul>\n<p>reactlog使用与本章相同的图形约定，因此你应该会立即感到熟悉。最大的不同是，reactlog绘制了所有依赖项，即使它们当前未被使用，以保持自动布局的稳定性。当前不活跃的连接（但过去或将来会活跃）被绘制为细虚线。</p>\n<p>图14.16展示了reactlog为我们上面使用的应用程序绘制的反应式图。截图中有一个惊喜：有三个额外的反应式输入（<code>clientData$output_x_height</code>、<code>clientData$output_x_width</code>和<code>clientData$pixelratio</code>）没有出现在源代码中。这些存在是因为图表对输出的大小有隐式依赖；每当输出大小改变时，图表都需要重新绘制。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/f5c46b4a728eb6b329549c5156a299c3fe28fb21/6b5cb/images/reactivity-graph/reactlog.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/f5c46b4a728eb6b329549c5156a299c3fe28fb21/6b5cb/images/reactivity-graph/reactlog.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图14.16 由reactlog绘制的假设应用程序的反应式图\"></p>\n<p>请注意，虽然反应式输入和输出有名称，但反应式表达式和观察者没有，因此它们用其内容标记。为了更容易理解，你可能想使用<a href=\"https://rdrr.io/pkg/shiny/man/reactive.html\">reactive()</a>和<a href=\"https://rdrr.io/pkg/shiny/man/observe.html\">observe()</a>的<code>label</code>参数，这样它们就会出现在反应日志中。你可以使用表情符号来使特别重要的反应式在视觉上脱颖而出。</p>\n<h2 id=\"14-7-总结\"><a href=\"#14-7-总结\" class=\"headerlink\" title=\"14.7 总结\"></a>14.7 总结</h2><p>在本章中，你精确地学习了反应式图是如何工作的。特别是，你首次了解了无效化阶段，它不会立即导致重新计算，而是将反应式消费者标记为无效，以便在需要时重新计算。无效化周期也很重要，因为它清除了之前发现的依赖项，以便它们可以自动重新发现，从而使反应式图具有动态性。</p>\n<p>现在你已经掌握了全局，下一章将提供一些关于支持反应式值、表达式和输出的底层数据结构的额外细节，并讨论与定时无效化相关的概念。</p>\n<h1 id=\"加关注\"><a href=\"#加关注\" class=\"headerlink\" title=\"加关注\"></a>加关注</h1><p>关注公众号“生信之巅”。</p>\n<table align=\"center\"><tr>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅微信公众号\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-right: 0px;margin-bottom: 5px;align: center;\"></td>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅小程序码\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-left: 0px;margin-bottom: 5px;align: center\"></td>\n</tr></table>\n\n\n<p><font color=\"#FF0000\"><ruby><b>敬告</b>：使用文中脚本请引用本文网址，请尊重本人的劳动成果，谢谢！<rt><b>Notice</b>: When you use the scripts in this article, please cite the link of this webpage. Thank you!</rt></ruby></font></p>\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"编程","path":"api/tags/编程.json"},{"name":"Shiny入门系列","path":"api/tags/Shiny入门系列.json"}]},{"title":"Shiny从入门到入定——16-Escaping the graph","slug":"Shiny从入门到入定——16-Escaping-the-graph","date":"2024-09-26T14:05:28.000Z","updated":"2024-09-26T14:29:29.863Z","comments":true,"path":"api/articles/Shiny从入门到入定——16-Escaping-the-graph.json","excerpt":null,"keywords":null,"cover":"https://d33wubrfki0l68.cloudfront.net/df8aa242946fb586f90d40d735dd0ea497a56b4d/0d739/diagrams/reactivity-tracking/invalidate-1.png","content":"<h1 id=\"跳出反应式图\"><a href=\"#跳出反应式图\" class=\"headerlink\" title=\"跳出反应式图\"></a>跳出反应式图</h1><h2 id=\"16-1-引言\"><a href=\"#16-1-引言\" class=\"headerlink\" title=\"16.1 引言\"></a>16.1 引言</h2><p>Shiny的反应式编程框架极其有用，因为它能自动确定在输入变化时更新所有输出所需的最小计算集。但这个框架也故意施加了一些限制，有时你需要摆脱这些限制去做一些有风险但必要的事情。</p>\n<p>在本章中，你将学习如何结合<a href=\"https://rdrr.io/pkg/shiny/man/reactiveValues.html\">reactiveValues()</a>和<code>observe()</code>&#x2F;<code>observeEvent()</code>将反应式图的右侧连接到左侧。这些技术之所以强大，是因为它们让你能够手动控制图的一部分。但它们也很危险，因为它们会让你的应用做不必要的工作。最重要的是，你现在可以创建无限循环，让你的应用陷入永无止境的更新循环中。</p>\n<p>如果你发现本章中探讨的想法很有趣，你可能还想看看<a href=\"https://github.com/hadley/shinySignals/\">shinySignals</a>和<a href=\"https://github.com/jcheng5/rxtools\">rxtools</a>包。这两个都是实验性包，旨在探索“高阶”反应式，即通过其他反应式编程创建的反应式。我不建议你在“真实”应用中使用它们，但阅读源代码可能会很有启发性。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>shiny<span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"16-2-反应式图没有捕获什么？\"><a href=\"#16-2-反应式图没有捕获什么？\" class=\"headerlink\" title=\"16.2 反应式图没有捕获什么？\"></a>16.2 反应式图没有捕获什么？</h2><p>在第14.4节中，我们讨论了当用户导致输入失效时会发生什么。作为应用开发者，你可能还有两个重要的情况需要使输入失效：</p>\n<ul>\n<li><p>你调用一个更新函数并设置值参数。这会向浏览器发送消息以更改输入的值，然后通知R输入值已更改。</p>\n</li>\n<li><p>你修改了一个反应式值（使用<code>reactiveVal()</code>或<code>reactiveValues()</code>创建）的值。</p>\n</li>\n</ul>\n<p>重要的是要理解，在这两种情况下，反应式值和观察者之间并没有创建反应式依赖关系。虽然这些操作会导致图失效，但它们并没有通过新的连接被记录下来。</p>\n<p>为了具体说明这个想法，请考虑以下简单的应用，其反应式图如图16.1所示。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  textInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;nm&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;name&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;clr&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Clear&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;hi&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  hi <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span>paste0<span class=\"punctuation\">(</span><span class=\"string\">&quot;Hi &quot;</span><span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>nm<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>hi <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span>hi<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>clr<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    updateTextInput<span class=\"punctuation\">(</span>session<span class=\"punctuation\">,</span> <span class=\"string\">&quot;nm&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/df8aa242946fb586f90d40d735dd0ea497a56b4d/0d739/diagrams/reactivity-tracking/invalidate-1.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/df8aa242946fb586f90d40d735dd0ea497a56b4d/0d739/diagrams/reactivity-tracking/invalidate-1.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图16.1 反应式图没有记录未命名观察者和nm输入之间的连接；这种依赖关系超出了它的范围\"></p>\n<p>当你按下清除按钮时会发生什么？</p>\n<ul>\n<li><code>input$clr</code>失效，然后观察者也会失效。</li>\n<li>观察者重新计算，重新建立对<code>input$clr</code>的依赖，并告诉浏览器更改输入控件的值。</li>\n<li>浏览器更改nm的值。</li>\n<li><code>input$nm</code>失效，导致<code>hi()</code>失效，然后是<code>output$hi</code>。</li>\n<li><code>output$hi</code>重新计算，强制<code>hi()</code>重新计算。</li>\n</ul>\n<p>这些操作都没有改变反应式图，所以它仍然如图16.1所示，并且图没有捕获从观察者到<code>input$nm</code>的连接。</p>\n<h2 id=\"16-3-案例研究\"><a href=\"#16-3-案例研究\" class=\"headerlink\" title=\"16.3 案例研究\"></a>16.3 案例研究</h2><p>接下来，让我们看一些有用的案例，在这些案例中，你可能需要结合<code>reactiveValues()</code>和<code>observeEvent()</code>或<code>observe()</code>来解决一些非常具有挑战性（甚至不可能）的问题。这些是你的应用中有用的模板。</p>\n<h3 id=\"16-3-1-多个输入修改一个输出\"><a href=\"#16-3-1-多个输入修改一个输出\" class=\"headerlink\" title=\"16.3.1 多个输入修改一个输出\"></a>16.3.1 多个输入修改一个输出</h3><p>首先，我们将解决一个非常简单的问题：我希望有一个文本框，它可以由多个事件更新。</p>\n<figure class=\"highlight plaintext\"><figcaption><span><- fluidPage(</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  actionButton(&quot;drink&quot;, &quot;drink me&quot;),</span><br><span class=\"line\">  actionButton(&quot;eat&quot;, &quot;eat me&quot;),</span><br><span class=\"line\">  textOutput(&quot;notice&quot;)</span><br><span class=\"line\">)</span><br><span class=\"line\">server &lt;- function(input, output, session) &#123;</span><br><span class=\"line\">  r &lt;- reactiveValues(notice = &quot;&quot;)</span><br><span class=\"line\">  observeEvent(input$drink, &#123;</span><br><span class=\"line\">    r$notice &lt;- &quot;You are no longer thirsty&quot;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  observeEvent(input$eat, &#123;</span><br><span class=\"line\">    r$notice &lt;- &quot;You are no longer hungry&quot;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  output$notice &lt;- renderText(r$notice)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在下一个例子中，事情会变得稍微复杂一些，我们有一个应用，其中有两个按钮，分别用于增加和减少值。我们使用<code>reactiveValues()</code>来存储当前值，然后使用<code>observeEvent()</code>在按下相应的按钮时增加或减少该值。这里的主要额外复杂性在于，<code>r$n</code>的新值取决于之前的值。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;up&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;up&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;down&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;down&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  r <span class=\"operator\">&lt;-</span> reactiveValues<span class=\"punctuation\">(</span>n <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>up<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    r<span class=\"operator\">$</span>n <span class=\"operator\">&lt;-</span> r<span class=\"operator\">$</span>n <span class=\"operator\">+</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>down<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    r<span class=\"operator\">$</span>n <span class=\"operator\">&lt;-</span> r<span class=\"operator\">$</span>n <span class=\"operator\">-</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>n <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span>r<span class=\"operator\">$</span>n<span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>图16.2显示了此示例的反应式图。再次注意，反应式图不包括从观察者到反应式值<code>n</code>的任何连接。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/11c52cd6c1484323dcac858b7e003cc437ed83ae/3dcbe/diagrams/reactivity-components/button.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/11c52cd6c1484323dcac858b7e003cc437ed83ae/3dcbe/diagrams/reactivity-components/button.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图16.2 反应式图不捕获从观察者到输入值的连接\"></p>\n<h3 id=\"16-3-2-累加输入\"><a href=\"#16-3-2-累加输入\" class=\"headerlink\" title=\"16.3.2 累加输入\"></a>16.3.2 累加输入</h3><p>如果你想通过累加数据来支持数据输入，那么这也是一个类似的模式。这里的主要区别在于，我们使用<a href=\"https://rdrr.io/pkg/shiny/man/updateTextInput.html\">updateTextInput()</a>在用户点击添加按钮后重置文本框。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  textInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;name&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;name&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;add&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;add&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;names&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  r <span class=\"operator\">&lt;-</span> reactiveValues<span class=\"punctuation\">(</span><span class=\"built_in\">names</span> <span class=\"operator\">=</span> character<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>add<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    r<span class=\"operator\">$</span><span class=\"built_in\">names</span> <span class=\"operator\">&lt;-</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>name<span class=\"punctuation\">,</span> r<span class=\"operator\">$</span><span class=\"built_in\">names</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    updateTextInput<span class=\"punctuation\">(</span>session<span class=\"punctuation\">,</span> <span class=\"string\">&quot;name&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span><span class=\"built_in\">names</span> <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span>r<span class=\"operator\">$</span><span class=\"built_in\">names</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们可以让这个应用更加实用，方法是提供一个删除按钮，并确保添加按钮不会创建重复的名称：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  textInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;name&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;name&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;add&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;add&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;del&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;delete&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;names&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  r <span class=\"operator\">&lt;-</span> reactiveValues<span class=\"punctuation\">(</span><span class=\"built_in\">names</span> <span class=\"operator\">=</span> character<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>add<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    r<span class=\"operator\">$</span><span class=\"built_in\">names</span> <span class=\"operator\">&lt;-</span> union<span class=\"punctuation\">(</span>r<span class=\"operator\">$</span><span class=\"built_in\">names</span><span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>name<span class=\"punctuation\">)</span></span><br><span class=\"line\">    updateTextInput<span class=\"punctuation\">(</span>session<span class=\"punctuation\">,</span> <span class=\"string\">&quot;name&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>del<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    r<span class=\"operator\">$</span><span class=\"built_in\">names</span> <span class=\"operator\">&lt;-</span> setdiff<span class=\"punctuation\">(</span>r<span class=\"operator\">$</span><span class=\"built_in\">names</span><span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>name<span class=\"punctuation\">)</span></span><br><span class=\"line\">    updateTextInput<span class=\"punctuation\">(</span>session<span class=\"punctuation\">,</span> <span class=\"string\">&quot;name&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span><span class=\"built_in\">names</span> <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span>r<span class=\"operator\">$</span><span class=\"built_in\">names</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"16-3-3-暂停动画\"><a href=\"#16-3-3-暂停动画\" class=\"headerlink\" title=\"16.3.3 暂停动画\"></a>16.3.3 暂停动画</h3><p>另一个常见的用例是提供一个开始和停止按钮，以便你控制一些重复发生的事件。此示例使用运行中的反应式值来控制数字是否递增，并使用<code>invalidateLater()</code>来确保在运行时每250毫秒使观察者失效一次。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;start&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;start&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;stop&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;stop&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  r <span class=\"operator\">&lt;-</span> reactiveValues<span class=\"punctuation\">(</span>running <span class=\"operator\">=</span> <span class=\"literal\">FALSE</span><span class=\"punctuation\">,</span> n <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>start<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    r<span class=\"operator\">$</span>running <span class=\"operator\">&lt;-</span> <span class=\"literal\">TRUE</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>stop<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    r<span class=\"operator\">$</span>running <span class=\"operator\">&lt;-</span> <span class=\"literal\">FALSE</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  observe<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"punctuation\">(</span>r<span class=\"operator\">$</span>running<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      r<span class=\"operator\">$</span>n <span class=\"operator\">&lt;-</span> isolate<span class=\"punctuation\">(</span>r<span class=\"operator\">$</span>n<span class=\"punctuation\">)</span> <span class=\"operator\">+</span> <span class=\"number\">1</span></span><br><span class=\"line\">      invalidateLater<span class=\"punctuation\">(</span><span class=\"number\">250</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>n <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span>r<span class=\"operator\">$</span>n<span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>请注意，在这种情况下，我们不能轻松地使用<code>observeEvent()</code>，因为我们需要根据<code>running()</code>是TRUE还是FALSE来执行不同的操作。由于我们不能使用<code>observeEvent()</code>，因此我们必须使用<code>isolate()</code>——如果我们不使用它，这个观察者还会对<code>n</code>产生反应式依赖，而<code>n</code>正是它更新的对象，因此它会陷入无限循环。</p>\n<p>希望这些示例能让你对使用<code>reactiveValues()</code>和<code>observe()</code>进行编程有所感受。它非常直观：当发生这种情况时，执行那个操作；当发生那种情况时，执行另一个操作。这在小范围内更容易理解，但当更大的部分开始交互时就更难理解了。因此，一般来说，你会希望尽可能少地使用它，并将其隔离开来，以便尽可能少的观察者修改反应式值。</p>\n<h3 id=\"16-3-4-练习\"><a href=\"#16-3-4-练习\" class=\"headerlink\" title=\"16.3.4 练习\"></a>16.3.4 练习</h3><p>提供一个服务器函数，当点击“normal”时，绘制100个正态分布的随机数的直方图，当点击“uniform”时，绘制100个均匀分布的随机数。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;rnorm&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Normal&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;runif&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Uniform&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  plotOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;plot&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>修改你上面的代码以使其与以下UI一起工作：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;type&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;type&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;Normal&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Uniform&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  plotOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;plot&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>根据你之前的答案重写代码，以消除对<code>observe()</code>&#x2F;<code>observeEvent()</code>的使用，而仅使用<code>reactive()</code>。为什么你可以在第二个UI中这样做，而在第一个UI中却不能？</p>\n<h2 id=\"16-4-反模式-Anti-patterns\"><a href=\"#16-4-反模式-Anti-patterns\" class=\"headerlink\" title=\"16.4 反模式 (Anti-patterns)\"></a>16.4 反模式 (Anti-patterns)</h2><p>一旦你掌握了这种模式，就很容易养成坏习惯：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  r <span class=\"operator\">&lt;-</span> reactiveValues<span class=\"punctuation\">(</span>df <span class=\"operator\">=</span> cars<span class=\"punctuation\">)</span></span><br><span class=\"line\">  observe<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    r<span class=\"operator\">$</span>df <span class=\"operator\">&lt;-</span> head<span class=\"punctuation\">(</span>cars<span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>nrows<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>plot <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span>plot<span class=\"punctuation\">(</span>r<span class=\"operator\">$</span>df<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>table <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span>r<span class=\"operator\">$</span>df<span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>在这个简单的例子中，与使用<code>reactive()</code>的替代方案相比，这段代码并没有做太多额外的工作：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  df <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span>head<span class=\"punctuation\">(</span>cars<span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>nrows<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>plot <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span>plot<span class=\"punctuation\">(</span>df<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>table <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span>df<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>但仍然存在两个缺点：</p>\n<ul>\n<li><p>如果表格或图表位于当前不可见的标签页中，观察者仍然会绘制&#x2F;显示它们。</p>\n</li>\n<li><p>如果<code>head()</code>函数出错，<code>observe()</code>将终止应用，但<code>reactive()</code>会传播错误，以便显示。然而，如果<code>reactive()</code>抛出错误，它不会被传播。</p>\n</li>\n</ul>\n<p>随着应用变得越来越复杂，情况会逐渐变得更糟。很容易退回到第13.2.3节中描述的事件驱动编程情况。你最终会花费大量精力来分析应用中的事件流，而不是依赖Shiny自动为你处理。</p>\n<p>比较这两个反应式图是有启发性的。图16.3显示了第一个示例的图。这是误导性的，因为它看起来不像<code>nrows</code>与<code>df()</code>有连接。使用如图16.4所示的反应式，可以很容易地看到它们之间的精确连接。拥有一个尽可能简单的反应式图对于人类和Shiny来说都很重要。简单的图对人类来说更容易理解，对Shiny来说也更容易优化。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/f86c5d20efbea98c76a10026851060db8cbede2d/d2245/diagrams/reactivity-components/danger.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/f86c5d20efbea98c76a10026851060db8cbede2d/d2245/diagrams/reactivity-components/danger.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图16.3 使用响应式值和观察者会导致图表的一部分断开连接\"></p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/216ca90acb1508ba9e1d7ee23d9db15becdb2ef2/ced9f/diagrams/reactivity-components/danger-2.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/216ca90acb1508ba9e1d7ee23d9db15becdb2ef2/ced9f/diagrams/reactivity-components/danger-2.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图16.4 使用响应式编程使得组件之间的依赖关系非常清晰\"></p>\n<h2 id=\"16-5-总结\"><a href=\"#16-5-总结\" class=\"headerlink\" title=\"16.5 总结\"></a>16.5 总结</h2><p>在过去的四章中，您深入了解了Shiny使用的响应式编程模型。您学习了为什么响应式编程很重要（它允许Shiny仅完成所需的工作，不多也不少），以及响应式图的细节。您还稍微了解了一些基本构建块在内部的工作原理，以及如何在需要时利用它们来摆脱响应式图的限制。</p>\n<p>在接下来的七章中，您将学习如何保持Shiny应用程序的可维护性、性能和安全性，随着其规模和影响力的不断增长。</p>\n<h1 id=\"代码获取\"><a href=\"#代码获取\" class=\"headerlink\" title=\"代码获取\"></a>代码获取</h1><p>关注公众号“生信之巅”，聊天窗口回复“85d7”获取下载链接。</p>\n<table align=\"center\"><tr>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅微信公众号\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-right: 0px;margin-bottom: 5px;align: center;\"></td>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅小程序码\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-left: 0px;margin-bottom: 5px;align: center\"></td>\n</tr></table>\n\n\n<p><font color=\"#FF0000\"><ruby><b>敬告</b>：使用文中脚本请引用本文网址，请尊重本人的劳动成果，谢谢！<rt><b>Notice</b>: When you use the scripts in this article, please cite the link of this webpage. Thank you!</rt></ruby></font></p>\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"编程","path":"api/tags/编程.json"},{"name":"Shiny入门系列","path":"api/tags/Shiny入门系列.json"}]},{"title":"Shiny从入门到入定——2-在大大的花园里面挖呀挖呀挖","slug":"Shiny从入门到入定——2-在大大的花园里面挖呀挖呀挖","date":"2023-11-18T12:14:50.000Z","updated":"2024-03-11T13:07:17.000Z","comments":true,"path":"api/articles/Shiny从入门到入定——2-在大大的花园里面挖呀挖呀挖.json","excerpt":null,"keywords":null,"cover":"https://d33wubrfki0l68.cloudfront.net/e7b5aeb0678eac89f60033eb84640779ad510c41/f7ade/demos/basic-ui/free-text.png","content":"<h1 id=\"基础UI\"><a href=\"#基础UI\" class=\"headerlink\" title=\"基础UI\"></a>基础UI</h1><h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>现在，您已经具备了基本的Shiny应用程序，我们可以开始详细探索使Shiny起作用的内容。正如您在上一章所看到的，Shiny鼓励将生成用户界面（前端）的代码与驱动应用程序行为的代码（后端）分开。</p>\n<p>在本章中，我们将重点关注前端，并向您展示由Shiny提供的HTML输入和输出的大致情况。这使您能够捕获许多类型的表单数据，并显示许多类型的R输出。到目前为止，您可能还没有很多将输入和输出拼接在一起的方法，我们将在第6章中回顾这一点。</p>\n<p>在这里，我将主要关注Shiny自身内置的输入和输出。但是，还有一个丰富而充满活力的社区扩展包，例如<a href=\"https://github.com/dreamRs/shinyWidgets\">shinyWidgets</a>、<a href=\"https://github.com/daattali/colourpicker\">colorpicker</a>和<a href=\"https://rstudio.github.io/sortable/\">sorttable</a>。您可以在<a href=\"https://github.com/nanxstats/awesome-shiny-extensions\">https://github.com/nanxstats/awesome-shiny-extensions</a>找到其他全面且维护良好的包列表，该列表由<a href=\"https://nanx.me/\">Nan Xiao</a>维护。</p>\n<p>与往常一样，我们将从加载shiny包开始：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>shiny<span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"输入\"><a href=\"#输入\" class=\"headerlink\" title=\"输入\"></a>输入</h2><p>正如我们在上一章所看到的，您使用诸如<code>sliderInput()</code>、<code>selectInput()</code>、<code>textInput()</code>和<code>numericInput()</code>之类的函数将输入控件插入到您的UI规范中。现在我们将讨论所有输入函数所共有的常见结构，并为内置在Shiny中的输入提供快速概述。</p>\n<h3 id=\"常见结构\"><a href=\"#常见结构\" class=\"headerlink\" title=\"常见结构\"></a>常见结构</h3><p>所有输入函数都具有相同的第一个参数：<code>inputId</code>。这是用于将前端与后端连接的标识符：如果您的用户界面具有ID为<code>name</code>的输入，则server函数将使用<code>input$name</code>来访问它。</p>\n<p><code>inputId</code>有两个约束：</p>\n<ul>\n<li><p>它必须是一个简单的字符串，只包含字母、数字和下划线（不允许空格、破折号、句点或其他特殊字符！）以R命名变量。</p>\n</li>\n<li><p>它必须是唯一的。如果它不是唯一的，那么您将无法在server函数中引用此控件！</p>\n</li>\n</ul>\n<p>大多数输入函数都有一个称为<code>label</code>的第二个参数。这是用于为控件创建一个人类可读的标签。Shiny对此字符串没有任何限制，但您需要仔细考虑，以确保您的应用程序对人类可用！第三个参数通常是<code>value</code>，在可能的情况下，允许您设置默认值。其余参数是控件特有的。</p>\n<p>创建输入时，我建议按位置提供inputId和label参数，并按名称提供所有其他参数：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;min&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Limit (minimum)&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">50</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">100</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>以下部分描述了Shiny内置的输入，根据它们创建的控制类型松散分组。目标是让您快速了解您的选项，而不是详尽地描述所有参数。下面我将展示每个控件最重要的参数，但您需要阅读文档以获得完整详细信息。</p>\n<h3 id=\"自由文本\"><a href=\"#自由文本\" class=\"headerlink\" title=\"自由文本\"></a>自由文本</h3><p>使用<code>textInput()</code>收集少量文本，使用<code>passwordInput()</code><sup>3</sup>收集密码，使用<code>textAreaInput()</code>收集段落文本。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  textInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;name&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;What&#x27;s your name?&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  passwordInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;password&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;What&#x27;s your password?&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textAreaInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;story&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Tell me about yourself&quot;</span><span class=\"punctuation\">,</span> rows <span class=\"operator\">=</span> <span class=\"number\">3</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/e7b5aeb0678eac89f60033eb84640779ad510c41/f7ade/demos/basic-ui/free-text.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/e7b5aeb0678eac89f60033eb84640779ad510c41/f7ade/demos/basic-ui/free-text.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"text\"></p>\n<p>如果你想确保文本具有某些属性，你可以使用<code>validate()</code>，我们将在第8章中介绍这个函数。</p>\n<h3 id=\"数值输入\"><a href=\"#数值输入\" class=\"headerlink\" title=\"数值输入\"></a>数值输入</h3><p>要收集数值，请使用<code>numericInput()</code>创建一个受约束的文本框，或使用<code>sliderInput()</code>创建一个滑块。如果你为sliderInput()的默认值提供一个长度为2的数值向量，你将获得一个带有两个端点的“范围”滑块。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;num&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Number one&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">100</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;num2&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Number two&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">50</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">100</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;rng&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Range&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"number\">10</span><span class=\"punctuation\">,</span> <span class=\"number\">20</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">100</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/dcd1cdd3477e7f859c8d5388b435ca75836d74ba/cdd56/demos/basic-ui/numeric.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/dcd1cdd3477e7f859c8d5388b435ca75836d74ba/cdd56/demos/basic-ui/numeric.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"numeric\"></p>\n<p>一般来说，我只建议在范围较小或者精确数值不太重要的情况下使用滑块。尝试在小的滑块上精确选择一个数字是一件很令人沮丧的事情！</p>\n<p>滑块非常可定制，有很多方法可以调整它们的外观。更多细节请参见<code>?sliderInput</code>和<a href=\"https://shiny.rstudio.com/articles/sliders.html\">https://shiny.rstudio.com/articles/sliders.html</a>。</p>\n<h3 id=\"日期\"><a href=\"#日期\" class=\"headerlink\" title=\"日期\"></a>日期</h3><p>使用<code>dateInput()</code>收集单个日期，或使用<code>dateRangeInput()</code>收集两个日期之间的范围。这些都提供了一个方便的日历选择器，额外的参数如<code>datesdisabled</code>和<code>daysofweekdisabled</code>允许您限制有效的输入集。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  dateInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;dob&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;When were you born?&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  dateRangeInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;holiday&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;When do you want to go on vacation next?&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/585b8dcaf38038e5c2768e8a4858171baa04e308/02979/demos/basic-ui/date.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/585b8dcaf38038e5c2768e8a4858171baa04e308/02979/demos/basic-ui/date.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"date\"></p>\n<p>日期格式、语言和一周开始的日期默认采用美国标准。如果您正在为国际用户创建应用程序，请设置格式、语言和一周开始日期，以便日期对您的用户来说是自然的。</p>\n<h3 id=\"有限制的选择\"><a href=\"#有限制的选择\" class=\"headerlink\" title=\"有限制的选择\"></a>有限制的选择</h3><p>有两种不同的方法允许用户从预设的选项集中进行选择：<code>selectInput()</code>和<code>radioButtons()</code>。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animals <span class=\"operator\">&lt;-</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;dog&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;cat&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;mouse&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;bird&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;other&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;I hate animals&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;state&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;What&#x27;s your favourite state?&quot;</span><span class=\"punctuation\">,</span> state.name<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  radioButtons<span class=\"punctuation\">(</span><span class=\"string\">&quot;animal&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;What&#x27;s your favourite animal?&quot;</span><span class=\"punctuation\">,</span> animals<span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/2605fed791b02e16d28d2c389df9130d349bf1b3/4dc8e/demos/basic-ui/limited-choices.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/2605fed791b02e16d28d2c389df9130d349bf1b3/4dc8e/demos/basic-ui/limited-choices.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"choice\"></p>\n<p>单选按钮有两个很好的特点：它们显示所有可能的选项，适合于短列表，并且通过<code>choiceNames/choiceValues</code>参数，它们可以显示除普通文本之外的其他选项。<code>choiceNames</code>确定向用户显示的内容；<code>choiceValues</code>确定在您的server函数中返回的内容。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  radioButtons<span class=\"punctuation\">(</span><span class=\"string\">&quot;rb&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Choose one:&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    choiceNames <span class=\"operator\">=</span> <span class=\"built_in\">list</span><span class=\"punctuation\">(</span></span><br><span class=\"line\">      icon<span class=\"punctuation\">(</span><span class=\"string\">&quot;angry&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      icon<span class=\"punctuation\">(</span><span class=\"string\">&quot;smile&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      icon<span class=\"punctuation\">(</span><span class=\"string\">&quot;sad-tear&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    choiceValues <span class=\"operator\">=</span> <span class=\"built_in\">list</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;angry&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;happy&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;sad&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; This Font Awesome icon (&#x27;angry&#x27;) does not exist:</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; * if providing a custom `html_dependency` these `name` checks can </span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   be deactivated with `verify_fa = FALSE`</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; This Font Awesome icon (&#x27;smile&#x27;) does not exist:</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; * if providing a custom `html_dependency` these `name` checks can </span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   be deactivated with `verify_fa = FALSE`</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; This Font Awesome icon (&#x27;sad-tear&#x27;) does not exist:</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; * if providing a custom `html_dependency` these `name` checks can </span></span><br><span class=\"line\"><span class=\"comment\">#&gt;   be deactivated with `verify_fa = FALSE`</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/eab54ba86e9dda3fd9cd417553de341695d46d34/0eb0f/demos/basic-ui/radio-icon.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/eab54ba86e9dda3fd9cd417553de341695d46d34/0eb0f/demos/basic-ui/radio-icon.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"单选按钮\"></p>\n<p>使用<code>selectInput()</code>创建的下拉菜单无论选项数量多少，都占用相同数量的空间，这使得它们更适合于更长的选项。您还可以设置<code>multiple = TRUE</code>以允许用户选择多个元素。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui &lt;- fluidPage(</span><br><span class=\"line\">  selectInput(</span><br><span class=\"line\">    &quot;state&quot;, &quot;What&#x27;s your favourite state?&quot;, state.name,</span><br><span class=\"line\">    multiple = TRUE</span><br><span class=\"line\">  )</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/c53795ad09b7866f0ed7adc1b3adabdd6fc120db/437be/images/basic-ui/multi-select.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/c53795ad09b7866f0ed7adc1b3adabdd6fc120db/437be/images/basic-ui/multi-select.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"下拉菜单\"></p>\n<p>如果你有一组非常大的可能选项，你可能想要使用“server-side”<code>selectInput()</code>，这样完整的可能选项集不被嵌入到UI中（这可能会使加载变慢），而是由服务器按需发送。您可以了解有关此高级主题的更多信息，请访问<a href=\"https://shiny.rstudio.com/articles/selectize.html#server-side-selectize\">https://shiny.rstudio.com/articles/selectize.html#server-side-selectize</a>。</p>\n<p>没有方法可以在单选按钮中选择多个值，但有一个概念上类似的替代方案：<code>checkboxGroupInput()</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui &lt;- fluidPage(</span><br><span class=\"line\">  checkboxGroupInput(&quot;animal&quot;, &quot;What animals do you like?&quot;, animals)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/d3d61d703bac03a0d2823da98e2dbba03d6619d4/51e34/demos/basic-ui/multi-radio.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/d3d61d703bac03a0d2823da98e2dbba03d6619d4/51e34/demos/basic-ui/multi-radio.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\"></p>\n<p>如果您想要一个单选框来回答一个<code>Yes/No</code>问题，请使用<code>checkboxInput()</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui &lt;- fluidPage(</span><br><span class=\"line\">  checkboxInput(&quot;cleanup&quot;, &quot;Clean up?&quot;, value = TRUE),</span><br><span class=\"line\">  checkboxInput(&quot;shutdown&quot;, &quot;Shutdown?&quot;)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h3><p>允许用户通过 <code>fileInput()</code>上传文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui &lt;- fluidPage(</span><br><span class=\"line\">  fileInput(&quot;upload&quot;, NULL)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/92e2422e9b00cec1d6a852cbdb484071ce51ae4e/85324/demos/basic-ui/upload.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/92e2422e9b00cec1d6a852cbdb484071ce51ae4e/85324/demos/basic-ui/upload.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"上传文件\"></p>\n<p>fileInput()需要在server端进行特殊处理，并在第9章中详细讨论。</p>\n<h3 id=\"动作按钮\"><a href=\"#动作按钮\" class=\"headerlink\" title=\"动作按钮\"></a>动作按钮</h3><p>使用<code>actionButton()</code>或<code>actionLink()</code>让用户执行动作。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui &lt;- fluidPage(</span><br><span class=\"line\">  actionButton(&quot;click&quot;, &quot;Click me!&quot;),</span><br><span class=\"line\">  actionButton(&quot;drink&quot;, &quot;Drink me!&quot;, icon = icon(&quot;cocktail&quot;))</span><br><span class=\"line\">)</span><br><span class=\"line\">#&gt; This Font Awesome icon (&#x27;cocktail&#x27;) does not exist:</span><br><span class=\"line\">#&gt; * if providing a custom `html_dependency` these `name` checks can </span><br><span class=\"line\">#&gt;   be deactivated with `verify_fa = FALSE`</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/30a4be90f407bf28ef9a780e78c6d48b8e9e3112/b196c/demos/basic-ui/action.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/30a4be90f407bf28ef9a780e78c6d48b8e9e3112/b196c/demos/basic-ui/action.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"按钮\"></p>\n<p>动作链接和按钮最自然地与server函数中的<code>observeEvent()</code>或<code>eventReactive()</code>配对。您还没有学习这些重要的函数，但我们在第3.5节中会回到它们。</p>\n<p>您可以使用<code>class</code>参数来自定义外观，使用<code>&quot;btn-primary&quot;</code>，<code>&quot;btn-success&quot;</code>，<code>&quot;btn-info&quot;</code>，<code>&quot;btn-warning&quot;</code>或<code>&quot;btn-danger&quot;</code>之一。您还可以使用<code>&quot;btn-lg&quot;</code>，<code>&quot;btn-sm&quot;</code>，<code>&quot;btn-xs&quot;</code>更改大小。最后，您可以使用<code>&quot;btn-block&quot;</code>使按钮跨越其嵌入的元素的整个宽度。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui &lt;- fluidPage(</span><br><span class=\"line\">  fluidRow(</span><br><span class=\"line\">    actionButton(&quot;click&quot;, &quot;Click me!&quot;, class = &quot;btn-danger&quot;),</span><br><span class=\"line\">    actionButton(&quot;drink&quot;, &quot;Drink me!&quot;, class = &quot;btn-lg btn-success&quot;)</span><br><span class=\"line\">  ),</span><br><span class=\"line\">  fluidRow(</span><br><span class=\"line\">    actionButton(&quot;eat&quot;, &quot;Eat me!&quot;, class = &quot;btn-block&quot;)</span><br><span class=\"line\">  )</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p><code>class</code>参数通过设置底层HTML的<code>class</code>属性来工作，这会影响元素的样式。要查看其他选项，您可以阅读Shiny使用的CSS设计系统Bootstrap的文档：<a href=\"http://bootstrapdocs.com/v3.3.6/docs/css/#buttons\">http://bootstrapdocs.com/v3.3.6/docs/css/#buttons</a>。</p>\n<h3 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h3><p>2.2.8.1 当空间不足时，使用一个出现在文本输入区域内的占位符来标记文本框很有用。您如何调用<code>textInput()</code>生成下面的UI？</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/0250dd2b285e770d5fd2a66670a6604775bb7f1e/eaa81/demos/basic-ui/placeholder.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/0250dd2b285e770d5fd2a66670a6604775bb7f1e/eaa81/demos/basic-ui/placeholder.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"2.2.8.1\"></p>\n<p>2.2.8.2 认真阅读<code>sliderInput()</code>的文档以了解如何创建日期滑块，如下：</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/95326f3d91fd5e3c1eba0cfb8aa69a65f1cc0953/ae529/demos/basic-ui/date-slider.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/95326f3d91fd5e3c1eba0cfb8aa69a65f1cc0953/ae529/demos/basic-ui/date-slider.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"日历滑块\"></p>\n<p>2.2.8.3 如何创建日期滑块，使得用户可以在0到100之间选择日期，滑块上每个可选值的间隔为5。然后，为输入小部件添加动画，以便当用户按下播放时，输入小部件会自动滚动到该范围。</p>\n<p>2.2.8.4 如果您有一个中等长度的<code>selectInput()</code>列表，创建子标签是有用的，它可以将列表分成几部分。阅读文档以了解如何操作。（提示：底层HTML称为<code>&lt;optgroup&gt;</code>。）</p>\n<h2 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h2><p>用户界面中的输出创建了占位符，稍后将由server函数填充。与输入一样，输出需要一个唯一的ID作为其第一个参数：如果您的用户界面规范创建了一个ID为<code>plot</code>的输出，您可以通过<code>output$plot</code>在服务器函数中访问它。</p>\n<p>前端中的每个输出函数都与后端的渲染函数配对。有三种主要的输出类型，对应于您通常在报告中包含的三件事：<code>文本</code>、<code>表格</code>和<code>图形</code>。以下部分向您展示了前端输出函数的基本知识，以及后端相应的渲染函数。</p>\n<h3 id=\"文本\"><a href=\"#文本\" class=\"headerlink\" title=\"文本\"></a>文本</h3><p>使用<code>textOutput()</code>输出普通文本，使用<code>verbatimTextOutput()</code>输出固定代码和控制台输出。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui &lt;- fluidPage(</span><br><span class=\"line\">  textOutput(&quot;text&quot;),</span><br><span class=\"line\">  verbatimTextOutput(&quot;code&quot;)</span><br><span class=\"line\">)</span><br><span class=\"line\">server &lt;- function(input, output, session) &#123;</span><br><span class=\"line\">  output$text &lt;- renderText(&#123; </span><br><span class=\"line\">    &quot;Hello friend!&quot; </span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  output$code &lt;- renderPrint(&#123; </span><br><span class=\"line\">    summary(1:10) </span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/61f37c119d66f0b25bb834d6773274856b764727/a9ae2/demos/basic-ui/output-text.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/61f37c119d66f0b25bb834d6773274856b764727/a9ae2/demos/basic-ui/output-text.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\"></p>\n<p>请注意，只有在需要运行多行代码时，<code>&#123;&#125;</code>才需要在渲染函数中使用。正如您即将了解的那样，您应该在渲染函数中尽可能少地进行计算，这意味着您通常可以省略它们。以下是上述server函数更简洁的方式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &lt;- function(input, output, session) &#123;</span><br><span class=\"line\">  output$text &lt;- renderText(&quot;Hello friend!&quot;)</span><br><span class=\"line\">  output$code &lt;- renderPrint(summary(1:10))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意，有两种渲染函数的行为略有不同：</p>\n<ul>\n<li><p><code>renderText()</code>将结果合并成一个字符串，通常与<code>textOutput()</code>配对</p>\n</li>\n<li><p><code>renderPrint()</code>打印结果，就像在R控制台中一样，通常与<code>verbatimTextOutput()</code>配对。</p>\n</li>\n</ul>\n<p>我们可以通过一个玩具应用程序看到这种差异：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui &lt;- fluidPage(</span><br><span class=\"line\">  textOutput(&quot;text&quot;),</span><br><span class=\"line\">  verbatimTextOutput(&quot;print&quot;)</span><br><span class=\"line\">)</span><br><span class=\"line\">server &lt;- function(input, output, session) &#123;</span><br><span class=\"line\">  output$text &lt;- renderText(&quot;hello!&quot;)</span><br><span class=\"line\">  output$print &lt;- renderPrint(&quot;hello!&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/086a9fbcf20ad02bb679141fbe4f263d6cd7646c/dda5c/demos/basic-ui/text-vs-print.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/086a9fbcf20ad02bb679141fbe4f263d6cd7646c/dda5c/demos/basic-ui/text-vs-print.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\"></p>\n<p>二者的区别与R中的 <code>cat()</code> and <code>print()</code>一样。</p>\n<h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3><p>有三种方法可以在表格中显示数据框：</p>\n<ul>\n<li><p><code>tableOutput()</code>和<code>renderTable()</code>呈现静态数据表，一次显示所有数据。</p>\n</li>\n<li><p><code>dataTableOutput()</code>和<code>renderDataTable()</code>呈现动态数据表，一次显示固定数量的行，同时显示控件以更改可见行。</p>\n</li>\n</ul>\n<p><code>tableOutput()</code>最适合小型、固定的摘要（例如模型系数）；如果您想向用户展示完整的数据框，<code>dataTableOutput()</code>最为合适。如果您想更精确地控制<code>dataTableOutput()</code>的输出，我强烈推荐Greg Lin的<a href=\"https://glin.github.io/reactable/index.html\">reactable</a>包。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui &lt;- fluidPage(</span><br><span class=\"line\">  tableOutput(&quot;static&quot;),</span><br><span class=\"line\">  dataTableOutput(&quot;dynamic&quot;)</span><br><span class=\"line\">)</span><br><span class=\"line\">server &lt;- function(input, output, session) &#123;</span><br><span class=\"line\">  output$static &lt;- renderTable(head(mtcars))</span><br><span class=\"line\">  output$dynamic &lt;- renderDataTable(mtcars, options = list(pageLength = 5))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/2fe4c674645896fa18d345ad162f479434746dd2/2e28c/demos/basic-ui/output-table.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/2fe4c674645896fa18d345ad162f479434746dd2/2e28c/demos/basic-ui/output-table.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"表格\"></p>\n<h3 id=\"图形\"><a href=\"#图形\" class=\"headerlink\" title=\"图形\"></a>图形</h3><p>您可以使用<code>plotOutput()</code>和<code>renderPlot()</code>显示任何类型的R图形（基础、ggplot2或其他）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui &lt;- fluidPage(</span><br><span class=\"line\">  plotOutput(&quot;plot&quot;, width = &quot;400px&quot;)</span><br><span class=\"line\">)</span><br><span class=\"line\">server &lt;- function(input, output, session) &#123;</span><br><span class=\"line\">  output$plot &lt;- renderPlot(plot(1:5), res = 96)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/c87e58475e7a0c2e0d12f06ac28169c0c670dc91/b2f86/demos/basic-ui/output-plot.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/c87e58475e7a0c2e0d12f06ac28169c0c670dc91/b2f86/demos/basic-ui/output-plot.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"绘图\"></p>\n<p>默认情况下，<code>plotOutput()</code>将占据其容器的全部宽度（稍后将详细介绍），高度为400像素。您可以使用<code>height</code>和<code>width</code>参数覆盖这些默认值。我们建议始终将<code>res</code>设置为<strong>96</strong>，这样您的Shiny图形就会尽可能与RStudio中看到的图形相匹配。</p>\n<p>图形是特殊的输出，因为它们也可以作为输入。<code>plotOutput()</code>具有许多参数，如<code>click</code>、<code>dblclick</code>和<code>hover</code>。如果您将这些参数传递给字符串，例如<code>click = &quot;plot_click&quot;</code>，则它们将创建一个可响应的输入（<code>input$plot_click</code>），您可以使用它来处理与图形的用户交互，例如单击图形。我们将在第7章中再次讨论Shiny中的交互式图形。</p>\n<h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><p>您可以使用<code>downloadButton()</code>或<code>downloadLink()</code>让用户下载文件。这些需要在server函数中使用新技术，因此我们将在第9章中详细介绍。</p>\n<h3 id=\"练习-1\"><a href=\"#练习-1\" class=\"headerlink\" title=\"练习\"></a>练习</h3><p>2.3.5.1 下列哪个应与<code>textOutput()</code>和<code>verbatimTextOutput()</code>配对？</p>\n<p>a. renderPrint(summary(mtcars))</p>\n<p>b. renderText(“Good morning!”)</p>\n<p>c. renderPrint(t.test(1:5, 2:6))</p>\n<p>d. renderText(str(lm(mpg ~ wt, data &#x3D; mtcars)))</p>\n<p>2.3.5.2 重新创建第2.3.3节的Shiny应用程序，这次将高度设置为300像素，宽度设置为700像素。设置图的“alt”文本，以便视障用户可以判断其是五个随机数的散点图。</p>\n<p>2.3.5.3 更新以下调用<code>renderDataTable()</code>的选项，以便仅显示数据，但其他控件均被抑制（即删除搜索、排序和过滤命令）。您需要阅读<a href=\"https://rdrr.io/pkg/shiny/man/renderDataTable.html\">?renderDataTable</a>并回顾<a href=\"https://datatables.net/reference/option/\">https://datatables.net/reference/option/</a>中的选项。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui &lt;- fluidPage(</span><br><span class=\"line\">  dataTableOutput(&quot;table&quot;)</span><br><span class=\"line\">)</span><br><span class=\"line\">server &lt;- function(input, output, session) &#123;</span><br><span class=\"line\">  output$table &lt;- renderDataTable(mtcars, options = list(pageLength = 5))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2.3.5.4 或者，您可以阅读<a href=\"https://glin.github.io/reactable\">reactable</a>的文档，并将上面的应用程序转换为使用它。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本章向您介绍了Shiny应用程序前端的主要输入和输出功能。这是一次大量的信息灌输，因此不要期望在一次阅读后就能记住所有内容。相反，当您需要查找特定组件时，请返回本章：您可以快速浏览图示，然后找到您需要的代码。</p>\n<p>下一章我们将介绍Shiny应用程序的后端：使您的用户界面生动起来的R代码。</p>\n<h1 id=\"练习题答案获取\"><a href=\"#练习题答案获取\" class=\"headerlink\" title=\"练习题答案获取\"></a>练习题答案获取</h1><p>关注公众号“生信之巅”，聊天窗口回复“5369”获取习题答案。</p>\n<table align=\"center\"><tr>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅微信公众号\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-right: 0px;margin-bottom: 5px;align: center;\"></td>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅小程序码\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-left: 0px;margin-bottom: 5px;align: center\"></td>\n</tr></table>\n\n\n<p><font color=\"#FF0000\"><ruby><b>敬告</b>：使用文中脚本请引用本文网址，请尊重本人的劳动成果，谢谢！<rt><b>Notice</b>: When you use the scripts in this article, please cite the link of this webpage. Thank you!</rt></ruby></font></p>\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"编程","path":"api/tags/编程.json"},{"name":"Shiny入门系列","path":"api/tags/Shiny入门系列.json"}]},{"title":"Shiny从入门到入定——6-布局、主题、HTML","slug":"Shiny从入门到入定——6-布局、主题、HTML","date":"2024-01-25T13:49:44.000Z","updated":"2024-03-11T13:07:17.000Z","comments":true,"path":"api/articles/Shiny从入门到入定——6-布局、主题、HTML.json","excerpt":null,"keywords":null,"cover":"https://d33wubrfki0l68.cloudfront.net/ad1d199cecafc2c2be10425930b1dcfb5e8dd5d7/1f5c9/images/action-layout/fluid-page.png","content":"<h1 id=\"6-布局，主题，HTML\"><a href=\"#6-布局，主题，HTML\" class=\"headerlink\" title=\"6 布局，主题，HTML\"></a>6 布局，主题，HTML</h1><ul>\n<li>第6章详细介绍了在页面上布局输入和输出组件的各种方法，以及如何使用主题定制它们的外观。</li>\n</ul>\n<h2 id=\"6-1-前言\"><a href=\"#6-1-前言\" class=\"headerlink\" title=\"6.1 前言\"></a>6.1 前言</h2><p>在本章中，你将解锁一些控制应用程序整体外观的新工具。我们将首先讨论页面布局（包括单页和“多页”），让你组织你的输入和输出。然后你将学习Bootstrap，Shiny使用的CSS工具包，以及如何用主题定制它的整体视觉外观。最后，我们将简要讨论一下幕后发生了什么，这样如果你知道HTML和CSS，你就可以进一步定制Shiny应用程序。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>shiny<span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-2-单页布局\"><a href=\"#6-2-单页布局\" class=\"headerlink\" title=\"6.2 单页布局\"></a>6.2 单页布局</h2><p>在第2章中，你学习了构成应用程序交互组件的输入和输出。但是我没有谈到如何在页面上布局它们，而是使用 <a href=\"https://rdrr.io/pkg/shiny/man/fluidPage.html\">fluidPage()</a> 尽可能快地将它们拼凑在一起。虽然这对于学习 Shiny 来说是很好的，但它并不能创建可用或视觉上吸引人的应用程序，所以现在是时候学习一些更多的布局函数了。</p>\n<p>布局功能提供了应用程序的高级视觉结构。布局由函数调用的层次结构创建，其中R中的层次结构与生成的HTML中的层次结构相匹配。这有助于您理解布局代码。例如，当您查看这样的布局代码时：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  titlePanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;Hello Shiny!&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  sidebarLayout<span class=\"punctuation\">(</span></span><br><span class=\"line\">    sidebarPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;obs&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Observations:&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">1000</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">500</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    mainPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      plotOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;distPlot&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>关注函数调用的层次结构：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  titlePanel<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  sidebarLayout<span class=\"punctuation\">(</span></span><br><span class=\"line\">    sidebarPanel<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    mainPanel<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>即使你还没有学习这些函数，通过阅读它们的名字，你也可以猜到发生了什么。你可能会想象这段代码会生成一个经典的应用程序设计：顶部有一个标题栏，后面是一个侧边栏（包含一个滑块）和主面板（包含一个绘图）。通过缩进轻松查看层次结构的能力是使用一致风格的一个好主意的原因之一。</p>\n<p>在本节的剩余部分中，我将讨论帮助您设计单页应用程序的功能，然后在下一节中讨论多页应用程序。我还建议您查看Shiny Application布局指南；它有点过时，但包含一些有用的精华。</p>\n<h3 id=\"6-2-1-页面功能\"><a href=\"#6-2-1-页面功能\" class=\"headerlink\" title=\"6.2.1 页面功能\"></a>6.2.1 页面功能</h3><p>最重要的，但最无趣的布局函数是 <a href=\"https://rdrr.io/pkg/shiny/man/fluidPage.html\">fluidPage()</a>，到目前为止，您在几乎每个示例中都看到了它。但是它做了什么，如果单独使用它会怎么样？图6.1显示了结果：它看起来像一个非常无聊的应用程序，但幕后有很多事情，因为 <code>fluidPage()</code> 设置了 Shiny 所需的所有 HTML、CSS 和 JavaScript。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/ad1d199cecafc2c2be10425930b1dcfb5e8dd5d7/1f5c9/images/action-layout/fluid-page.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/ad1d199cecafc2c2be10425930b1dcfb5e8dd5d7/1f5c9/images/action-layout/fluid-page.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图6.1 仅由 fluidPage() 构成的UI\"></p>\n<p>除了<code>fluidPage()</code>，Shiny还提供了其他几个页面函数，在更特殊的情况下可以派上用场：<a href=\"https://rdrr.io/pkg/shiny/man/fixedPage.html\">fixedPage()</a>和<a href=\"https://rdrr.io/pkg/shiny/man/fillPage.html\">fillPage()</a>。<code>fixedPage()</code>的工作原理类似于<code>fluidPage()</code>，但有一个固定的最大宽度，可以防止你的应用程序在更大的屏幕上变得不合理地宽。<code>fillPage()</code>填充浏览器的整个高度，如果你想制作一个占据整个屏幕的图表，它很有用。你可以在他们的文档中找到详细信息。</p>\n<h3 id=\"6-2-2-带侧边栏的页面\"><a href=\"#6-2-2-带侧边栏的页面\" class=\"headerlink\" title=\"6.2.2 带侧边栏的页面\"></a>6.2.2 带侧边栏的页面</h3><p>要制作更复杂的布局，您需要在 <code>fluidPage()</code> 中调用布局函数。例如，要制作左侧有输入、右侧有输出的两列布局，可以使用 <a href=\"https://rdrr.io/pkg/shiny/man/sidebarLayout.html\">sidebarLayout()</a>（以及它的朋友 <a href=\"https://rdrr.io/pkg/shiny/man/titlePanel.html\">titlePanel()</a>、 <a href=\"https://rdrr.io/pkg/shiny/man/sidebarLayout.html\">sidebarPanel()</a> 和 <a href=\"https://rdrr.io/pkg/shiny/man/sidebarLayout.html\">mainPanel()</a>）。以下代码显示了生成图 6.2 的基本结构：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  titlePanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">    <span class=\"comment\"># app title/description</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  sidebarLayout<span class=\"punctuation\">(</span></span><br><span class=\"line\">    sidebarPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      <span class=\"comment\"># inputs</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    mainPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      <span class=\"comment\"># outputs</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/37aa2b1c61a6141cc95188bffd0cfc782fdb27d5/b6aa6/diagrams/action-layout/sidebar.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/37aa2b1c61a6141cc95188bffd0cfc782fdb27d5/b6aa6/diagrams/action-layout/sidebar.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图6.2 基础app的侧边栏结构\"></p>\n<p>为了让其更加真实，让我们增加一个输入和输出以创建一个演示中心极限定理的非常简单的应用程序，如图6.3所示。如果你自己运行这个应用程序，你可以增加样本数量以看到分布变得更加正常。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  titlePanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;Central limit theorem&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  sidebarLayout<span class=\"punctuation\">(</span></span><br><span class=\"line\">    sidebarPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;m&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Number of samples:&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">100</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    mainPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      plotOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;hist&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>hist <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    means <span class=\"operator\">&lt;-</span> replicate<span class=\"punctuation\">(</span><span class=\"number\">1e4</span><span class=\"punctuation\">,</span> mean<span class=\"punctuation\">(</span>runif<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>m<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    hist<span class=\"punctuation\">(</span>means<span class=\"punctuation\">,</span> breaks <span class=\"operator\">=</span> <span class=\"number\">20</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> res <span class=\"operator\">=</span> <span class=\"number\">96</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/4558a562a7be6b3c8bca4a25f3122d7322b536cc/6e6a0/demos/action-layout/sidebar.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/4558a562a7be6b3c8bca4a25f3122d7322b536cc/6e6a0/demos/action-layout/sidebar.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图6.3 常见的应用程序设计是将控件放在侧边栏中，并将结果显示在主面板中\"></p>\n<h3 id=\"6-2-3-多行\"><a href=\"#6-2-3-多行\" class=\"headerlink\" title=\"6.2.3 多行\"></a>6.2.3 多行</h3><p>在幕后，<a href=\"https://rdrr.io/pkg/shiny/man/sidebarLayout.html\">sidebarLayout()</a>建立在灵活的多行布局之上，您可以直接使用它来创建更具视觉复杂性的应用程序。像往常一样，您从<code>fluidPage()</code>开始。然后，您使用<a href=\"https://rdrr.io/pkg/shiny/man/fluidPage.html\">fluidRow()</a>创建行，使用<a href=\"https://rdrr.io/pkg/shiny/man/column.html\">column()</a>创建列。以下模板生成图6.4所示的结构：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  fluidRow<span class=\"punctuation\">(</span></span><br><span class=\"line\">    column<span class=\"punctuation\">(</span><span class=\"number\">4</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">      ...</span><br><span class=\"line\">    <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    column<span class=\"punctuation\">(</span><span class=\"number\">8</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">      ...</span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  fluidRow<span class=\"punctuation\">(</span></span><br><span class=\"line\">    column<span class=\"punctuation\">(</span><span class=\"number\">6</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">      ...</span><br><span class=\"line\">    <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    column<span class=\"punctuation\">(</span><span class=\"number\">6</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">      ...</span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/15ea13e6dd0ba26014225718b5541abb983e0a45/7b30e/diagrams/action-layout/multirow.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/15ea13e6dd0ba26014225718b5541abb983e0a45/7b30e/diagrams/action-layout/multirow.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图6.4 简单多行应用程序的基础结构\"></p>\n<p>每一行由12列组成，<code>column()</code> 的第一个参数给出了要占用的列数。12列布局为您提供极大的灵活性，因为您可以轻松创建2、3或4列布局，或使用窄列创建间隔。您可以在第4.4节中看到这种布局的示例。</p>\n<p>如果你想了解更多关于使用网格系统进行设计的知识，我强烈推荐由约瑟夫·穆勒-布罗克曼撰写的关于这个主题的经典文本：<a href=\"https://www.amazon.com/dp/3721201450\">《平面设计中的网格系统》</a>。</p>\n<h3 id=\"6-2-4-练习\"><a href=\"#6-2-4-练习\" class=\"headerlink\" title=\"6.2.4 练习\"></a>6.2.4 练习</h3><p><strong>6.2.4.1</strong> 阅读 <a href=\"https://rdrr.io/pkg/shiny/man/sidebarLayout.html\">sidebarLayout()</a> 的文档，确定侧边栏和主面板的宽度（以列为单位）。你能使用 fluidRow() 和 column() 重新创建它的外观吗？你缺少什么？</p>\n<p><strong>6.2.4.2</strong> 修改中心极限定理应用程序，将侧边栏放在右侧而不是左侧。</p>\n<p><strong>6.2.4.3</strong> 创建一个包含两个图的应用程序，每个图占一半宽度。将控件放在图下方的全宽容器中。</p>\n<h2 id=\"6-3-多页布局\"><a href=\"#6-3-多页布局\" class=\"headerlink\" title=\"6.3 多页布局\"></a>6.3 多页布局</h2><p>随着应用程序复杂性的增加，可能无法将所有内容都放在一个页面上。在本节中，您将学习 <a href=\"https://rdrr.io/pkg/shiny/man/tabPanel.html\">tabPanel()</a> 的各种用途，以创建多个页面的假象。这是一种假象，因为您仍然只有一个应用程序和一个基础 HTML 文件，但现在它被分解成多个部分，一次只能看到一个部分。</p>\n<p>多页应用程序与模块搭配得特别好，你将在第19章了解模块。模块允许你以与划分用户界面相同的方式划分server函数，创建仅通过定义良好的连接进行交互的独立组件。</p>\n<h3 id=\"6-3-1-选项卡集\"><a href=\"#6-3-1-选项卡集\" class=\"headerlink\" title=\"6.3.1 选项卡集\"></a>6.3.1 选项卡集</h3><p>将页面分解成块的简单方法是使用 <a href=\"https://rdrr.io/pkg/shiny/man/tabsetPanel.html\">tabsetPanel()</a> 及其亲密朋友 <code>tabPanel()</code>。正如您在下面的代码中看到的，<code>tabsetPanel()</code> 为任意数量的 <code>tabPanels()</code> 创建一个容器，而 <code>tabPanels()</code> 反过来又包含任何其他 HTML 组件。图 6.5 显示了一个简单的例子。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  tabsetPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">    tabPanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;Import data&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">      fileInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;file&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Data&quot;</span><span class=\"punctuation\">,</span> buttonLabel <span class=\"operator\">=</span> <span class=\"string\">&quot;Upload...&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      textInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;delim&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Delimiter (leave blank to guess)&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;skip&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Rows to skip&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;rows&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Rows to preview&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">10</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    tabPanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;Set parameters&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    tabPanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;Visualise results&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/9c03ba6941047ea3face093a70f248673f4c824a/98580/demos/action-layout/tabset.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/9c03ba6941047ea3face093a70f248673f4c824a/98580/demos/action-layout/tabset.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图6.5 tabsetPanel()允许用户选择单个tabPanel()进行查看\"></p>\n<p>如果您想知道用户选择了哪个选项卡，您可以将 <code>id</code> 参数提供给 <code>tabsetPanel()</code> 并将它设为输入。图6.6显示了这一点。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  sidebarLayout<span class=\"punctuation\">(</span></span><br><span class=\"line\">    sidebarPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;panel&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    mainPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      tabsetPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">        id <span class=\"operator\">=</span> <span class=\"string\">&quot;tabset&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        tabPanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;panel 1&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;one&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        tabPanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;panel 2&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;two&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        tabPanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;panel 3&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;three&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">      <span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>panel <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    paste<span class=\"punctuation\">(</span><span class=\"string\">&quot;Current panel: &quot;</span><span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>tabset<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/a856fa6a960d4e7e7b1cd2755c91934853e0e500/f7fbe/demos/action-layout/tabset-input-1.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/a856fa6a960d4e7e7b1cd2755c91934853e0e500/f7fbe/demos/action-layout/tabset-input-1.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图6.6 当您使用id参数时，tabset成为输入。这允许您根据当前可见的选项卡使您的应用程序表现不同。\"></p>\n<p>注意，<code>tabsetPanel()</code>可以在应用程序中的任何地方使用；如果需要，将选项卡集嵌套在其他组件（包括选项卡集！）中是完全可以的。</p>\n<h3 id=\"6-3-2-导航列表和导航栏\"><a href=\"#6-3-2-导航列表和导航栏\" class=\"headerlink\" title=\"6.3.2 导航列表和导航栏\"></a>6.3.2 导航列表和导航栏</h3><p>因为标签是水平显示的，所以你可以使用的标签数量有一个基本的限制，特别是如果它们的标题很长。<a href=\"https://rdrr.io/pkg/shiny/man/navbarPage.html\">navbarPage()</a>和<a href=\"https://rdrr.io/pkg/shiny/man/navbarPage.html\">navbarMenu()</a>提供了两种替代布局，让你使用更多标签和更长的标题。</p>\n<p><a href=\"https://rdrr.io/pkg/shiny/man/navlistPanel.html\">navlistPanel()</a>类似于<a href=\"https://rdrr.io/pkg/shiny/man/tabsetPanel.html\">tabsetPanel()</a>，但不会水平显示标签标题，而是在侧边栏中垂直显示。它还允许您使用纯字符串添加标题，如下面的代码所示，生成图6.7。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  navlistPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">    id <span class=\"operator\">=</span> <span class=\"string\">&quot;tabset&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;Heading 1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    tabPanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;panel 1&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Panel one contents&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;Heading 2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    tabPanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;panel 2&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Panel two contents&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    tabPanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;panel 3&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Panel three contents&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/56785160c5b2c58ecebd5c89454f41ca8ba01132/3504e/demos/action-layout/navlistpanel.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/56785160c5b2c58ecebd5c89454f41ca8ba01132/3504e/demos/action-layout/navlistpanel.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图6.7 navlistPanel()垂直显示选项卡标题，而不是水平显示\"></p>\n<p>另一种方法是使用<code>navbarPage()</code>：它仍然产生水平选项卡标题，但您可以使用<code>navbarMenu()</code>添加下拉菜单以实现额外的层次结构。图6.8显示了一个简单的示例。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> navbarPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  <span class=\"string\">&quot;Page title&quot;</span><span class=\"punctuation\">,</span>   </span><br><span class=\"line\">  tabPanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;panel 1&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;one&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tabPanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;panel 2&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;two&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tabPanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;panel 3&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;three&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  navbarMenu<span class=\"punctuation\">(</span><span class=\"string\">&quot;subpanels&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">    tabPanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;panel 4a&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;four-a&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    tabPanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;panel 4b&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;four-b&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    tabPanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;panel 4c&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;four-c&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/a2d6dc2e78a21f32db77925f1d28122e6288a44d/3c1ec/demos/action-layout/navbarpage.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/a2d6dc2e78a21f32db77925f1d28122e6288a44d/3c1ec/demos/action-layout/navbarpage.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图6.8 navbarPage()在页面顶部生成一个水平导航栏\"></p>\n<p>这些布局为你提供了相当大的能力来创建丰富而令人满意的应用程序。要更进一步，你需要更多地了解底层设计系统。</p>\n<h2 id=\"6-4-引导程序（Bootstrap）\"><a href=\"#6-4-引导程序（Bootstrap）\" class=\"headerlink\" title=\"6.4 引导程序（Bootstrap）\"></a>6.4 引导程序（Bootstrap）</h2><p>要继续你的应用程序定制之旅，你需要更多地了解 Shiny 所使用的 <a href=\"https://getbootstrap.com/\">Bootstrap</a> 框架。Bootstrap 是一系列 HTML 约定、CSS 样式和 JS 代码片段的集合，打包成一种方便的形式。Bootstrap 最初是 Twitter 开发的一个框架，在过去的 10 年里，它已经发展成为网络上最流行的 CSS 框架之一。Bootstrap 在 R 中也很受欢迎——你无疑已经看到过许多由 <a href=\"https://pkgs.rstudio.com/rmarkdown/reference/html_document.html\">rmarkdown::html_document()</a> 生成的文档，并使用了许多由 <a href=\"http://pkgdown.r-lib.org/\">pkgdown</a> 制作的包网站，这两个网站也都使用了 Bootstrap。</p>\n<p>作为 Shiny 开发人员，您不需要过多考虑 Bootstrap，因为 Shiny 会自动为您生成与 Bootstrap 兼容的 HTML。但是知道 Bootstrap 存在是件好事，因为这样：</p>\n<ul>\n<li><p>你可以使用<a href=\"https://rstudio.github.io/bslib/reference/bs_theme.html\">bslib::bs_theme()</a>来定制代码的视觉外观，第6.5节。</p>\n</li>\n<li><p>你可以使用<code>class</code>参数来使用Bootstrap class名定制一些布局、输入和输出，正如你在第2.2.7节中所看到的。</p>\n</li>\n<li><p>你可以自己编写函数来生成 Shiny 不提供的 Bootstrap 组件，如<a href=\"https://rstudio.github.io/bslib/articles/theming.html#utility-classes\">Utility classes</a>中所述。</p>\n</li>\n</ul>\n<p>也可以使用完全不同的CSS框架。许多现有的R包通过包装流行的Bootstrap替代品来简化这一过程：</p>\n<ul>\n<li><p><a href=\"https://appsilon.com/\">Appsilon</a> 构建在 <a href=\"https://fomantic-ui.com/\">formantic UI</a> 之上的<a href=\"https://appsilon.github.io/shiny.semantic/\">shiny.semantic</a>。</p>\n</li>\n<li><p><a href=\"https://rinterface.com/\">RInterface</a> 基于 <a href=\"https://framework7.io/\">framework 7</a>  构建的  <a href=\"https://github.com/RinteRface/shinyMobile\">shinyMobile</a> ，专为移动应用程序而设计。</p>\n</li>\n<li><p>由 <a href=\"https://github.com/ericrayanderson\">Eric Anderson</a> 开发的 <a href=\"https://ericrayanderson.github.io/shinymaterial/\">shinymaterial</a>，建立在谷歌的 <a href=\"https://material.io/design\">Material</a> 设计框架之上。</p>\n</li>\n<li><p><a href=\"https://rstudio.github.io/shinydashboard/\">shinydashboard</a> 也是由RStudio开发的，它提供了一个用于创建仪表板的布局系统。</p>\n</li>\n</ul>\n<p>你可以在 <a href=\"https://github.com/nanxstats/awesome-shiny-extensions\">https://github.com/nanxstats/awesome-shiny-extensions</a> 上找到一个更完整、维护更活跃的列表。</p>\n<h2 id=\"6-5-主题\"><a href=\"#6-5-主题\" class=\"headerlink\" title=\"6.5 主题\"></a>6.5 主题</h2><p>Bootstrap在R社区中无处不在，很容易让人产生审美疲劳：过了一段时间，每个Shiny应用程序和Rmd看起来都差不多。解决方案是使用<a href=\"https://rstudio.github.io/bslib\">bslib</a>包进行主题化。bslib是一个相对较新的包，允许您覆盖许多Bootstrap默认值，以创建独特的外观。在我写这篇文章的时候，bslib主要适用于Shiny，但正在努力将其增强的主题化功能引入RMarkdown、pkgdown等。</p>\n<p>如果你正在为公司开发应用程序，我强烈建议你花点时间在主题化上——将你的应用程序主题化，以匹配你的企业风格指南，这是一种让你看起来很好的简单方法。</p>\n<h3 id=\"6-5-1-开始\"><a href=\"#6-5-1-开始\" class=\"headerlink\" title=\"6.5.1 开始\"></a>6.5.1 开始</h3><p>使用 <a href=\"https://rstudio.github.io/bslib/reference/bs_theme.html\">bslib::bs_theme()</a> 创建一个主题，然后使用页面布局函数的<code>theme</code>参数将其应用于应用程序：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  theme <span class=\"operator\">=</span> bslib<span class=\"operator\">::</span>bs_theme<span class=\"punctuation\">(</span>...<span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>如果不特别指定，Shiny将使用其自创建以来基本上使用的经典Bootstrap v3主题。默认情况下，<code>bslib::bs_theme()</code>将使用 Bootstrap v4。如果您只使用内置组件，使用Bootstrap v4替代v3不会造成问题。如果您使用了自定义HTML，它可能会造成问题，因此您可以通过设置<code>version = 3</code>来强制它保持v3。</p>\n<h3 id=\"6-5-2-Shiny主题\"><a href=\"#6-5-2-Shiny主题\" class=\"headerlink\" title=\"6.5.2 Shiny主题\"></a>6.5.2 Shiny主题</h3><p>更改应用程序整体外观的最简单方法是使用<code>bootswatch</code>参数对<code>bslib::bs_theme()</code>选择一个预先制作的<code>bootswatch</code>主题。图6.9显示了以下代码的结果，切换其他主题为“darkly”。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  theme <span class=\"operator\">=</span> bslib<span class=\"operator\">::</span>bs_theme<span class=\"punctuation\">(</span>bootswatch <span class=\"operator\">=</span> <span class=\"string\">&quot;darkly&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  sidebarLayout<span class=\"punctuation\">(</span></span><br><span class=\"line\">    sidebarPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      textInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;txt&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Text input:&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;text here&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;slider&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Slider input:&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span> <span class=\"number\">100</span><span class=\"punctuation\">,</span> <span class=\"number\">30</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    mainPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">      h1<span class=\"punctuation\">(</span>paste0<span class=\"punctuation\">(</span><span class=\"string\">&quot;Theme: darkly&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      h2<span class=\"punctuation\">(</span><span class=\"string\">&quot;Header 2&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      p<span class=\"punctuation\">(</span><span class=\"string\">&quot;Some text&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/6850c18bfcfd5671f12f1f638c2c76b4ccb5b11d/07f6a/demos/action-layout/theme-flatly.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/6850c18bfcfd5671f12f1f638c2c76b4ccb5b11d/07f6a/demos/action-layout/theme-flatly.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图6.9 相同的app采用了用四个bootswatch主题风格：darkly、flatly、sandstone和united\"></p>\n<p>此外，你可以利用<code>bs_theme()</code>的其他参数创建自己的主题，如 <code>bg</code> （背景颜色），<code>fg</code>（前景色）和 <code>base_font</code>：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme <span class=\"operator\">&lt;-</span> bslib<span class=\"operator\">::</span>bs_theme<span class=\"punctuation\">(</span></span><br><span class=\"line\">  bg <span class=\"operator\">=</span> <span class=\"string\">&quot;#0b3d91&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  fg <span class=\"operator\">=</span> <span class=\"string\">&quot;white&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  base_font <span class=\"operator\">=</span> <span class=\"string\">&quot;Source Sans Pro&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>一种预览和自定义主题的简单方法是使用<code>bslib::bs_theme_preview(theme)</code>。这将打开一个Shiny应用程序，展示该主题在应用于许多标准控件时的外观，同时还为你提供交互式控件，用于自定义最重要的参数。</p>\n<h3 id=\"6-5-3-图表主题\"><a href=\"#6-5-3-图表主题\" class=\"headerlink\" title=\"6.5.3 图表主题\"></a>6.5.3 图表主题</h3><p>如果你已经对你的应用程序样式进行了大量自定义，你可能还想自定义图表以匹配整体风格。幸运的是，这非常简单，多亏了<a href=\"https://rstudio.github.io/thematic/\">thematic</a>包，它可以自动对ggplot2、lattice和基础图表进行主题化。只需在server函数中调用<code>thematic_shiny()</code>。这将自动确定你的应用程序主题的所有设置，如图6.10所示。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>ggplot2<span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  theme <span class=\"operator\">=</span> bslib<span class=\"operator\">::</span>bs_theme<span class=\"punctuation\">(</span>bootswatch <span class=\"operator\">=</span> <span class=\"string\">&quot;darkly&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  titlePanel<span class=\"punctuation\">(</span><span class=\"string\">&quot;A themed plot&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  plotOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;plot&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  thematic<span class=\"operator\">::</span>thematic_shiny<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>plot <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    ggplot<span class=\"punctuation\">(</span>mtcars<span class=\"punctuation\">,</span> aes<span class=\"punctuation\">(</span>wt<span class=\"punctuation\">,</span> mpg<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"operator\">+</span></span><br><span class=\"line\">      geom_point<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">+</span></span><br><span class=\"line\">      geom_smooth<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> res <span class=\"operator\">=</span> <span class=\"number\">96</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/0e7243ec6ca6821445c04bff6488fcf612c3fe88/e378c/demos/action-layout/thematic.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/0e7243ec6ca6821445c04bff6488fcf612c3fe88/e378c/demos/action-layout/thematic.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图6.10 使用thematic::thematic_shiny()确保ggplot2自动匹配应用程序主题\"></p>\n<h3 id=\"6-5-4-练习\"><a href=\"#6-5-4-练习\" class=\"headerlink\" title=\"6.5.4 练习\"></a>6.5.4 练习</h3><p><strong>6.4.5.1</strong> 使用<code>bslib::bs_theme_preview()</code>制作你能想到的最丑的主题。</p>\n<h2 id=\"6-6-面罩之下\"><a href=\"#6-6-面罩之下\" class=\"headerlink\" title=\"6.6 面罩之下\"></a>6.6 面罩之下</h2><p>Shiny的设计是为了让R用户不需要了解HTML的细节。但是，如果你知道一些HTML和CSS，你仍然可以进一步定制Shiny。不幸的是，教授HTML和CSS不在本书的范围内，但MDN的<a href=\"https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/HTML_basics\">HTML</a>和<a href=\"https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/CSS_basics\">CSS</a>基础教程是一个很好的起点。</p>\n<p>最重要的是要知道，所有输入、输出和布局函数背后都没有魔法：它们只是生成HTML。您可以通过在控制台中直接执行UI函数来查看HTML：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  textInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;name&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;What&#x27;s your name?&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group shiny-input-container&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>What&#x27;s your name?<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>请注意，这是 <code>&lt;body&gt;</code> 标签的内容；Shiny 的其他部分负责生成 <code>&lt;head&gt;</code>。如果你想包含额外的 CSS 或 JS 依赖项，你需要学习 <a href=\"https://rdrr.io/pkg/htmltools/man/htmlDependency.html\">htmltools::htmlDependency()</a>。两个好的起点是 <a href=\"https://blog.r-hub.io/2020/08/25/js-r/#web-dependency-management\">https://blog.r-hub.io/2020/08/25/js-r/#web-dependency-management</a> 和 <a href=\"https://unleash-shiny.rinterface.com/htmltools-dependencies.html\">https://unleash-shiny.rinterface.com/htmltools-dependencies.html</a>。</p>\n<p>可以将自己的 HTML 添加到 <code>ui</code>。一种方法是通过 <a href=\"https://rdrr.io/pkg/htmltools/man/HTML.html\">HTML()</a> 函数包含文本 HTML。在下面的例子中，我使用“原始字符常量”，<code>r&quot;()&quot;</code>，以便更容易在字符串中包含引号：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  HTML<span class=\"punctuation\">(</span><span class=\"string\">r&quot;(</span></span><br><span class=\"line\"><span class=\"string\">    &lt;h1&gt;This is a heading&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;p class=&quot;my-class&quot;&gt;This is some text!&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;li&gt;First bullet&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;li&gt;Second bullet&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">  )&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>如果您是 HTML&#x2F;CSS 专家，您可能想知道是否可以完全跳过 <code>fluidPage()</code> 并提供原始 HTML。有关更多详细信息，请参阅“<a href=\"https://shiny.rstudio.com/articles/html-ui.html\">使用 HTML 构建整个 UI</a>”。</p>\n<p>或者，您可以使用Shiny提供的HTML辅助函数。对于最重要的元素，如<code>h1()</code>和<code>p()</code>，有常规函数，所有其他元素都可以通过其他标签辅助函数访问。命名参数成为属性，未命名参数成为子元素，因此我们可以将上面的HTML重新创建为：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  h1<span class=\"punctuation\">(</span><span class=\"string\">&quot;This is a heading&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  p<span class=\"punctuation\">(</span><span class=\"string\">&quot;This is some text&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">class</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;my-class&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tags<span class=\"operator\">$</span>ul<span class=\"punctuation\">(</span></span><br><span class=\"line\">    tags<span class=\"operator\">$</span>li<span class=\"punctuation\">(</span><span class=\"string\">&quot;First bullet&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">    tags<span class=\"operator\">$</span>li<span class=\"punctuation\">(</span><span class=\"string\">&quot;Second bullet&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>使用代码生成 HTML 的一个优点是，你可以将现有的 Shiny 组件交织到自定义结构中。例如，以下代码生成了一段包含两个输出的文本段落，其中一个为粗体：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tags<span class=\"operator\">$</span>p<span class=\"punctuation\">(</span></span><br><span class=\"line\">  <span class=\"string\">&quot;You made &quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  tags<span class=\"operator\">$</span>b<span class=\"punctuation\">(</span><span class=\"string\">&quot;$&quot;</span><span class=\"punctuation\">,</span> textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;amount&quot;</span><span class=\"punctuation\">,</span> inline <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"string\">&quot; in the last &quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;days&quot;</span><span class=\"punctuation\">,</span> inline <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"string\">&quot; days &quot;</span> </span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>请注意使用<code>inline = TRUE</code>；<code>textOutput()</code>默认是生成一个完整的段落。</p>\n<p>要了解更多关于使用HTML、CSS和JavaScript制作引人注目的用户界面的知识，我强烈推荐David Granjon的<a href=\"https://unleash-shiny.rinterface.com/index.html\">《Shiny的杰出用户界面》</a>。</p>\n<h2 id=\"6-7-总结\"><a href=\"#6-7-总结\" class=\"headerlink\" title=\"6.7 总结\"></a>6.7 总结</h2><p>本章为你提供了制作复杂而吸引人的Shiny应用程序所需的工具。你已经学习了Shiny函数，这些函数允许你布局单页和多页应用程序（如<code>fluidPage()</code>和<code>tabsetPanel()</code>），以及如何使用主题定制整体视觉外观。你还学到了一些关于底层的东西：你知道Shiny使用Bootstrap，并且输入和输出函数只返回HTML，你也可以自己创建自己的HTML。</p>\n<p>在下一章中，您将了解有关应用程序中另一个重要视觉组件的更多信息：图形。</p>\n<h1 id=\"加关注\"><a href=\"#加关注\" class=\"headerlink\" title=\"加关注\"></a>加关注</h1><p>关注公众号“生信之巅”。</p>\n<table align=\"center\"><tr>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅微信公众号\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-right: 0px;margin-bottom: 5px;align: center;\"></td>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅小程序码\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-left: 0px;margin-bottom: 5px;align: center\"></td>\n</tr></table>\n\n\n<p><font color=\"#FF0000\"><ruby><b>敬告</b>：使用文中脚本请引用本文网址，请尊重本人的劳动成果，谢谢！<rt><b>Notice</b>: When you use the scripts in this article, please cite the link of this webpage. Thank you!</rt></ruby></font></p>\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"编程","path":"api/tags/编程.json"},{"name":"Shiny入门系列","path":"api/tags/Shiny入门系列.json"}]},{"title":"Shiny从入门到入定——3-在特别大的花园里面挖呀挖呀挖","slug":"Shiny从入门到入定——3-在特别大的花园里面挖呀挖呀挖","date":"2024-01-20T08:53:43.000Z","updated":"2024-03-11T13:07:17.000Z","comments":true,"path":"api/articles/Shiny从入门到入定——3-在特别大的花园里面挖呀挖呀挖.json","excerpt":null,"keywords":null,"cover":"https://d33wubrfki0l68.cloudfront.net/25d7fea6d0b5dc9d5eabb7805b9fa9ffeb44f924/c426a/demos/basic-reactivity/connection-1.png","content":"<h1 id=\"3-基础反应性\"><a href=\"#3-基础反应性\" class=\"headerlink\" title=\"3 基础反应性\"></a>3 基础反应性</h1><h2 id=\"3-1-介绍\"><a href=\"#3-1-介绍\" class=\"headerlink\" title=\"3.1 介绍\"></a>3.1 介绍</h2><p>在Shiny中，您使用反应式编程来表达服务器逻辑。反应式编程是一种优雅而强大的编程范式，但起初可能会让人感到迷失，因为它与编写脚本的范式非常不同。反应式编程的关键思想是定义一个依赖图，这样当输入变化时，所有相关的输出都会自动更新。这使得应用程序的流程大大简化，但需要一段时间才能理解如何将所有内容整合在一起。</p>\n<p>本章将为您提供对反应式编程的简单介绍，教授您Shiny应用中最常见的反应式结构的基本知识。我们将从服务器函数概览开始，更详细地讨论输入和输出参数的工作方式。接下来，我们将回顾最简单的反应形式（将输入直接连接到输出），然后讨论反应式表达式如何帮助您消除重复的工作。最后，我们将回顾一些新用户常见的障碍。</p>\n<h2 id=\"3-2-server函数\"><a href=\"#3-2-server函数\" class=\"headerlink\" title=\"3.2 server函数\"></a>3.2 server函数</h2><p>正如您所见，每个Shiny应用程序的内部如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library(shiny)</span><br><span class=\"line\"></span><br><span class=\"line\">ui &lt;- fluidPage(</span><br><span class=\"line\">  # front end interface</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">server &lt;- function(input, output, session) &#123;</span><br><span class=\"line\">  # back end logic</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">shinyApp(ui, server)</span><br></pre></td></tr></table></figure>\n\n<p>上一章介绍了前端的基础知识，ui对象包含向应用程序的每个用户呈现的HTML。ui很简单，因为每个用户都获得相同的HTML。server更复杂，因为每个用户都需要获得应用程序的独立版本；当用户A移动滑块时，用户B不应该看到他们的输出变化。</p>\n<p>为了实现这种独立性，Shiny 在每次启动新会话时都会调用你的 server() 函数。就像其他任何 R 函数一样，当server函数被调用时，它会创建一个新的本地环境，该环境独立于该函数的每次其他调用。这使得每个会话都有一个唯一的状态，并隔离函数内创建的变量。这就是为什么你在 Shiny 中进行的几乎所有反应式编程都将在server函数内进行的原因。</p>\n<p>server函数有三个参数：<code>input</code>、<code>output</code>和<code>session</code>。因为你永远不会自己调用服务器函数，所以你永远不会自己创建这些对象。相反，它们是由Shiny在会话开始时创建的，会话会返回到特定的会话。目前，我们将重点放在input和output参数上，而将session留到后面的章节。</p>\n<h3 id=\"3-2-1-输入\"><a href=\"#3-2-1-输入\" class=\"headerlink\" title=\"3.2.1 输入\"></a>3.2.1 输入</h3><p>输入参数是一个类似列表的对象，其中包含从浏览器发送的所有输入数据，并根据输入ID命名。例如，如果您的UI包含一个输入ID为count的数字输入控件，如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui &lt;- fluidPage(</span><br><span class=\"line\">  numericInput(&quot;count&quot;, label = &quot;Number of values&quot;, value = 100)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>然后，您可以使用<code>input$count</code>访问该输入的值。它最初将包含值100，并随着用户在浏览器中更改值而自动更新。</p>\n<p>与典型的列表不同，输入对象是只读的。如果您尝试在server函数内修改输入，将会出现错误：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &lt;- function(input, output, session) &#123;</span><br><span class=\"line\">  input$count &lt;- 10  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">shinyApp(ui, server)</span><br><span class=\"line\">#&gt; Error: Can&#x27;t modify read-only reactive value &#x27;count&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>发生此错误是因为输入反映了浏览器中正在发生的事情，而浏览器是 Shiny 的“单一事实来源”。如果你能修改 R 中的值，你可能会引入不一致，其中输入滑块在浏览器中说了一件事，而 <code>input$count</code> 在 R 中说了不同的事情。这将使编程变得具有挑战性！稍后，在第 8 章中，您将学习如何使用 <code>updateNumericInput()</code> 之类的函数来修改浏览器中的值，然后 input$count 将相应地更新。</p>\n<p>关于输入还有一件更重要的事情：它可以选择允许谁来读取它。要从输入中读取，你必须处于由 <code>renderText()</code> 或 <code>reactive()</code> 等函数创建的响应式环境中。我们很快就会回到这个想法，但这是一个重要的约束，它允许输出在输入更改时自动更新。这段代码说明了如果你犯了这个错误，你会看到的错误：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &lt;- function(input, output, session) &#123;</span><br><span class=\"line\">  message(&quot;The value of input$count is &quot;, input$count)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">shinyApp(ui, server)</span><br><span class=\"line\">#&gt; Error: Can&#x27;t access reactive value &#x27;count&#x27; outside of reactive consumer.</span><br><span class=\"line\">#&gt; ℹ Do you need to wrap inside reactive() or observer()?</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-2-输出\"><a href=\"#3-2-2-输出\" class=\"headerlink\" title=\"3.2.2 输出\"></a>3.2.2 输出</h3><p>输出与输入非常相似：它也是一个根据输出ID命名的类似列表的对象。主要区别在于，您使用它来发送输出而不是接收输入。您总是将输出对象与渲染函数一起使用，如下面的简单示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui &lt;- fluidPage(</span><br><span class=\"line\">  textOutput(&quot;greeting&quot;)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">server &lt;- function(input, output, session) &#123;</span><br><span class=\"line\">  output$greeting &lt;- renderText(&quot;Hello human!&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>（请注意，ID在用户界面中被引用，但在服务器中没有引用——不加引号。）</p>\n<p>渲染函数做了两件事：</p>\n<ul>\n<li><p>它建立了一个特殊的反应式上下文，该上下文会自动跟踪输出所使用的输入。</p>\n</li>\n<li><p>它将您的R代码的输出转换为适合在网页上显示的HTML。</p>\n</li>\n</ul>\n<p>与输入一样，输出在使用上也是非常挑剔的。将会出现错误如果：</p>\n<ul>\n<li><p>您忘记使用渲染函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &lt;- function(input, output, session) &#123;</span><br><span class=\"line\">    output$greeting &lt;- &quot;Hello human&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">shinyApp(ui, server)</span><br><span class=\"line\">#&gt; Error: Unexpected character object for output$greeting</span><br><span class=\"line\">#&gt; ℹ Did you forget to use a render function?</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>试图从输出中读取</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &lt;- function(input, output, session) &#123;</span><br><span class=\"line\">    message(&quot;The greeting is &quot;, output$greeting)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">shinyApp(ui, server)</span><br><span class=\"line\">#&gt; Error: Reading from shinyoutput object is not allowed.</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"3-3-响应式编程\"><a href=\"#3-3-响应式编程\" class=\"headerlink\" title=\"3.3 响应式编程\"></a>3.3 响应式编程</h2><p>如果应用程序只有输入或只有输出，那么它将非常无聊。Shiny的真正魔力在于当您拥有同时具有两者的应用程序时。让我们看一个简单的例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui &lt;- fluidPage(</span><br><span class=\"line\">  textInput(&quot;name&quot;, &quot;What&#x27;s your name?&quot;),</span><br><span class=\"line\">  textOutput(&quot;greeting&quot;)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">server &lt;- function(input, output, session) &#123;</span><br><span class=\"line\">  output$greeting &lt;- renderText(&#123;</span><br><span class=\"line\">    paste0(&quot;Hello &quot;, input$name, &quot;!&quot;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>很难在书中展示这是如何工作的，但我在图3.1中尽力了。如果您运行应用程序并输入名称框，您会看到问候语会自动更新，就像您输入一样<sup>7</sup>。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/25d7fea6d0b5dc9d5eabb7805b9fa9ffeb44f924/c426a/demos/basic-reactivity/connection-1.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/25d7fea6d0b5dc9d5eabb7805b9fa9ffeb44f924/c426a/demos/basic-reactivity/connection-1.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图3.1：响应性意味着输出会随着输入的变化而自动更新，就像我在这个应用程序中输入“J”，“o”，“e”一样。请访问https://hadley.shinyapps.io/ms-connection查看实时更新。\"></p>\n<p>这是Shiny的一个核心概念：您不需要告诉输出何时更新，因为Shiny会自动为您解决。它是如何工作的呢？函数体中到底发生了什么？让我们更准确地思考服务器函数内部的代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output$greeting &lt;- renderText(&#123;</span><br><span class=\"line\">  paste0(&quot;Hello &quot;, input$name, &quot;!&quot;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>很容易将此理解为“将<code>hello</code>和用户名拼接在一起，然后将其发送到<code>output$greeting</code>”。但是这种思维模式在细微但重要的方面是错误的。仔细考虑一下：根据这种模型，您只发布一次指令。但是Shiny会在我们每次更新input$name时执行该操作，因此一定有更多的事情发生。</p>\n<p>应用程序之所以能够工作，是因为代码并没有告诉Shiny创建字符串并将其发送到浏览器，而是告诉Shiny如果需要的话如何创建字符串。至于代码何时（甚至是否！）运行，这取决于Shiny。它可能早在应用程序启动时就开始运行，也可能稍后运行；可能多次运行，也可能永远不运行！这并不是说Shiny反复无常，只是说决定何时执行代码是Shiny的责任，而不是您的责任。将您的应用程序视为提供食谱给Shiny，而不是给它下命令。</p>\n<h3 id=\"3-3-1-命令式编程与声明式编程的区别\"><a href=\"#3-3-1-命令式编程与声明式编程的区别\" class=\"headerlink\" title=\"3.3.1 命令式编程与声明式编程的区别\"></a>3.3.1 命令式编程与声明式编程的区别</h3><p>命令式编程和声明式编程是两种重要的编程风格，它们之间的区别在于：</p>\n<ul>\n<li><p>在命令式编程中，您发出特定的命令并立即执行。这是您在分析脚本中习惯的编程方式：您命令R加载数据、转换数据、可视化数据并将结果保存到磁盘。</p>\n</li>\n<li><p>在声明式编程中，您表达了较高的目标或描述了重要的约束，并依靠其他人来决定如何以及&#x2F;或何时将其转化为行动。这是您在Shiny中使用的编程风格。</p>\n</li>\n</ul>\n<p>使用命令式代码，您可以说“给我做个三明治”<sup>8</sup>。使用声明式代码，您可以表达“无论何时我打开冰箱，都要确保里面有一个三明治”。命令式代码是断言的；声明式代码是被动的。</p>\n<p>大部分时间，声明式编程是非常自由的：您只需要描述您的整体目标，软件就会想出如何实现它们而无需进一步的干预。不利的一面是，偶尔您会确切地知道您想要什么，但您无法弄清楚如何以声明式系统理解的方式对其进行构架<sup>9</sup>。本书的目标是帮助您发展对底层理论的理解，以尽可能减少这种情况的发生。</p>\n<h3 id=\"3-3-2-懒惰\"><a href=\"#3-3-2-懒惰\" class=\"headerlink\" title=\"3.3.2 懒惰\"></a>3.3.2 懒惰</h3><p>Shiny中声明式编程的优势之一是应用程序可以非常懒惰。Shiny应用程序只会做最少量工作来更新您当前可见的输出控件<sup>10</sup>。然而，这种懒惰有一个重要的缺点，您应该注意。你能找出下面server函数的问题吗？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &lt;- function(input, output, session) &#123;</span><br><span class=\"line\">  output$greting &lt;- renderText(&#123;</span><br><span class=\"line\">    paste0(&quot;Hello &quot;, input$name, &quot;!&quot;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果您仔细观察，您可能会注意到我写的是<code>greting</code>而不是<code>greeting</code>。在Shiny中，这不会产生错误，但不会实现您的期望。greting输出不存在，因此renderText()内部的代码永远不会被执行。</p>\n<p>如果您正在开发Shiny应用程序，并且您就是无法理解为什么您的代码从未运行过，请仔细检查您的UI和服务器函数是否使用相同的标识符。</p>\n<h3 id=\"3-3-3-响应式图\"><a href=\"#3-3-3-响应式图\" class=\"headerlink\" title=\"3.3.3 响应式图\"></a>3.3.3 响应式图</h3><p>Shiny的懒惰性具有另一个重要属性。在大多数R代码中，您可以通过从上到下阅读代码来理解执行顺序。这在Shiny中不起作用，因为代码只在需要时才运行。要了解执行顺序，您需要查看响应式图，它描述了输入和输出之间的连接方式。上述应用程序的响应式图非常简单，如图3.2所示。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/056990a803a41501e2dbe05df351f8b8f7b493ab/f773a/diagrams/basic-reactivity/graph-1b.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/056990a803a41501e2dbe05df351f8b8f7b493ab/f773a/diagrams/basic-reactivity/graph-1b.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图3.2 响应式图显示了输入和输出之间的连接方式\"></p>\n<p>响应式图包含每个输入和输出的一个符号，并且我们将输入连接到输出，每当输出访问输入时。这个图告诉您greeting将需要重新计算，每当name被更改时。我们通常将这种关系描述为greeting对name具有反应依赖性。</p>\n<p>注意我们为输入和输出使用的图形约定：name输入自然适合greeting输出。我们可以将它们紧密地排列在一起，如图3.3所示，以强调它们如何组合在一起；通常我们不会这样做，因为这只适用于最简单的应用程序。</p>\n<p>响应式图中组件的形状表达了它们连接的方式。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/3140d17a6b8df9e07c37b368124b56aaa34ab348/99398/diagrams/basic-reactivity/graph-1a.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/3140d17a6b8df9e07c37b368124b56aaa34ab348/99398/diagrams/basic-reactivity/graph-1a.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图3.3 响应式图中组件的形状表达了它们连接的方式\">。</p>\n<p>响应式图是一个强大的工具，用于理解您的应用程序如何工作。随着应用程序变得越来越复杂，快速高层次概述响应式图通常很有用，以提醒您所有组件如何组合在一起。在本书中，我们将通过显示响应式图来帮助您理解示例的工作原理，稍后在第14章中，您将学习如何使用reactlog，它将为您绘制图形。</p>\n<h3 id=\"3-3-4-反应式表达式\"><a href=\"#3-3-4-反应式表达式\" class=\"headerlink\" title=\"3.3.4 反应式表达式\"></a>3.3.4 反应式表达式</h3><p>您将在响应式图中看到的另一个重要组件是反应式表达式。现在，您可以将其视为减少响应式代码重复的工具，通过在响应式图中引入额外的节点。</p>\n<p>在我们的简单应用程序中，我们不需要反应式表达式，但我还是会添加一个，以便您可以了解它如何影响响应式图，如图3.4所示。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &lt;- function(input, output, session) &#123;</span><br><span class=\"line\">  string &lt;- reactive(paste0(&quot;Hello &quot;, input$name, &quot;!&quot;))</span><br><span class=\"line\">  output$greeting &lt;- renderText(string())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/6966978d8dc9ac65a0dfc6ec46ff05cfeef541e2/fdc7f/diagrams/basic-reactivity/graph-2b.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/6966978d8dc9ac65a0dfc6ec46ff05cfeef541e2/fdc7f/diagrams/basic-reactivity/graph-2b.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图3.4：由于反应式表达式连接输入和输出，因此在其两侧绘制角度。\"></p>\n<p>反应式表达式接受输入并产生输出，因此它们具有结合输入和输出特征的形状。希望这些形状可以帮助您记住组件如何组合在一起。</p>\n<h3 id=\"3-3-5-执行顺序\"><a href=\"#3-3-5-执行顺序\" class=\"headerlink\" title=\"3.3.5 执行顺序\"></a>3.3.5 执行顺序</h3><p>了解代码的执行顺序是很重要的，因为执行顺序完全由响应式图决定。这与大多数R代码不同，在大多数R代码中，执行顺序由代码行的顺序决定。例如，我们可以翻转简单server函数中的两行代码的顺序：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &lt;- function(input, output, session) &#123;</span><br><span class=\"line\">  output$greeting &lt;- renderText(string())</span><br><span class=\"line\">  string &lt;- reactive(paste0(&quot;Hello &quot;, input$name, &quot;!&quot;))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>您可能会认为这会产生错误，因为output$greeting引用了尚未创建的响应式表达式string。但是请记住，Shiny是惰性的，因此只有在会话开始后，在string被创建后，才会运行该代码。</p>\n<p>相反，此代码产生与上述相同的响应式图，因此代码运行的顺序完全相同。像这样组织代码对于人类来说很混乱，最好避免。相反，请确保响应式表达式和输出仅引用上面定义的内容，而不是下面。这将使您的代码更易于理解。</p>\n<p>这个概念非常重要，与大多数其他R代码不同，因此我要再说一遍：响应式代码运行的顺序仅由响应图确定，而不是由其在服务器函数中的布局决定。</p>\n<h3 id=\"3-3-6-练习题\"><a href=\"#3-3-6-练习题\" class=\"headerlink\" title=\"3.3.6 练习题\"></a>3.3.6 练习题</h3><p><strong>3.3.6.1 给定如下UI：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui &lt;- fluidPage(</span><br><span class=\"line\">  textInput(&quot;name&quot;, &quot;What&#x27;s your name?&quot;),</span><br><span class=\"line\">  textOutput(&quot;greeting&quot;)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>修复下面三个服务器函数中的简单错误。首先尝试通过阅读代码发现问题；然后运行代码以确保你已修复它。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server1 &lt;- function(input, output, server) &#123;</span><br><span class=\"line\">  input$greeting &lt;- renderText(paste0(&quot;Hello &quot;, name))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server2 &lt;- function(input, output, server) &#123;</span><br><span class=\"line\">  greeting &lt;- paste0(&quot;Hello &quot;, input$name)</span><br><span class=\"line\">  output$greeting &lt;- renderText(greeting)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server3 &lt;- function(input, output, server) &#123;</span><br><span class=\"line\">  output$greting &lt;- paste0(&quot;Hello&quot;, input$name)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>3.3.6.2 绘制以下server函数的反应图：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server1 &lt;- function(input, output, session) &#123;</span><br><span class=\"line\">  c &lt;- reactive(input$a + input$b)</span><br><span class=\"line\">  e &lt;- reactive(c() + input$d)</span><br><span class=\"line\">  output$f &lt;- renderText(e())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server2 &lt;- function(input, output, session) &#123;</span><br><span class=\"line\">  x &lt;- reactive(input$x1 + input$x2 + input$x3)</span><br><span class=\"line\">  y &lt;- reactive(input$y1 + input$y2)</span><br><span class=\"line\">  output$z &lt;- renderText(x() / y())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server3 &lt;- function(input, output, session) &#123;</span><br><span class=\"line\">  d &lt;- reactive(c() ^ input$d)</span><br><span class=\"line\">  a &lt;- reactive(input$a * 10)</span><br><span class=\"line\">  c &lt;- reactive(b() / input$c) </span><br><span class=\"line\">  b &lt;- reactive(a() + input$b)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>3.3.6.3 为何下述代码会失败？</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var &lt;- reactive(df[[input$var]])</span><br><span class=\"line\">range &lt;- reactive(range(var(), na.rm = TRUE))</span><br></pre></td></tr></table></figure>\n\n<p>为什么 range() 和 var() 不是好的反应式命名？</p>\n<h2 id=\"3-4-反应表达式\"><a href=\"#3-4-反应表达式\" class=\"headerlink\" title=\"3.4 反应表达式\"></a>3.4 反应表达式</h2><p>我们已经在几个地方快速浏览了反应表达式，所以希望您已经了解了它们的作用。现在，我们将深入了解更多的细节，并说明为什么在构建真实应用程序时它们如此重要。</p>\n<p>反应表达式之所以重要，是因为它们为Shiny提供了更多信息，以便在输入发生变化时减少重新计算，使应用程序更高效，并通过简化反应图来让人类更容易理解应用程序。反应表达式具有输入和输出的味道：</p>\n<p>与输入类似，您可以在输出中使用反应表达式的计算结果。</p>\n<p>与输出类似，反应表达式依赖于输入，并自动知道何时需要更新。</p>\n<p>这种双重性意味着我们需要一些新的词汇：我将使用<code>生产者</code>来指代反应输入和表达式，而<code>消费者</code>则指代反应表达式和输出。图3.5用维恩图展示了这种关系。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/8dcc3f2cbc55486a76b33a5acd30e379cd05d8ab/27c40/diagrams/basic-reactivity/producers-consumers.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/8dcc3f2cbc55486a76b33a5acd30e379cd05d8ab/27c40/diagrams/basic-reactivity/producers-consumers.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图3.5 输入和表达式是反应性的生产者；表达式和输出是反应性的消费者\"></p>\n<p>我们需要一个更复杂的应用程序来查看使用响应式表达式的优点。首先，我们将通过定义一些常规的R函数来为我们的应用程序提供支持，从而为我们的应用程序搭建舞台。</p>\n<h3 id=\"3-4-1-动机\"><a href=\"#3-4-1-动机\" class=\"headerlink\" title=\"3.4.1 动机\"></a>3.4.1 动机</h3><p>假设我想用绘图和假设检验来比较两个模拟数据集。我做了一些实验，并提出了以下函数：<code>freqpoly()</code>用频率多边形<sup>12</sup>可视化两个分布，<code>t_test()</code>使用t检验来比较均值，并用字符串总结结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library(ggplot2)</span><br><span class=\"line\"></span><br><span class=\"line\">freqpoly &lt;- function(x1, x2, binwidth = 0.1, xlim = c(-3, 3)) &#123;</span><br><span class=\"line\">  df &lt;- data.frame(</span><br><span class=\"line\">    x = c(x1, x2),</span><br><span class=\"line\">    g = c(rep(&quot;x1&quot;, length(x1)), rep(&quot;x2&quot;, length(x2)))</span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\">  ggplot(df, aes(x, colour = g)) +</span><br><span class=\"line\">    geom_freqpoly(binwidth = binwidth, size = 1) +</span><br><span class=\"line\">    coord_cartesian(xlim = xlim)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">t_test &lt;- function(x1, x2) &#123;</span><br><span class=\"line\">  test &lt;- t.test(x1, x2)</span><br><span class=\"line\">  </span><br><span class=\"line\">  # use sprintf() to format t.test() results compactly</span><br><span class=\"line\">  sprintf(</span><br><span class=\"line\">    &quot;p value: %0.3f\\n[%0.2f, %0.2f]&quot;,</span><br><span class=\"line\">    test$p.value, test$conf.int[1], test$conf.int[2]</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>:::primary 译者注<br><strong>译者注：</strong></p>\n<p>这段代码中定义了两个函数，freqpoly和t_test。以下是它们的简单解释：</p>\n<ol>\n<li><p><code>freqpoly</code>函数：<br>这个函数是为了对比两个数据集x1和x2的分布。它首先将这两个数据集合并到一个数据框中，并为每个数据集分配一个组别”x1”和”x2”。然后，它使用ggplot2包的<code>geom_freqpoly</code>函数绘制频数多边形图，这个图能够展示数据的分布情况。<code>binwidth</code>参数决定了分箱的宽度，而<code>xlim</code>参数则设定了x轴的显示范围。</p>\n</li>\n<li><p><code>t_test</code>函数：<br>这个函数执行t检验，这是一种用于比较两组平均值是否有显著差异的统计检验方法。函数接受两个向量x1和x2作为输入，然后使用R的内置<code>t.test</code>函数执行t检验。然后，它使用<code>sprintf</code>函数以一种格式化的方式返回结果，包括p值以及95%置信区间。</p>\n<p> <strong>注意</strong>：在这段代码中，<code>sprintf</code>函数用于格式化输出字符串。”%0.3f”表示浮点数，保留3位小数；”[%0.2f, %0.2f]”表示浮点数，保留2位小数，用于显示置信区间。</p>\n</li>\n</ol>\n<p>:::</p>\n<p>如果我有一些模拟数据，我可以使用这些函数来比较两个变量：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x1 &lt;- rnorm(100, mean = 0, sd = 0.5)</span><br><span class=\"line\">x2 &lt;- rnorm(200, mean = 0.15, sd = 0.9)</span><br><span class=\"line\"></span><br><span class=\"line\">freqpoly(x1, x2)</span><br><span class=\"line\">cat(t_test(x1, x2))</span><br><span class=\"line\">#&gt; p value: 0.005</span><br><span class=\"line\">#&gt; [-0.39, -0.07]</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/28bdfb538762e0db56567d98e6b847723161da73/a520e/basic-reactivity_files/figure-html/unnamed-chunk-19-1.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/28bdfb538762e0db56567d98e6b847723161da73/a520e/basic-reactivity_files/figure-html/unnamed-chunk-19-1.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\"></p>\n<p>在真正的分析中，你可能在完成这些函数之前已经做了一堆探索。我在这里跳过了这个探索，这样我们就可以尽快地进入应用程序。但是将命令式代码提取到常规函数中是所有Shiny应用程序的一项重要技术：你从应用程序中提取的代码越多，就越容易理解。这是很好的软件工程，因为它有助于隔离问题：应用程序外的函数专注于计算，这样应用程序内的代码就可以专注于响应用户操作。我们将在第18章再次回到这个想法。</p>\n<h3 id=\"3-4-2-应用程序\"><a href=\"#3-4-2-应用程序\" class=\"headerlink\" title=\"3.4.2 应用程序\"></a>3.4.2 应用程序</h3><p>我想使用这两个工具快速探索一系列模拟。Shiny应用程序是一种很好的方法，因为它可以让你避免繁琐地修改和重新运行R代码。下面我将这些部分打包成一个Shiny应用程序，在这里我可以交互式地调整输入。</p>\n<p>让我们从UI开始。我们将在第6.2.3节中详细介绍<code>fluidRow()</code>和<code>column()</code>的作用；但是你可以从它们的名字中猜出它们的目的。第一行有三个用于输入控件的列（distribution 1、distribution 2和绘图控件）。第二行有一个宽列用于绘图，一个窄列用于假设检验。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui &lt;- fluidPage(</span><br><span class=\"line\">  fluidRow(</span><br><span class=\"line\">    column(4, </span><br><span class=\"line\">      &quot;Distribution 1&quot;,</span><br><span class=\"line\">      numericInput(&quot;n1&quot;, label = &quot;n&quot;, value = 1000, min = 1),</span><br><span class=\"line\">      numericInput(&quot;mean1&quot;, label = &quot;µ&quot;, value = 0, step = 0.1),</span><br><span class=\"line\">      numericInput(&quot;sd1&quot;, label = &quot;σ&quot;, value = 0.5, min = 0.1, step = 0.1)</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    column(4, </span><br><span class=\"line\">      &quot;Distribution 2&quot;,</span><br><span class=\"line\">      numericInput(&quot;n2&quot;, label = &quot;n&quot;, value = 1000, min = 1),</span><br><span class=\"line\">      numericInput(&quot;mean2&quot;, label = &quot;µ&quot;, value = 0, step = 0.1),</span><br><span class=\"line\">      numericInput(&quot;sd2&quot;, label = &quot;σ&quot;, value = 0.5, min = 0.1, step = 0.1)</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    column(4,</span><br><span class=\"line\">      &quot;Frequency polygon&quot;,</span><br><span class=\"line\">      numericInput(&quot;binwidth&quot;, label = &quot;Bin width&quot;, value = 0.1, step = 0.1),</span><br><span class=\"line\">      sliderInput(&quot;range&quot;, label = &quot;range&quot;, value = c(-3, 3), min = -5, max = 5)</span><br><span class=\"line\">    )</span><br><span class=\"line\">  ),</span><br><span class=\"line\">  fluidRow(</span><br><span class=\"line\">    column(9, plotOutput(&quot;hist&quot;)),</span><br><span class=\"line\">    column(3, verbatimTextOutput(&quot;ttest&quot;))</span><br><span class=\"line\">  )</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>server函数从指定的分布中抽取后，结合了freqpoly()和t_test()函数的调用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &lt;- function(input, output, session) &#123;</span><br><span class=\"line\">  output$hist &lt;- renderPlot(&#123;</span><br><span class=\"line\">    x1 &lt;- rnorm(input$n1, input$mean1, input$sd1)</span><br><span class=\"line\">    x2 &lt;- rnorm(input$n2, input$mean2, input$sd2)</span><br><span class=\"line\">    </span><br><span class=\"line\">    freqpoly(x1, x2, binwidth = input$binwidth, xlim = input$range)</span><br><span class=\"line\">  &#125;, res = 96)</span><br><span class=\"line\"></span><br><span class=\"line\">  output$ttest &lt;- renderText(&#123;</span><br><span class=\"line\">    x1 &lt;- rnorm(input$n1, input$mean1, input$sd1)</span><br><span class=\"line\">    x2 &lt;- rnorm(input$n2, input$mean2, input$sd2)</span><br><span class=\"line\">    </span><br><span class=\"line\">    t_test(x1, x2)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/c4b42aa78ca4fa1794c7f29a3b43e42610502212/32dcf/demos/basic-reactivity/case-study-1.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/c4b42aa78ca4fa1794c7f29a3b43e42610502212/32dcf/demos/basic-reactivity/case-study-1.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图3.6：一个Shiny应用程序，可让您使用t检验和频数多边形比较两个模拟分布。请访问https://hadley.shinyapps.io/ms-case-study-1以查看实时效果。\"></p>\n<p>这段定义服务器和用户界面的内容产生了图3.6。你可以在<a href=\"https://hadley.shinyapps.io/ms-case-study-1\">https://hadley.shinyapps.io/ms-case-study-1</a>找到它的活跃版。我推荐你打开应用程序并进行快速操作，以确保在继续阅读之前理解其基本操作。</p>\n<h3 id=\"3-4-3-反应式图表\"><a href=\"#3-4-3-反应式图表\" class=\"headerlink\" title=\"3.4.3 反应式图表\"></a>3.4.3 反应式图表</h3><p>让我们开始绘制这个应用程序的反应式图表。Shiny足够智能，仅在引用的输入发生更改时更新输出；它不够智能，不能仅选择性地运行输出内部的代码片段。换句话说，输出是原子的：它们要么整体执行，要么不执行。</p>\n<p>例如，以下是从server中获取的代码片段：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x1 &lt;- rnorm(input$n1, input$mean1, input$sd1)</span><br><span class=\"line\">x2 &lt;- rnorm(input$n2, input$mean2, input$sd2)</span><br><span class=\"line\">t_test(x1, x2)</span><br></pre></td></tr></table></figure>\n\n<p>作为阅读此代码的人，你可以看出我们只需要在n1、mean1或sd1发生变化时更新x1，在n2、mean2或sd2发生变化时更新x2。然而，Shiny只将输出视为一个整体，因此每当n1、mean1、sd1、n2、mean2或sd2中的一个发生变化时，它都会更新x1和x2。这导致了图3.7所示的反应图。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/840574f96b31b47295cc1ec44d359c0493a6e1bb/4d300/diagrams/basic-reactivity/case-study-1.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/840574f96b31b47295cc1ec44d359c0493a6e1bb/4d300/diagrams/basic-reactivity/case-study-1.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图3.7 反应图显示，每一个输出都取决于每一个输入\"></p>\n<p>你会注意到，图中非常密集：几乎每个输入都直接连接到每个输出。这造成了两个问题：</p>\n<ul>\n<li><p>应用程序难以理解，因为有太多的连接。您无法将应用程序的任何部分单独拉出来进行分析。</p>\n</li>\n<li><p>应用程序效率低下，因为它做了很多不必要的工作。例如，如果您更改了图的断点，将重新计算数据；如果您更改了n1的值，将更新x2（在两个地方！）。</p>\n</li>\n</ul>\n<p>应用程序还有一个其他主要缺陷：频率多边形和t检验使用单独的随机抽样。这可能会误导，因为您期望它们在同一基础数据上工作。</p>\n<p>幸运的是，我们可以通过使用反应式表达式来提取重复的计算，从而解决所有这些问题。</p>\n<h3 id=\"3-4-4-简化图表\"><a href=\"#3-4-4-简化图表\" class=\"headerlink\" title=\"3.4.4 简化图表\"></a>3.4.4 简化图表</h3><p>在server函数中，我们将现有代码重构为两个新的反应式表达式x1和x2，它们模拟来自两个分布的数据。要创建反应式表达式，我们调用<code>reactive()</code>并将结果分配给一个变量。要稍后使用该表达式，我们将变量称为函数进行调用。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &lt;- function(input, output, session) &#123;</span><br><span class=\"line\">  x1 &lt;- reactive(rnorm(input$n1, input$mean1, input$sd1))</span><br><span class=\"line\">  x2 &lt;- reactive(rnorm(input$n2, input$mean2, input$sd2))</span><br><span class=\"line\"></span><br><span class=\"line\">  output$hist &lt;- renderPlot(&#123;</span><br><span class=\"line\">    freqpoly(x1(), x2(), binwidth = input$binwidth, xlim = input$range)</span><br><span class=\"line\">  &#125;, res = 96)</span><br><span class=\"line\"></span><br><span class=\"line\">  output$ttest &lt;- renderText(&#123;</span><br><span class=\"line\">    t_test(x1(), x2())</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种转换产生了图3.8所示的实质上更简单的图表。这个更简单的图表使得应用程序更容易理解，因为您可以将连接组件分开理解；分布参数的值只会通过x1和x2影响输出。这种重写还使应用程序更高效，因为它减少了大量的计算。现在，当您更改binwidth或range时，只有图表发生变化，而不是基础数据。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/7037f40071103105203cef484ca816fa0f72555f/97d14/diagrams/basic-reactivity/case-study-2.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/7037f40071103105203cef484ca816fa0f72555f/97d14/diagrams/basic-reactivity/case-study-2.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图3.8 使用反应式表达式大大简化了图表，使其更容易理解\"></p>\n<p>为了强调这种模块化，图3.9在独立组件周围画了框。我们将在第19章讨论模块时回到这个想法。模块允许您提取重复的代码以进行重用，同时保证其与应用程序中的其他所有内容隔离。对于更复杂的app，模块是一种非常有用且强大的技术。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/9eda867da502862eae05b9b574ebcc5828858bd8/b75dd/diagrams/basic-reactivity/case-study-3.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/9eda867da502862eae05b9b574ebcc5828858bd8/b75dd/diagrams/basic-reactivity/case-study-3.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图3.9 模块强制隔离应用程序的各个部分\"></p>\n<p>您可能熟悉编程中的“三次规则”：无论何时您复制和粘贴某些内容三次，您应该想办法减少重复（通常通过编写函数）。这是很重要的，因为它减少了代码中的重复量，使代码更容易理解，并且随着您的需求变化而更容易更新。</p>\n<p>然而，我认为在Shiny中，您应该考虑“一次规则”：无论何时您复制和粘贴某些内容一次，您应该考虑将重复的代码提取到反应式表达式中。对于Shiny来说，这个规则更加严格，因为反应式表达式不仅使人类更容易理解代码，而且也提高了Shiny有效地重新运行代码的能力。</p>\n<h3 id=\"3-4-5-我们为什么需要反应式表达式？\"><a href=\"#3-4-5-我们为什么需要反应式表达式？\" class=\"headerlink\" title=\"3.4.5 我们为什么需要反应式表达式？\"></a>3.4.5 我们为什么需要反应式表达式？</h3><p>当您刚开始使用反应式代码时，您可能会想知道为什么我们需要反应式表达式。您为什么不使用现有的工具来减少代码中的重复：创建新变量和编写函数？不幸的是，这两种技术在反应式环境中都不起作用。</p>\n<p>如果您尝试使用变量来减少重复，您可能会编写类似这样的代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &lt;- function(input, output, session) &#123;</span><br><span class=\"line\">  x1 &lt;- rnorm(input$n1, input$mean1, input$sd1)</span><br><span class=\"line\">  x2 &lt;- rnorm(input$n2, input$mean2, input$sd2)</span><br><span class=\"line\"></span><br><span class=\"line\">  output$hist &lt;- renderPlot(&#123;</span><br><span class=\"line\">    freqpoly(x1, x2, binwidth = input$binwidth, xlim = input$range)</span><br><span class=\"line\">  &#125;, res = 96)</span><br><span class=\"line\"></span><br><span class=\"line\">  output$ttest &lt;- renderText(&#123;</span><br><span class=\"line\">    t_test(x1, x2)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果您运行此代码，则会收到错误，因为您尝试在反应式上下文之外访问输入值。即使您没有收到该错误，您仍然会遇到问题：x1和x2只会在会话开始时计算一次，而不是每次输入之一更新时都会计算。</p>\n<p>如果您尝试使用函数，则应用程序将工作：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &lt;- function(input, output, session) &#123; </span><br><span class=\"line\">  x1 &lt;- function() rnorm(input$n1, input$mean1, input$sd1)</span><br><span class=\"line\">  x2 &lt;- function() rnorm(input$n2, input$mean2, input$sd2)</span><br><span class=\"line\"></span><br><span class=\"line\">  output$hist &lt;- renderPlot(&#123;</span><br><span class=\"line\">    freqpoly(x1(), x2(), binwidth = input$binwidth, xlim = input$range)</span><br><span class=\"line\">  &#125;, res = 96)</span><br><span class=\"line\"></span><br><span class=\"line\">  output$ttest &lt;- renderText(&#123;</span><br><span class=\"line\">    t_test(x1(), x2())</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但它与原始代码有同样的问题：任何输入都会导致所有输出被重新计算，并且t检验和频率多边形将在单独的样本上运行。响应式表达式会自动缓存其结果，并且仅在输入更改时才进行更新<sup>13</sup>。</p>\n<p>变量只计算一次值（粥太凉了），函数在每次调用时计算值（粥太烫了），而响应式表达式只在值可能发生变化时计算值（粥刚刚好！）。</p>\n<h2 id=\"3-5-控制评估时间\"><a href=\"#3-5-控制评估时间\" class=\"headerlink\" title=\"3.5 控制评估时间\"></a>3.5 控制评估时间</h2><p>现在你已经熟悉了反应性的基本概念，我们将讨论两种更高级的技术，它们可以让你增加或减少反应性表达式的执行频率。在这里，我将展示如何使用基本技术；在第15章中，我们将回到它们的底层实现。</p>\n<p>为了探索基本思想，我将简化我的模拟应用程序。我将使用只有一个参数的分布，并强制两个样本共享相同的n。我还将删除绘图控件。这将产生更小的UI对象和server功能：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui &lt;- fluidPage(</span><br><span class=\"line\">  fluidRow(</span><br><span class=\"line\">    column(3, </span><br><span class=\"line\">      numericInput(&quot;lambda1&quot;, label = &quot;lambda1&quot;, value = 3),</span><br><span class=\"line\">      numericInput(&quot;lambda2&quot;, label = &quot;lambda2&quot;, value = 5),</span><br><span class=\"line\">      numericInput(&quot;n&quot;, label = &quot;n&quot;, value = 1e4, min = 0)</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    column(9, plotOutput(&quot;hist&quot;))</span><br><span class=\"line\">  )</span><br><span class=\"line\">)</span><br><span class=\"line\">server &lt;- function(input, output, session) &#123;</span><br><span class=\"line\">  x1 &lt;- reactive(rpois(input$n, input$lambda1))</span><br><span class=\"line\">  x2 &lt;- reactive(rpois(input$n, input$lambda2))</span><br><span class=\"line\">  output$hist &lt;- renderPlot(&#123;</span><br><span class=\"line\">    freqpoly(x1(), x2(), binwidth = 1, xlim = c(0, 40))</span><br><span class=\"line\">  &#125;, res = 96)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这生成了如图3.10所示的应用程序和如图3.11所示的反应图。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/ceed7209822edad11d811e6ad501f2e1cea7fb0d/b35bb/demos/basic-reactivity/simulation-2.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/ceed7209822edad11d811e6ad501f2e1cea7fb0d/b35bb/demos/basic-reactivity/simulation-2.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图3.10 一个更简单的应用程序，显示从两个泊松分布中抽取的随机数的频率多边形。参见 live 在线在https://hadley.shinyapps.io/ms-simulation-2。\"></p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/233a16963b00b9e879f225bc17a918afbad91e15/32c89/diagrams/basic-reactivity/timing.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/233a16963b00b9e879f225bc17a918afbad91e15/32c89/diagrams/basic-reactivity/timing.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图3.11 反应图\"></p>\n<h3 id=\"3-5-1-定时失效\"><a href=\"#3-5-1-定时失效\" class=\"headerlink\" title=\"3.5.1 定时失效\"></a>3.5.1 定时失效</h3><p>想象一下，如果你想通过不断重新模拟数据来强调这是模拟数据的事实，以便你看到动画而不是静态图<sup>14</sup>。我们可以使用新的函数：<code>reactiveTimer()</code>来增加更新的频率。</p>\n<p><code>reactiveTimer()</code>是一个反应式表达式，它依赖于一个隐藏的输入：当前时间。当您想要一个反应式表达式比其他方式更频繁地使自己无效时，您可以使用<code>reactiveTimer()</code>。例如，以下代码使用500毫秒的间隔，这样图将每两秒钟更新一次。这足够快，以提醒你正在查看模拟，而不会因快速变化而使你眼花缭乱。这一变化产生了如图3.12所示的反应图。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &lt;- function(input, output, session) &#123;</span><br><span class=\"line\">  timer &lt;- reactiveTimer(500)</span><br><span class=\"line\">  </span><br><span class=\"line\">  x1 &lt;- reactive(&#123;</span><br><span class=\"line\">    timer()</span><br><span class=\"line\">    rpois(input$n, input$lambda1)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  x2 &lt;- reactive(&#123;</span><br><span class=\"line\">    timer()</span><br><span class=\"line\">    rpois(input$n, input$lambda2)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  </span><br><span class=\"line\">  output$hist &lt;- renderPlot(&#123;</span><br><span class=\"line\">    freqpoly(x1(), x2(), binwidth = 1, xlim = c(0, 40))</span><br><span class=\"line\">  &#125;, res = 96)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/82776537eeb3726235dd27f53df0f38880965a60/dfd59/diagrams/basic-reactivity/timing-timer.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/82776537eeb3726235dd27f53df0f38880965a60/dfd59/diagrams/basic-reactivity/timing-timer.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图3.12 reactiveTimer(500)引入了一个新的反应式输入，该输入每半秒自动使自己无效一次\"></p>\n<p>注意我们在计算x1()和x2()的反应式表达式中使用timer()的情况：我们调用它，但不使用它的值。这使得x1和x2可以对timer产生反应式依赖，而不必担心它返回的确切值。</p>\n<h3 id=\"3-5-2-点击事件\"><a href=\"#3-5-2-点击事件\" class=\"headerlink\" title=\"3.5.2 点击事件\"></a>3.5.2 点击事件</h3><p>在上述场景中，想象一下如果模拟代码需要1秒钟才能运行完会发生什么情况。我们每0.5秒执行一次模拟，所以Shiny会有越来越多的工作要做，而且永远无法追赶上来。同样的问题也可能发生在如果有人在您的应用程序中快速点击按钮，而您正在进行的计算相对昂贵的情况下。这可能会给Shiny创建大量的后台工作，当Shiny忙于处理这些后台工作时，它无法响应任何新的事件，从而导致用户体验不佳。</p>\n<p>如果这种情况发生在您的应用程序中，您可能希望要求用户选择执行昂贵的计算，要求他们点击一个按钮。这是<code>actionButton()</code>的一个很好的用例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui &lt;- fluidPage(</span><br><span class=\"line\">  fluidRow(</span><br><span class=\"line\">    column(3, </span><br><span class=\"line\">      numericInput(&quot;lambda1&quot;, label = &quot;lambda1&quot;, value = 3),</span><br><span class=\"line\">      numericInput(&quot;lambda2&quot;, label = &quot;lambda2&quot;, value = 5),</span><br><span class=\"line\">      numericInput(&quot;n&quot;, label = &quot;n&quot;, value = 1e4, min = 0),</span><br><span class=\"line\">      actionButton(&quot;simulate&quot;, &quot;Simulate!&quot;)</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    column(9, plotOutput(&quot;hist&quot;))</span><br><span class=\"line\">  )</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>要使用操作按钮，我们需要学习一种新工具。为了理解原因，让我们首先使用与上述相同的方法来解决这个问题。与上面一样，我们提到simulate但不使用它的值来对其产生反应式依赖。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &lt;- function(input, output, session) &#123;</span><br><span class=\"line\">  x1 &lt;- reactive(&#123;</span><br><span class=\"line\">    input$simulate</span><br><span class=\"line\">    rpois(input$n, input$lambda1)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  x2 &lt;- reactive(&#123;</span><br><span class=\"line\">    input$simulate</span><br><span class=\"line\">    rpois(input$n, input$lambda2)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  output$hist &lt;- renderPlot(&#123;</span><br><span class=\"line\">    freqpoly(x1(), x2(), binwidth = 1, xlim = c(0, 40))</span><br><span class=\"line\">  &#125;, res = 96)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/d65eff11607572a166ddc400a771e5e72fb32b99/362e4/demos/basic-reactivity/action-button.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/d65eff11607572a166ddc400a771e5e72fb32b99/362e4/demos/basic-reactivity/action-button.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图3.13 具有操作按钮的应用程序。参见 live 在线在https://hadley.shinyapps.io/ms-action-button。\"></p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/ffefc8f9300348bb4c29492c4ebfa04235c78eec/94ace/diagrams/basic-reactivity/timing-button.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/ffefc8f9300348bb4c29492c4ebfa04235c78eec/94ace/diagrams/basic-reactivity/timing-button.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图3.14 这个反应图没有实现我们的目标；我们添加了一个依赖项，而不是取代了现有的依赖项。\"></p>\n<p>这产生了图3.13的应用程序和图3.14的反应图。这没有达到我们的目标，因为它只是引入了一个新的依赖项：当我们点击simulate按钮时，<code>x1()</code>和<code>x2()</code>将更新，但它们将继续在<code>lambda1</code>、<code>lambda2</code>或<code>n</code>改变时更新。我们希望取代现有的依赖项，而不是增加新的依赖项。</p>\n<p>为了解决这个问题，我们需要一个新的工具：一种使用输入值而不产生反应式依赖的方法。我们需要<code>eventReactive()</code>，它有两个参数：第一个参数指定要对其产生依赖的参数，第二个参数指定要计算的内容。这让应用程序只有在<code>simulate</code>被点击时才计算<code>x1()</code>和<code>x2()</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &lt;- function(input, output, session) &#123;</span><br><span class=\"line\">  x1 &lt;- eventReactive(input$simulate, &#123;</span><br><span class=\"line\">    rpois(input$n, input$lambda1)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  x2 &lt;- eventReactive(input$simulate, &#123;</span><br><span class=\"line\">    rpois(input$n, input$lambda2)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  output$hist &lt;- renderPlot(&#123;</span><br><span class=\"line\">    freqpoly(x1(), x2(), binwidth = 1, xlim = c(0, 40))</span><br><span class=\"line\">  &#125;, res = 96)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>图3.15显示了新的反应图。请注意，如所期望的那样，<code>x1</code>和<code>x2</code>不再对<code>lambda1</code>、<code>lambda2</code>和<code>n</code>产生反应式依赖：改变它们的值不会触发计算。我保留了浅灰色的箭头，只是为了提醒您x1和x2继续使用这些值，但不再对其产生反应式依赖。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/85daccd0739423ca7b9463531a23e66d280c5724/eb459/diagrams/basic-reactivity/timing-button-2.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/85daccd0739423ca7b9463531a23e66d280c5724/eb459/diagrams/basic-reactivity/timing-button-2.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图3.15 eventReactive()使分离依赖项（黑色箭头）和使用来计算结果的值（浅灰色箭头）成为可能。\"></p>\n<h2 id=\"3-6-观察者\"><a href=\"#3-6-观察者\" class=\"headerlink\" title=\"3.6 观察者\"></a>3.6 观察者</h2><p>到目前为止，我们一直关注应用程序内部发生的事情。但有时，您需要将应用程序外部的某些操作与应用程序内部的操作关联起来，以在其他地方产生副作用。这可能是将文件保存到共享网络驱动器、向Web API发送数据、更新数据库，或者（最常见）是在控制台上打印调试消息。这些操作不会影响应用程序的外观，因此您不应该使用输出和渲染函数。相反，您需要使用观察者（observer）。</p>\n<p>有多种创建观察者的方法，我们将在第15.3节中讨论它们。现在，我想向您展示如何使用<code>observeEvent()</code>，因为它在您学习Shiny时为您提供了一个重要的调试工具。</p>\n<p><code>observeEvent()</code>与<code>eventReactive()</code>非常相似。它有两个重要的参数：<code>eventExpr</code>和<code>handlerExpr</code>。第一个参数是输入或表达式，对其产生依赖；第二个参数是执行的代码。例如，对<code>server()</code>进行以下修改意味着每当<code>name</code>被更新时，都会向控制台发送一条消息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui &lt;- fluidPage(</span><br><span class=\"line\">  textInput(&quot;name&quot;, &quot;What&#x27;s your name?&quot;),</span><br><span class=\"line\">  textOutput(&quot;greeting&quot;)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">server &lt;- function(input, output, session) &#123;</span><br><span class=\"line\">  string &lt;- reactive(paste0(&quot;Hello &quot;, input$name, &quot;!&quot;))</span><br><span class=\"line\">  </span><br><span class=\"line\">  output$greeting &lt;- renderText(string())</span><br><span class=\"line\">  observeEvent(input$name, &#123;</span><br><span class=\"line\">    message(&quot;Greeting performed&quot;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>observeEvent()</code>和<code>eventReactive()</code>之间有两个重要的区别：</p>\n<ul>\n<li><p>您不需要将<code>observeEvent()</code>的结果分配给一个变量，因此</p>\n</li>\n<li><p>您不能从其他反应式消费者中引用它。</p>\n</li>\n</ul>\n<p> 观察者和输出密切相关。您可以将输出视为具有特殊副作用：更新用户浏览器中的HTML。为了强调这种紧密关系，我们将在反应图上以相同的方式绘制它们。这产生了如图3.16所示的反应图。</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/c34c3dfb6205be6ff2c2d3e8fca18f16d34d9f3a/9d229/diagrams/basic-reactivity/graph-3.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/c34c3dfb6205be6ff2c2d3e8fca18f16d34d9f3a/9d229/diagrams/basic-reactivity/graph-3.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图3.16 在反应图中，观察者看起来与输出相同\"></p>\n<h2 id=\"3-7-总结\"><a href=\"#3-7-总结\" class=\"headerlink\" title=\"3.7 总结\"></a>3.7 总结</h2><p>本章应有助于您更好地了解Shiny应用程序的后端，即响应用户操作的<code>server()</code>代码。您还初步掌握了支撑Shiny的响应式编程范式。在这里您所学到的东西将会对您大有帮助；我们将在第13章中回到底层理论。响应式编程非常强大，但它与您最习惯的R编程命令式风格截然不同。如果需要一段时间才能理解所有后果，请不要感到惊讶。</p>\n<p>本章结束了我们对Shiny基础的概述。下一章将通过创建一个更大的Shiny应用程序来帮助您练习迄今为止所学的材料，该应用程序旨在支持数据分析。</p>\n<h1 id=\"关注\"><a href=\"#关注\" class=\"headerlink\" title=\"关注\"></a>关注</h1><p>关注公众号“生信之巅”。</p>\n<table align=\"center\"><tr>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅微信公众号\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-right: 0px;margin-bottom: 5px;align: center;\"></td>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅小程序码\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-left: 0px;margin-bottom: 5px;align: center\"></td>\n</tr></table>\n\n\n<p><font color=\"#FF0000\"><ruby><b>敬告</b>：使用文中脚本请引用本文网址，请尊重本人的劳动成果，谢谢！<rt><b>Notice</b>: When you use the scripts in this article, please cite the link of this webpage. Thank you!</rt></ruby></font></p>\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"编程","path":"api/tags/编程.json"},{"name":"Shiny入门系列","path":"api/tags/Shiny入门系列.json"}]},{"title":"Shiny从入门到入定——7-图形","slug":"Shiny从入门到入定——7-图形","date":"2024-01-26T14:09:43.000Z","updated":"2024-03-11T13:07:17.000Z","comments":true,"path":"api/articles/Shiny从入门到入定——7-图形.json","excerpt":null,"keywords":null,"cover":"https://d33wubrfki0l68.cloudfront.net/8e3506131c2af7ac0ddd07569f277dd03e05ff0e/f836c/images/action-graphics/click.png","content":"<h1 id=\"7-图形\"><a href=\"#7-图形\" class=\"headerlink\" title=\"7 图形\"></a>7 图形</h1><ul>\n<li>第7章向您展示了如何向绘图添加直接交互以及如何显示以其他方式生成的图像。</li>\n</ul>\n<p>我们在第 2 章中简要讨论了 <a href=\"\">renderPlot()</a> ;它是在应用程序中显示图形的强大工具。本章将向您展示如何充分利用它来创建交互式绘图，即响应鼠标事件的绘图。您还将学习一些其他有用的技术，包括制作具有动态宽度和高度的绘图以及使用 <a href=\"https://rdrr.io/pkg/shiny/man/renderImage.html\">renderImage()</a> 显示图像。</p>\n<p>在本章中，我们将需要 ggplot2 和 Shiny，因为我们将其用于大多数图形的绘制。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>shiny<span class=\"punctuation\">)</span></span><br><span class=\"line\">library<span class=\"punctuation\">(</span>ggplot2<span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-1-交互性\"><a href=\"#7-1-交互性\" class=\"headerlink\" title=\"7.1 交互性\"></a>7.1 交互性</h2><p><a href=\"https://rdrr.io/pkg/shiny/man/plotOutput.html\">plotOutput()</a> 最酷的一点是，它不仅可以作为显示绘图的输出，还可以作为响应指针事件的输入。这允许您创建交互式图形，用户直接与绘图上的数据进行交互。交互式图形是一种强大的工具，具有广泛的应用范围。我没有空间向你展示所有的可能性，所以在这里我将重点介绍基础知识，然后向你指出资源以了解更多信息。</p>\n<h3 id=\"7-1-1-基础知识\"><a href=\"#7-1-1-基础知识\" class=\"headerlink\" title=\"7.1.1 基础知识\"></a>7.1.1 基础知识</h3><p>绘图可以响应四种不同的鼠标事件： <code>click</code> 、 <code>dblclick</code> （双击）、 <code>hover</code> （当鼠标在同一位置停留一段时间时）和 <code>brush</code> （矩形选择工具）。要将这些事件转换为Shiny的输入，您需要为相应的 <code>plotOutput()</code> 参数提供一个字符串，例如 <code>plotOutput(&quot;plot&quot;, click = &quot;plot_click&quot;)</code>。这将创建一个 <code>input$plot_click</code> ，您可以使用它来处理鼠标在绘图上的单击。</p>\n<p>下面是一个非常简单的处理鼠标单击的示例。我们注册 <code>plot_click</code> 输入，然后使用鼠标单击的坐标更新输出。图 7.1 显示了结果。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  plotOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;plot&quot;</span><span class=\"punctuation\">,</span> click <span class=\"operator\">=</span> <span class=\"string\">&quot;plot_click&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  verbatimTextOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;info&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>plot <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    plot<span class=\"punctuation\">(</span>mtcars<span class=\"operator\">$</span>wt<span class=\"punctuation\">,</span> mtcars<span class=\"operator\">$</span>mpg<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> res <span class=\"operator\">=</span> <span class=\"number\">96</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  output<span class=\"operator\">$</span>info <span class=\"operator\">&lt;-</span> renderPrint<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    req<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>plot_click<span class=\"punctuation\">)</span></span><br><span class=\"line\">    x <span class=\"operator\">&lt;-</span> <span class=\"built_in\">round</span><span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>plot_click<span class=\"operator\">$</span>x<span class=\"punctuation\">,</span> <span class=\"number\">2</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    y <span class=\"operator\">&lt;-</span> <span class=\"built_in\">round</span><span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>plot_click<span class=\"operator\">$</span>y<span class=\"punctuation\">,</span> <span class=\"number\">2</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    cat<span class=\"punctuation\">(</span><span class=\"string\">&quot;[&quot;</span><span class=\"punctuation\">,</span> x<span class=\"punctuation\">,</span> <span class=\"string\">&quot;, &quot;</span><span class=\"punctuation\">,</span> y<span class=\"punctuation\">,</span> <span class=\"string\">&quot;]&quot;</span><span class=\"punctuation\">,</span> sep <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/8e3506131c2af7ac0ddd07569f277dd03e05ff0e/f836c/images/action-graphics/click.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/8e3506131c2af7ac0ddd07569f277dd03e05ff0e/f836c/images/action-graphics/click.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图 7.1 单击左上角的点可更新打印的坐标 查看演示实例 https://hadley.shinyapps.io/ms-click 。\"></p>\n<p>（请注意使用 <a href=\"https://rdrr.io/pkg/shiny/man/req.html\">req()</a> ，以确保应用在第一次单击之前不会执行任何操作，且坐标以<code>wt</code>和<code>mpg</code>变量表示。</p>\n<p>以下各节更详细地介绍了这些事件。我们将从点击事件开始，然后简要讨论密切相关的 <code>dblclick</code> 和 <code>hover</code> 。然后，您将了解 <code>brush</code> 事件，该事件提供了一个矩形<code>brush</code>，由其四个边（ <code>xmin</code> ， <code>xmax </code>， <code>ymin </code>和 <code>ymax </code>定义。然后，我将举几个示例，使用动作结果更新绘图，然后讨论 Shiny 中交互式图形的一些局限性。</p>\n<h3 id=\"7-1-2-点击\"><a href=\"#7-1-2-点击\" class=\"headerlink\" title=\"7.1.2 点击\"></a>7.1.2 点击</h3><p>点事件返回一个相对丰富的列表，其中包含大量信息。最重要的组件是 <code>x</code> 和 <code>y</code> ，它们在数据坐标中给出事件的位置。但我不打算谈论这种数据结构，因为你只在相对罕见的情况下需要（如果你确实想要细节，请在 Shiny 图库中使用这个应用程序）。相反，您将使用 <a href=\"https://rdrr.io/pkg/shiny/man/brushedPoints.html\">nearPoints()</a> 帮助程序，该帮助程序返回一个数据框，其中包含单击附近的行，并处理一堆繁琐的细节。</p>\n<p>下面是 <code>nearPoints()</code> 运行的简单示例，其中显示了有关事件附近点的数据表。图 7.2 显示了该应用的屏幕截图。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  plotOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;plot&quot;</span><span class=\"punctuation\">,</span> click <span class=\"operator\">=</span> <span class=\"string\">&quot;plot_click&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;data&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>plot <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    plot<span class=\"punctuation\">(</span>mtcars<span class=\"operator\">$</span>wt<span class=\"punctuation\">,</span> mtcars<span class=\"operator\">$</span>mpg<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> res <span class=\"operator\">=</span> <span class=\"number\">96</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>data <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    nearPoints<span class=\"punctuation\">(</span>mtcars<span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>plot_click<span class=\"punctuation\">,</span> xvar <span class=\"operator\">=</span> <span class=\"string\">&quot;wt&quot;</span><span class=\"punctuation\">,</span> yvar <span class=\"operator\">=</span> <span class=\"string\">&quot;mpg&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">````</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">!</span><span class=\"punctuation\">[</span>图 <span class=\"number\">7.2</span> nearPoints<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> 将绘图坐标转换为数据行，从而可以轻松显示您单击的点的基础数据 查看实例 https<span class=\"operator\">:</span><span class=\"operator\">/</span><span class=\"operator\">/</span>hadley.shinyapps.io<span class=\"operator\">/</span>ms<span class=\"operator\">-</span>nearPoints 。<span class=\"punctuation\">]</span><span class=\"punctuation\">(</span>https<span class=\"operator\">:</span><span class=\"operator\">/</span><span class=\"operator\">/</span>d33wubrfki0l68.cloudfront.net<span class=\"operator\">/</span><span class=\"number\">7</span>c89122f2822dac1dbe5640e4aab942bebb46ef9<span class=\"operator\">/</span><span class=\"number\">8</span>d5d6<span class=\"operator\">/</span>images<span class=\"operator\">/</span>action<span class=\"operator\">-</span>graphics<span class=\"operator\">/</span>nearpoints.png<span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">在这里，我们给出 `nearPoints()` 四个参数：作为绘图基础的数据框、输入事件和轴上变量的名称。如果使用 `ggplot2`，则只需提供前两个参数，因为 `xvar` 和 `yvar` 可以从绘图数据结构中自动插补。出于这个原因，我将在本章的其余部分使用 `ggplot2`。下面是使用 `ggplot2` 重新实现的上一个示例：</span><br><span class=\"line\"></span><br><span class=\"line\">```r</span><br><span class=\"line\">ui &lt;- fluidPage(</span><br><span class=\"line\">  plotOutput(&quot;plot&quot;, click = &quot;plot_click&quot;),</span><br><span class=\"line\">  tableOutput(&quot;data&quot;)</span><br><span class=\"line\">)</span><br><span class=\"line\">server &lt;- function(input, output, session) &#123;</span><br><span class=\"line\">  output$plot &lt;- renderPlot(&#123;</span><br><span class=\"line\">    ggplot(mtcars, aes(wt, mpg)) + geom_point()</span><br><span class=\"line\">  &#125;, res = 96)</span><br><span class=\"line\">  </span><br><span class=\"line\">  output$data &lt;- renderTable(&#123;</span><br><span class=\"line\">    req(input$plot_click)</span><br><span class=\"line\">    nearPoints(mtcars, input$plot_click)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>您可能想知道 <code>nearPoints()</code> 究竟返回了什么。这是使用 <a href=\"https://rdrr.io/r/base/browser.html\">browser()</a> 的好地方，我们在 Section 5.2.3 中讨论过：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">  output<span class=\"operator\">$</span>data <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    req<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>plot_click<span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"built_in\">browser</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    nearPoints<span class=\"punctuation\">(</span>mtcars<span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>plot_click<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>现在，在我启动应用程序并单击一个点后，我被放入交互式调试器，在那里我可以运行 <code>nearPoints()</code> 并查看它返回的内容：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nearPoints<span class=\"punctuation\">(</span>mtcars<span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>plot_click<span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;             mpg cyl disp hp drat   wt  qsec vs am gear carb</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; Datsun 710 22.8   4  108 93 3.85 2.32 18.61  1  1    4    1</span></span><br></pre></td></tr></table></figure>\n\n\n<p>使用 <code>nearPoints()</code> 的另一种方法是使用 <code>allRows = TRUE</code> 和 <code>addDist = TRUE</code> 。这将返回包含两个新列的原始数据框：</p>\n<ul>\n<li><code>dist_</code> 给出行和事件之间的距离（以像素为单位）。</li>\n<li><code>selected_</code> 表示它是否靠近 click 事件（即它是否是 <code>allRows = FALSE</code>) 时返回的行。</li>\n</ul>\n<p>我们稍后会看到一个例子。</p>\n<h3 id=\"7-1-3-其他点事件\"><a href=\"#7-1-3-其他点事件\" class=\"headerlink\" title=\"7.1.3 其他点事件\"></a>7.1.3 其他点事件</h3><p>同样的方法对 <code>click</code>、<code>dblclick</code> 和 <code>hover</code> 同样有效：只需更改参数的名称。如果需要，可以通过提供 <a href=\"https://rdrr.io/pkg/shiny/man/clickOpts.html\">clickOps()</a>、<a href=\"https://rdrr.io/pkg/shiny/man/clickOpts.html\">dblclickOps()</a> 或 <a href=\"https://rdrr.io/pkg/shiny/man/clickOpts.html\">hoverOps()</a> 而不是给出输入 id 的字符串来获得对事件的额外控制。这些很少需要，所以我这里不讨论它们；请参阅文档以获取详细信息。</p>\n<p>您可以在一个图上使用多种交互类型。只需确保向用户解释他们可以做什么：使用鼠标事件与应用程序交互的一个缺点是它们不能立即被发现。</p>\n<h3 id=\"7-1-4-刷涂（Brushing）\"><a href=\"#7-1-4-刷涂（Brushing）\" class=\"headerlink\" title=\"7.1.4 刷涂（Brushing）\"></a>7.1.4 刷涂（Brushing）</h3><p>在绘图上选择点的另一种方法是使用画笔，画笔是由四个边定义的矩形选择。在 Shiny 中，一旦掌握了 <code>click</code> 和 <code>nearPoints()</code>，使用画笔就非常简单：只需切换到 <code>brush</code> 参数和 <a href=\"https://rdrr.io/pkg/shiny/man/brushedPoints.html\">brushedPoints()</a> 辅助函数。</p>\n<p>这是另一个简单的例子，显示了画笔选择了哪些点。图7.3显示了结果。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  plotOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;plot&quot;</span><span class=\"punctuation\">,</span> brush <span class=\"operator\">=</span> <span class=\"string\">&quot;plot_brush&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;data&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>plot <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    ggplot<span class=\"punctuation\">(</span>mtcars<span class=\"punctuation\">,</span> aes<span class=\"punctuation\">(</span>wt<span class=\"punctuation\">,</span> mpg<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"operator\">+</span> geom_point<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> res <span class=\"operator\">=</span> <span class=\"number\">96</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>data <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    brushedPoints<span class=\"punctuation\">(</span>mtcars<span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>plot_brush<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/72c746e68848220485ba12c028382dd0de8a3a00/fc713/images/action-graphics/brushedpoints.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/72c746e68848220485ba12c028382dd0de8a3a00/fc713/images/action-graphics/brushedpoints.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图 7.3 设置 brush 参数为用户提供了一个可拖动的“画笔”。在此应用程序中，画笔下方的点显示在表格中。在 https://hadley.shinyapps.io/ms-brushedPoints 上查看演示。\"></p>\n<p>使用 <a href=\"https://rdrr.io/pkg/shiny/man/brushOpts.html\">brushOptions()</a> 控制颜色（填充和描边），或将刷涂限制为<code>direction = &quot;x&quot;</code> 或 <code>&quot;y&quot;</code> 的单个维度（例如，用于刷涂时间序列）。</p>\n<h3 id=\"7-1-5-修改绘图\"><a href=\"#7-1-5-修改绘图\" class=\"headerlink\" title=\"7.1.5 修改绘图\"></a>7.1.5 修改绘图</h3><p>到目前为止，我们已经展示了交互的结果。但是，交互的真正魅力在于，当你显示你正在交互的同一图中的变化时。不幸的是，这需要你尚未学过的先进反应技术：<a href=\"https://rdrr.io/pkg/shiny/man/reactiveVal.html\">reactiveVal()</a>。我们将在第16章中回到<code>reactiveVal()</code>，但我想在这里展示它，因为它是一种非常有用的技术。你可能需要在阅读了那章之后重新阅读这一节，但即使没有所有的理论，你也会对潜在的应用有所了解。</p>\n<p>正如你可能从名字中猜到的那样，<code>reactiveVal()</code> 非常类似于 <code>reactive()</code>。通过调用带有初始值的 <code>reactiveVal()</code> 来创建反应性值，并以与反应性相同的方式检索该值：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val <span class=\"operator\">&lt;-</span> reactiveVal<span class=\"punctuation\">(</span><span class=\"number\">10</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">val<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">### #&gt; [1] 10</span></span><br></pre></td></tr></table></figure>\n\n<p>最大的区别是，你也可以更新一个响应式值，并且引用该值的所有反应式使用者都将重新计算。响应式值使用特殊的语法进行更新——你像调用函数一样调用它，第一个参数是新的值：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val<span class=\"punctuation\">(</span><span class=\"number\">20</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">val<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] 20</span></span><br></pre></td></tr></table></figure>\n\n<p>这意味着使用当前值更新反应值看起来像这样：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val<span class=\"punctuation\">(</span>val<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">+</span> <span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">val<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\">#&gt; [1] 21</span></span><br></pre></td></tr></table></figure>\n\n<p>不幸的是，如果你真的想在控制台中运行这段代码，你会得到一个错误，因为它必须在响应式环境中运行。这使得实验和调试更具挑战性，因为你需要 <a href=\"https://rdrr.io/r/base/browser.html\">browser()</a> 或类似方法来暂停 <a href=\"https://rdrr.io/pkg/shiny/man/shinyApp.html\">shinyApp()</a> 调用中的执行。这是我们将在第 16 章后面讨论的挑战之一。</p>\n<p>现在，让我们把学习 <code>reactiveVal()</code> 的挑战放在一边，告诉你为什么你可能会烦恼。想象一下，您想要可视化单击与图上的点之间的距离。在下面的应用程序中，我们首先创建一个反应值来存储这些距离，并使用一个常量对其进行初始化，该常量将在我们单击任何内容之前使用。然后，我们使用 <a href=\"https://rdrr.io/pkg/shiny/man/observeEvent.html\">observeEvent()</a> 来更新单击鼠标时的反应值，并使用 <code>ggplot</code> 可视化具有点大小的距离。总而言之，这看起来像下面的代码，结果如图 7.4 所示。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set.seed<span class=\"punctuation\">(</span><span class=\"number\">1014</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">df <span class=\"operator\">&lt;-</span> data.frame<span class=\"punctuation\">(</span>x <span class=\"operator\">=</span> rnorm<span class=\"punctuation\">(</span><span class=\"number\">100</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> y <span class=\"operator\">=</span> rnorm<span class=\"punctuation\">(</span><span class=\"number\">100</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  plotOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;plot&quot;</span><span class=\"punctuation\">,</span> click <span class=\"operator\">=</span> <span class=\"string\">&quot;plot_click&quot;</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  dist <span class=\"operator\">&lt;-</span> reactiveVal<span class=\"punctuation\">(</span><span class=\"built_in\">rep</span><span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">,</span> nrow<span class=\"punctuation\">(</span>df<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>plot_click<span class=\"punctuation\">,</span></span><br><span class=\"line\">    dist<span class=\"punctuation\">(</span>nearPoints<span class=\"punctuation\">(</span>df<span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>plot_click<span class=\"punctuation\">,</span> allRows <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">,</span> addDist <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span><span class=\"operator\">$</span>dist_<span class=\"punctuation\">)</span>  </span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>plot <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    df<span class=\"operator\">$</span>dist <span class=\"operator\">&lt;-</span> dist<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    ggplot<span class=\"punctuation\">(</span>df<span class=\"punctuation\">,</span> aes<span class=\"punctuation\">(</span>x<span class=\"punctuation\">,</span> y<span class=\"punctuation\">,</span> size <span class=\"operator\">=</span> dist<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"operator\">+</span> </span><br><span class=\"line\">      geom_point<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">+</span> </span><br><span class=\"line\">      scale_size_area<span class=\"punctuation\">(</span>limits <span class=\"operator\">=</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"number\">1000</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> max_size <span class=\"operator\">=</span> <span class=\"number\">10</span><span class=\"punctuation\">,</span> guide <span class=\"operator\">=</span> <span class=\"literal\">NULL</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> res <span class=\"operator\">=</span> <span class=\"number\">96</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/28b14f04bca5f6a00be49c50bdc09220ff421283/059c4/images/action-graphics/modifying-size-1.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/28b14f04bca5f6a00be49c50bdc09220ff421283/059c4/images/action-graphics/modifying-size-1.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图 7.4 此应用使用 reactiveVal() 来存储到上次单击的点的距离，然后将其映射到点大小。在这里，我显示了单击最左侧的点的结果 See live at https://hadley.shinyapps.io/ms-modifying-size 。\"></p>\n<p>这里有两个重要的ggplot2技术需要注意：</p>\n<ul>\n<li>在绘制之前，我将距离添加到数据框中。我认为在可视化之前，将相关变量放在数据框中是一种很好的做法。</li>\n<li>我为 <a href=\"https://ggplot2.tidyverse.org/reference/scale_size.html\">scale_size_area()</a> 设置了限制，以确保点击之间的尺寸具有可比性。为了找到正确的范围，我做了一些交互式实验，但如有需要，您可以计算出确切的细节（参见本章末尾的练习）。</li>\n</ul>\n<p>有一个更复杂的想法。我想用画笔逐步添加点到一个选择。在这里，我使用不同的颜色显示选择，但你可以想象许多其他的应用程序。为了使这个工作，我将<code>reactiveVal()</code>初始化为一个<code>FALSE</code>的向量，然后使用<a href=\"https://rdrr.io/pkg/shiny/man/brushedPoints.html\">brushedPoints()</a>和|将画笔下的任何点添加到选择。为了给用户一种重新开始的方式，我双击重置选择。图7.5显示了运行应用程序的几个截图。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  plotOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;plot&quot;</span><span class=\"punctuation\">,</span> brush <span class=\"operator\">=</span> <span class=\"string\">&quot;plot_brush&quot;</span><span class=\"punctuation\">,</span> dblclick <span class=\"operator\">=</span> <span class=\"string\">&quot;plot_reset&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  selected <span class=\"operator\">&lt;-</span> reactiveVal<span class=\"punctuation\">(</span><span class=\"built_in\">rep</span><span class=\"punctuation\">(</span><span class=\"literal\">FALSE</span><span class=\"punctuation\">,</span> nrow<span class=\"punctuation\">(</span>mtcars<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>plot_brush<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    brushed <span class=\"operator\">&lt;-</span> brushedPoints<span class=\"punctuation\">(</span>mtcars<span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>plot_brush<span class=\"punctuation\">,</span> allRows <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span><span class=\"operator\">$</span>selected_</span><br><span class=\"line\">    selected<span class=\"punctuation\">(</span>brushed <span class=\"operator\">|</span> selected<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>plot_reset<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    selected<span class=\"punctuation\">(</span><span class=\"built_in\">rep</span><span class=\"punctuation\">(</span><span class=\"literal\">FALSE</span><span class=\"punctuation\">,</span> nrow<span class=\"punctuation\">(</span>mtcars<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  output<span class=\"operator\">$</span>plot <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    mtcars<span class=\"operator\">$</span>sel <span class=\"operator\">&lt;-</span> selected<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    ggplot<span class=\"punctuation\">(</span>mtcars<span class=\"punctuation\">,</span> aes<span class=\"punctuation\">(</span>wt<span class=\"punctuation\">,</span> mpg<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"operator\">+</span> </span><br><span class=\"line\">      geom_point<span class=\"punctuation\">(</span>aes<span class=\"punctuation\">(</span>colour <span class=\"operator\">=</span> sel<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"operator\">+</span></span><br><span class=\"line\">      scale_colour_discrete<span class=\"punctuation\">(</span>limits <span class=\"operator\">=</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;TRUE&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;FALSE&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> res <span class=\"operator\">=</span> <span class=\"number\">96</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/da63b234ad81bc5e1e592a904a1eaed0f4ee092d/794de/images/action-graphics/persistent-1.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/da63b234ad81bc5e1e592a904a1eaed0f4ee092d/794de/images/action-graphics/persistent-1.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\"><br><img src=\"https://d33wubrfki0l68.cloudfront.net/8c5a7aead6640c2720f28c4d05925d3a29e92730/e8f2e/images/action-graphics/persistent-3.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/8c5a7aead6640c2720f28c4d05925d3a29e92730/e8f2e/images/action-graphics/persistent-3.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图 7.5 此应用程序使画笔“持续”，因此拖动它会增加当前选择。\"></p>\n<p>再次，我设定了比例的限制，以确保图例（和颜色）在第一次点击后不会改变。</p>\n<h3 id=\"7-1-6-互动限制\"><a href=\"#7-1-6-互动限制\" class=\"headerlink\" title=\"7.1.6 互动限制\"></a>7.1.6 互动限制</h3><p>在我们继续之前，了解交互式图中的基本数据流以了解其局限性非常重要。基本流程是这样的：</p>\n<ul>\n<li>JavaScript捕获鼠标事件。</li>\n<li>Shiny将鼠标事件数据发送回R，告诉应用程序输入已过时。</li>\n<li>重新计算所有下游反应式使用者。</li>\n<li><code>plotOutput()</code>生成一个新的PNG并将其发送到浏览器。</li>\n</ul>\n<p>对于本地应用程序，瓶颈往往是绘制图表所花费的时间。根据图表的复杂程度，这可能需要几分之一秒的时间。但对于托管应用程序，您还必须考虑将事件从浏览器传输到R所需的时间，然后将渲染的图表从R传输回浏览器。</p>\n<p>一般来说，这意味着不可能创建动作和响应被视为即时的Shiny应用程序（即绘图似乎与您的操作同时更新）。如果您需要这种速度，您必须在JavaScript中执行更多的计算。一种方法是使用一个封装了JavaScript图形库的R包。现在，在我写这本书的时候，我认为你会得到<code>plotly</code>包的最佳体验，正如Carson Sievert在《<a href=\"https://plotly-r.com/\">使用R、plotly和shiny进行基于Web的交互式数据可视化</a>》一书中所述。</p>\n<h2 id=\"7-2-动态高度和宽度\"><a href=\"#7-2-动态高度和宽度\" class=\"headerlink\" title=\"7.2 动态高度和宽度\"></a>7.2 动态高度和宽度</h2><p>本章的其余部分不如交互式图形那么令人兴奋，但包含了一些重要的内容。</p>\n<p>首先，可以使绘图大小具有反应性，因此宽度和高度会根据用户操作而变化。为此，向<code>renderPlot()</code>的<code>width</code>和<code>height</code>参数提供零参数函数，这些参数现在必须在server中定义，而不是在UI中定义，因为它们可以更改。这些函数不应有参数，并返回所需的大小（以像素为单位）。它们在反应式环境中进行评估，以便您可以动态地调整绘图的大小。</p>\n<p>以下应用程序演示了基本思想。它提供了两个直接控制绘图大小的滑块。图 7.6 中显示了几个示例屏幕截图。请注意，当您调整绘图大小时，数据保持不变：您不会获得新的随机数。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;height&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;height&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">100</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">500</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">250</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;width&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;width&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">100</span><span class=\"punctuation\">,</span> <span class=\"built_in\">max</span> <span class=\"operator\">=</span> <span class=\"number\">500</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">250</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  plotOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;plot&quot;</span><span class=\"punctuation\">,</span> width <span class=\"operator\">=</span> <span class=\"number\">250</span><span class=\"punctuation\">,</span> height <span class=\"operator\">=</span> <span class=\"number\">250</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>plot <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span></span><br><span class=\"line\">    width <span class=\"operator\">=</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> input<span class=\"operator\">$</span>width<span class=\"punctuation\">,</span></span><br><span class=\"line\">    height <span class=\"operator\">=</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> input<span class=\"operator\">$</span>height<span class=\"punctuation\">,</span></span><br><span class=\"line\">    res <span class=\"operator\">=</span> <span class=\"number\">96</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      plot<span class=\"punctuation\">(</span>rnorm<span class=\"punctuation\">(</span><span class=\"number\">20</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> rnorm<span class=\"punctuation\">(</span><span class=\"number\">20</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><img src=\"https://d33wubrfki0l68.cloudfront.net/187b93086b15e4f5f6afe04cb609019d1a37b424/537a6/demos/action-graphics/resize-narrow.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/187b93086b15e4f5f6afe04cb609019d1a37b424/537a6/demos/action-graphics/resize-narrow.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\"></td>\n<td><img src=\"https://d33wubrfki0l68.cloudfront.net/46c07091eaf6a8cd82a342e6fc55692e54740b7c/d0566/demos/action-graphics/resize-wide.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/46c07091eaf6a8cd82a342e6fc55692e54740b7c/d0566/demos/action-graphics/resize-wide.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图 7.6 您可以使绘图大小动态化，以便它响应用户操作。该图显示了更改宽度的效果。在 https://hadley.shinyapps.io/ms-resize 上查看演示。\"></td>\n</tr>\n<tr>\n<td>图 7.6 您可以使绘图大小动态化，以便它响应用户操作。该图显示了更改宽度的效果。</td>\n<td>在 <a href=\"https://hadley.shinyapps.io/ms-resize\">https://hadley.shinyapps.io/ms-resize</a> 上查看演示。</td>\n</tr>\n<tr>\n<td>在实际应用中，您将在 <code>width</code> 和 <code>height</code> 函数中使用更复杂的表达式。例如，如果您在 ggplot2 中使用分面图，则可以使用它来增加图的大小，以保持各个分面大小大致相同。</td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"7-3-图片\"><a href=\"#7-3-图片\" class=\"headerlink\" title=\"7.3 图片\"></a>7.3 图片</h2><p>如果要显示现有图像（而不是绘图），则可以使用 <a href=\"https://rdrr.io/pkg/shiny/man/renderImage.html\">renderImage()</a> 。例如，您可能有一个要向用户显示的照片目录。以下应用通过展示可爱的小狗照片来说明 <code>renderImage()</code> 的基础知识。这些照片来自 <a href=\"https://unsplash.com/\">https://unsplash.com</a> ，我最喜欢的免版税库存照片来源。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">puppies <span class=\"operator\">&lt;-</span> tibble<span class=\"operator\">::</span>tribble<span class=\"punctuation\">(</span></span><br><span class=\"line\">  <span class=\"operator\">~</span>breed<span class=\"punctuation\">,</span> <span class=\"operator\">~</span> id<span class=\"punctuation\">,</span> <span class=\"operator\">~</span>author<span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"string\">&quot;corgi&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;eoqnr8ikwFE&quot;</span><span class=\"punctuation\">,</span><span class=\"string\">&quot;alvannee&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"string\">&quot;labrador&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;KCdYn0xu2fU&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;shaneguymon&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"string\">&quot;spaniel&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;TzjMd7i5WQI&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;_redo_&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;id&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Pick a breed&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> setNames<span class=\"punctuation\">(</span>puppies<span class=\"operator\">$</span>id<span class=\"punctuation\">,</span> puppies<span class=\"operator\">$</span>breed<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  htmlOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;source&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  imageOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;photo&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>photo <span class=\"operator\">&lt;-</span> renderImage<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"built_in\">list</span><span class=\"punctuation\">(</span></span><br><span class=\"line\">      src <span class=\"operator\">=</span> file.path<span class=\"punctuation\">(</span><span class=\"string\">&quot;puppy-photos&quot;</span><span class=\"punctuation\">,</span> paste0<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>id<span class=\"punctuation\">,</span> <span class=\"string\">&quot;.jpg&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      contentType <span class=\"operator\">=</span> <span class=\"string\">&quot;image/jpeg&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      width <span class=\"operator\">=</span> <span class=\"number\">500</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      height <span class=\"operator\">=</span> <span class=\"number\">650</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> deleteFile <span class=\"operator\">=</span> <span class=\"literal\">FALSE</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>source <span class=\"operator\">&lt;-</span> renderUI<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    info <span class=\"operator\">&lt;-</span> puppies<span class=\"punctuation\">[</span>puppies<span class=\"operator\">$</span>id <span class=\"operator\">==</span> input<span class=\"operator\">$</span>id<span class=\"punctuation\">,</span> <span class=\"punctuation\">,</span> drop <span class=\"operator\">=</span> <span class=\"literal\">FALSE</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">    HTML<span class=\"punctuation\">(</span>glue<span class=\"operator\">::</span>glue<span class=\"punctuation\">(</span><span class=\"string\">&quot;&lt;p&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;a href=&#x27;https://unsplash.com/photos/&#123;info$id&#125;&#x27;&gt;original&lt;/a&gt; by</span></span><br><span class=\"line\"><span class=\"string\">      &lt;a href=&#x27;https://unsplash.com/@&#123;info$author&#125;&#x27;&gt;&#123;info$author&#125;&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/p&gt;&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/70de2ab74b8c9f3984ea503ef40af3930324c62a/43790/demos/action-graphics/puppies-corgi.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/70de2ab74b8c9f3984ea503ef40af3930324c62a/43790/demos/action-graphics/puppies-corgi.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图 7.7 使用 renderImage() 显示小狗可爱图片的应用。在 https://hadley.shinyapps.io/ms-puppies 上查看演示。\"><br><code>renderImage()</code> 需要返回一个列表。唯一关键的参数是 <code>src</code>，一个指向图像文件的本地路径。此外，您还可以提供：</p>\n<ul>\n<li><p><code>content-type</code>，它定义了图像的 MIME 类型。如果没有提供，Shiny 将从文件扩展名中猜测，因此只有在图像没有扩展名时才需要提供此内容。</p>\n</li>\n<li><p>图像的<code>width</code> 和 <code>height</code>（如果已知）。</p>\n</li>\n<li><p>任何其他参数，如 <code>class</code> 或 <code>alt</code>，都将作为属性添加到 HTML 中的<code>&lt;img&gt;</code>标记中。</p>\n</li>\n</ul>\n<p>您还必须提供<code>deleteFile</code>参数。不幸的是，<code>renderImage()</code>最初是设计用于处理临时文件的，因此在渲染后会自动删除图像。这显然是非常危险的，因此在Shiny 1.5.0中改变了行为。现在Shiny不再删除图像，而是强制您明确选择想要的行为。</p>\n<p>你可以在<br><a href=\"https://shiny.rstudio.com/articles/images.html\">https://shiny.rstudio.com/articles/images.html</a><br>了解更多关于 <code>renderImage()</code> 的信息，并查看你可能使用它的其他方式。</p>\n<h2 id=\"7-4-总结\"><a href=\"#7-4-总结\" class=\"headerlink\" title=\"7.4 总结\"></a>7.4 总结</h2><p>可视化是数据交流的强大方式，本章为您提供了几种高级技术来增强您的Shiny应用程序。接下来，您将学习向用户提供有关应用程序中正在发生的事情的反馈的技术，这对于需要花费大量时间的操作尤为重要。</p>\n<h1 id=\"加关注\"><a href=\"#加关注\" class=\"headerlink\" title=\"加关注\"></a>加关注</h1><p>关注公众号“生信之巅”。</p>\n<table align=\"center\"><tr>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅微信公众号\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-right: 0px;margin-bottom: 5px;align: center;\"></td>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅小程序码\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-left: 0px;margin-bottom: 5px;align: center\"></td>\n</tr></table>\n\n\n<p><font color=\"#FF0000\"><ruby><b>敬告</b>：使用文中脚本请引用本文网址，请尊重本人的劳动成果，谢谢！<rt><b>Notice</b>: When you use the scripts in this article, please cite the link of this webpage. Thank you!</rt></ruby></font></p>\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"编程","path":"api/tags/编程.json"},{"name":"Shiny入门系列","path":"api/tags/Shiny入门系列.json"}]},{"title":"Shiny从入门到入定——8-用户反馈","slug":"Shiny从入门到入定——8-用户反馈","date":"2024-04-14T05:18:07.000Z","updated":"2024-04-14T05:37:41.141Z","comments":true,"path":"api/articles/Shiny从入门到入定——8-用户反馈.json","excerpt":null,"keywords":null,"cover":"https://d33wubrfki0l68.cloudfront.net/4ce6e5665e89d296ce5ee685d1b44ac44f648c1c/42897/demos/action-feedback/feedback-odd.png","content":"<h1 id=\"8-用户反馈\"><a href=\"#8-用户反馈\" class=\"headerlink\" title=\"8 用户反馈\"></a>8 用户反馈</h1><p>你通常可以通过向用户展示更多关于正在发生的事情的信息来提高应用程序的可用性。这可能表现为当输入不合理时显示更好的消息，或者对需要很长时间的操作使用进度条。一些反馈是通过输出自然发生的，你已经知道如何使用它们，但你经常还需要其他的东西。本章的目标是向你展示一些其他的选择。</p>\n<p>我们将从<code>验证</code>技术开始，在输入（或输入组合）处于无效状态时通知用户。然后我们将继续讨论<code>通知</code>，向用户发送一般消息，以及<code>进度条</code>，这些为包含许多小步骤的耗时操作提供了详细信息。最后，我们将讨论危险操作，以及如何使用<code>确认</code>对话框或<code>撤销</code>操作的能力来让你的用户安心。</p>\n<p>在本章中，我们将使用Andy Merlino的<a href=\"https://github.com/merlinoa/shinyFeedback\">shinyFeedback</a>和John Coene的<a href=\"http://waiter.john-coene.com/\">waiter</a>。你还应该关注Joe Cheng正在开发的<a href=\"https://rstudio.github.io/shinyvalidate/\">shinyvalidate</a>包。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>shiny<span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-1-验证\"><a href=\"#8-1-验证\" class=\"headerlink\" title=\"8.1 验证\"></a>8.1 验证</h2><p>你可以给用户提供的第一个也是最重要的反馈是，他们的输入有误。这与在R中编写好函数类似：用户友好的函数会给出清晰的错误消息，描述期望的输入是什么，以及你是如何违背这些期望的。思考用户可能会如何误用你的应用程序，可以让你在用户界面（UI）中提供有用的消息，而不是让错误渗透到R代码中并产生无用的错误信息。</p>\n<h3 id=\"8-1-1-验证输入\"><a href=\"#8-1-1-验证输入\" class=\"headerlink\" title=\"8.1.1 验证输入\"></a>8.1.1 验证输入</h3><p>通过shinyFeedback包向用户提供额外的反馈是一个很好的方法。使用它分为两步。首先，你需要在用户界面（ui）中添加useShinyFeedback()。这将为显示美观的错误消息设置所需的HTML和JavaScript：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  shinyFeedback<span class=\"operator\">::</span>useShinyFeedback<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">10</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;half&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>然后在您的server()函数中，您调用反馈函数之一：feedback()、feedbackWarning()、feedbackDanger()和feedbackSuccess()。他们都有三个关键参数：</p>\n<ul>\n<li><code>inputId</code>，放置反馈的输入的id。</li>\n<li><code>show</code>，一个逻辑值，确定是否显示反馈。</li>\n<li><code>text</code>，要显示的文本。</li>\n</ul>\n<p>它们还有颜色和图标参数，你可以使用它们进一步自定义外观。更多详细信息请查阅文档。</p>\n<p>让我们看看这在一个真实例子中是如何实现的，假设我们只允许输入偶数。图8.1显示了结果。</p>\n<figure class=\"highlight plaintext\"><figcaption><span><- function(input, output, session) &#123;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  half &lt;- reactive(&#123;</span><br><span class=\"line\">    even &lt;- input$n %% 2 == 0</span><br><span class=\"line\">    shinyFeedback::feedbackWarning(&quot;n&quot;, !even, &quot;Please select an even number&quot;)</span><br><span class=\"line\">    input$n / 2    </span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  </span><br><span class=\"line\">  output$half &lt;- renderText(half())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/4ce6e5665e89d296ce5ee685d1b44ac44f648c1c/42897/demos/action-feedback/feedback-odd.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/4ce6e5665e89d296ce5ee685d1b44ac44f648c1c/42897/demos/action-feedback/feedback-odd.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图8.1：使用feedbackWarning()显示无效输入的警告。左侧的应用程序显示了一个有效的输入，右侧的应用程序显示了一个无效的（奇数）输入并带有警告消息。请访问https://hadley.shinyapps.io/ms-feedback查看实时效果。\"></p>\n<p>请注意，错误消息已经显示，但输出仍然更新了。通常，你不想这样做，因为无效的输入可能会引发你不希望显示给用户的无用的R错误。要阻止输入触发响应式更改，你需要一个新工具：req()，即“required”的缩写。它的用法如下：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  half <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    even <span class=\"operator\">&lt;-</span> input<span class=\"operator\">$</span>n <span class=\"operator\">%%</span> <span class=\"number\">2</span> <span class=\"operator\">==</span> <span class=\"number\">0</span></span><br><span class=\"line\">    shinyFeedback<span class=\"operator\">::</span>feedbackWarning<span class=\"punctuation\">(</span><span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">,</span> <span class=\"operator\">!</span>even<span class=\"punctuation\">,</span> <span class=\"string\">&quot;Please select an even number&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    req<span class=\"punctuation\">(</span>even<span class=\"punctuation\">)</span></span><br><span class=\"line\">    input<span class=\"operator\">$</span>n <span class=\"operator\">/</span> <span class=\"number\">2</span>    </span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>half <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span>half<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>当<code>req()</code>的输入不为真时，它会发送一个特殊信号，告诉Shiny这个响应式组件没有它所需的所有输入，因此应该“暂停”。在将其与<code>validate()</code>结合使用之前，我们先简要讨论一下这个问题。</p>\n<h3 id=\"8-1-2-使用req-取消执行\"><a href=\"#8-1-2-使用req-取消执行\" class=\"headerlink\" title=\"8.1.2 使用req()取消执行\"></a>8.1.2 使用<code>req()</code>取消执行</h3><p>通过跳出验证的范畴，可以更容易地理解<a href=\"https://rdrr.io/pkg/shiny/man/req.html\">req()</a>。你可能已经注意到，当你启动一个应用程序时，即使用户还没有进行任何操作，完整的响应式图也会被计算出来。当你能够为输入选择有意义的默认<code>值</code>时，这可以很好地工作。但这并不总是可能的，有时你可能希望等到用户实际执行了某些操作再进行计算。这种情况通常出现在以下三种控件中：</p>\n<ul>\n<li><p>在<a href=\"https://rdrr.io/pkg/shiny/man/textInput.html\">textInput()</a>中，你使用了<code>value = &quot;&quot;</code>，并且不希望用户输入任何内容之前执行任何操作。</p>\n</li>\n<li><p>在<a href=\"https://rdrr.io/pkg/shiny/man/selectInput.html\">selectInput()</a>中，你提供了一个空选项<code>&quot;&quot;</code>，并且不希望用户进行选择之前执行任何操作。</p>\n</li>\n<li><p>在<a href=\"https://rdrr.io/pkg/shiny/man/fileInput.html\">fileInput()</a>中，用户在上传任何内容之前，其结果都是空的。我们将在<code>9.1</code>节中再次讨论这个问题。</p>\n</li>\n</ul>\n<p>我们需要一种方法来“暂停”响应式组件，以便在满足某个条件之前不会发生任何事情。这就是<code>req()</code>的工作，它会在允许响应式生产者继续之前检查所需的值。</p>\n<p>例如，考虑以下应用程序，它将生成英语或毛利语的问候语。如果你运行这个应用程序，你会看到一个错误，如图<code>8.2</code>所示，因为在<code>greetings</code>向量中没有与默认选项<code>&quot;&quot;</code>相对应的条目。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;language&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Language&quot;</span><span class=\"punctuation\">,</span> choices <span class=\"operator\">=</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;English&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Maori&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;name&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Name&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;greeting&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  greetings <span class=\"operator\">&lt;-</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span></span><br><span class=\"line\">    English <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">    Maori <span class=\"operator\">=</span> <span class=\"string\">&quot;Kia ora&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>greeting <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    paste0<span class=\"punctuation\">(</span>greetings<span class=\"punctuation\">[[</span>input<span class=\"operator\">$</span>language<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot; &quot;</span><span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>name<span class=\"punctuation\">,</span> <span class=\"string\">&quot;!&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/8983f6fd77bdc3b97d45f06a7fdd0c67aaf52b3d/b3d13/demos/action-feedback/require-simple.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/8983f6fd77bdc3b97d45f06a7fdd0c67aaf52b3d/b3d13/demos/action-feedback/require-simple.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图8.2：当应用程序加载时，由于尚未选择语言，因此会显示一条无信息量的错误消息。\"></p>\n<p>我们可以使用<code>req()</code>来解决这个问题，如下所示。现在，在用户为语言和姓名都提供了值之前，将不会显示任何内容，如图<code>8.3</code>所示</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  greetings <span class=\"operator\">&lt;-</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span></span><br><span class=\"line\">    English <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">    Maori <span class=\"operator\">=</span> <span class=\"string\">&quot;Kia ora&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>greeting <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    req<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>language<span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>name<span class=\"punctuation\">)</span></span><br><span class=\"line\">    paste0<span class=\"punctuation\">(</span>greetings<span class=\"punctuation\">[[</span>input<span class=\"operator\">$</span>language<span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot; &quot;</span><span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>name<span class=\"punctuation\">,</span> <span class=\"string\">&quot;!&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/e8048494af9066952f69e4c7e9ec06c826202c34/4933a/demos/action-feedback/require-simple2-langauge.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/e8048494af9066952f69e4c7e9ec06c826202c34/4933a/demos/action-feedback/require-simple2-langauge.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图8.3：通过使用req()，只有在提供了语言和姓名之后，输出才会显示。请访问https://hadley.shinyapps.io/ms-require-simple2查看实时效果。\"><br><code>req()</code>通过发出一个特殊<code>条件</code>来工作。这个特殊条件导致所有下游的响应式组件和输出停止执行。从技术上讲，它使任何下游的响应式消费者处于无效状态。我们将在第<code>16</code>章中再次回到这个术语。</p>\n<p><code>req()</code>的设计是使得<code>req(inputx)</code>只有在用户提供了值的情况下才会继续执行，而不考虑输入控件的类型。如果需要，你也可以使用<code>req()</code>与自己的逻辑语句结合使用。例如，<code>req(inputa &gt; 0)</code>会在<code>a</code>大于0时允许计算继续进行；这通常是我们执行验证时使用的形式，我们将在下面看到。</p>\n<h3 id=\"8-1-3-req-和验证\"><a href=\"#8-1-3-req-和验证\" class=\"headerlink\" title=\"8.1.3 req()和验证\"></a>8.1.3 <code>req()</code>和验证</h3><p>让我们将<code>req()</code>和shinyFeedback结合起来，解决一个更具挑战性的问题。我将回到我们在第1章中制作的简单应用程序，该应用程序允许你选择内置数据集并查看其内容。我将通过使用<code>textInput()</code>而不是<code>selectInput()</code>来使其更加通用和复杂。用户界面几乎没有变化：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  shinyFeedback<span class=\"operator\">::</span>useShinyFeedback<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;dataset&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Dataset name&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;data&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>但是服务器函数需要变得稍微复杂一些。我们将以两种方式使用<code>req()</code>：</p>\n<ul>\n<li><p>我们只想在用户输入了值之后才进行计算，所以我们使用<code>req(input$dataset)</code>。</p>\n</li>\n<li><p>然后，我们检查提供的名称是否确实存在。如果不存在，我们将显示一条错误消息，然后使用<code>req()</code>取消计算。请注意<code>cancelOutput = TRUE</code>的使用：通常取消响应式组件会重置所有下游输出；使用<code>cancelOutput = TRUE</code>会使它们保持显示上一次的有效值。这对于<code>textInput()</code>来说很重要，因为您可能在输入名称的过程中触发更新。</p>\n</li>\n</ul>\n<p>结果如图<code>8.4</code>所示。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  data <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    req<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dataset<span class=\"punctuation\">)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    exists <span class=\"operator\">&lt;-</span> exists<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dataset<span class=\"punctuation\">,</span> <span class=\"string\">&quot;package:datasets&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    shinyFeedback<span class=\"operator\">::</span>feedbackDanger<span class=\"punctuation\">(</span><span class=\"string\">&quot;dataset&quot;</span><span class=\"punctuation\">,</span> <span class=\"operator\">!</span>exists<span class=\"punctuation\">,</span> <span class=\"string\">&quot;Unknown dataset&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    req<span class=\"punctuation\">(</span>exists<span class=\"punctuation\">,</span> cancelOutput <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    get<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dataset<span class=\"punctuation\">,</span> <span class=\"string\">&quot;package:datasets&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>data <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    head<span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/12970a9665fbc639f4428c014c524b62f9e72373/5af05/demos/action-feedback/require-cancel-ok.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/12970a9665fbc639f4428c014c524b62f9e72373/5af05/demos/action-feedback/require-cancel-ok.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图8.4：加载时，表格为空，因为数据集名称为空。在我们输入一个有效数据集名称（iris）后，数据会显示出来，即使按下退格键以输入新的数据集名称时，数据仍会继续显示。请访问https://hadley.shinyapps.io/ms-require-cancel查看实时效果。\"></p>\n<h3 id=\"8-1-4-验证输出\"><a href=\"#8-1-4-验证输出\" class=\"headerlink\" title=\"8.1.4 验证输出\"></a>8.1.4 验证输出</h3><p>当问题与单个输入相关时，shinyFeedback非常有用。但有时无效状态是多个输入组合的结果。在这种情况下，将错误放在输入旁边并没有太大意义（应该放在哪个输入旁边呢？），相反，将其放在输出中更有意义。</p>\n<p>您可以使用shiny内置的一个工具来实现：<a href=\"https://rdrr.io/pkg/shiny/man/validate.html\">validate()</a>。当在响应式组件或输出中调用时，<code>validate(message)</code>会停止其余代码的执行，并在任何下游输出中显示<code>message</code>。以下代码显示了一个简单示例，其中我们不想记录或取负值的平方根。您可以在图<code>8.5</code>中查看结果。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;x&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;x&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;trans&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;transformation&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">    choices <span class=\"operator\">=</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;square&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;log&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;square-root&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;out&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>out <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>x <span class=\"operator\">&lt;</span> <span class=\"number\">0</span> <span class=\"operator\">&amp;&amp;</span> input<span class=\"operator\">$</span>trans <span class=\"operator\">%in%</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;log&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;square-root&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      validate<span class=\"punctuation\">(</span><span class=\"string\">&quot;x can not be negative for this transformation&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">switch</span><span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>trans<span class=\"punctuation\">,</span></span><br><span class=\"line\">      square <span class=\"operator\">=</span> input<span class=\"operator\">$</span>x <span class=\"operator\">^</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;square-root&quot;</span> <span class=\"operator\">=</span> <span class=\"built_in\">sqrt</span><span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>x<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"built_in\">log</span> <span class=\"operator\">=</span> <span class=\"built_in\">log</span><span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>x<span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/c1c59bed1d77fa2aea32024bbaa907e5dbba6244/b5824/demos/action-feedback/validate-init.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/c1c59bed1d77fa2aea32024bbaa907e5dbba6244/b5824/demos/action-feedback/validate-init.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图8.5：如果输入有效，输出会显示转换结果。如果输入的组合无效，则输出会被替换为一条信息性消息。\"></p>\n<h2 id=\"8-2-通知\"><a href=\"#8-2-通知\" class=\"headerlink\" title=\"8.2 通知\"></a>8.2 通知</h2><p>如果没有问题，您只是想让用户知道发生了什么，那么您需要一个<code>通知</code>。在Shiny中，通知是通过<a href=\"https://rdrr.io/pkg/shiny/man/showNotification.html\">showNotification()</a>创建的，并堆叠在页面的右下角。使用<code>showNotification()</code>有三种基本方式：</p>\n<ul>\n<li><p>显示一个临时通知，该通知在固定时间后自动消失。</p>\n</li>\n<li><p>在进程开始时显示通知，并在进程结束时将其移除。</p>\n</li>\n<li><p>使用渐进更新来更新单个通知。</p>\n</li>\n</ul>\n<p>下面将讨论这三种技术。</p>\n<h3 id=\"8-2-1-临时通知\"><a href=\"#8-2-1-临时通知\" class=\"headerlink\" title=\"8.2.1 临时通知\"></a>8.2.1 临时通知</h3><p>使用<code>showNotification()</code>的最简单方法是只传入一个参数：您想要显示的消息。由于很难通过截图捕捉这种行为，所以如果您想看到它的实际效果，请访问<a href=\"https://hadley.shinyapps.io/ms-notification-transient\">https://hadley.shinyapps.io/ms-notification-transient</a>。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;goodnight&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Good night&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>goodnight<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;So long&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;Farewell&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;Auf Wiedersehen&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;Adieu&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>默认情况下，消息将在5秒后消失，你可以通过设置<code>duration</code>来覆盖这个时间，或者用户可以点击关闭按钮提前关闭它。如果你想让通知更加醒目，你可以将<code>type</code>参数设置为“message”、“warning”或“error”其中之一。图<code>8.6</code>展示了这些通知的外观。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>goodnight<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;So long&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;Farewell&quot;</span><span class=\"punctuation\">,</span> type <span class=\"operator\">=</span> <span class=\"string\">&quot;message&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;Auf Wiedersehen&quot;</span><span class=\"punctuation\">,</span> type <span class=\"operator\">=</span> <span class=\"string\">&quot;warning&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;Adieu&quot;</span><span class=\"punctuation\">,</span> type <span class=\"operator\">=</span> <span class=\"string\">&quot;error&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/87c1065fb140b5924f0a32297421656e48ef7e11/4fe18/images/action-feedback/notify-1.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/87c1065fb140b5924f0a32297421656e48ef7e11/4fe18/images/action-feedback/notify-1.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\"></p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/d2d0c53e19a116f900ef892da0dd4580b47cf71e/993ed/images/action-feedback/notify-2.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/d2d0c53e19a116f900ef892da0dd4580b47cf71e/993ed/images/action-feedback/notify-2.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\"></p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/9fea3bd7890e9ec4ba7ab1fa1f84d0881cea23ee/d4571/images/action-feedback/notify-3.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/9fea3bd7890e9ec4ba7ab1fa1f84d0881cea23ee/d4571/images/action-feedback/notify-3.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图8.6：点击“晚安”后通知的显示过程：第一个通知出现，再过三秒，所有通知都将显示出来，随后通知开始消失。实时查看效果，请访问https://hadley.shinyapps.io/ms-notify-persistent。\"></p>\n<h3 id=\"8-2-2-完成时移除\"><a href=\"#8-2-2-完成时移除\" class=\"headerlink\" title=\"8.2.2 完成时移除\"></a>8.2.2 完成时移除</h3><p>将通知的存在与一个长时间运行的任务关联起来通常很有用。在这种情况下，你希望在任务开始时显示通知，并在任务完成时移除通知。为此，你需要：</p>\n<ul>\n<li><p>设置<code>duration = NULL</code>和<code>closeButton = FALSE</code>，以确保通知在任务完成之前一直保持可见状态。</p>\n</li>\n<li><p>保存<a href=\"https://rdrr.io/pkg/shiny/man/showNotification.html\">showNotification()</a>返回的id，然后将其传递给<a href=\"https://rdrr.io/pkg/shiny/man/showNotification.html\">removeNotification()</a>。最可靠的方法是使用<a href=\"https://rdrr.io/r/base/on.exit.html\">on.exit()</a>，这可以确保无论任务如何完成（成功或出错），通知都会被移除。你可以在“<a href=\"v\">更改和恢复状态</a>”一章中了解更多关于<code>on.exit()</code>的信息。</p>\n</li>\n</ul>\n<p>以下示例将各个部分组合在一起，展示了如何在读取大型csv文件时向用户更新状态：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  data <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    id <span class=\"operator\">&lt;-</span> showNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;Reading data...&quot;</span><span class=\"punctuation\">,</span> duration <span class=\"operator\">=</span> <span class=\"literal\">NULL</span><span class=\"punctuation\">,</span> closeButton <span class=\"operator\">=</span> <span class=\"literal\">FALSE</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"built_in\">on.exit</span><span class=\"punctuation\">(</span>removeNotification<span class=\"punctuation\">(</span>id<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> add <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    read.csv<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>file<span class=\"operator\">$</span>datapath<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>一般来说，这类通知会存在于一个响应式环境中，因为这可以确保只有当需要时，长时间运行的计算才会重新执行。</p>\n<h3 id=\"8-2-3-渐进式更新\"><a href=\"#8-2-3-渐进式更新\" class=\"headerlink\" title=\"8.2.3 渐进式更新\"></a>8.2.3 渐进式更新</h3><p>正如你在第一个示例中所看到的，多次调用showNotification()通常会创建多个通知。相反，你可以通过捕获第一次调用的id并在后续调用中使用它来更新单个通知。如果你的长时间运行的任务包含多个子组件，这将非常有用。你可以在<a href=\"https://hadley.shinyapps.io/ms-notification-updates\">https://hadley.shinyapps.io/ms-notification-updates</a>查看结果。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;data&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  notify <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>msg<span class=\"punctuation\">,</span> id <span class=\"operator\">=</span> <span class=\"literal\">NULL</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span>msg<span class=\"punctuation\">,</span> id <span class=\"operator\">=</span> id<span class=\"punctuation\">,</span> duration <span class=\"operator\">=</span> <span class=\"literal\">NULL</span><span class=\"punctuation\">,</span> closeButton <span class=\"operator\">=</span> <span class=\"literal\">FALSE</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  data <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span> </span><br><span class=\"line\">    id <span class=\"operator\">&lt;-</span> notify<span class=\"punctuation\">(</span><span class=\"string\">&quot;Reading data...&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"built_in\">on.exit</span><span class=\"punctuation\">(</span>removeNotification<span class=\"punctuation\">(</span>id<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> add <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">      </span><br><span class=\"line\">    notify<span class=\"punctuation\">(</span><span class=\"string\">&quot;Reticulating splines...&quot;</span><span class=\"punctuation\">,</span> id <span class=\"operator\">=</span> id<span class=\"punctuation\">)</span></span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    notify<span class=\"punctuation\">(</span><span class=\"string\">&quot;Herding llamas...&quot;</span><span class=\"punctuation\">,</span> id <span class=\"operator\">=</span> id<span class=\"punctuation\">)</span></span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    notify<span class=\"punctuation\">(</span><span class=\"string\">&quot;Orthogonalizing matrices...&quot;</span><span class=\"punctuation\">,</span> id <span class=\"operator\">=</span> id<span class=\"punctuation\">)</span></span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    mtcars</span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>data <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span>head<span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"8-3-进度条\"><a href=\"#8-3-进度条\" class=\"headerlink\" title=\"8.3 进度条\"></a>8.3 进度条</h2><p>对于长时间运行的任务，最好的反馈形式就是进度条。它不仅可以告诉你任务进行到了哪一步，还可以帮助你估计还需要多长时间：你是应该深吸一口气，去喝杯咖啡，还是明天再来？在本节中，我将展示两种显示进度条的技术，一种是Shiny内置的，另一种是John Coene开发的<a href=\"https://waiter.john-coene.com/\">waiter</a>包提供的。</p>\n<p>不幸的是，这两种技术都存在同样的主要缺点：要使用进度条，你需要能够将大任务分成已知数量的、每个都大致需要相同时间来完成的小任务。这通常很难做到，特别是当底层代码是用C语言编写的，且没有办法向你传达进度更新时。我们正在努力开发<a href=\"https://github.com/r-lib/progress\">progress包</a>中的工具，以便有一天像dplyr、readr和vroom这样的包能够生成进度条，你可以轻松地将它们转发给Shiny。</p>\n<h3 id=\"8-3-1-Shiny\"><a href=\"#8-3-1-Shiny\" class=\"headerlink\" title=\"8.3.1 Shiny\"></a>8.3.1 Shiny</h3><p>要使用Shiny创建进度条，你需要使用<a href=\"https://rdrr.io/pkg/shiny/man/withProgress.html\">withProgress()</a>和<a href=\"https://rdrr.io/pkg/shiny/man/withProgress.html\">incProgress()</a>。假设你有一段运行缓慢的代码，如下所示：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"punctuation\">(</span>i <span class=\"keyword\">in</span> <span class=\"built_in\">seq_len</span><span class=\"punctuation\">(</span>step<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  x <span class=\"operator\">&lt;-</span> function_that_takes_a_long_time<span class=\"punctuation\">(</span>x<span class=\"punctuation\">)</span>     </span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>你首先需要用<code>withProgress()</code>将其包裹起来。当代码开始运行时，这会显示进度条，并在完成时自动移除它：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">withProgress<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> <span class=\"punctuation\">(</span>i <span class=\"keyword\">in</span> <span class=\"built_in\">seq_len</span><span class=\"punctuation\">(</span>step<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    x <span class=\"operator\">&lt;-</span> function_that_takes_a_long_time<span class=\"punctuation\">(</span>x<span class=\"punctuation\">)</span>     </span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>然后在每个步骤之后调用<code>incProgress()</code>：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">withProgress<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> <span class=\"punctuation\">(</span>i <span class=\"keyword\">in</span> <span class=\"built_in\">seq_len</span><span class=\"punctuation\">(</span>step<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    x <span class=\"operator\">&lt;-</span> function_that_takes_a_long_time<span class=\"punctuation\">(</span>x<span class=\"punctuation\">)</span></span><br><span class=\"line\">    incProgress<span class=\"punctuation\">(</span><span class=\"number\">1</span> <span class=\"operator\">/</span> <span class=\"built_in\">length</span><span class=\"punctuation\">(</span>step<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p><code>incProgress()</code>的第一个参数是进度条要增加的量。默认情况下，进度条从0开始，到1结束，因此通过步骤数除以来增加进度条，可以确保循环结束时进度条完成。</p>\n<p>图<code>8.7</code>展示了在一个完整的Shiny应用程序中，这可能看起来是什么样子。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;steps&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;How many steps?&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">10</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;result&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  data <span class=\"operator\">&lt;-</span> eventReactive<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>go<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    withProgress<span class=\"punctuation\">(</span>message <span class=\"operator\">=</span> <span class=\"string\">&quot;Computing random number&quot;</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> <span class=\"punctuation\">(</span>i <span class=\"keyword\">in</span> <span class=\"built_in\">seq_len</span><span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>steps<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">0.5</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">        incProgress<span class=\"punctuation\">(</span><span class=\"number\">1</span> <span class=\"operator\">/</span> input<span class=\"operator\">$</span>steps<span class=\"punctuation\">)</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      runif<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>result <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"built_in\">round</span><span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> <span class=\"number\">2</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/f8653f6a9d2e8c56ebf035d48a3ec299f67fa99e/19ffd/images/action-feedback/progress-2.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/f8653f6a9d2e8c56ebf035d48a3ec299f67fa99e/19ffd/images/action-feedback/progress-2.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图8.7：进度条有助于指示计算还需运行多长时间。请在线查看https://hadley.shinyapps.io/ms-progress。\"></p>\n<p>需要注意的几个事项：</p>\n<ul>\n<li><p>我使用了可选的<code>message</code>参数，在进度条中添加了一些解释性文本。</p>\n</li>\n<li><p>我使用了<a href=\"https://rdrr.io/r/base/Sys.sleep.html\">Sys.sleep()</a>来模拟一个长时间运行的操作；在你的代码中，这将是一个耗时函数。</p>\n</li>\n<li><p>我通过将一个按钮与<a href=\"https://rdrr.io/pkg/shiny/man/observeEvent.html\">eventReactive()</a>结合，允许用户控制事件何时开始。这是任何需要进度条的任务的良好做法。</p>\n</li>\n</ul>\n<h3 id=\"8-3-2-Waiter\"><a href=\"#8-3-2-Waiter\" class=\"headerlink\" title=\"8.3.2 Waiter\"></a>8.3.2 Waiter</h3><p>内置的进度条对于基础操作来说非常好，但如果你想要提供更多视觉选项的进度条，你可以尝试使用<a href=\"https://waiter.john-coene.com/\">waiter</a>包。将上面的代码适配为与Waiter一起工作很简单。在UI中，我们添加use_waitress()：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  waiter<span class=\"operator\">::</span>use_waitress<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;steps&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;How many steps?&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">10</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;result&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>Waiter的进度条接口略有不同。Waiter包使用R6对象将所有与进度相关的函数捆绑到一个单独的对象中。如果你以前从未使用过R6对象，不必太担心细节；你可以直接复制和粘贴这个模板。基本的生命周期看起来像这样：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Create a new progress bar</span></span><br><span class=\"line\">waitress <span class=\"operator\">&lt;-</span> waiter<span class=\"operator\">::</span>Waitress<span class=\"operator\">$</span>new<span class=\"punctuation\">(</span><span class=\"built_in\">max</span> <span class=\"operator\">=</span> input<span class=\"operator\">$</span>steps<span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"comment\"># Automatically close it when done</span></span><br><span class=\"line\"><span class=\"built_in\">on.exit</span><span class=\"punctuation\">(</span>waitress<span class=\"operator\">$</span>close<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"punctuation\">(</span>i <span class=\"keyword\">in</span> <span class=\"built_in\">seq_len</span><span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>steps<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">0.5</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"comment\"># increment one step</span></span><br><span class=\"line\">  waitress<span class=\"operator\">$</span>inc<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>我们可以在 Shiny 应用程序中使用它，如下所示：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  data <span class=\"operator\">&lt;-</span> eventReactive<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>go<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    waitress <span class=\"operator\">&lt;-</span> waiter<span class=\"operator\">::</span>Waitress<span class=\"operator\">$</span>new<span class=\"punctuation\">(</span><span class=\"built_in\">max</span> <span class=\"operator\">=</span> input<span class=\"operator\">$</span>steps<span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"built_in\">on.exit</span><span class=\"punctuation\">(</span>waitress<span class=\"operator\">$</span>close<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"punctuation\">(</span>i <span class=\"keyword\">in</span> <span class=\"built_in\">seq_len</span><span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>steps<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">0.5</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">      waitress<span class=\"operator\">$</span>inc<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    runif<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>result <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"built_in\">round</span><span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> <span class=\"number\">2</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>默认显示是在页面顶部的细长进度条（你可以查看<a href=\"https://hadley.shinyapps.io/ms-waiter\">https://hadley.shinyapps.io/ms-waiter</a>），但有许多方法可以自定义输出：</p>\n<p>你可以覆盖默认<code>主题</code>，选择使用以下主题之一：</p>\n<ul>\n<li><code>overlay</code>：一个不透明的进度条，会隐藏整个页面</li>\n<li><code>overlay-opacity</code>：一个透明的进度条，会覆盖整个页面</li>\n<li><code>overlay-percent</code>：一个不透明的进度条，同时还会显示一个数字百分比。</li>\n<li>除了为整个页面显示进度条之外，你还可以通过设置<code>selector</code>参数将其覆盖在现有的输入或输出上，例如：</li>\n</ul>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">waitress <span class=\"operator\">&lt;-</span> Waitress<span class=\"operator\">$</span>new<span class=\"punctuation\">(</span>selector <span class=\"operator\">=</span> <span class=\"string\">&quot;#steps&quot;</span><span class=\"punctuation\">,</span> theme <span class=\"operator\">=</span> <span class=\"string\">&quot;overlay&quot;</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-3-3-Spinners\"><a href=\"#8-3-3-Spinners\" class=\"headerlink\" title=\"8.3.3 Spinners\"></a>8.3.3 Spinners</h3><p>有时，你不知道一个操作需要多长时间才能完成，你只想显示一个动画旋转器，让用户知道有事情正在发生。对于这个任务，你也可以使用waiter包；只需从使用<code>Waitress</code>切换到使用<code>Waiter</code>即可：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  waiter<span class=\"operator\">::</span>use_waiter<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  textOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;result&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  data <span class=\"operator\">&lt;-</span> eventReactive<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>go<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    waiter <span class=\"operator\">&lt;-</span> waiter<span class=\"operator\">::</span>Waiter<span class=\"operator\">$</span>new<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    waiter<span class=\"operator\">$</span>show<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"built_in\">on.exit</span><span class=\"punctuation\">(</span>waiter<span class=\"operator\">$</span>hide<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span>sample<span class=\"punctuation\">(</span><span class=\"number\">5</span><span class=\"punctuation\">,</span> <span class=\"number\">1</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    runif<span class=\"punctuation\">(</span><span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>result <span class=\"operator\">&lt;-</span> renderText<span class=\"punctuation\">(</span><span class=\"built_in\">round</span><span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> <span class=\"number\">2</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/876e7420c98f7344ee1eac35650c26d6257eb839/7c919/images/action-feedback/spinner-1.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/876e7420c98f7344ee1eac35650c26d6257eb839/7c919/images/action-feedback/spinner-1.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图8.8：“Waiter”会在某个操作发生时显示整个应用程序的旋转器。请在线查看https://hadley.shinyapps.io/ms-spinner-1。\"></p>\n<p>与Waitress一样，你也可以针对特定的输出使用Waiters。这些waiter可以在输出更新时自动移除旋转器，因此代码甚至更简单：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  waiter<span class=\"operator\">::</span>use_waiter<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  plotOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;plot&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  data <span class=\"operator\">&lt;-</span> eventReactive<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>go<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    waiter<span class=\"operator\">::</span>Waiter<span class=\"operator\">$</span>new<span class=\"punctuation\">(</span>id <span class=\"operator\">=</span> <span class=\"string\">&quot;plot&quot;</span><span class=\"punctuation\">)</span><span class=\"operator\">$</span>show<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">3</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    data.frame<span class=\"punctuation\">(</span>x <span class=\"operator\">=</span> runif<span class=\"punctuation\">(</span><span class=\"number\">50</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> y <span class=\"operator\">=</span> runif<span class=\"punctuation\">(</span><span class=\"number\">50</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>plot <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span>plot<span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> res <span class=\"operator\">=</span> <span class=\"number\">96</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/0fa7426c91728627f36b69d91036aef0876f278c/84714/images/action-feedback/spinner-2.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/0fa7426c91728627f36b69d91036aef0876f278c/84714/images/action-feedback/spinner-2.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图8.9：你也可以为单个输出显示旋转器。请在线查看https://hadley.shinyapps.io/ms-spinner-2。\"></p>\n<p>waiter包提供了多种旋转器供你选择；你可以在<a href=\"https://rdrr.io/pkg/waiter/man/spinners.html\">?waiter::spinners</a>中查看你的选项，然后选择其中一个（例如）使用<code>Waiter$new(html = spin_ripple())</code>。</p>\n<p>一个更简单的选择是使用Dean Attali的<a href=\"https://github.com/daattali/shinycssloaders\">shinycssloaders</a>包。它使用JavaScript监听Shiny事件，因此甚至不需要服务器端代码。相反，你只需使用<a href=\"https://rdrr.io/pkg/shinycssloaders/man/withSpinner.html\">shinycssloaders::withSpinner()</a>来包装你希望在其失效时自动获得旋转器的输出。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>shinycssloaders<span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;go&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  withSpinner<span class=\"punctuation\">(</span>plotOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;plot&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  data <span class=\"operator\">&lt;-</span> eventReactive<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>go<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    Sys.sleep<span class=\"punctuation\">(</span><span class=\"number\">3</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    data.frame<span class=\"punctuation\">(</span>x <span class=\"operator\">=</span> runif<span class=\"punctuation\">(</span><span class=\"number\">50</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> y <span class=\"operator\">=</span> runif<span class=\"punctuation\">(</span><span class=\"number\">50</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>plot <span class=\"operator\">&lt;-</span> renderPlot<span class=\"punctuation\">(</span>plot<span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> res <span class=\"operator\">=</span> <span class=\"number\">96</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"8-4-确认和撤销\"><a href=\"#8-4-确认和撤销\" class=\"headerlink\" title=\"8.4 确认和撤销\"></a>8.4 确认和撤销</h2><p>有时某个操作可能具有潜在的危险性，你可能想要确保用户确实想要执行该操作，或者你想要在一切都太晚之前给他们一个撤销的机会。本节中的三个技巧列出了你的基本选项，并给出了一些如何在你的应用程序中实现它们的建议。</p>\n<h3 id=\"8-4-1-明确确认\"><a href=\"#8-4-1-明确确认\" class=\"headerlink\" title=\"8.4.1 明确确认\"></a>8.4.1 明确确认</h3><p>保护用户避免因误操作执行危险动作的最简单方法是要求用户进行明确的确认。最简单的方法是使用对话框，该对话框会强制用户从一组小动作中选择。在Shiny中，你可以使用<a href=\"https://rdrr.io/pkg/shiny/man/modalDialog.html\">modalDialog()</a>创建一个对话框。这被称为“模态”对话框，因为它创建了一种新的交互“模式”；在处理对话框之前，你无法与主应用程序进行交互。</p>\n<p>假设你有一个Shiny应用程序，用于从目录中删除一些文件（或从数据库中删除一些行等）。这个操作很难撤销，因此你需要确保用户确实想要这么做。你可以创建一个对话框，如图<code>8.10</code>所示，要求用户进行明确的确认，如下所示：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">modal_confirm <span class=\"operator\">&lt;-</span> modalDialog<span class=\"punctuation\">(</span></span><br><span class=\"line\">  <span class=\"string\">&quot;Are you sure you want to continue?&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  title <span class=\"operator\">=</span> <span class=\"string\">&quot;Deleting files&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  footer <span class=\"operator\">=</span> tagList<span class=\"punctuation\">(</span></span><br><span class=\"line\">    actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;cancel&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Cancel&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;ok&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Delete&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">class</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;btn btn-danger&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/1fd6b657c2fd4df4ef9de687459e433e0b6144f4/93f7d/demos/action-feedback/dialog.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/1fd6b657c2fd4df4ef9de687459e433e0b6144f4/93f7d/demos/action-feedback/dialog.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图 8.10：检查是否要删除某些文件的对话框。\"></p>\n<p>在创建对话框时，需要注意一些虽小但重要的细节：</p>\n<ul>\n<li><p>按钮应该怎么命名？最好描述得具体一些，因此要避免使用“是&#x2F;否”或“继续&#x2F;取消”，而应该复述关键的动词。</p>\n</li>\n<li><p>按钮应该如何排序？你是把“取消”放在前面（像Mac那样），还是把“继续”放在前面（像Windows那样）？你最好的选择是模仿大多数人将使用的平台。</p>\n</li>\n<li><p>你能让危险选项更明显吗？这里我使用了<code>class = &quot;btn btn-danger&quot;</code>来突出显示按钮。</p>\n</li>\n</ul>\n<p>Jakob Nielsen在<a href=\"http://www.useit.com/alertbox/ok-cancel.html\">http://www.useit.com/alertbox/ok-cancel.html</a>上给出了更多好建议。</p>\n<p>让我们在一个真实（尽管很简单）的应用程序中使用这个对话框。我们的用户界面暴露了一个“删除所有文件”的按钮：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;delete&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Delete all files?&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>在<code>server()</code>中有两个新的想法：</p>\n<ul>\n<li><p>我们使用<a href=\"https://rdrr.io/pkg/shiny/man/showModal.html\">showModal()</a>和<a href=\"https://rdrr.io/pkg/shiny/man/showModal.html\">removeModal()</a>来显示和隐藏对话框。</p>\n</li>\n<li><p>我们观察由UI从<code>modal_confirm</code>生成的事件。这些对象不是静态地在ui中创建的，而是由<code>server()</code>中的<code>showModal()</code>动态添加的。在第<code>10</code>章中，你将更详细地看到这个想法。</p>\n</li>\n</ul>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>delete<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    showModal<span class=\"punctuation\">(</span>modal_confirm<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>ok<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;Files deleted&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    removeModal<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>cancel<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    removeModal<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"8-4-2-撤消操作\"><a href=\"#8-4-2-撤消操作\" class=\"headerlink\" title=\"8.4.2 撤消操作\"></a>8.4.2 撤消操作</h3><p>明确的确认对于很少执行且具有破坏性的操作最有用。如果你想要减少因频繁操作而产生的错误，那么应该避免使用它。例如，这种技术不适用于Twitter——如果有一个对话框说“你确定要发这条推文吗？”你会很快学会自动点击“是”，并且在发送推文10秒后注意到拼写错误时，仍然会感到同样的后悔。</p>\n<p>在这种情况下，更好的方法是在实际执行操作前等待几秒钟，给用户一个发现并撤销任何问题的机会。这并不是真正的撤销（因为你实际上没有做任何事情），但这是一个让用户能够理解的词汇。</p>\n<p>我将用一个我个人希望拥有撤销按钮的网站——Twitter来举例说明这项技术。Twitter用户界面的本质非常简单：有一个文本区域用来编辑推文，还有一个发送按钮：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  textAreaInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;message&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">    label <span class=\"operator\">=</span> <span class=\"literal\">NULL</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">    placeholder <span class=\"operator\">=</span> <span class=\"string\">&quot;What&#x27;s happening?&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    rows <span class=\"operator\">=</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;tweet&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Tweet&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>服务器函数相当复杂，需要一些我们尚未讨论过的技术。不要太担心理解代码，要专注于基本思路：我们使用一些<a href=\"https://rdrr.io/pkg/shiny/man/observeEvent.html\">observeEvent()</a>特殊的参数，以便在几秒钟后运行一些代码。主要的新想法是，我们捕获<code>observeEvent()</code>的结果并将其保存到一个变量中；这样我们就可以销毁观察者，从而确保实际发送推文的代码永远不会被执行。你可以尝试访问实时应用程序<a href=\"https://hadley.shinyapps.io/ms-undo\">https://hadley.shinyapps.io/ms-undo</a>。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runLater <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>action<span class=\"punctuation\">,</span> seconds <span class=\"operator\">=</span> <span class=\"number\">3</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span></span><br><span class=\"line\">    invalidateLater<span class=\"punctuation\">(</span>seconds <span class=\"operator\">*</span> <span class=\"number\">1000</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> action<span class=\"punctuation\">,</span> </span><br><span class=\"line\">    ignoreInit <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">    once <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">    ignoreNULL <span class=\"operator\">=</span> <span class=\"literal\">FALSE</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    autoDestroy <span class=\"operator\">=</span> <span class=\"literal\">FALSE</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  waiting <span class=\"operator\">&lt;-</span> <span class=\"literal\">NULL</span></span><br><span class=\"line\">  last_message <span class=\"operator\">&lt;-</span> <span class=\"literal\">NULL</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>tweet<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    notification <span class=\"operator\">&lt;-</span> glue<span class=\"operator\">::</span>glue<span class=\"punctuation\">(</span><span class=\"string\">&quot;Tweeted &#x27;&#123;input$message&#125;&#x27;&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    last_message <span class=\"operator\">&lt;&lt;-</span> input<span class=\"operator\">$</span>message</span><br><span class=\"line\">    updateTextAreaInput<span class=\"punctuation\">(</span>session<span class=\"punctuation\">,</span> <span class=\"string\">&quot;message&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span></span><br><span class=\"line\">      notification<span class=\"punctuation\">,</span></span><br><span class=\"line\">      action <span class=\"operator\">=</span> actionButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;undo&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Undo?&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      duration <span class=\"operator\">=</span> <span class=\"literal\">NULL</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      closeButton <span class=\"operator\">=</span> <span class=\"literal\">FALSE</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      id <span class=\"operator\">=</span> <span class=\"string\">&quot;tweeted&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      type <span class=\"operator\">=</span> <span class=\"string\">&quot;warning&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    waiting <span class=\"operator\">&lt;&lt;-</span> runLater<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      cat<span class=\"punctuation\">(</span><span class=\"string\">&quot;Actually sending tweet...\\n&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">      removeNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;tweeted&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  observeEvent<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>undo<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    waiting<span class=\"operator\">$</span>destroy<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    showNotification<span class=\"punctuation\">(</span><span class=\"string\">&quot;Tweet retracted&quot;</span><span class=\"punctuation\">,</span> id <span class=\"operator\">=</span> <span class=\"string\">&quot;tweeted&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    updateTextAreaInput<span class=\"punctuation\">(</span>session<span class=\"punctuation\">,</span> <span class=\"string\">&quot;message&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> last_message<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-4-3-回收站\"><a href=\"#8-4-3-回收站\" class=\"headerlink\" title=\"8.4.3 回收站\"></a>8.4.3 回收站</h3><p>对于几天后可能会后悔的操作，一种更高级的模式是在计算机上实现类似回收站或垃圾箱的功能。当你删除一个文件时，它并不会被永久删除，而是被移动到一个暂存区，需要执行另一个操作才能清空。这就像是一个强化版的“撤销”选项，你有很长的时间来后悔你的操作。这也有点像确认操作，你需要执行两个分开的操作才能使删除操作永久生效。</p>\n<p>这种技术的主要缺点是实现起来相当复杂（你需要有一个单独的“暂存区”来存储撤销操作所需的信息），并且需要用户定期干预以避免信息积累。因此，我认为除了最复杂的Shiny应用程序之外，这种技术都超出了其他应用程序的范围，所以这里我不会展示它的实现方法。</p>\n<h2 id=\"8-5-总结\"><a href=\"#8-5-总结\" class=\"headerlink\" title=\"8.5 总结\"></a>8.5 总结</h2><p>本章为你提供了一些工具，帮助你向用户传达应用程序正在发生的事情。从某种意义上说，这些技术大多是可选的。虽然你的应用程序没有它们也能工作，但它们的精心应用会对用户体验的质量产生巨大影响。当你是应用程序的唯一用户时，通常可以省略反馈，但使用它的人越多，精心设计的通知就越能发挥作用。</p>\n<p>在下一章中，你将学习如何向用户传输文件。</p>\n<h1 id=\"加关注\"><a href=\"#加关注\" class=\"headerlink\" title=\"加关注\"></a>加关注</h1><p>关注公众号“生信之巅”。</p>\n<table align=\"center\"><tr>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅微信公众号\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-right: 0px;margin-bottom: 5px;align: center;\"></td>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅小程序码\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-left: 0px;margin-bottom: 5px;align: center\"></td>\n</tr></table>\n\n\n<p><font color=\"#FF0000\"><ruby><b>敬告</b>：使用文中脚本请引用本文网址，请尊重本人的劳动成果，谢谢！<rt><b>Notice</b>: When you use the scripts in this article, please cite the link of this webpage. Thank you!</rt></ruby></font></p>\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"编程","path":"api/tags/编程.json"},{"name":"Shiny入门系列","path":"api/tags/Shiny入门系列.json"}]},{"title":"Shiny从入门到入定——9-上传和下载","slug":"Shiny从入门到入定——9-上传和下载","date":"2024-04-27T03:01:58.000Z","updated":"2024-04-27T03:04:31.887Z","comments":true,"path":"api/articles/Shiny从入门到入定——9-上传和下载.json","excerpt":null,"keywords":null,"cover":"https://d33wubrfki0l68.cloudfront.net/31fddd4b87d0e36141c7b8cbb2dd240f8c2d26d1/026fa/demos/action-transfer/upload.png","content":"<h1 id=\"9-上传和下载\"><a href=\"#9-上传和下载\" class=\"headerlink\" title=\"9 上传和下载\"></a>9 上传和下载</h1><p>在应用中，用户处上传和下载文件是一项常用功能。你可以用它来上传数据进行分析，或者将结果作为数据集或报告下载。本章将介绍在应用中进行文件上传和下载所需的用户界面和服务器组件。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>shiny<span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9-1-上传\"><a href=\"#9-1-上传\" class=\"headerlink\" title=\"9.1 上传\"></a>9.1 上传</h2><p>我们先从文件上传开始讨论，向你展示基本的UI和server组件，然后展示它们如何在简单应用中协同工作。</p>\n<h3 id=\"9-1-1-用户界面-UI\"><a href=\"#9-1-1-用户界面-UI\" class=\"headerlink\" title=\"9.1.1 用户界面 UI\"></a>9.1.1 用户界面 UI</h3><p>支持文件上传的用户界面很简单：只需在用户界面中添加<a href=\"https://rdrr.io/pkg/shiny/man/fileInput.html\">fileInput()</a>即可。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  fileInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;upload&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Upload a file&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>与其他大多数UI组件一样，这里只需要两个必需参数：<code>id</code>和<code>label</code>。<code>width</code>、<code>buttonLabel</code>和<code>placeholder</code>参数允许你以其他方式调整外观。我不会在这里讨论它们，但你可以在<a href=\"https://rdrr.io/pkg/shiny/man/fileInput.html\">?fileInput</a>中了解更多。</p>\n<h3 id=\"9-1-2-服务器-server\"><a href=\"#9-1-2-服务器-server\" class=\"headerlink\" title=\"9.1.2 服务器 server\"></a>9.1.2 服务器 server</h3><p>在server上处理<code>fileInput()</code>比处理其他输入稍微复杂一些。大多数输入返回简单的向量，但<code>fileInput()</code>返回一个包含四列的数据框：</p>\n<ul>\n<li><p><code>name</code>：用户计算机上的原始文件名。</p>\n</li>\n<li><p><code>size</code>：文件大小（以字节为单位）。默认情况下，用户只能上传最多5MB的文件。你可以在启动Shiny之前设置<code>shiny.maxRequestSize</code>选项来增加文件大小限制。例如，要允许最多10MB，可以运行<code>options(shiny.maxRequestSize = 10 * 1024^2)</code>。</p>\n</li>\n<li><p><code>type</code>：文件的<code>“MIME type”</code>。这是文件类型的正式规范，通常根据文件扩展名得出，在Shiny应用中很少需要。</p>\n</li>\n<li><p><code>datapath</code>：数据在server上上传到的路径。请将此路径视为临时路径：如果用户上传更多文件，此文件可能会被删除。数据始终保存到临时目录，并赋予临时名称。</p>\n</li>\n</ul>\n<p>作者认为理解这种数据结构最简单的方法是制作一个简单的应用。运行以下代码并上传几个文件，以了解Shiny提供的数据。在<code>图9.1</code>中，你可以看到我上传了几张小狗照片（来自第7.3节）后的结果。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  fileInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;upload&quot;</span><span class=\"punctuation\">,</span> <span class=\"literal\">NULL</span><span class=\"punctuation\">,</span> buttonLabel <span class=\"operator\">=</span> <span class=\"string\">&quot;Upload...&quot;</span><span class=\"punctuation\">,</span> multiple <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;files&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>files <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>upload<span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/31fddd4b87d0e36141c7b8cbb2dd240f8c2d26d1/026fa/demos/action-transfer/upload.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/31fddd4b87d0e36141c7b8cbb2dd240f8c2d26d1/026fa/demos/action-transfer/upload.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图9.1 这个简单的应用可以让你看到Shiny为上传的文件提供了哪些数据。可以在 https://hadley.shinyapps.io/ms-upload 查看实时效果。\"></p>\n<p>请注意，我使用了<code>label</code>和<code>buttonLabel</code>参数来微调外观，以及<code>multiple = TRUE</code>来允许用户上传多个文件。</p>\n<h3 id=\"9-1-3-上传数据\"><a href=\"#9-1-3-上传数据\" class=\"headerlink\" title=\"9.1.3 上传数据\"></a>9.1.3 上传数据</h3><p>如果用户正在上传数据集，你需要注意以下两个细节：</p>\n<ul>\n<li><p><code>input$upload</code>在页面加载时被初始化为<code>NULL</code>，因此你需要使用<code>req(input$upload)</code>来确保你的代码等待第一个文件上传。</p>\n</li>\n<li><p><code>accept</code>参数允许你限制可能的输入。最简单的方法是提供一个文件扩展名的字符向量，如<code>accept = &quot;.csv&quot;</code>。但是，accept参数只是对浏览器的建议，并不总是强制执行，因此自行验证是个好习惯（例如第8.1节）。在R中获取文件扩展名最简单的方法是使用<a href=\"https://rdrr.io/r/tools/fileutils.html\">tools::file_ext()</a>，但要注意它会删除扩展名前面的<code>.</code>。</p>\n</li>\n</ul>\n<p>将这些想法结合起来，我们得到以下应用，你可以上传一个<code>.csv</code>或<code>.tsv</code>文件，并查看前<code>n</code>行。你可以在 <a href=\"https://hadley.shinyapps.io/ms-upload-validate\">https://hadley.shinyapps.io/ms-upload-validate</a> 查看它的运行情况。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  fileInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;upload&quot;</span><span class=\"punctuation\">,</span> <span class=\"literal\">NULL</span><span class=\"punctuation\">,</span> accept <span class=\"operator\">=</span> <span class=\"built_in\">c</span><span class=\"punctuation\">(</span><span class=\"string\">&quot;.csv&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;.tsv&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Rows&quot;</span><span class=\"punctuation\">,</span> value <span class=\"operator\">=</span> <span class=\"number\">5</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span> step <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;head&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  data <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    req<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>upload<span class=\"punctuation\">)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    ext <span class=\"operator\">&lt;-</span> tools<span class=\"operator\">::</span>file_ext<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>upload<span class=\"operator\">$</span>name<span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"built_in\">switch</span><span class=\"punctuation\">(</span>ext<span class=\"punctuation\">,</span></span><br><span class=\"line\">      csv <span class=\"operator\">=</span> vroom<span class=\"operator\">::</span>vroom<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>upload<span class=\"operator\">$</span>datapath<span class=\"punctuation\">,</span> delim <span class=\"operator\">=</span> <span class=\"string\">&quot;,&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      tsv <span class=\"operator\">=</span> vroom<span class=\"operator\">::</span>vroom<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>upload<span class=\"operator\">$</span>datapath<span class=\"punctuation\">,</span> delim <span class=\"operator\">=</span> <span class=\"string\">&quot;\\t&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      validate<span class=\"punctuation\">(</span><span class=\"string\">&quot;Invalid file; Please upload a .csv or .tsv file&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>head <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    head<span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>n<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>请注意，由于<code>multiple = FALSE</code>（默认值），<code>input$file</code>将是一个单行数据框，而<code>input$file$name</code>和<code>input$file$datapath</code>将是一个长度为1的字符向量。</p>\n<h2 id=\"9-2-下载\"><a href=\"#9-2-下载\" class=\"headerlink\" title=\"9.2 下载\"></a>9.2 下载</h2><p>接下来，我们将讨论文件下载，向你展示基本的用户界面和服务器组件，然后演示如何使用它们来允许用户下载数据或报告。</p>\n<h3 id=\"9-2-1-基本操作\"><a href=\"#9-2-1-基本操作\" class=\"headerlink\" title=\"9.2.1 基本操作\"></a>9.2.1 基本操作</h3><p>同样，用户界面非常简单：使用<code>downloadButton(id)</code>或<code>downloadLink(id)</code>为用户提供一个可点击的下载文件选项。结果如<code>图9.2</code>所示。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  downloadButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;download1&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  downloadLink<span class=\"punctuation\">(</span><span class=\"string\">&quot;download2&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/24e3c954a6c32523d02cd22597227ffb7b77313e/b15ad/demos/action-transfer/download.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/24e3c954a6c32523d02cd22597227ffb7b77313e/b15ad/demos/action-transfer/download.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图9.2 一个下载按钮和一个下载链接\"></p>\n<p>你可以使用与<code>actionButtons()</code>相同的<code>class</code>和<code>icon</code>参数来自定义它们的外观，如第2.2.7节所述。</p>\n<p>与其他输出不同，<a href=\"https://rdrr.io/pkg/shiny/man/downloadButton.html\">downloadButton()</a>不与渲染函数配对。相反，你使用<a href=\"https://rdrr.io/pkg/shiny/man/downloadHandler.html\">downloadHandler()</a>，它看起来像这样：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output<span class=\"operator\">$</span>download <span class=\"operator\">&lt;-</span> downloadHandler<span class=\"punctuation\">(</span></span><br><span class=\"line\">  filename <span class=\"operator\">=</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    paste0<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dataset<span class=\"punctuation\">,</span> <span class=\"string\">&quot;.csv&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  content <span class=\"operator\">=</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>file<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    write.csv<span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> file<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p><code>downloadHandler()</code>有两个参数，都是函数：</p>\n<ul>\n<li><p><code>filename</code>应该是一个没有参数的函数，返回一个文件名（字符串）。这个函数的工作是创建将在下载对话框中显示给用户的文件名。</p>\n</li>\n<li><p><code>content</code>应该是一个带有一个参数<code>file</code>的函数，file是保存文件的路径。这个函数的工作是将文件保存在Shiny知道的位置，以便可以将其发送给用户。</p>\n</li>\n</ul>\n<p>这是一个不寻常的接口，但它允许Shiny控制文件应该保存的位置（以便可以将其放置在安全位置），同时你仍然可以控制文件的内容。</p>\n<p>接下来，我们将把这些部分组合在一起，展示如何将数据文件或报告传输给用户。</p>\n<h3 id=\"9-2-2-下载数据\"><a href=\"#9-2-2-下载数据\" class=\"headerlink\" title=\"9.2.2 下载数据\"></a>9.2.2 下载数据</h3><p>以下应用通过允许你下载<code>datasets包</code>中的任何数据集作为制表符分隔的文件，展示了数据下载的基础知识，如<code>图9.3</code>所示。我建议使用<code>.tsv</code>（制表符分隔值）而不是<code>.csv</code>（逗号分隔值），因为许多欧洲国家使用逗号来分隔数字的整数部分和小数部分（例如<code>1,23</code>与<code>1.23</code>）。这意味着它们不能使用逗号来分隔字段，而是在所谓的<code>“c”sv</code>文件中使用分号！通过使用制表符分隔的文件，你可以避免这种复杂性，因为它们在任何地方的工作方式都是相同的。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  selectInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;dataset&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Pick a dataset&quot;</span><span class=\"punctuation\">,</span> ls<span class=\"punctuation\">(</span><span class=\"string\">&quot;package:datasets&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;preview&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  downloadButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;download&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Download .tsv&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  data <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    out <span class=\"operator\">&lt;-</span> get<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dataset<span class=\"punctuation\">,</span> <span class=\"string\">&quot;package:datasets&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"punctuation\">(</span><span class=\"operator\">!</span>is.data.frame<span class=\"punctuation\">(</span>out<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      validate<span class=\"punctuation\">(</span>paste0<span class=\"punctuation\">(</span><span class=\"string\">&quot;&#x27;&quot;</span><span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>dataset<span class=\"punctuation\">,</span> <span class=\"string\">&quot;&#x27; is not a data frame&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    out</span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  output<span class=\"operator\">$</span>preview <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    head<span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  output<span class=\"operator\">$</span>download <span class=\"operator\">&lt;-</span> downloadHandler<span class=\"punctuation\">(</span></span><br><span class=\"line\">    filename <span class=\"operator\">=</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      paste0<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>dataset<span class=\"punctuation\">,</span> <span class=\"string\">&quot;.tsv&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    content <span class=\"operator\">=</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>file<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      vroom<span class=\"operator\">::</span>vroom_write<span class=\"punctuation\">(</span>data<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> file<span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/eaecc41d850e5ddb2e0258dc33b939b249add5f3/800ce/demos/action-transfer/download-data.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/eaecc41d850e5ddb2e0258dc33b939b249add5f3/800ce/demos/action-transfer/download-data.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图9.3 一个更丰富的应用，允许你选择内置的数据集并在下载前预览。可以在https://hadley.shinyapps.io/ms-download-data查看实时效果。\"></p>\n<p>注意，这里使用了<a href=\"https://rdrr.io/pkg/shiny/man/validate.html\">validate()</a>来仅允许用户下载是数据框的数据集。更好的做法是对列表进行预过滤，但这样可以让您看到<code>validate()</code>的另一个应用。</p>\n<h3 id=\"9-2-3-下载报告\"><a href=\"#9-2-3-下载报告\" class=\"headerlink\" title=\"9.2.3 下载报告\"></a>9.2.3 下载报告</h3><p>除了下载数据外，您可能还希望允许您的应用下载报告，该报告总结了Shiny应用中交互式探索的结果。这是一项需要大量工作的事情，因为您还需要以不同的格式显示相同的信息，但对于高风险的应用来说，这是非常有用的。</p>\n<p>生成此类报告的一种强大方法是使用<a href=\"https://bookdown.org/yihui/rmarkdown/parameterized-reports.html\">参数化的RMarkdown文档</a>。参数化的RMarkdown文件在YAML元数据中有一个<code>params</code>字段：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title<span class=\"operator\">:</span> My Document</span><br><span class=\"line\">output<span class=\"operator\">:</span> html_document</span><br><span class=\"line\">params<span class=\"operator\">:</span></span><br><span class=\"line\">  year<span class=\"operator\">:</span> <span class=\"number\">2018</span></span><br><span class=\"line\">  region<span class=\"operator\">:</span> Europe</span><br><span class=\"line\">  printcode<span class=\"operator\">:</span> <span class=\"literal\">TRUE</span></span><br><span class=\"line\">  data<span class=\"operator\">:</span> file.csv</span><br></pre></td></tr></table></figure>\n\n<p>在文档中，您可以使用<code>params$year</code>、<code>params$region</code>等来引用这些值。YAML元数据中的值是默认值；您通常通过在调用<a href=\"https://pkgs.rstudio.com/rmarkdown/reference/render.html\">rmarkdown::render()</a>时提供<code>params</code>参数来覆盖它们。这使得从相同的<code>.Rmd</code>生成许多不同的报告变得容易。</p>\n<p>以下是一个简单的示例，改编自<a href=\"https://shiny.rstudio.com/articles/generating-reports.html\">https://shiny.rstudio.com/articles/generating-reports.html</a>，该文章更详细地描述了这种技术。关键思想是从<code>downloadHander()</code>的<code>content</code>参数中调用<code>rmarkdown::render()</code>。如果您想生成其他输出格式，只需在<code>.Rmd</code>中更改输出格式，并确保更新扩展名（例如，更改为.pdf）。请在<a href=\"https://hadley.shinyapps.io/ms-download-rmd\">https://hadley.shinyapps.io/ms-download-rmd</a>查看实时效果。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  sliderInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;n&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Number of points&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span> <span class=\"number\">100</span><span class=\"punctuation\">,</span> <span class=\"number\">50</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  downloadButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;report&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Generate report&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>report <span class=\"operator\">&lt;-</span> downloadHandler<span class=\"punctuation\">(</span></span><br><span class=\"line\">    filename <span class=\"operator\">=</span> <span class=\"string\">&quot;report.html&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    content <span class=\"operator\">=</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>file<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      params <span class=\"operator\">&lt;-</span> <span class=\"built_in\">list</span><span class=\"punctuation\">(</span>n <span class=\"operator\">=</span> input<span class=\"operator\">$</span>n<span class=\"punctuation\">)</span></span><br><span class=\"line\">      </span><br><span class=\"line\">      id <span class=\"operator\">&lt;-</span> showNotification<span class=\"punctuation\">(</span></span><br><span class=\"line\">        <span class=\"string\">&quot;Rendering report...&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">        duration <span class=\"operator\">=</span> <span class=\"literal\">NULL</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">        closeButton <span class=\"operator\">=</span> <span class=\"literal\">FALSE</span></span><br><span class=\"line\">      <span class=\"punctuation\">)</span></span><br><span class=\"line\">      <span class=\"built_in\">on.exit</span><span class=\"punctuation\">(</span>removeNotification<span class=\"punctuation\">(</span>id<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> add <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">      rmarkdown<span class=\"operator\">::</span>render<span class=\"punctuation\">(</span><span class=\"string\">&quot;report.Rmd&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">        output_file <span class=\"operator\">=</span> file<span class=\"punctuation\">,</span></span><br><span class=\"line\">        params <span class=\"operator\">=</span> params<span class=\"punctuation\">,</span></span><br><span class=\"line\">        envir <span class=\"operator\">=</span> new.env<span class=\"punctuation\">(</span>parent <span class=\"operator\">=</span> <span class=\"built_in\">globalenv</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">      <span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>渲染一个<code>.Rmd</code>文件通常需要几秒钟的时间，因此这是使用第8.2节中提到的通知的好地方。</p>\n<p>还有一些其他值得了解的技巧：</p>\n<ul>\n<li><p>RMarkdown在当前工作目录中运行，这在许多部署场景中可能会失败（例如，在shinyapps.io上）。您可以通过在应用启动时将报告复制到临时目录来解决此问题（即在server函数外部）：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">report_path <span class=\"operator\">&lt;-</span> tempfile<span class=\"punctuation\">(</span>fileext <span class=\"operator\">=</span> <span class=\"string\">&quot;.Rmd&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">file.copy<span class=\"punctuation\">(</span><span class=\"string\">&quot;report.Rmd&quot;</span><span class=\"punctuation\">,</span> report_path<span class=\"punctuation\">,</span> overwrite <span class=\"operator\">=</span> <span class=\"literal\">TRUE</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>然后，在调用<code>rmarkdown::render()</code>时，将<code>&quot;report.Rmd&quot;</code>替换为<code>report_path</code>：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rmarkdown<span class=\"operator\">::</span>render<span class=\"punctuation\">(</span>report_path<span class=\"punctuation\">,</span> </span><br><span class=\"line\">  output_file <span class=\"operator\">=</span> file<span class=\"punctuation\">,</span></span><br><span class=\"line\">  params <span class=\"operator\">=</span> params<span class=\"punctuation\">,</span></span><br><span class=\"line\">  envir <span class=\"operator\">=</span> new.env<span class=\"punctuation\">(</span>parent <span class=\"operator\">=</span> <span class=\"built_in\">globalenv</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>默认情况下，RMarkdown会在当前进程中渲染报告，这意味着它将继承Shiny应用的许多设置（如加载的包、选项等）。为了获得更大的健壮性，我建议使用<code>callr包</code>在单独的R会话中运行<code>render()</code>：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render_report <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> params<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  rmarkdown<span class=\"operator\">::</span>render<span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span></span><br><span class=\"line\">    output_file <span class=\"operator\">=</span> output<span class=\"punctuation\">,</span></span><br><span class=\"line\">    params <span class=\"operator\">=</span> params<span class=\"punctuation\">,</span></span><br><span class=\"line\">    envir <span class=\"operator\">=</span> new.env<span class=\"punctuation\">(</span>parent <span class=\"operator\">=</span> <span class=\"built_in\">globalenv</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>report <span class=\"operator\">&lt;-</span> downloadHandler<span class=\"punctuation\">(</span></span><br><span class=\"line\">    filename <span class=\"operator\">=</span> <span class=\"string\">&quot;report.html&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    content <span class=\"operator\">=</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>file<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      params <span class=\"operator\">&lt;-</span> <span class=\"built_in\">list</span><span class=\"punctuation\">(</span>n <span class=\"operator\">=</span> input<span class=\"operator\">$</span>slider<span class=\"punctuation\">)</span></span><br><span class=\"line\">      callr<span class=\"operator\">::</span>r<span class=\"punctuation\">(</span></span><br><span class=\"line\">        render_report<span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"built_in\">list</span><span class=\"punctuation\">(</span>input <span class=\"operator\">=</span> report_path<span class=\"punctuation\">,</span> output <span class=\"operator\">=</span> file<span class=\"punctuation\">,</span> params <span class=\"operator\">=</span> params<span class=\"punctuation\">)</span></span><br><span class=\"line\">      <span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>您可以在Mastering Shiny GitHub仓库中的<a href=\"https://github.com/hadley/mastering-shiny/tree/master/rmarkdown-report\">rmarkdown-report&#x2F;</a>文件夹中看到所有这些组件组合在一起。</p>\n<p><a href=\"https://github.com/rstudio/shinymeta\">shinymeta</a>包解决了一个相关的问题：有时您需要将Shiny应用的当前状态转换为可在未来重新运行的可重复报告。要了解更多信息，请查阅Joe Cheng在useR! 2019年主题演讲中介绍的“<a href=\"https://www.youtube.com/watch?v=5KByRC6eqC8\">Shiny的神圣目标：交互性与可重复性</a>”。</p>\n<h2 id=\"9-3-案例研究\"><a href=\"#9-3-案例研究\" class=\"headerlink\" title=\"9.3 案例研究\"></a>9.3 案例研究</h2><p>最后，我们将通过一个简单的案例研究来结束本章。在这个案例中，我们将上传一个文件（用户可以指定分隔符），预览它，使用Sam Firke的<a href=\"http://sfirke.github.io/janitor\">janitor</a>包进行一些可选的转换，然后让用户将其下载为<code>.tsv</code>文件。</p>\n<p>为了更容易地理解如何使用这个应用，我使用了<a href=\"https://rdrr.io/pkg/shiny/man/sidebarLayout.html\">sidebarLayout()</a>来将应用分为三个主要步骤：</p>\n<ul>\n<li><p>上传和解析文件</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui_upload <span class=\"operator\">&lt;-</span> sidebarLayout<span class=\"punctuation\">(</span></span><br><span class=\"line\">  sidebarPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">    fileInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;file&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Data&quot;</span><span class=\"punctuation\">,</span> buttonLabel <span class=\"operator\">=</span> <span class=\"string\">&quot;Upload...&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    textInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;delim&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Delimiter (leave blank to guess)&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;skip&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Rows to skip&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    numericInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;rows&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Rows to preview&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">10</span><span class=\"punctuation\">,</span> <span class=\"built_in\">min</span> <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  mainPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">    h3<span class=\"punctuation\">(</span><span class=\"string\">&quot;Raw data&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;preview1&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>清理文件</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui_clean <span class=\"operator\">&lt;-</span> sidebarLayout<span class=\"punctuation\">(</span></span><br><span class=\"line\">  sidebarPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">    checkboxInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;snake&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Rename columns to snake case?&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    checkboxInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;constant&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Remove constant columns?&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    checkboxInput<span class=\"punctuation\">(</span><span class=\"string\">&quot;empty&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Remove empty cols?&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  mainPanel<span class=\"punctuation\">(</span></span><br><span class=\"line\">    h3<span class=\"punctuation\">(</span><span class=\"string\">&quot;Cleaner data&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    tableOutput<span class=\"punctuation\">(</span><span class=\"string\">&quot;preview2&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下载文件</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui_download <span class=\"operator\">&lt;-</span> fluidRow<span class=\"punctuation\">(</span></span><br><span class=\"line\">  column<span class=\"punctuation\">(</span>width <span class=\"operator\">=</span> <span class=\"number\">12</span><span class=\"punctuation\">,</span> downloadButton<span class=\"punctuation\">(</span><span class=\"string\">&quot;download&quot;</span><span class=\"punctuation\">,</span> <span class=\"built_in\">class</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;btn-block&quot;</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>然后，这些文件被组合成一个单独的<a href=\"https://rdrr.io/pkg/shiny/man/fluidPage.html\">fluidPage()</a>：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui <span class=\"operator\">&lt;-</span> fluidPage<span class=\"punctuation\">(</span></span><br><span class=\"line\">  ui_upload<span class=\"punctuation\">,</span></span><br><span class=\"line\">  ui_clean<span class=\"punctuation\">,</span></span><br><span class=\"line\">  ui_download</span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>这种相同的组织方式使得理解应用程序变得更加容易。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>input<span class=\"punctuation\">,</span> output<span class=\"punctuation\">,</span> session<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"comment\"># Upload ---------------------------------------------------------</span></span><br><span class=\"line\">  raw <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    req<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>file<span class=\"punctuation\">)</span></span><br><span class=\"line\">    delim <span class=\"operator\">&lt;-</span> <span class=\"keyword\">if</span> <span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>delim <span class=\"operator\">==</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">)</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">else</span> input<span class=\"operator\">$</span>delim</span><br><span class=\"line\">    vroom<span class=\"operator\">::</span>vroom<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>file<span class=\"operator\">$</span>datapath<span class=\"punctuation\">,</span> delim <span class=\"operator\">=</span> delim<span class=\"punctuation\">,</span> skip <span class=\"operator\">=</span> input<span class=\"operator\">$</span>skip<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>preview1 <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span>head<span class=\"punctuation\">(</span>raw<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>rows<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\"># Clean ----------------------------------------------------------</span></span><br><span class=\"line\">  tidied <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    out <span class=\"operator\">&lt;-</span> raw<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>snake<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"built_in\">names</span><span class=\"punctuation\">(</span>out<span class=\"punctuation\">)</span> <span class=\"operator\">&lt;-</span> janitor<span class=\"operator\">::</span>make_clean_names<span class=\"punctuation\">(</span><span class=\"built_in\">names</span><span class=\"punctuation\">(</span>out<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>empty<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      out <span class=\"operator\">&lt;-</span> janitor<span class=\"operator\">::</span>remove_empty<span class=\"punctuation\">(</span>out<span class=\"punctuation\">,</span> <span class=\"string\">&quot;cols&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>constant<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      out <span class=\"operator\">&lt;-</span> janitor<span class=\"operator\">::</span>remove_constant<span class=\"punctuation\">(</span>out<span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    out</span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>preview2 <span class=\"operator\">&lt;-</span> renderTable<span class=\"punctuation\">(</span>head<span class=\"punctuation\">(</span>tidied<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> input<span class=\"operator\">$</span>rows<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\"># Download -------------------------------------------------------</span></span><br><span class=\"line\">  output<span class=\"operator\">$</span>download <span class=\"operator\">&lt;-</span> downloadHandler<span class=\"punctuation\">(</span></span><br><span class=\"line\">    filename <span class=\"operator\">=</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      paste0<span class=\"punctuation\">(</span>tools<span class=\"operator\">::</span>file_path_sans_ext<span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>file<span class=\"operator\">$</span>name<span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;.tsv&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    content <span class=\"operator\">=</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>file<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      vroom<span class=\"operator\">::</span>vroom_write<span class=\"punctuation\">(</span>tidied<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span> file<span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/25874d076587129b1d92ceff28de69b7e5aec561/31f22/demos/action-transfer/case-study.png\" class=\"lazyload placeholder\" data-srcset=\"https://d33wubrfki0l68.cloudfront.net/25874d076587129b1d92ceff28de69b7e5aec561/31f22/demos/action-transfer/case-study.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"图9.4 一个允许用户上传文件、执行一些简单的清理操作，然后下载结果的应用程序。可访问 https://hadley.shinyapps.io/ms-case-study 查看实时效果。\"></p>\n</li>\n</ul>\n<h2 id=\"9-4-练习\"><a href=\"#9-4-练习\" class=\"headerlink\" title=\"9.4 练习\"></a>9.4 练习</h2><ol>\n<li><p>使用Thomas Lin Pedersen的<a href=\"https://ambient.data-imaginist.com/\">ambient</a>包生成<a href=\"https://ambient.data-imaginist.com/reference/noise_worley.html\">Worley噪声</a>，并下载其PNG图像。</p>\n</li>\n<li><p>创建一个应用程序，允许用户上传CSV文件，选择一个变量，然后对该变量执行<a href=\"https://rdrr.io/r/stats/t.test.html\">t.test()</a>。在用户上传CSV文件后，您需要使用<a href=\"https://rdrr.io/pkg/shiny/man/updateSelectInput.html\">updateSelectInput()</a>来填充可用的变量。详情请参阅第10.1节。</p>\n</li>\n<li><p>创建一个应用程序，允许用户上传CSV文件，选择一个变量，绘制直方图，然后下载直方图。作为额外的挑战，允许用户从<code>.png</code>、<code>.pdf</code>和<code>.svg</code>输出格式中进行选择。</p>\n</li>\n<li><p>编写一个应用程序，允许用户使用Ryan Timpe的<a href=\"https://github.com/ryantimpe/brickr\">brickr</a>包从任何<code>.png</code>文件创建乐高马赛克。完成基本功能后，添加控件以允许用户选择马赛克的大小（以砖块为单位），并选择使用<code>“universal”</code>或<code>“generic”</code>颜色调色板。</p>\n</li>\n<li><p>第9.3节中的最后一个应用程序包含了一个大型的响应式表达式：</p>\n <figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tidied <span class=\"operator\">&lt;-</span> reactive<span class=\"punctuation\">(</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  out <span class=\"operator\">&lt;-</span> raw<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> <span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>snake<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"built_in\">names</span><span class=\"punctuation\">(</span>out<span class=\"punctuation\">)</span> <span class=\"operator\">&lt;-</span> janitor<span class=\"operator\">::</span>make_clean_names<span class=\"punctuation\">(</span><span class=\"built_in\">names</span><span class=\"punctuation\">(</span>out<span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> <span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>empty<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    out <span class=\"operator\">&lt;-</span> janitor<span class=\"operator\">::</span>remove_empty<span class=\"punctuation\">(</span>out<span class=\"punctuation\">,</span> <span class=\"string\">&quot;cols&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> <span class=\"punctuation\">(</span>input<span class=\"operator\">$</span>constant<span class=\"punctuation\">)</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    out <span class=\"operator\">&lt;-</span> janitor<span class=\"operator\">::</span>remove_constant<span class=\"punctuation\">(</span>out<span class=\"punctuation\">)</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  out</span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<p> 将其分解为多个部分，以便当<code>input$empty</code>发生变化时，不会重新运行<code>janitor::make_clean_names()</code>。</p>\n</li>\n</ol>\n<h2 id=\"9-5-总结\"><a href=\"#9-5-总结\" class=\"headerlink\" title=\"9.5 总结\"></a>9.5 总结</h2><p>在本章中，您学习了如何使用<code>fileInput()</code>和<code>downloadButton()</code>来在用户之间传输文件。大多数挑战要么来自处理上传的文件，要么来自生成要下载的文件，因此我向您展示了如何处理一些常见的情况。如果我没有涵盖您在此处的特定挑战，那么您需要将您独特的创造力应用于问题中。</p>\n<p>下一章将帮助您处理在处理用户提供的数据时遇到的一个常见挑战：您需要动态地调整用户界面以更好地适应数据。我将从一些易于理解且可以在许多情况下应用的简单技术开始，逐渐过渡到完全动态的用户界面。</p>\n<h1 id=\"加关注\"><a href=\"#加关注\" class=\"headerlink\" title=\"加关注\"></a>加关注</h1><p>关注公众号“生信之巅”。</p>\n<table align=\"center\"><tr>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅微信公众号\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-right: 0px;margin-bottom: 5px;align: center;\"></td>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"生信之巅小程序码\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-left: 0px;margin-bottom: 5px;align: center\"></td>\n</tr></table>\n\n\n<p><font color=\"#FF0000\"><ruby><b>敬告</b>：使用文中脚本请引用本文网址，请尊重本人的劳动成果，谢谢！<rt><b>Notice</b>: When you use the scripts in this article, please cite the link of this webpage. Thank you!</rt></ruby></font></p>\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"编程","path":"api/tags/编程.json"},{"name":"Shiny入门系列","path":"api/tags/Shiny入门系列.json"}]}]}