{"name":"IT","postlist":[{"title":"JAVA jre 安装或升级1603 error解决办法","slug":"JAVA-jre-安装或升级1603-error解决办法","date":"2018-10-02T08:43:32.000Z","updated":"2022-01-08T02:16:28.403Z","comments":true,"path":"api/articles/JAVA-jre-安装或升级1603-error解决办法.json","excerpt":null,"keywords":null,"cover":null,"content":"<p>jre8 以上的版本在 windows10 上安装总是提示 1603 错误，网上找了各种办法，包括卸载老版本，关闭杀毒软件，关闭浏览器，甚至是系统最小化启动，1603 依旧存在。</p>\n<span id=\"more\"></span>\n<p>官方也发现了该问题，但也是一头雾水，相信一年半载也决绝不掉，这对于需要用到 jre 的宝宝们简直是噩耗，不少老外也在为此头疼。捣鼓了好久，总算找到了一个相对简便的方法，那就是不安装，直接用。</p>\n <blockquote>首先是jre下载，在这里我们不下载“exe”安装包，而是直接下载压缩包，进入链接(http://download.oracle.com/otn-pub/java/jdk/10.0.2+13/19aef61b38124481863b1413dce1855f/jre-10.0.2_windows-x64_bin.tar.gz)下载（这里下载“jre-10.0.2_windows-x64_bin.tar.gz”），该压缩包含有jre运行所需的所有文件，解压可用；\n<p>接下来很简单，将 jre 加入到系统环境变量即可，如果是 exe 安装，jre8 以上版本不需要手动设置环境变量，压缩包只能自己添加。方法如下：</p>\n<p>右键 “计算机 / 此电脑”——“属性”——“高级系统设置”——“环境变量”，在系统变量中的 “path” 中加入 bin 的路径，我的是 “D:\\Program Files\\Java\\jre-10.0.2\\bin”，保存即可。</p>\n</blockquote>\n<p>命令提示符中输入 “java -version” 查看是否成功。</p>\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"JAVA","path":"api/tags/JAVA.json"}]},{"title":"Linux中使用tar将大文件压缩为多个小的压缩包","slug":"Linux中使用tar将大文件压缩为多个小的压缩包","date":"2021-11-26T14:35:35.000Z","updated":"2022-01-08T02:16:28.404Z","comments":true,"path":"api/articles/Linux中使用tar将大文件压缩为多个小的压缩包.json","excerpt":null,"keywords":null,"cover":null,"content":"<p>在 GitHub 上传文件时，单个文件不允许超过 100m，超过的话需要使用 Git Large File Storage，操作起来稍有些复杂，而且我记得也有限制。在这里我们可以将大文件压缩并切片，使之被分割为多个小文件，再上传 GitHub，下载之后再合并即可。</p>\n<ul>\n<li>\n<p>压缩</p>\n<p>假设有个大文件 <code>CAZy.faa</code> ，原始大小为 725m，压缩后为 135m，因此我们可以将其压缩为 2~3 个文件 即可避免 100m 的限制。建议上传至 GitHub 的单个文件大小不要超过 50m，因此我们以 50m 为阈值对文件进行切割（参数 - b）。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">tar</span> czf - CAZy.faa <span class=\"token operator\">|</span> <span class=\"token function\">split</span> -b 50m - CAZy.faa.tar.gz<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>运行命令后，得到了 3 个文件：CAZy.faa.tar.gzaa，CAZy.faa.tar.gzab，CAZy.faa.tar.gzac。</p>\n</li>\n<li>\n<p>解压</p>\n<p>通过如下命令解压后可以得到完整的 <code>CAZy.faa</code>  文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> CAZy.faa.tar.gz* <span class=\"token operator\">|</span> <span class=\"token function\">tar</span> -xzv<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ul>\n<h1 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"#参考\"></a> 参考</h1>\n<ul>\n<li><a href=\"https://my.oschina.net/yysue/blog/1815340\">Linux 下将一个文件压缩分包成多个小文件</a></li>\n</ul>\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"Github","path":"api/tags/Github.json"},{"name":"Linux","path":"api/tags/Linux.json"}]},{"title":"Linux骚操作","slug":"Linux骚操作","date":"2021-01-15T07:37:43.000Z","updated":"2022-01-08T02:16:28.405Z","comments":true,"path":"api/articles/Linux骚操作.json","excerpt":null,"keywords":null,"cover":"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/papers/LinuxKill1.png","content":"<p>记录一些平时遇到的 Linux 问题及解决方法！</p>\n<span id=\"more\"></span>\n<h1 id=\"骚操作1查杀僵尸进程\"><a class=\"markdownIt-Anchor\" href=\"#骚操作1查杀僵尸进程\"></a> 骚操作 1：查杀僵尸进程</h1>\n<h2 id=\"通过top命令发现了僵尸进程\"><a class=\"markdownIt-Anchor\" href=\"#通过top命令发现了僵尸进程\"></a> 通过 top 命令发现了僵尸进程</h2>\n<p><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/papers/LinuxKill1.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/papers/LinuxKill1.png\" srcset=\"https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg\" alt=\"发现僵尸进程\" /></p>\n<p>这里的 aragorn 和 prodigal 为僵尸进程。</p>\n<h2 id=\"寻找僵尸进程的父进程\"><a class=\"markdownIt-Anchor\" href=\"#寻找僵尸进程的父进程\"></a> 寻找僵尸进程的父进程</h2>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ps</span> -A -ostat,ppid,pid,cmd <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> -e <span class=\"token string\">'^[Zz]'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/papers/LinuxKill2.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/papers/LinuxKill2.png\" srcset=\"https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg\" alt=\"寻找父进程ppid\" /></p>\n<p>aragorn 和 prodigal 的父进程的 ppid 为 133619。</p>\n<h2 id=\"杀死父进程\"><a class=\"markdownIt-Anchor\" href=\"#杀死父进程\"></a> 杀死父进程</h2>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">kill</span> -9 <span class=\"token number\">133619</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/papers/LinuxKill3.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/papers/LinuxKill3.png\" srcset=\"https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg\" alt=\"僵尸进程已被杀死\" /></p>\n<p>之所以选择杀死父进程是因为僵尸进程本身很难被杀掉！</p>\n<h1 id=\"骚操作2使用sudo或nohup运行bash报错\"><a class=\"markdownIt-Anchor\" href=\"#骚操作2使用sudo或nohup运行bash报错\"></a> 骚操作 2：使用 sudo 或 nohup 运行 bash 报错</h1>\n<h2 id=\"错误\"><a class=\"markdownIt-Anchor\" href=\"#错误\"></a> 错误</h2>\n<p>在终端里使用 sudo 或 nohup 运行 bash 的时候经常报错：-bash: syntax error near unexpected token 'do'。</p>\n<h2 id=\"解决方案\"><a class=\"markdownIt-Anchor\" href=\"#解决方案\"></a> 解决方案</h2>\n<p>将要运行的命令加到如下语句中：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#用超级用户运行时</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">bash</span> -c <span class=\"token string\">'your commands'</span>\n\n<span class=\"token comment\">#服务器投后台运行</span>\n<span class=\"token function\">nohup</span> <span class=\"token function\">bash</span> -c <span class=\"token string\">'your commands'</span> <span class=\"token operator\">&amp;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"骚操作3centos升级gcc\"><a class=\"markdownIt-Anchor\" href=\"#骚操作3centos升级gcc\"></a> 骚操作 3：CentOS 升级 GCC</h1>\n<h2 id=\"安装scl第三方软件选集\"><a class=\"markdownIt-Anchor\" href=\"#安装scl第三方软件选集\"></a> 安装 SCL（第三方软件选集）</h2>\n<p>使用下面命令安装 SCL<br />\nSCL 可以在不覆盖原有软件包的情况下与其共存，缺点就是仅支持 64 位<br />\n SCL 仅支持安装 devtoolset-4（gcc 5.2）（不含）之后的 gcc 版本</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum <span class=\"token function\">install</span> -y centos-release-scl<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"安装gcc\"><a class=\"markdownIt-Anchor\" href=\"#安装gcc\"></a> 安装 gcc</h2>\n<p>使用以下命令安装 gcc，其中的 9 表示大版本号，默认安装大版本下的最新稳定版本</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum <span class=\"token function\">install</span> -y devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"将gcc加入环境变量\"><a class=\"markdownIt-Anchor\" href=\"#将gcc加入环境变量\"></a> 将 gcc 加入环境变量</h2>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"source /opt/rh/devtoolset-9/enable\"</span> <span class=\"token operator\">>></span> /etc/profile\n<span class=\"token builtin class-name\">source</span> /etc/profile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h1 id=\"骚操作4centos-7防火墙\"><a class=\"markdownIt-Anchor\" href=\"#骚操作4centos-7防火墙\"></a> 骚操作 4：CentOS 7 防火墙</h1>\n<h2 id=\"启动防火墙\"><a class=\"markdownIt-Anchor\" href=\"#启动防火墙\"></a> 启动防火墙</h2>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">启动： systemctl start firewalld<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"开启端口\"><a class=\"markdownIt-Anchor\" href=\"#开启端口\"></a> 开启端口</h2>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">firewall-cmd --zone&#x3D;public --add-port&#x3D;80&#x2F;tcp --permanent <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"重新载入\"><a class=\"markdownIt-Anchor\" href=\"#重新载入\"></a> 重新载入</h2>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">firewall-cmd --reload<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"查看防火墙状态\"><a class=\"markdownIt-Anchor\" href=\"#查看防火墙状态\"></a> 查看防火墙状态</h2>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">systemctl status firewalld.service\n\nfirewall-cmd --state<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"查看当前开了哪些端口\"><a class=\"markdownIt-Anchor\" href=\"#查看当前开了哪些端口\"></a> 查看当前开了哪些端口</h2>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">firewall-cmd --list-services<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"查看所有打开的端口\"><a class=\"markdownIt-Anchor\" href=\"#查看所有打开的端口\"></a> 查看所有打开的端口</h2>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">firewall-cmd --zone<span class=\"token operator\">=</span>public --list-ports<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h1 id=\"骚操作5linux基本指令丢失修复办法\"><a class=\"markdownIt-Anchor\" href=\"#骚操作5linux基本指令丢失修复办法\"></a> 骚操作 5：Linux 基本指令丢失修复办法</h1>\n<p>如输入 ls、cd、cat 等基本指令提示找不到命令，可以通过以下命令修复：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span>/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"Linux","path":"api/tags/Linux.json"}]},{"title":"Perl处理可恶的Windows换行符","slug":"Perl处理可恶的Windows换行符","date":"2021-09-27T12:13:15.000Z","updated":"2022-01-08T02:16:28.410Z","comments":true,"path":"api/articles/Perl处理可恶的Windows换行符.json","excerpt":null,"keywords":null,"cover":null,"content":"<p>每次在 Windows 下运行 Perl，或者通过 Perl 处理 Windows 系统生成的文件时，行尾总会有隐藏的换行符删不掉，chomp 毛用都没有。处理后的文件在文本阅读器如 TXT、EditPlus 等中是看不到换行符的，然而当将文本内容拷贝到 Excel 表格中时，明明应该在一行的内容却变成了两行，这便是隐藏的换行符在捣鬼。疑惑、愤怒、迷茫的情绪交织在一起，伴随着一声声的 “哪儿错了” 却不知所措，其实只要通过下面一句代码干掉那些隐藏的换行符就万事大吉了。</p>\n<pre class=\"line-numbers language-perl\" data-language=\"perl\"><code class=\"language-perl\"><span class=\"token variable\">$_</span><span class=\"token operator\">=~</span><span class=\"token regex\">s/[\\n\\r]+$//</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>上述命令表示通过查找替换的方式去除当前行末尾的所有换行符。</p>\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"perl","path":"api/tags/perl.json"},{"name":"编程","path":"api/tags/编程.json"}]},{"title":"Perl捕获外部命令执行异常并继续运行后续代码","slug":"Perl捕获外部命令执行异常并继续运行后续代码","date":"2019-04-19T02:34:49.000Z","updated":"2022-01-08T02:16:28.411Z","comments":true,"path":"api/articles/Perl捕获外部命令执行异常并继续运行后续代码.json","excerpt":null,"keywords":null,"cover":null,"content":"<p>在编写 perl 脚本时经常会调用外部命令，由于种种原因，会遇到外部命令执行异常，而导致整个脚本终止运行。这对于大的项目来说很不经济，因此，可以想办法越过这个异常并继续执行后续脚本。</p>\n<span id=\"more\"></span>\n<p>Examples：</p>\n</br>\n假设有一个外部命令“command”需要执行，将该命令存到一个数组当中：\n</br>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">my @arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"command\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</br>\n将外部命令的返回值赋给一个变量：\n</br>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">my <span class=\"token variable\">$return</span> <span class=\"token operator\">=</span> sysstem<span class=\"token punctuation\">(</span>@arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</br>\n判断返回值是否为“0”，0代表运行正常，任何非0的值均表示有运行异常。如果返回值不为0，则记录错误，然后继续运行后续代码：\n</br>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$return</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">&#123;</span>\n    print <span class=\"token string\">\"There are some errors when running the command!<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span><span class=\"token punctuation\">;</span>\n    command2<span class=\"token punctuation\">;</span><span class=\"token comment\">#继续运行其他命令</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</br>\n<p>** 注：** 本方案仅在 Linux 系统下测试，不晓得 Windows 和 Mac 的返回值与 Linux 是否一致，Linux 中的 “core dump” 就可以如此来捕获。</p>\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"Linux","path":"api/tags/Linux.json"},{"name":"perl","path":"api/tags/perl.json"},{"name":"编程","path":"api/tags/编程.json"}]},{"title":"Perl获取外部命令执行结果的输出","slug":"Perl获取外部命令执行结果的输出","date":"2019-04-19T07:54:38.000Z","updated":"2022-03-03T02:49:35.195Z","comments":true,"path":"api/articles/Perl获取外部命令执行结果的输出.json","excerpt":null,"keywords":null,"cover":null,"content":"<p>有时候 perl 脚本需要与 Linux 外部命令进行交互，本文讲解如何将外部命令的执行结果的输出（此处指的不是运行结果的返回值，而是标准输出上的内容之类）赋给 perl 变量。</p>\n<span id=\"more\"></span>\n<p>首先需要了解 perl 调用 shell 命令的三种方式：</p>\n</br>\n**1. system**\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">system<span class=\"token punctuation\">(</span><span class=\"token string\">\"command\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</br>\n通过system运行得到的结果是一个返回值，其实是一串数字，若外部命令运行成功，则返回值为“0”，若运行失败，则返回非0的值。\n</br>\n**2. 反引号** （ESC下面的那个键）\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token builtin class-name\">command</span><span class=\"token variable\">`</span></span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</br>\n通过反引号运行，会返回shell运行结果的输出，下面的脚本通过“which”查询“COG_2014.phr”的绝对路径，并将其赋值给`$path`。然后通过正则表达式获取“COG_2014.phr”所在的目录的路径，并将其赋值给变量`$cogdb_dir`。\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">my <span class=\"token variable\">$cogdb_dir</span><span class=\"token punctuation\">;</span>\nmy <span class=\"token variable\">$path</span> <span class=\"token operator\">=</span> <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">which</span> COG_2014.phr<span class=\"token variable\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$path</span><span class=\"token operator\">=~</span>/<span class=\"token punctuation\">(</span>.+<span class=\"token punctuation\">)</span>COG_2014.*/<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token variable\">$cogdb_dir</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nprint <span class=\"token variable\">$cogdb_dir</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</br>\n**3. exec**\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">exec<span class=\"token punctuation\">(</span><span class=\"token string\">\"command\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</br>\nexec与system相似，但是执行完exec命令之后，perl会终止运行，不再执行后续的代码。\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"Linux","path":"api/tags/Linux.json"},{"name":"perl","path":"api/tags/perl.json"},{"name":"编程","path":"api/tags/编程.json"}]},{"title":"Ubuntu open-mpi运行错误","slug":"Ubuntu-open-mpi运行错误","date":"2019-03-30T07:07:30.000Z","updated":"2022-01-08T02:16:28.416Z","comments":true,"path":"api/articles/Ubuntu-open-mpi运行错误.json","excerpt":null,"keywords":null,"cover":null,"content":"<span id=\"more\"></span>\n<p>我在 win10 Linux 子系统下使用 mpirun 多线程运行 ABySS 基因组拼接软件的时候，出现以下错误提示：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Linux kernel CMA support was requested via the btl_vader_single_copy_mechanism MCA variable, but CMA support is not available due to restrictive ptrace settings.\n\n<span class=\"token punctuation\">[</span>liaochenlanruo:49950<span class=\"token punctuation\">]</span> <span class=\"token number\">4</span> <span class=\"token function\">more</span> processes have sent <span class=\"token builtin class-name\">help</span> message help-mpi-btl-openib-cpc-base.txt / ibv_create_qp failed\n\n<span class=\"token punctuation\">[</span>liaochenlanruo:49950<span class=\"token punctuation\">]</span> Set MCA parameter <span class=\"token string\">\"orte_base_help_aggregate\"</span> to <span class=\"token number\">0</span> to see all <span class=\"token builtin class-name\">help</span> / error messages <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</br>\n<p>结果就是无法运行多线程，跑了一夜的程序没有任何动静，似乎是卡死了。</p>\n</br>\nGoogle到的解决方案，root用户下，终端运行如下命令：\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#echo 0 > /proc/sys/kernel/yama/ptrace_scope</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</br>\n**提示：\"ptrace_scope\"文件中原来的值为“1”，改成“0”就可以了。**\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"Linux","path":"api/tags/Linux.json"}]},{"title":"WSL安装Docker避坑指北","slug":"WSL安装Docker避坑指北","date":"2022-03-10T02:43:42.000Z","updated":"2022-03-10T03:14:47.936Z","comments":true,"path":"api/articles/WSL安装Docker避坑指北.json","excerpt":null,"keywords":null,"cover":"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg","content":"<h1 id=\"升级wsl\"><a class=\"markdownIt-Anchor\" href=\"#升级wsl\"></a> 升级 WSL</h1>\n<ul>\n<li>\n<p>查看已安装的 WSL 版本 (Windows PowerShell 中运行)</p>\n  <pre class=\"line-numbers language-none\"><code class=\"language-none\">wsl.exe -l -v\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>显示如下：</p>\n  <pre class=\"line-numbers language-tex\" data-language=\"tex\"><code class=\"language-tex\">  NAME                   STATE           VERSION\n* Ubuntu-20.04           Running         1\n  docker-desktop-data    Stopped         2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>看到安装的为 WSL1，据说 WSL1 不支持 Docker，所以换成 WSL2，至于 WSL1 和 WSL2 的异同可参考<a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/compare-versions\">比较 WSL 1 和 WSL 2</a>。</p>\n</li>\n<li>\n<p>安装 WSL2 (Windows PowerShell 中运行)</p>\n  <pre class=\"line-numbers language-none\"><code class=\"language-none\">wsl.exe --set-version ubuntu-20.04 2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>显示如下：</p>\n  <pre class=\"line-numbers language-tex\" data-language=\"tex\"><code class=\"language-tex\">正在进行转换，这可能需要几分钟时间...\n有关与 WSL 2 的主要区别的信息，请访问 https:&#x2F;&#x2F;aka.ms&#x2F;wsl2\n转换完成。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h1 id=\"安装docker\"><a class=\"markdownIt-Anchor\" href=\"#安装docker\"></a> 安装 Docker</h1>\n<p>在 WSL 中运行如下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> remove docker docker-engine docker.io\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> apt-transport-https ca-certificates <span class=\"token function\">curl</span> software-properties-common\n<span class=\"token function\">curl</span> -fsSL https://download.docker.com/linux/ubuntu/gpg <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> apt-key <span class=\"token function\">add</span> -\n<span class=\"token function\">sudo</span> apt-key fingerprint 0EBFCD88\n<span class=\"token function\">sudo</span> add-apt-repository <span class=\"token string\">\"deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class=\"token variable\"><span class=\"token variable\">$(</span>lsb_release -cs<span class=\"token variable\">)</span></span> stable\"</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> docker-ce<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"root用户启动docker\"><a class=\"markdownIt-Anchor\" href=\"#root用户启动docker\"></a> Root 用户启动 Docker</h1>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">su</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">DOCKER_HOST</span><span class=\"token operator\">=</span>tcp://localhost:2375\n<span class=\"token function\">service</span> docker start<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>显示如下：</p>\n<pre class=\"line-numbers language-tex\" data-language=\"tex\"><code class=\"language-tex\">* Starting Docker: docker<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h1 id=\"测试还是在root用户\"><a class=\"markdownIt-Anchor\" href=\"#测试还是在root用户\"></a> 测试 (还是在 root 用户)</h1>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker version<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h1 id=\"报错\"><a class=\"markdownIt-Anchor\" href=\"#报错\"></a> 报错</h1>\n<p>以下是报错信息：</p>\n<pre class=\"line-numbers language-tex\" data-language=\"tex\"><code class=\"language-tex\">Client: Docker Engine - Community\n Version:           20.10.12\n API version:       1.41\n Go version:        go1.16.12\n Git commit:        e91ed57\n Built:             Mon Dec 13 11:45:33 2021\n OS&#x2F;Arch:           linux&#x2F;amd64\n Context:           default\n Experimental:      true\nCannot connect to the Docker daemon at tcp:&#x2F;&#x2F;localhost:2375. Is the docker daemon running?<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"修复\"><a class=\"markdownIt-Anchor\" href=\"#修复\"></a> 修复</h1>\n<p><strong>回到普通用户运行</strong></p>\n<ul>\n<li>\n<p>编辑环境变量</p>\n  <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vi</span> ~/.bashrc\n\n<span class=\"token comment\"># 在最下面添加一行：</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">DOCKER_HOST</span><span class=\"token operator\">=</span><span class=\"token string\">'unix:///var/run/docker.sock'</span>\n<span class=\"token builtin class-name\">source</span> ~/.bashrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>再次测试</p>\n  <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> docker version<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>显示如下表明成功：</p>\n  <pre class=\"line-numbers language-tex\" data-language=\"tex\"><code class=\"language-tex\">Client: Docker Engine - Community\n Version:           20.10.12\n API version:       1.41\n Go version:        go1.16.12\n Git commit:        e91ed57\n Built:             Mon Dec 13 11:45:33 2021\n OS&#x2F;Arch:           linux&#x2F;amd64\n Context:           default\n Experimental:      true\n\nServer: Docker Engine - Community\n Engine:\n  Version:          20.10.12\n  API version:      1.41 (minimum version 1.12)\n  Go version:       go1.16.12\n  Git commit:       459d0df\n  Built:            Mon Dec 13 11:43:42 2021\n  OS&#x2F;Arch:          linux&#x2F;amd64\n  Experimental:     false\n containerd:\n  Version:          1.4.13\n  GitCommit:        9cc61520f4cd876b86e77edfeb88fbcd536d1f9d\n runc:\n  Version:          1.0.3\n  GitCommit:        v1.0.3-0-gf46b6ba\n docker-init:\n  Version:          0.19.0\n  GitCommit:        de40ad0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h1 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"#参考\"></a> 参考</h1>\n<ul>\n<li><a href=\"https://blog.csdn.net/qq_44701736/article/details/119411485\">WSL 安装 docker</a></li>\n<li><a href=\"https://www.jianshu.com/p/7c0084fd9003\">Cannot connect to the Docker daemon at tcp://localhost:2375. Is the docker daemon running?</a></li>\n</ul>\n<h1 id=\"代码获取\"><a class=\"markdownIt-Anchor\" href=\"#代码获取\"></a> 代码获取</h1>\n<p>关注公众号 “生信之巅”，聊天窗口回复 “” 获取下载链接。</p>\n<table align=\"center\"><tr>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/生信之巅公众号.jpg\" srcset=\"https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg\" alt=\"生信之巅微信公众号\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-right: 0px;margin-bottom: 5px;align: center;\"></td>\n  <td align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/social/小程序码.png\" srcset=\"https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg\" alt=\"生信之巅小程序码\" style=\"width: 100px;height: 100px;vertical-align: -20px;border-radius: 0%;margin-left: 0px;margin-bottom: 5px;align: center\"></td>\n</tr></table>\n<p><font color=\"#FF0000\"><ruby><b>敬告</b>：使用文中脚本请引用本文网址，请尊重本人的劳动成果，谢谢！<rt><b>Notice</b>: When you use the scripts in this article, please cite the link of this webpage. Thank you!</rt></ruby></font></p>\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"Linux","path":"api/tags/Linux.json"},{"name":"系统","path":"api/tags/系统.json"},{"name":"虚拟机","path":"api/tags/虚拟机.json"}]},{"title":"Wget 技巧","slug":"Wget-技巧","date":"2019-04-14T12:17:46.000Z","updated":"2022-01-08T02:16:28.420Z","comments":true,"path":"api/articles/Wget-技巧.json","excerpt":null,"keywords":null,"cover":null,"content":"<p>本文例举一些 Linux 系统下的下载工具 “wget” 的高级用法。</p>\n<span id=\"more\"></span>\n<h3 id=\"1下载目录下所有文件\"><a class=\"markdownIt-Anchor\" href=\"#1下载目录下所有文件\"></a> 1. 下载目录下所有文件：</h3>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> -c -r -nH -np -nd -R index.html -P ./data ftp://ftp.ncbi.nih.gov/pub/COG/COG2014/data/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p></br>-c：断点续传</p>\n<p>-r：遍历子目录</p>\n<p>-nH：不将文件保存在 FTP 主机名目录下</p>\n<p>-np：递归下载时不搜索上层目录</p>\n<p>-nd：递归下载时不创建一层一层的目录，把所有的文件下载到当前目录</p>\n<p>-R index.html：不生成 index.html 文件</p>\n<p>-P ./data：将数据下载到当前目录下的 data 目录下</p>\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"Linux","path":"api/tags/Linux.json"},{"name":"下载","path":"api/tags/下载.json"}]},{"title":"Github操作","slug":"github操作","date":"2019-04-01T00:46:44.000Z","updated":"2022-03-03T02:49:35.183Z","comments":true,"path":"api/articles/github操作.json","excerpt":null,"keywords":null,"cover":null,"content":"<p>本文讲述了 Github 一些操作技巧……</p>\n<span id=\"more\"></span>\n<h1 id=\"tag相关操作\"><a class=\"markdownIt-Anchor\" href=\"#tag相关操作\"></a> TAG 相关操作</h1>\n<p></br>通过 Tag 可以将项目生成不同的版本，并进行存档，供用户下载。这在软件中是很常见的。</p>\n<ul>\n<li>\n<p><strong>创建 tag</strong></p>\n  <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> tag v1.0.0 -m <span class=\"token string\">'first version'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p><strong>上传到 github</strong></p>\n  <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push origin v1.0.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p><strong>存档某个 tag</strong></p>\n  <pre class=\"line-numbers language-bassh\" data-language=\"bassh\"><code class=\"language-bassh\">git archive -v --format&#x3D;tar v1.0.0 &gt; v1.0.0.tar.gz<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p><strong>删除 tag</strong></p>\n  <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> tag -d v1.0.0\n<span class=\"token function\">git</span> push origin :refs/tags/v1.0.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h1 id=\"branch\"><a class=\"markdownIt-Anchor\" href=\"#branch\"></a> Branch</h1>\n<h2 id=\"创建分支\"><a class=\"markdownIt-Anchor\" href=\"#创建分支\"></a> 创建分支</h2>\n<ul>\n<li>\n<p>创建并切换到名为 <code>pgcgap</code>  的分支</p>\n  <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout -b pgcgap<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>将 <code>pgcgap</code>  分支推送到远程端</p>\n  <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push -u origin pgcgap<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ul>\n<h2 id=\"删除分支\"><a class=\"markdownIt-Anchor\" href=\"#删除分支\"></a> 删除分支</h2>\n<p>假设要删除当前所处的 <code>pgcgap</code>  分支。</p>\n<ul>\n<li>\n<p>切换到别的分支，如 master</p>\n  <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>删除本地分支</p>\n  <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> branch -d pgcgap\n\n<span class=\"token comment\"># 有时候需要强制删除</span>\n<span class=\"token function\">git</span> branch -D pgcgap<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>删除远程分支</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push origin --delete pgcgap<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ul>\n<h1 id=\"git-加速\"><a class=\"markdownIt-Anchor\" href=\"#git-加速\"></a> Git 加速</h1>\n<p>进行 git 操作时以 <code>github.com.cnpmjs.org</code>  替换 <code>github.com</code>  可以提速 10 倍左右。</p>\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"Github","path":"api/tags/Github.json"}]},{"title":"perl循环调用python爬虫批量下载喜马拉雅音频","slug":"perl循环调用python爬虫批量下载喜马拉雅音频","date":"2018-09-16T11:30:38.000Z","updated":"2022-01-08T02:16:28.422Z","comments":true,"path":"api/articles/perl循环调用python爬虫批量下载喜马拉雅音频.json","excerpt":null,"keywords":null,"cover":null,"content":"<p>手机下载喜马拉雅音频后，获得的音频文件虽然可以转成 mp3 格式，但其文件名却是一长串字符串，无法辨别是哪一集，网上找了各种工具，都有局限性，庆幸的是发现了一个 python 爬虫可以在电脑上实行批零下载文件名正确的音频，项目地址如下：</p>\n<span id=\"more\"></span>\n<pre><code>    xmlyfetcher用于下载喜马拉雅歌曲资源，可以下载单个音频资源，也可以下载整个专辑. 项目地址：https://github.com/smallmuou/xmlyfetcher\n</code></pre>\n<p>运行之后发现一个小问题，该脚本只能爬取一页的内容，于是写了一个 perl 脚本循环调用该爬虫，实现一个脚本下载一部作品。<br />\n<strong>脚本如下，运行前做适当修改 (专辑地址、保存路径、页数)：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/usr/bin/perl</span>\n\nuse strict<span class=\"token punctuation\">;</span>\n\nuse warnings<span class=\"token punctuation\">;</span>\n\nmy <span class=\"token variable\">$url</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"https://www.ximalaya.com/youshengshu/16951017/\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">#专辑地址</span>\n\nmy <span class=\"token variable\">$dir</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/mnt/e/BaiduYunDownload/Ximalaya/daomubiji2\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">#文件保存路径，提前创建</span>\n\nmy <span class=\"token variable\">$num</span> <span class=\"token operator\">=</span> <span class=\"token number\">29</span><span class=\"token punctuation\">;</span><span class=\"token comment\">#专辑总页数</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>my <span class=\"token variable\">$i</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$i</span><span class=\"token operator\">&lt;=</span><span class=\"token variable\">$num</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$i</span>++<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\nmy <span class=\"token variable\">$url2</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$url</span> <span class=\"token builtin class-name\">.</span> <span class=\"token string\">\"p<span class=\"token variable\">$i</span>/\"</span><span class=\"token punctuation\">;</span>\n\nsystem <span class=\"token punctuation\">(</span><span class=\"token string\">\"xmlyfetcher -o <span class=\"token variable\">$dir</span> <span class=\"token variable\">$url2</span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"音乐","path":"api/tags/音乐.json"},{"name":"爬虫","path":"api/tags/爬虫.json"}]},{"title":"syncthing搭建自己的同步云网盘","slug":"syncthing搭建自己的同步云网盘","date":"2018-09-19T06:20:50.000Z","updated":"2022-01-08T02:16:28.423Z","comments":true,"path":"api/articles/syncthing搭建自己的同步云网盘.json","excerpt":null,"keywords":null,"cover":null,"content":"<p>还在为百度网盘传输速度慢而头疼吗，有服务器的同学不妨试试自己搭建同步云盘，保护自己的数据。</p>\n<span id=\"more\"></span>\n<p><strong>参考前辈写的</strong><br />\n<a href=\"https://www.cnblogs.com/xingyunfashi/p/8708807.html\"> https://www.cnblogs.com/xingyunfashi/p/8708807.html</a></p>\n<p><a href=\"https://www.jianshu.com/p/4235cc85c32d\">https://www.jianshu.com/p/4235cc85c32d</a></p>\n<p><strong>错误修复：</strong></p>\n<p>2.2.32. How do I increase the inotify limit to get my filesystem watcher to work?</p>\n<p>You are probably reading this because you encountered the following error with the filesystem watcher on linux:</p>\n<p>Failed to start filesystem watcher for folder yourLabel (yourID): failed to setup inotify handler. Please increase inotify limits, seehttps://docs.syncthing.net/users/faq.html#inotify-limits</p>\n<p>Linux typically restricts the amount of watches per user (usually 8192). When you have more directories you need to adjust that number.</p>\n<p>On many Linux distributions you can run the following to fix it:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> fs.inotify.max_user_watches<span class=\"token operator\">=</span><span class=\"token number\">524288</span> <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> <span class=\"token function\">tee</span> -a /etc/sysctl.conf <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">sudo</span> sysctl -p<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>On Arch Linux and potentially others it is preferred to write this line into a separate file, i.e. you should run:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"fs.inotify.max_user_watches=204800\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> <span class=\"token function\">tee</span> -a /etc/sysctl.d/90-override.conf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>This only takes effect after a reboot. To adjust the limit immediately, run:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> sh-c <span class=\"token string\">'echo 204800 > /proc/sys/fs/inotify/max_user_watches'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"网盘","path":"api/tags/网盘.json"}]},{"title":"windows 10 中文乱码解决方案","slug":"windows-10-中文乱码解决方案","date":"2019-03-01T13:53:01.000Z","updated":"2022-01-08T02:16:28.424Z","comments":true,"path":"api/articles/windows-10-中文乱码解决方案.json","excerpt":null,"keywords":null,"cover":"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/control_panel_1.png","content":"<p>安装的英文原版系统，导致多数中文乱码，即便是安装了中文语言包，如果设置错误，仍旧无法正确显示中文。</p>\n<span id=\"more\"></span>\n<p>进入正题，按如图所示一步步完成设置，重启系统便可解决问题。我的系统是 18845.1001 版本，其他版本应该不会差别太大。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/control_panel_1.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/control_panel_1.png\" srcset=\"https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg\" alt=\"通过开始菜单进入控制面板\" /></p>\n<center>通过开始菜单进入控制面板</center>\n<p><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/control_panel_2.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/control_panel_2.png\" srcset=\"https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg\" alt=\"日期、时间和区域格式设置\" /></p>\n<center>日期、时间和区域格式设置</center>\n<p><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/control_panel_3.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/control_panel_3.png\" srcset=\"https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg\" alt=\"下拉相关设置\" /></p>\n<center>下拉相关设置</center>\n<p><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/control_panel_4.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/control_panel_4.png\" srcset=\"https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg\" alt=\"选择区域\" /></p>\n<center>选择区域</center>\n<p><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/control_panel_5.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/control_panel_5.png\" srcset=\"https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg\" alt=\"管理-更改系统区域设置\" /></p>\n<center>管理-更改系统区域设置</center>\n<p><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/control_panel_6.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/control_panel_6.png\" srcset=\"https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg\" alt=\"设置为中文，不要选择Beta版\" /></p>\n<center>设置为中文，不要选择Beta版</center>\n<p><img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/control_panel_7.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/news/control_panel_7.png\" srcset=\"https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg\" alt=\"复制设置\" /></p>\n<center>复制设置</center>\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"系统","path":"api/tags/系统.json"}]},{"title":"命令模式下配置Linux网络","slug":"命令模式下配置Linux网络","date":"2021-10-30T00:41:29.000Z","updated":"2022-01-08T02:16:28.437Z","comments":true,"path":"api/articles/命令模式下配置Linux网络.json","excerpt":null,"keywords":null,"cover":null,"content":"<p>配置网卡接口 eth0:</p>\n<p>进入配置文件所在目录，并在超级用户权限下编辑网络配置对应的文件（不同的机器文件名可能不一样）。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> /etc/sysconfig/network-scripts\n\n<span class=\"token function\">vim</span> ifcfg-enp4s0f0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>内容如下：</p>\n<pre class=\"line-numbers language-tex\" data-language=\"tex\"><code class=\"language-tex\">TYPE&#x3D;Ethernet\nPROXY_METHOD&#x3D;none\nBROWSER_ONLY&#x3D;no\nBOOTPROTO&#x3D;none\nDEFROUTE&#x3D;yes\nIPV4_FAILURE_FATAL&#x3D;no\nIPV6INIT&#x3D;yes\nIPV6_AUTOCONF&#x3D;yes\nIPV6_DEFROUTE&#x3D;yes\nIPV6_FAILURE_FATAL&#x3D;no\nIPV6_ADDR_GEN_MODE&#x3D;stable-privacy\nNAME&#x3D;enp4s0f0\nUUID&#x3D;10a90825-f850-4717-a2c3-0d7e936bd33X\nDEVICE&#x3D;enp4s0f0\nONBOOT&#x3D;yes\nIPADDR&#x3D;172.16.98.15X\nNETMASK&#x3D;255.255.255.0\nGATEWAY&#x3D;172.16.98.X\nDNS1&#x3D;10.8.8.X\nDNS2&#x3D;10.8.4.X\nMACADDR&#x3D;&quot;08:3A:88:54:C7:7X&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>MACADDR</strong> 为 MAC 地址，<strong>IPADDR</strong> 为 IP 地址，<strong>NETMASK</strong> 为子网掩码，<strong>GATEWAY</strong> 为网关地址，“X” 为虚构的，保护隐私。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">service</span> network restart<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"Linux","path":"api/tags/Linux.json"}]},{"title":"获取下一版本的内部预览版windows系统","slug":"获取下一个版本的内部预览版windows系统","date":"2019-02-17T11:19:04.000Z","updated":"2022-01-08T02:16:28.466Z","comments":true,"path":"api/articles/获取下一个版本的内部预览版windows系统.json","excerpt":null,"keywords":null,"cover":"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/papers/skip_user.png","content":"<p>Windows 内部预览版系统快速通道已经关闭，但是可以通过修改注册表以获取下一个版本的 Windows。</p>\n<span id=\"more\"></span>\n<ol>\n<li>\n<p>首先，您必须已经是 Windows Insider 才能利用这一技巧。 如果您是 Windows Insider，点击 “设置”→“更新和安全”→“Windows 预览体验计划”，将 “你希望接收哪类内容” 一项设置为 “跳到下一个 Windows 版本”。注意：调整完该选项时请保持窗口不动，即不要关闭也不要切换其他面板；</p>\n</li>\n<li>\n<p>启动注册表编辑器（点击开始菜单左下角搜索框，输入 “regedit” 进入注册表编辑器）， 找到：</p>\n</li>\n</ol>\n<p>HKEY_LOCAL_MACHINE\\SOFTWARE \\Microsoft\\WindowsSelfHost\\UI\\Selection</p>\n<p>双击 “UIContentType” 并将其更改为 “Skip”。 然后，您应该找到 “UIRing” 并将其更改为 “WIF”。</p>\n<ol start=\"3\">\n<li>然后找到：</li>\n</ol>\n<p>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\WindowsSelfHost\\Applicability</p>\n<p>将 “Ring” 的值改为 “WIF”，“Content Type” 和 ContentBackup 的值更改为 “Skip”。</p>\n<ol start=\"4\">\n<li>退回 “Windows 预览体验计划” 面板，随便点击一个标签再切换回来，如果打开后依旧固定在 “跳到下一个 Windows 版本” 选项，即代表上车成功！<br />\n<img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/papers/skip_user.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/papers/skip_user.png\" srcset=\"https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg\" alt=\"Skip用户\" /></li>\n</ol>\n<center>Skip用户</center>\n<ol start=\"5\">\n<li>点击 “Windows 更新”→“检查更新”，获取新版本系统<br />\n<img src=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/papers/skip_user2.png\" class=\"lazyload placeholder\" data-srcset=\"https://cdn.jsdelivr.net/gh/liaochenlanruo/cdn@master/img/custom/papers/skip_user2.png\" srcset=\"https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg\" alt=\"Skip用户的更新界面\" /></li>\n</ol>\n<center>Skip用户的更新界面</center>","raw":null,"categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"系统","path":"api/tags/系统.json"}]}]}